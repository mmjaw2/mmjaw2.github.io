"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2017-2019, University of Colorado Boulder
// @author Matt Pennington (PhET Interactive Simulations)

var buildLocal = require('./buildLocal');
var devScp = require('./devScp');
var writeFile = require('./writeFile');
var axios = require('axios');
var fs = require('graceful-fs'); // eslint-disable-line require-statement-match
var winston = require('../../../../../../perennial-alias/node_modules/winston');

// A list of directories directly nested under the phet-io build output folder that should be password protected. Slashes
// added later.
var PASSWORD_PROTECTED_SUB_DIRS = ['wrappers', 'doc'];

/**
 * Writes the htaccess file to password protect the exclusive content for phet-io sims
 * @param {string} passwordProtectPath - deployment location, with no trailing slash
 * @param {
 *  {
 *    [simName]:string,
 *    [version]:string,
 *    [directory]:string,
 *    checkoutDir: string,
 *    isProductionDeploy: boolean
 *  } | null } [latestOption]
 *      if isProductionDeploy is true, then we are publishing to production. We then write the /latest/ redirect .htaccess file.
 *      This is only to be used for production deploys by the build-server. directory is the write destination.
 *      checkoutDir is where the release branch repos live locally.
 *      simName, version, and directory are required if isProductionDeploy is true
 * @param {string} [devVersionPath] - if provided, scp the htaccess files to here, relatively
 */
module.exports = /*#__PURE__*/function () {
  var _writePhetioHtaccess = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(passwordProtectPath, latestOption, devVersionPath) {
    var authFilepath, isProductionDeploy, redirectFilepath, latestRedirectContents, versions, _iterator, _step, v, simPackage, htaccessFilename, getSubdirHtaccessPath, getSubdirHtaccessFullPath, rootHtaccessFullPath, commentSymbol, basePasswordProtectContents, passwordProtectWrapperContents, _i, _PASSWORD_PROTECTED_S, subdir, htaccessPathToDir, phetioParentDir, phetioPackage, cachingDirective, rootHtaccessContent;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          authFilepath = '/etc/httpd/conf/phet-io_pw';
          isProductionDeploy = latestOption === null || latestOption === void 0 ? void 0 : latestOption.isProductionDeploy; // This option is for production deploys by the build-server
          // If we are provided a simName and version then write a .htaccess file to redirect
          // https://phet-io.colorado.edu/sims/{{sim-name}}/{{major}}.{{minor}} to https://phet-io.colorado.edu/sims/{{sim-name}}/{{major}}.{{minor}}.{{latest}}{{[-suffix]}}
          if (!isProductionDeploy) {
            _context.next = 21;
            break;
          }
          if (!(latestOption.simName && latestOption.version && latestOption.directory && latestOption.checkoutDir)) {
            _context.next = 16;
            break;
          }
          redirectFilepath = "".concat(latestOption.directory + latestOption.simName, "/.htaccess");
          latestRedirectContents = 'RewriteEngine on\n' + "RewriteBase /sims/".concat(latestOption.simName, "/\n");
          _context.next = 8;
          return axios("".concat(buildLocal.productionServerURL, "/services/metadata/phetio?name=").concat(latestOption.simName, "&latest=true"));
        case 8:
          versions = _context.sent.data;
          _iterator = _createForOfIteratorHelper(versions);
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              v = _step.value;
              // Add a trailing slash to /sims/sim-name/x.y
              latestRedirectContents += "RewriteRule ^".concat(v.versionMajor, ".").concat(v.versionMinor, "$ ").concat(v.versionMajor, ".").concat(v.versionMinor, "/ [R=301,L]\n");
              // Rewrite /sims/sim-name/x.y/* to /sims/sim-name/x.y.z/*
              latestRedirectContents += "RewriteRule ^".concat(v.versionMajor, ".").concat(v.versionMinor, "/(.*) ").concat(v.versionMajor, ".").concat(v.versionMinor, ".").concat(v.versionMaintenance).concat(v.versionSuffix ? '-' : '').concat(v.versionSuffix, "/$1\n");
            }
            // 'RewriteRule latest(.*) ' + latestOption.version + '$1\n';
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          latestRedirectContents += 'RewriteCond %{QUERY_STRING} =download\n' + 'RewriteRule ([^/]*)$ - [L,E=download:$1]\n' + 'Header onsuccess set Content-disposition "attachment; filename=%{download}e" env=download\n';
          _context.next = 14;
          return writeFile(redirectFilepath, latestRedirectContents);
        case 14:
          _context.next = 21;
          break;
        case 16:
          winston.error("simName: ".concat(latestOption.simName));
          winston.error("version: ".concat(latestOption.version));
          winston.error("directory: ".concat(latestOption.directory));
          winston.error("checkoutDir: ".concat(latestOption.checkoutDir));
          throw new Error('latestOption is missing one of the required parameters (simName, version, directory, or checkoutDir)');
        case 21:
          simPackage = isProductionDeploy ? JSON.parse(fs.readFileSync("".concat(latestOption.checkoutDir, "/").concat(latestOption.simName, "/package.json"))) : null;
          htaccessFilename = '.htaccess';
          getSubdirHtaccessPath = function getSubdirHtaccessPath(subdir) {
            return "".concat(subdir, "/").concat(htaccessFilename);
          };
          getSubdirHtaccessFullPath = function getSubdirHtaccessFullPath(subdir) {
            return "".concat(passwordProtectPath, "/").concat(getSubdirHtaccessPath(subdir));
          };
          rootHtaccessFullPath = "".concat(passwordProtectPath, "/").concat(htaccessFilename); // Only allow public accessibility with htaccess mutation if in production deploy when the "allowPublicAccess" flag
          // is present. Commented out lines keep password protection, but comment them in with `allowPublicAccess`.
          commentSymbol = '#';
          if (simPackage && simPackage.phet && simPackage.phet['phet-io'] && simPackage.phet['phet-io'].allowPublicAccess) {
            commentSymbol = '';
          }
          _context.prev = 28;
          basePasswordProtectContents = "\nAuthType Basic\nAuthName \"PhET-iO Password Protected Area\"\nAuthUserFile ".concat(authFilepath, "\n<LimitExcept OPTIONS>\n  Require valid-user\n</LimitExcept>\n");
          passwordProtectWrapperContents = "".concat(basePasswordProtectContents, "\n\n# Editing these directly is not supported and will be overwritten by maintenance releases. Please change by modifying \n# the sim's package.json allowPublicAccess flag followed by a re-deploy.\n").concat(commentSymbol, " Satisfy Any\n").concat(commentSymbol, " Allow from all\n"); // Write a file to add authentication to subdirectories like wrappers/ or doc/
          _i = 0, _PASSWORD_PROTECTED_S = PASSWORD_PROTECTED_SUB_DIRS;
        case 32:
          if (!(_i < _PASSWORD_PROTECTED_S.length)) {
            _context.next = 44;
            break;
          }
          subdir = _PASSWORD_PROTECTED_S[_i];
          htaccessPathToDir = getSubdirHtaccessFullPath(subdir); // if the directory exists
          if (!fs.existsSync(htaccessPathToDir.replace(htaccessFilename, ''))) {
            _context.next = 41;
            break;
          }
          _context.next = 38;
          return writeFile(htaccessPathToDir, passwordProtectWrapperContents);
        case 38:
          if (!devVersionPath) {
            _context.next = 41;
            break;
          }
          _context.next = 41;
          return devScp(htaccessPathToDir, "".concat(devVersionPath, "/phet-io/").concat(getSubdirHtaccessPath(subdir)));
        case 41:
          _i++;
          _context.next = 32;
          break;
        case 44:
          phetioParentDir = (latestOption === null || latestOption === void 0 ? void 0 : latestOption.checkoutDir) || '..';
          phetioPackage = JSON.parse(fs.readFileSync("".concat(phetioParentDir, "/phet-io/package.json"))); // We only want to cache for a production deploy, and not on the dev server
          cachingDirective = isProductionDeploy ? "\n# If the request is for a SIM, anything in the /lib or /xhtml dirs, or is the api.json file, then allow it to be cached\n<If \"-f %{REQUEST_FILENAME} && %{REQUEST_FILENAME} =~ m#(".concat(latestOption.simName, "_all.*\\.html|api\\.json|/lib/.*|/xhtml/.*)$#\">\n  ExpiresActive on\n  ExpiresDefault \"access plus 1 day\"\n  Header append Cache-Control \"public\"\n  Header append Cache-Control \"stale-while-revalidate=5184000\"\n  Header append Cache-Control \"stale-if-error=5184000\"\n</If>\n") : ''; // Write a file to add authentication to the top level index pages
          if (!(phetioPackage.phet && phetioPackage.phet.addRootHTAccessFile)) {
            _context.next = 54;
            break;
          }
          rootHtaccessContent = "<FilesMatch \"(index\\.\\w+)$\">\n".concat(basePasswordProtectContents, "</FilesMatch>\n      \n").concat(cachingDirective, "\n                        \n# Editing these directly is not supported and will be overwritten by maintenance releases. Please change by modifying \n# the sim's package.json allowPublicAccess flag followed by a re-deploy.\n").concat(commentSymbol, " Satisfy Any\n").concat(commentSymbol, " Allow from all\n");
          _context.next = 51;
          return writeFile(rootHtaccessFullPath, rootHtaccessContent);
        case 51:
          if (!devVersionPath) {
            _context.next = 54;
            break;
          }
          _context.next = 54;
          return devScp(rootHtaccessFullPath, "".concat(devVersionPath, "/phet-io/").concat(htaccessFilename));
        case 54:
          winston.debug('phetio authentication htaccess written');
          _context.next = 61;
          break;
        case 57:
          _context.prev = 57;
          _context.t0 = _context["catch"](28);
          winston.debug('phetio authentication htaccess not written');
          throw _context.t0;
        case 61:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[28, 57]]);
  }));
  function writePhetioHtaccess(_x, _x2, _x3) {
    return _writePhetioHtaccess.apply(this, arguments);
  }
  return writePhetioHtaccess;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,