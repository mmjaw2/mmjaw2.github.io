"use strict";

function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2023, University of Colorado Boulder

/**
 * Returns an inverse string map (stringMap[ stringKey ][ locale ]) for all strings in a given repo.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var loadJSON = require('../common/loadJSON');
var fs = require('fs');

/**
 * Returns an inverse string map (stringMap[ stringKey ][ locale ]) for all strings in a given repo.
 * @public
 *
 * @param {string} repo - The repository name
 * @param {string} checkoutDir
 * @returns {Promise.<stringMap[ stringKey ][ locale ]>}
 */
module.exports = /*#__PURE__*/function () {
  var _getRepoStringMap = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(repo, checkoutDir) {
    var partialKeyMap, packageJSON, requirejsNamespace, englishStrings, _iterator, _step, _loop, result;
    return _regeneratorRuntime().wrap(function _callee$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          // partialKeyMap[ partialStringKey ][ locale ] = stringValue
          partialKeyMap = {}; // If we're not a repo with strings
          if (fs.existsSync("".concat(checkoutDir, "/").concat(repo, "/").concat(repo, "-strings_en.json"))) {
            _context2.next = 3;
            break;
          }
          return _context2.abrupt("return", {});
        case 3:
          _context2.next = 5;
          return loadJSON("".concat(checkoutDir, "/").concat(repo, "/package.json"));
        case 5:
          packageJSON = _context2.sent;
          requirejsNamespace = packageJSON.phet.requirejsNamespace;
          _context2.next = 9;
          return loadJSON("".concat(checkoutDir, "/").concat(repo, "/").concat(repo, "-strings_en.json"));
        case 9:
          englishStrings = _context2.sent;
          // Support recursive structure of English string files. Tests for `value: <<string type>>` to determine if it's a string.
          // Fills partialKeyMap
          (function recur(stringStructure, stringKeyParts) {
            if (typeof stringStructure.value === 'string') {
              partialKeyMap[stringKeyParts.join('.')] = {
                en: stringStructure.value
              };
            }
            Object.keys(stringStructure).forEach(function (partialKey) {
              if (_typeof(stringStructure[partialKey]) === 'object') {
                recur(stringStructure[partialKey], [].concat(_toConsumableArray(stringKeyParts), [partialKey]));
              }
            });
          })(englishStrings, []);

          // Fill partialKeyMap with other locales (if the directory in babel exists)
          if (!fs.existsSync("".concat(checkoutDir, "/babel/").concat(repo))) {
            _context2.next = 28;
            break;
          }
          _iterator = _createForOfIteratorHelper(fs.readdirSync("".concat(checkoutDir, "/babel/").concat(repo)));
          _context2.prev = 13;
          _loop = /*#__PURE__*/_regeneratorRuntime().mark(function _loop() {
            var stringFilename, localeStrings, firstUnderscoreIndex, periodIndex, locale;
            return _regeneratorRuntime().wrap(function _loop$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  stringFilename = _step.value;
                  _context.next = 3;
                  return loadJSON("".concat(checkoutDir, "/babel/").concat(repo, "/").concat(stringFilename));
                case 3:
                  localeStrings = _context.sent;
                  // Extract locale from filename
                  firstUnderscoreIndex = stringFilename.indexOf('_');
                  periodIndex = stringFilename.indexOf('.');
                  locale = stringFilename.substring(firstUnderscoreIndex + 1, periodIndex);
                  Object.keys(localeStrings).forEach(function (partialStringKey) {
                    if (partialKeyMap[partialStringKey]) {
                      partialKeyMap[partialStringKey][locale] = localeStrings[partialStringKey].value;
                    }
                  });
                case 8:
                case "end":
                  return _context.stop();
              }
            }, _loop);
          });
          _iterator.s();
        case 16:
          if ((_step = _iterator.n()).done) {
            _context2.next = 20;
            break;
          }
          return _context2.delegateYield(_loop(), "t0", 18);
        case 18:
          _context2.next = 16;
          break;
        case 20:
          _context2.next = 25;
          break;
        case 22:
          _context2.prev = 22;
          _context2.t1 = _context2["catch"](13);
          _iterator.e(_context2.t1);
        case 25:
          _context2.prev = 25;
          _iterator.f();
          return _context2.finish(25);
        case 28:
          // result[ stringKey ][ locale ] = stringValue
          result = {}; // Prepend the requirejsNamespace to the string keys
          Object.keys(partialKeyMap).forEach(function (partialKey) {
            result["".concat(requirejsNamespace, "/").concat(partialKey)] = partialKeyMap[partialKey];
          });
          return _context2.abrupt("return", result);
        case 31:
        case "end":
          return _context2.stop();
      }
    }, _callee, null, [[13, 22, 25, 28]]);
  }));
  function getRepoStringMap(_x, _x2) {
    return _getRepoStringMap.apply(this, arguments);
  }
  return getRepoStringMap;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZSIsInQiLCJyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibiIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiX2NyZWF0ZUZvck9mSXRlcmF0b3JIZWxwZXIiLCJhbGxvd0FycmF5TGlrZSIsIml0IiwiQXJyYXkiLCJpc0FycmF5IiwiX3Vuc3VwcG9ydGVkSXRlcmFibGVUb0FycmF5IiwiRiIsIl9lIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsImVyciIsInN0ZXAiLCJfZTIiLCJfdG9Db25zdW1hYmxlQXJyYXkiLCJhcnIiLCJfYXJyYXlXaXRob3V0SG9sZXMiLCJfaXRlcmFibGVUb0FycmF5IiwiX25vbkl0ZXJhYmxlU3ByZWFkIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJ0b1N0cmluZyIsImZyb20iLCJ0ZXN0IiwiaXRlciIsImxlbiIsImFycjIiLCJhc3luY0dlbmVyYXRvclN0ZXAiLCJnZW4iLCJyZWplY3QiLCJfbmV4dCIsIl90aHJvdyIsImtleSIsImluZm8iLCJlcnJvciIsIl9hc3luY1RvR2VuZXJhdG9yIiwiZm4iLCJzZWxmIiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5IiwidW5kZWZpbmVkIiwibG9hZEpTT04iLCJyZXF1aXJlIiwiZnMiLCJtb2R1bGUiLCJleHBvcnRzIiwiX2dldFJlcG9TdHJpbmdNYXAiLCJfY2FsbGVlIiwicmVwbyIsImNoZWNrb3V0RGlyIiwicGFydGlhbEtleU1hcCIsInBhY2thZ2VKU09OIiwicmVxdWlyZWpzTmFtZXNwYWNlIiwiZW5nbGlzaFN0cmluZ3MiLCJfaXRlcmF0b3IiLCJfc3RlcCIsIl9sb29wIiwicmVzdWx0IiwiX2NhbGxlZSQiLCJfY29udGV4dDIiLCJleGlzdHNTeW5jIiwiY29uY2F0IiwicGhldCIsInJlY3VyIiwic3RyaW5nU3RydWN0dXJlIiwic3RyaW5nS2V5UGFydHMiLCJqb2luIiwiZW4iLCJwYXJ0aWFsS2V5IiwicmVhZGRpclN5bmMiLCJzdHJpbmdGaWxlbmFtZSIsImxvY2FsZVN0cmluZ3MiLCJmaXJzdFVuZGVyc2NvcmVJbmRleCIsInBlcmlvZEluZGV4IiwibG9jYWxlIiwiX2xvb3AkIiwiX2NvbnRleHQiLCJpbmRleE9mIiwic3Vic3RyaW5nIiwicGFydGlhbFN0cmluZ0tleSIsInQxIiwiZ2V0UmVwb1N0cmluZ01hcCIsIl94IiwiX3gyIl0sInNvdXJjZXMiOlsiZ2V0UmVwb1N0cmluZ01hcC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhbiBpbnZlcnNlIHN0cmluZyBtYXAgKHN0cmluZ01hcFsgc3RyaW5nS2V5IF1bIGxvY2FsZSBdKSBmb3IgYWxsIHN0cmluZ3MgaW4gYSBnaXZlbiByZXBvLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuY29uc3QgbG9hZEpTT04gPSByZXF1aXJlKCAnLi4vY29tbW9uL2xvYWRKU09OJyApO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuXHJcbi8qKlxyXG4gKiBSZXR1cm5zIGFuIGludmVyc2Ugc3RyaW5nIG1hcCAoc3RyaW5nTWFwWyBzdHJpbmdLZXkgXVsgbG9jYWxlIF0pIGZvciBhbGwgc3RyaW5ncyBpbiBhIGdpdmVuIHJlcG8uXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcG8gLSBUaGUgcmVwb3NpdG9yeSBuYW1lXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBjaGVja291dERpclxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48c3RyaW5nTWFwWyBzdHJpbmdLZXkgXVsgbG9jYWxlIF0+fVxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbiBnZXRSZXBvU3RyaW5nTWFwKCByZXBvLCBjaGVja291dERpciApIHtcclxuXHJcbiAgLy8gcGFydGlhbEtleU1hcFsgcGFydGlhbFN0cmluZ0tleSBdWyBsb2NhbGUgXSA9IHN0cmluZ1ZhbHVlXHJcbiAgY29uc3QgcGFydGlhbEtleU1hcCA9IHt9O1xyXG5cclxuICAvLyBJZiB3ZSdyZSBub3QgYSByZXBvIHdpdGggc3RyaW5nc1xyXG4gIGlmICggIWZzLmV4aXN0c1N5bmMoIGAke2NoZWNrb3V0RGlyfS8ke3JlcG99LyR7cmVwb30tc3RyaW5nc19lbi5qc29uYCApICkge1xyXG4gICAgcmV0dXJuIHt9O1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGFja2FnZUpTT04gPSBhd2FpdCBsb2FkSlNPTiggYCR7Y2hlY2tvdXREaXJ9LyR7cmVwb30vcGFja2FnZS5qc29uYCApO1xyXG4gIGNvbnN0IHJlcXVpcmVqc05hbWVzcGFjZSA9IHBhY2thZ2VKU09OLnBoZXQucmVxdWlyZWpzTmFtZXNwYWNlO1xyXG5cclxuICBjb25zdCBlbmdsaXNoU3RyaW5ncyA9IGF3YWl0IGxvYWRKU09OKCBgJHtjaGVja291dERpcn0vJHtyZXBvfS8ke3JlcG99LXN0cmluZ3NfZW4uanNvbmAgKTtcclxuXHJcbiAgLy8gU3VwcG9ydCByZWN1cnNpdmUgc3RydWN0dXJlIG9mIEVuZ2xpc2ggc3RyaW5nIGZpbGVzLiBUZXN0cyBmb3IgYHZhbHVlOiA8PHN0cmluZyB0eXBlPj5gIHRvIGRldGVybWluZSBpZiBpdCdzIGEgc3RyaW5nLlxyXG4gIC8vIEZpbGxzIHBhcnRpYWxLZXlNYXBcclxuICAoIGZ1bmN0aW9uIHJlY3VyKCBzdHJpbmdTdHJ1Y3R1cmUsIHN0cmluZ0tleVBhcnRzICkge1xyXG4gICAgaWYgKCB0eXBlb2Ygc3RyaW5nU3RydWN0dXJlLnZhbHVlID09PSAnc3RyaW5nJyApIHtcclxuICAgICAgcGFydGlhbEtleU1hcFsgc3RyaW5nS2V5UGFydHMuam9pbiggJy4nICkgXSA9IHtcclxuICAgICAgICBlbjogc3RyaW5nU3RydWN0dXJlLnZhbHVlXHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgICBPYmplY3Qua2V5cyggc3RyaW5nU3RydWN0dXJlICkuZm9yRWFjaCggcGFydGlhbEtleSA9PiB7XHJcbiAgICAgIGlmICggdHlwZW9mIHN0cmluZ1N0cnVjdHVyZVsgcGFydGlhbEtleSBdID09PSAnb2JqZWN0JyApIHtcclxuICAgICAgICByZWN1ciggc3RyaW5nU3RydWN0dXJlWyBwYXJ0aWFsS2V5IF0sIFsgLi4uc3RyaW5nS2V5UGFydHMsIHBhcnRpYWxLZXkgXSApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfSApKCBlbmdsaXNoU3RyaW5ncywgW10gKTtcclxuXHJcbiAgLy8gRmlsbCBwYXJ0aWFsS2V5TWFwIHdpdGggb3RoZXIgbG9jYWxlcyAoaWYgdGhlIGRpcmVjdG9yeSBpbiBiYWJlbCBleGlzdHMpXHJcbiAgaWYgKCBmcy5leGlzdHNTeW5jKCBgJHtjaGVja291dERpcn0vYmFiZWwvJHtyZXBvfWAgKSApIHtcclxuICAgIGZvciAoIGNvbnN0IHN0cmluZ0ZpbGVuYW1lIG9mIGZzLnJlYWRkaXJTeW5jKCBgJHtjaGVja291dERpcn0vYmFiZWwvJHtyZXBvfWAgKSApIHtcclxuICAgICAgY29uc3QgbG9jYWxlU3RyaW5ncyA9IGF3YWl0IGxvYWRKU09OKCBgJHtjaGVja291dERpcn0vYmFiZWwvJHtyZXBvfS8ke3N0cmluZ0ZpbGVuYW1lfWAgKTtcclxuXHJcbiAgICAgIC8vIEV4dHJhY3QgbG9jYWxlIGZyb20gZmlsZW5hbWVcclxuICAgICAgY29uc3QgZmlyc3RVbmRlcnNjb3JlSW5kZXggPSBzdHJpbmdGaWxlbmFtZS5pbmRleE9mKCAnXycgKTtcclxuICAgICAgY29uc3QgcGVyaW9kSW5kZXggPSBzdHJpbmdGaWxlbmFtZS5pbmRleE9mKCAnLicgKTtcclxuICAgICAgY29uc3QgbG9jYWxlID0gc3RyaW5nRmlsZW5hbWUuc3Vic3RyaW5nKCBmaXJzdFVuZGVyc2NvcmVJbmRleCArIDEsIHBlcmlvZEluZGV4ICk7XHJcblxyXG4gICAgICBPYmplY3Qua2V5cyggbG9jYWxlU3RyaW5ncyApLmZvckVhY2goIHBhcnRpYWxTdHJpbmdLZXkgPT4ge1xyXG4gICAgICAgIGlmICggcGFydGlhbEtleU1hcFsgcGFydGlhbFN0cmluZ0tleSBdICkge1xyXG4gICAgICAgICAgcGFydGlhbEtleU1hcFsgcGFydGlhbFN0cmluZ0tleSBdWyBsb2NhbGUgXSA9IGxvY2FsZVN0cmluZ3NbIHBhcnRpYWxTdHJpbmdLZXkgXS52YWx1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIHJlc3VsdFsgc3RyaW5nS2V5IF1bIGxvY2FsZSBdID0gc3RyaW5nVmFsdWVcclxuICBjb25zdCByZXN1bHQgPSB7fTtcclxuXHJcbiAgLy8gUHJlcGVuZCB0aGUgcmVxdWlyZWpzTmFtZXNwYWNlIHRvIHRoZSBzdHJpbmcga2V5c1xyXG4gIE9iamVjdC5rZXlzKCBwYXJ0aWFsS2V5TWFwICkuZm9yRWFjaCggcGFydGlhbEtleSA9PiB7XHJcbiAgICByZXN1bHRbIGAke3JlcXVpcmVqc05hbWVzcGFjZX0vJHtwYXJ0aWFsS2V5fWAgXSA9IHBhcnRpYWxLZXlNYXBbIHBhcnRpYWxLZXkgXTtcclxuICB9ICk7XHJcblxyXG4gIHJldHVybiByZXN1bHQ7XHJcbn07Il0sIm1hcHBpbmdzIjoiOzsrQ0FDQSxxSkFBQUEsbUJBQUEsWUFBQUEsb0JBQUEsV0FBQUMsQ0FBQSxTQUFBQyxDQUFBLEVBQUFELENBQUEsT0FBQUUsQ0FBQSxHQUFBQyxNQUFBLENBQUFDLFNBQUEsRUFBQUMsQ0FBQSxHQUFBSCxDQUFBLENBQUFJLGNBQUEsRUFBQUMsQ0FBQSxHQUFBSixNQUFBLENBQUFLLGNBQUEsY0FBQVAsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsSUFBQUQsQ0FBQSxDQUFBRCxDQUFBLElB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