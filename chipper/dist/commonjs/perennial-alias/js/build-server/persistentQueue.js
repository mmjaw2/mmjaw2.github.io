"use strict";

// Copyright 2023, University of Colorado Boulder
// @author Matt Pennington (PhET Interactive Simulations)

var fs = require('fs');
var _ = require('lodash');
var createNewQueue = function createNewQueue() {
  return {
    queue: [],
    currentTask: null
  };
};
var getQueue = function getQueue() {
  try {
    var buildStatus = JSON.parse(fs.readFileSync('.build-server-queue').toString());
    if (!Array.isArray(buildStatus.queue)) {
      console.error('Queue is not an array, found this instead', JSON.stringify(buildStatus.queue));
      console.error('Returning a blank queue');
      return createNewQueue();
    } else {
      return buildStatus;
    }
  } catch (e) {
    console.error('Queue not retrievable, returning blank queue', e);
    return createNewQueue();
  }
};
var saveQueue = function saveQueue(queue) {
  fs.writeFileSync('.build-server-queue', JSON.stringify(queue));
};
var formatTask = function formatTask(task) {
  return {
    api: task.api,
    repos: task.repos,
    simName: task.simName,
    version: task.version,
    locales: task.locales,
    servers: task.servers,
    brands: task.brands,
    email: task.email,
    userId: task.userId,
    branch: task.branch,
    enqueueTime: task.enqueueTime
  };
};
var addTask = function addTask(task) {
  var buildStatus = getQueue();
  task.enqueueTime = new Date().toString();
  buildStatus.queue.push(formatTask(task));
  saveQueue(buildStatus);
};
var startTask = function startTask(task) {
  var buildStatus = getQueue();
  var taskIndex = buildStatus.queue.findIndex(function (t) {
    return _.isEqual(t, formatTask(task));
  });
  buildStatus.queue.splice(taskIndex, 1);
  buildStatus.currentTask = task;
  buildStatus.currentTask.startTime = new Date().toString();
  saveQueue(buildStatus);
};
var finishTask = function finishTask() {
  var buildStatus = getQueue();
  buildStatus.currentTask = null;
  saveQueue(buildStatus);
};
module.exports = {
  addTask: addTask,
  startTask: startTask,
  finishTask: finishTask,
  getQueue: getQueue
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJfIiwiY3JlYXRlTmV3UXVldWUiLCJxdWV1ZSIsImN1cnJlbnRUYXNrIiwiZ2V0UXVldWUiLCJidWlsZFN0YXR1cyIsIkpTT04iLCJwYXJzZSIsInJlYWRGaWxlU3luYyIsInRvU3RyaW5nIiwiQXJyYXkiLCJpc0FycmF5IiwiY29uc29sZSIsImVycm9yIiwic3RyaW5naWZ5IiwiZSIsInNhdmVRdWV1ZSIsIndyaXRlRmlsZVN5bmMiLCJmb3JtYXRUYXNrIiwidGFzayIsImFwaSIsInJlcG9zIiwic2ltTmFtZSIsInZlcnNpb24iLCJsb2NhbGVzIiwic2VydmVycyIsImJyYW5kcyIsImVtYWlsIiwidXNlcklkIiwiYnJhbmNoIiwiZW5xdWV1ZVRpbWUiLCJhZGRUYXNrIiwiRGF0ZSIsInB1c2giLCJzdGFydFRhc2siLCJ0YXNrSW5kZXgiLCJmaW5kSW5kZXgiLCJ0IiwiaXNFcXVhbCIsInNwbGljZSIsInN0YXJ0VGltZSIsImZpbmlzaFRhc2siLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsicGVyc2lzdGVudFF1ZXVlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuLy8gQGF1dGhvciBNYXR0IFBlbm5pbmd0b24gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcblxyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuY29uc3QgXyA9IHJlcXVpcmUoICdsb2Rhc2gnICk7XHJcblxyXG5jb25zdCBjcmVhdGVOZXdRdWV1ZSA9ICgpID0+ICggeyBxdWV1ZTogW10sIGN1cnJlbnRUYXNrOiBudWxsIH0gKTtcclxuXHJcbmNvbnN0IGdldFF1ZXVlID0gKCkgPT4ge1xyXG4gIHRyeSB7XHJcbiAgICBjb25zdCBidWlsZFN0YXR1cyA9IEpTT04ucGFyc2UoIGZzLnJlYWRGaWxlU3luYyggJy5idWlsZC1zZXJ2ZXItcXVldWUnICkudG9TdHJpbmcoKSApO1xyXG5cclxuICAgIGlmICggIUFycmF5LmlzQXJyYXkoIGJ1aWxkU3RhdHVzLnF1ZXVlICkgKSB7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoICdRdWV1ZSBpcyBub3QgYW4gYXJyYXksIGZvdW5kIHRoaXMgaW5zdGVhZCcsIEpTT04uc3RyaW5naWZ5KCBidWlsZFN0YXR1cy5xdWV1ZSApICk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoICdSZXR1cm5pbmcgYSBibGFuayBxdWV1ZScgKTtcclxuICAgICAgcmV0dXJuIGNyZWF0ZU5ld1F1ZXVlKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgcmV0dXJuIGJ1aWxkU3RhdHVzO1xyXG4gICAgfVxyXG4gIH1cclxuICBjYXRjaCggZSApIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoICdRdWV1ZSBub3QgcmV0cmlldmFibGUsIHJldHVybmluZyBibGFuayBxdWV1ZScsIGUgKTtcclxuICAgIHJldHVybiBjcmVhdGVOZXdRdWV1ZSgpO1xyXG4gIH1cclxufTtcclxuXHJcbmNvbnN0IHNhdmVRdWV1ZSA9IHF1ZXVlID0+IHtcclxuICBmcy53cml0ZUZpbGVTeW5jKCAnLmJ1aWxkLXNlcnZlci1xdWV1ZScsIEpTT04uc3RyaW5naWZ5KCBxdWV1ZSApICk7XHJcbn07XHJcblxyXG5jb25zdCBmb3JtYXRUYXNrID0gdGFzayA9PiAoIHtcclxuICBhcGk6IHRhc2suYXBpLFxyXG4gIHJlcG9zOiB0YXNrLnJlcG9zLFxyXG4gIHNpbU5hbWU6IHRhc2suc2ltTmFtZSxcclxuICB2ZXJzaW9uOiB0YXNrLnZlcnNpb24sXHJcbiAgbG9jYWxlczogdGFzay5sb2NhbGVzLFxyXG4gIHNlcnZlcnM6IHRhc2suc2VydmVycyxcclxuICBicmFuZHM6IHRhc2suYnJhbmRzLFxyXG4gIGVtYWlsOiB0YXNrLmVtYWlsLFxyXG4gIHVzZXJJZDogdGFzay51c2VySWQsXHJcbiAgYnJhbmNoOiB0YXNrLmJyYW5jaCxcclxuICBlbnF1ZXVlVGltZTogdGFzay5lbnF1ZXVlVGltZVxyXG59ICk7XHJcblxyXG5jb25zdCBhZGRUYXNrID0gdGFzayA9PiB7XHJcbiAgY29uc3QgYnVpbGRTdGF0dXMgPSBnZXRRdWV1ZSgpO1xyXG4gIHRhc2suZW5xdWV1ZVRpbWUgPSBuZXcgRGF0ZSgpLnRvU3RyaW5nKCk7XHJcbiAgYnVpbGRTdGF0dXMucXVldWUucHVzaCggZm9ybWF0VGFzayggdGFzayApICk7XHJcbiAgc2F2ZVF1ZXVlKCBidWlsZFN0YXR1cyApO1xyXG59O1xyXG5cclxuY29uc3Qgc3RhcnRUYXNrID0gdGFzayA9PiB7XHJcbiAgY29uc3QgYnVpbGRTdGF0dXMgPSBnZXRRdWV1ZSgpO1xyXG4gIGNvbnN0IHRhc2tJbmRleCA9IGJ1aWxkU3RhdHVzLnF1ZXVlLmZpbmRJbmRleCggdCA9PiBfLmlzRXF1YWwoIHQsIGZvcm1hdFRhc2soIHRhc2sgKSApICk7XHJcbiAgYnVpbGRTdGF0dXMucXVldWUuc3BsaWNlKCB0YXNrSW5kZXgsIDEgKTtcclxuICBidWlsZFN0YXR1cy5jdXJyZW50VGFzayA9IHRhc2s7XHJcbiAgYnVpbGRTdGF0dXMuY3VycmVudFRhc2suc3RhcnRUaW1lID0gbmV3IERhdGUoKS50b1N0cmluZygpO1xyXG4gIHNhdmVRdWV1ZSggYnVpbGRTdGF0dXMgKTtcclxufTtcclxuXHJcbmNvbnN0IGZpbmlzaFRhc2sgPSAoKSA9PiB7XHJcbiAgY29uc3QgYnVpbGRTdGF0dXMgPSBnZXRRdWV1ZSgpO1xyXG4gIGJ1aWxkU3RhdHVzLmN1cnJlbnRUYXNrID0gbnVsbDtcclxuICBzYXZlUXVldWUoIGJ1aWxkU3RhdHVzICk7XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IHtcclxuICBhZGRUYXNrOiBhZGRUYXNrLFxyXG4gIHN0YXJ0VGFzazogc3RhcnRUYXNrLFxyXG4gIGZpbmlzaFRhc2s6IGZpbmlzaFRhc2ssXHJcbiAgZ2V0UXVldWU6IGdldFF1ZXVlXHJcbn07Il0sIm1hcHBpbmdzIjoiOztBQUFBO0FBQ0E7O0FBRUEs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