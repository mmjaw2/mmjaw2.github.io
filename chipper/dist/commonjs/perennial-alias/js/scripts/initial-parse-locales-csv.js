"use strict";

// Copyright 2021, University of Colorado Boulder

var fs = require('fs');
// eslint-disable-next-line require-statement-match
var csv = require('csv-parser');
var filePath = process.argv[2];

/**
 * Read in the CSV export from the locales spreadsheet ("Final(dev)" format) and parse it into a localeJSON format.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var parseCSV = function parseCSV(filePath, callback) {
  var rows = [];
  fs.createReadStream(filePath).pipe(csv()).on('data', function (row) {
    var values = Object.values(row);
    rows.push(values);
  }).on('end', function () {
    callback(null, rows);
  }).on('error', function (error) {
    callback(error, null);
  });
};
parseCSV(filePath, function (error, data) {
  if (error) {
    console.error('Error parsing CSV:', error);
  } else {
    var localeMainData = data.map(function (row) {
      var locale = row[1];
      var threeLetterLocale = row[2];
      var englishName = row[3];
      var localizedName = row[4];
      var direction = row[5];
      var fallback = row[6];
      locale = locale.trim();
      if (locale.length !== 2 && locale.length !== 5) {
        throw new Error("Invalid locale: ".concat(JSON.stringify(locale)));
      }
      if (!locale[0].match(/[a-z]/)) {
        throw new Error("Invalid locale: ".concat(locale));
      }
      if (!locale[1].match(/[a-z]/)) {
        throw new Error("Invalid locale: ".concat(locale));
      }
      if (locale.length === 5) {
        if (locale[2] !== '_') {
          throw new Error("Invalid locale: ".concat(locale));
        }
        if (!locale[3].match(/[A-Z]/)) {
          throw new Error("Invalid locale: ".concat(locale));
        }
        if (!locale[4].match(/[A-Z]/)) {
          throw new Error("Invalid locale: ".concat(locale));
        }
      }
      threeLetterLocale = threeLetterLocale.trim(); // remove tab

      if (threeLetterLocale.length === 5 && locale === threeLetterLocale) {
        threeLetterLocale = null;
      } else if (threeLetterLocale.length === 0) {
        threeLetterLocale = null;
      }
      if (threeLetterLocale !== null) {
        if (threeLetterLocale.length !== 3) {
          throw new Error("Invalid three-letter locale: ".concat(JSON.stringify(row)));
        }
        if (!threeLetterLocale.match(/^[a-z]{3}$/)) {
          throw new Error("Invalid three-letter locale: ".concat(JSON.stringify(row)));
        }
      }
      englishName = englishName.trim().replace(/\u00A0/g, ' ');
      if (englishName.length < 1) {
        throw new Error("Invalid English name: ".concat(JSON.stringify(row)));
      }
      localizedName = localizedName.trim().replace(/\u00A0/g, ' ');
      if (localizedName.length < 1) {
        throw new Error("Invalid localized name: ".concat(JSON.stringify(row)));
      }

      // patch in
      if (locale === 'pt_ST') {
        direction = 'ltr';
      }
      if (direction !== 'ltr' && direction !== 'rtl') {
        throw new Error("Invalid direction: ".concat(JSON.stringify(row)));
      }
      var fallbackLocales = fallback.trim().split(',').map(function (x) {
        return x.trim();
      }).filter(function (l) {
        return l !== 'en';
      });
      var result = {
        locale: locale
      };
      if (threeLetterLocale) {
        result.locale3 = threeLetterLocale;
      }
      result.englishName = englishName;
      result.localizedName = localizedName;
      result.direction = direction;
      if (fallbackLocales.length) {
        result.fallbackLocales = fallbackLocales;
      }
      return result;
    });
    localeMainData.forEach(function (localeData) {
      localeData.fallbackLocales && localeData.fallbackLocales.forEach(function (fallbackLocale) {
        if (!localeMainData.find(function (x) {
          return x.locale === fallbackLocale;
        })) {
          throw new Error("Invalid fallback locale: ".concat(JSON.stringify(localeData)));
        }
      });
    });
    localeMainData.sort(function (a, b) {
      return a.locale.localeCompare(b.locale);
    });
    var localeInfo = {};
    localeMainData.forEach(function (localeData) {
      var locale = localeData.locale;
      delete localeData.locale;
      localeInfo[locale] = localeData;
    });
    var localeInfoString = JSON.stringify(localeInfo, null, 2);
    console.log(localeInfoString);

    // legacy localeInfo.js, that will be propagated to the other copies
    {
      var legacyLocaleInfoPrimaryFilename = '../chipper/js/data/localeInfo.js';
      if (!fs.existsSync(legacyLocaleInfoPrimaryFilename)) {
        throw new Error("Expected to find ".concat(legacyLocaleInfoPrimaryFilename));
      }
      var legacyLocaleInfoPrimary = fs.readFileSync(legacyLocaleInfoPrimaryFilename, 'utf8');
      var startIndex = legacyLocaleInfoPrimary.indexOf('const locales = {');
      var endIndex = legacyLocaleInfoPrimary.indexOf('module.exports = locales;', startIndex);
      if (startIndex === -1 || endIndex === -1) {
        throw new Error('Failed to find localeInfo.js locales object');
      }
      var replacement = 'const locales = {\n';
      for (var locale in localeInfo) {
        replacement += "  ".concat(locale, ": {\n");
        replacement += "    name: '".concat(localeInfo[locale].englishName.replace(/'/g, '\\\''), "',\n");
        replacement += "    localizedName: '".concat(localeInfo[locale].localizedName.replace(/'/g, '\\\''), "',\n");
        replacement += "    direction: '".concat(localeInfo[locale].direction, "'\n");
        replacement += '  },\n';
      }
      replacement += '};\n\n';
      var newLocaleInfoPrimary = legacyLocaleInfoPrimary.substring(0, startIndex) + replacement + legacyLocaleInfoPrimary.substring(endIndex);
      fs.writeFileSync(legacyLocaleInfoPrimaryFilename, newLocaleInfoPrimary, 'utf8');
    }

    // New babel localeData
    {
      var babelExtendedLocaleInfoFilename = '../babel/localeData.json';
      fs.writeFileSync(babelExtendedLocaleInfoFilename, localeInfoString);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,