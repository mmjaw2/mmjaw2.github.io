"use strict";

var _nodePath = require("node:path");
var _nodeChild_process = require("node:child_process");
var _nodeProcess = require("node:process");
var _appendToFile = _interopRequireDefault(require("./append-to-file.js"));
var _coreCommonRepos = _interopRequireDefault(require("./core-common-repos.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } // Copyright 2023, University of Colorado Boulder
/* eslint-disable default-import-match-filename */ /**
 * Append a note about contributing and a link to the contributing
 * doc in this repo to core common repos then commit. This script
 * is meant to be run from the root of the PhET project directory.
 *
 * @author Liam Mulhall <liammulh@gmail.com>
 */
var contributingNote = "### Contributing\nIf you would like to contribute to this repo, please read our [contributing guidelines](https://github.com/phetsims/community/blob/main/CONTRIBUTING.md).\n";
var _iterator = _createForOfIteratorHelper(_coreCommonRepos["default"]),
  _step;
try {
  for (_iterator.s(); !(_step = _iterator.n()).done;) {
    var repo = _step.value;
    console.log('=======================================');
    console.log("appending contrib note to ".concat(repo));
    (0, _appendToFile["default"])((0, _nodePath.join)(repo, 'README.md'), '\n\n' + contributingNote);
    var repoDir = (0, _nodePath.join)((0, _nodeProcess.cwd)(), repo);
    console.log("changing directory to ".concat(repoDir));
    (0, _nodeProcess.chdir)(repoDir);
    var commitMessage = '"automated commit from phetsims/community; adding contrib doc note"';
    var commands = ['git pull origin main', 'git add README.md', "git commit --message ".concat(commitMessage, " --no-verify"), 'git push origin main'];
    for (var _i = 0, _commands = commands; _i < _commands.length; _i++) {
      var command = _commands[_i];
      console.log("executing command: ".concat(command));
      (0, _nodeChild_process.execSync)(command);
    }
    console.log('going back one directory');
    (0, _nodeProcess.chdir)('..');
  }
} catch (err) {
  _iterator.e(err);
} finally {
  _iterator.f();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9kZVBhdGgiLCJyZXF1aXJlIiwiX25vZGVDaGlsZF9wcm9jZXNzIiwiX25vZGVQcm9jZXNzIiwiX2FwcGVuZFRvRmlsZSIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJfY29yZUNvbW1vblJlcG9zIiwib2JqIiwiX19lc01vZHVsZSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkFycmF5IiwiaXNBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImxlbmd0aCIsImkiLCJGIiwicyIsIm4iLCJkb25lIiwidmFsdWUiLCJlIiwiX2UiLCJmIiwiVHlwZUVycm9yIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsImVyciIsImNhbGwiLCJzdGVwIiwibmV4dCIsIl9lMiIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiYXJyIiwibGVuIiwiYXJyMiIsImNvbnRyaWJ1dGluZ05vdGUiLCJfaXRlcmF0b3IiLCJjb3JlQ29tbW9uUmVwb3MiLCJfc3RlcCIsInJlcG8iLCJjb25zb2xlIiwibG9nIiwiY29uY2F0IiwiYXBwZW5kVG9GaWxlIiwiam9pbiIsInJlcG9EaXIiLCJjd2QiLCJjaGRpciIsImNvbW1pdE1lc3NhZ2UiLCJjb21tYW5kcyIsIl9pIiwiX2NvbW1hbmRzIiwiY29tbWFuZCIsImV4ZWNTeW5jIl0sInNvdXJjZXMiOlsiYXBwZW5kLWNvbnRyaWIuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyogZXNsaW50LWRpc2FibGUgZGVmYXVsdC1pbXBvcnQtbWF0Y2gtZmlsZW5hbWUgKi9cclxuXHJcblxyXG4vKipcclxuICogQXBwZW5kIGEgbm90ZSBhYm91dCBjb250cmlidXRpbmcgYW5kIGEgbGluayB0byB0aGUgY29udHJpYnV0aW5nXHJcbiAqIGRvYyBpbiB0aGlzIHJlcG8gdG8gY29yZSBjb21tb24gcmVwb3MgdGhlbiBjb21taXQuIFRoaXMgc2NyaXB0XHJcbiAqIGlzIG1lYW50IHRvIGJlIHJ1biBmcm9tIHRoZSByb290IG9mIHRoZSBQaEVUIHByb2plY3QgZGlyZWN0b3J5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIExpYW0gTXVsaGFsbCA8bGlhbW11bGhAZ21haWwuY29tPlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGpvaW4gfSBmcm9tICdub2RlOnBhdGgnO1xyXG5pbXBvcnQgeyBleGVjU3luYyB9IGZyb20gJ25vZGU6Y2hpbGRfcHJvY2Vzcyc7XHJcbmltcG9ydCB7IGN3ZCwgY2hkaXIgfSBmcm9tICdub2RlOnByb2Nlc3MnO1xyXG5pbXBvcnQgYXBwZW5kVG9GaWxlIGZyb20gJy4vYXBwZW5kLXRvLWZpbGUuanMnO1xyXG5pbXBvcnQgY29yZUNvbW1vblJlcG9zIGZyb20gJy4vY29yZS1jb21tb24tcmVwb3MuanMnO1xyXG5cclxuY29uc3QgY29udHJpYnV0aW5nTm90ZSA9IGAjIyMgQ29udHJpYnV0aW5nXHJcbklmIHlvdSB3b3VsZCBsaWtlIHRvIGNvbnRyaWJ1dGUgdG8gdGhpcyByZXBvLCBwbGVhc2UgcmVhZCBvdXIgW2NvbnRyaWJ1dGluZyBndWlkZWxpbmVzXShodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY29tbXVuaXR5L2Jsb2IvbWFpbi9DT05UUklCVVRJTkcubWQpLlxyXG5gO1xyXG5cclxuZm9yICggY29uc3QgcmVwbyBvZiBjb3JlQ29tbW9uUmVwb3MgKSB7XHJcbiAgY29uc29sZS5sb2coICc9PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT09PT0nICk7XHJcbiAgY29uc29sZS5sb2coIGBhcHBlbmRpbmcgY29udHJpYiBub3RlIHRvICR7cmVwb31gICk7XHJcbiAgYXBwZW5kVG9GaWxlKCBqb2luKCByZXBvLCAnUkVBRE1FLm1kJyApLCAnXFxuXFxuJyArIGNvbnRyaWJ1dGluZ05vdGUgKTtcclxuICBjb25zdCByZXBvRGlyID0gam9pbiggY3dkKCksIHJlcG8gKTtcclxuICBjb25zb2xlLmxvZyggYGNoYW5naW5nIGRpcmVjdG9yeSB0byAke3JlcG9EaXJ9YCApO1xyXG4gIGNoZGlyKCByZXBvRGlyICk7XHJcbiAgY29uc3QgY29tbWl0TWVzc2FnZSA9ICdcImF1dG9tYXRlZCBjb21taXQgZnJvbSBwaGV0c2ltcy9jb21tdW5pdHk7IGFkZGluZyBjb250cmliIGRvYyBub3RlXCInO1xyXG4gIGNvbnN0IGNvbW1hbmRzID0gW1xyXG4gICAgJ2dpdCBwdWxsIG9yaWdpbiBtYWluJyxcclxuICAgICdnaXQgYWRkIFJFQURNRS5tZCcsXHJcbiAgICBgZ2l0IGNvbW1pdCAtLW1lc3NhZ2UgJHtjb21taXRNZXNzYWdlfSAtLW5vLXZlcmlmeWAsXHJcbiAgICAnZ2l0IHB1c2ggb3JpZ2luIG1haW4nXHJcbiAgXTtcclxuICBmb3IgKCBjb25zdCBjb21tYW5kIG9mIGNvbW1hbmRzICkge1xyXG4gICAgY29uc29sZS5sb2coIGBleGVjdXRpbmcgY29tbWFuZDogJHtjb21tYW5kfWAgKTtcclxuICAgIGV4ZWNTeW5jKCBjb21tYW5kICk7XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKCAnZ29pbmcgYmFjayBvbmUgZGlyZWN0b3J5JyApO1xyXG4gIGNoZGlyKCAnLi4nICk7XHJcbn0iXSwibWFwcGluZ3MiOiI7O0FBYUEsSUFBQUEsU0FBQSxHQUFBQyxPQUFBO0FBQ0EsSUFBQUMsa0JBQUEsR0FBQUQsT0FBQTtBQUNBLElBQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLElBQUFHLGFBQUEsR0FBQUMsc0JBQUEsQ0FBQUosT0FBQTtBQUNBLElBQUFLLGdCQUFBLEdBQUFELHNCQUFBLENBQUFKLE9BQUE7QUFBcUQsU0FBQUksdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFB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