"use strict";

var _nodeChild_process = require("node:child_process");
var _nodeFs = require("node:fs");
var _coreCommonRepos = _interopRequireDefault(require("./core-common-repos.js"));
var _nodePath = require("node:path");
var _nodeProcess = require("node:process");
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; } // Copyright 2023, University of Colorado Boulder
/**
 * Copy the pull request template to the core set of common repos.
 * This script is meant to be run in the root of the PhET project
 * directory.
 *
 * @author Liam Mulhall <liammulh@gmail.com>
 */ // eslint-disable-next-line default-import-match-filename
var pathToPrTemplate = (0, _nodePath.join)((0, _nodeProcess.cwd)(), 'community', '.github', 'pull_request_template.md');
var _iterator = _createForOfIteratorHelper(_coreCommonRepos["default"]),
  _step;
try {
  for (_iterator.s(); !(_step = _iterator.n()).done;) {
    var repo = _step.value;
    var dest = (0, _nodePath.join)((0, _nodeProcess.cwd)(), repo, '.github', 'pull_request_template.md');
    var destDir = (0, _nodePath.dirname)(dest);
    var destDirDoesNotExist = !(0, _nodeFs.existsSync)(destDir);
    if (destDirDoesNotExist) {
      (0, _nodeFs.mkdirSync)(destDir, {
        recursive: true
      });
    }
    (0, _nodeFs.copyFileSync)(pathToPrTemplate, dest);
    (0, _nodeProcess.chdir)(repo);
    var commitMessage = '"automated commit from phetsims/community; adding PR template, see https://github.com/phetsims/community/issues/9"';
    var commands = ['git pull origin main', 'git add .github', "git commit --message ".concat(commitMessage, " --no-verify"), 'git push origin main'];
    for (var _i = 0, _commands = commands; _i < _commands.length; _i++) {
      var command = _commands[_i];
      console.log("executing command: ".concat(command));
      (0, _nodeChild_process.execSync)(command);
    }
    console.log('going back one directory');
    (0, _nodeProcess.chdir)('..');
  }
} catch (err) {
  _iterator.e(err);
} finally {
  _iterator.f();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfbm9kZUNoaWxkX3Byb2Nlc3MiLCJyZXF1aXJlIiwiX25vZGVGcyIsIl9jb3JlQ29tbW9uUmVwb3MiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwiX25vZGVQYXRoIiwiX25vZGVQcm9jZXNzIiwib2JqIiwiX19lc01vZHVsZSIsIl9jcmVhdGVGb3JPZkl0ZXJhdG9ySGVscGVyIiwibyIsImFsbG93QXJyYXlMaWtlIiwiaXQiLCJTeW1ib2wiLCJpdGVyYXRvciIsIkFycmF5IiwiaXNBcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsImxlbmd0aCIsImkiLCJGIiwicyIsIm4iLCJkb25lIiwidmFsdWUiLCJlIiwiX2UiLCJmIiwiVHlwZUVycm9yIiwibm9ybWFsQ29tcGxldGlvbiIsImRpZEVyciIsImVyciIsImNhbGwiLCJzdGVwIiwibmV4dCIsIl9lMiIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwiT2JqZWN0IiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJzbGljZSIsImNvbnN0cnVjdG9yIiwibmFtZSIsImZyb20iLCJ0ZXN0IiwiYXJyIiwibGVuIiwiYXJyMiIsInBhdGhUb1ByVGVtcGxhdGUiLCJqb2luIiwiY3dkIiwiX2l0ZXJhdG9yIiwiY29yZUNvbW1vblJlcG9zIiwiX3N0ZXAiLCJyZXBvIiwiZGVzdCIsImRlc3REaXIiLCJkaXJuYW1lIiwiZGVzdERpckRvZXNOb3RFeGlzdCIsImV4aXN0c1N5bmMiLCJta2RpclN5bmMiLCJyZWN1cnNpdmUiLCJjb3B5RmlsZVN5bmMiLCJjaGRpciIsImNvbW1pdE1lc3NhZ2UiLCJjb21tYW5kcyIsImNvbmNhdCIsIl9pIiwiX2NvbW1hbmRzIiwiY29tbWFuZCIsImNvbnNvbGUiLCJsb2ciLCJleGVjU3luYyJdLCJzb3VyY2VzIjpbImNvcHktcHItdGVtcGxhdGUuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvcHkgdGhlIHB1bGwgcmVxdWVzdCB0ZW1wbGF0ZSB0byB0aGUgY29yZSBzZXQgb2YgY29tbW9uIHJlcG9zLlxyXG4gKiBUaGlzIHNjcmlwdCBpcyBtZWFudCB0byBiZSBydW4gaW4gdGhlIHJvb3Qgb2YgdGhlIFBoRVQgcHJvamVjdFxyXG4gKiBkaXJlY3RvcnkuXHJcbiAqXHJcbiAqIEBhdXRob3IgTGlhbSBNdWxoYWxsIDxsaWFtbXVsaEBnbWFpbC5jb20+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgZXhlY1N5bmMgfSBmcm9tICdub2RlOmNoaWxkX3Byb2Nlc3MnO1xyXG5pbXBvcnQgeyBjb3B5RmlsZVN5bmMsIGV4aXN0c1N5bmMsIG1rZGlyU3luYyB9IGZyb20gJ25vZGU6ZnMnO1xyXG5cclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIGRlZmF1bHQtaW1wb3J0LW1hdGNoLWZpbGVuYW1lXHJcbmltcG9ydCBjb3JlQ29tbW9uUmVwb3MgZnJvbSAnLi9jb3JlLWNvbW1vbi1yZXBvcy5qcyc7XHJcbmltcG9ydCB7IGpvaW4sIGRpcm5hbWUgfSBmcm9tICdub2RlOnBhdGgnO1xyXG5pbXBvcnQgeyBjd2QsIGNoZGlyIH0gZnJvbSAnbm9kZTpwcm9jZXNzJztcclxuXHJcbmNvbnN0IHBhdGhUb1ByVGVtcGxhdGUgPSBqb2luKCBjd2QoKSwgJ2NvbW11bml0eScsICcuZ2l0aHViJywgJ3B1bGxfcmVxdWVzdF90ZW1wbGF0ZS5tZCcgKTtcclxuXHJcbmZvciAoIGNvbnN0IHJlcG8gb2YgY29yZUNvbW1vblJlcG9zICkge1xyXG4gIGNvbnN0IGRlc3QgPSBqb2luKCBjd2QoKSwgcmVwbywgJy5naXRodWInLCAncHVsbF9yZXF1ZXN0X3RlbXBsYXRlLm1kJyApO1xyXG4gIGNvbnN0IGRlc3REaXIgPSBkaXJuYW1lKCBkZXN0ICk7XHJcbiAgY29uc3QgZGVzdERpckRvZXNOb3RFeGlzdCA9ICFleGlzdHNTeW5jKCBkZXN0RGlyICk7XHJcbiAgaWYgKCBkZXN0RGlyRG9lc05vdEV4aXN0ICkge1xyXG4gICAgbWtkaXJTeW5jKCBkZXN0RGlyLCB7IHJlY3Vyc2l2ZTogdHJ1ZSB9ICk7XHJcbiAgfVxyXG4gIGNvcHlGaWxlU3luYyggcGF0aFRvUHJUZW1wbGF0ZSwgZGVzdCApO1xyXG4gIGNoZGlyKCByZXBvICk7XHJcbiAgY29uc3QgY29tbWl0TWVzc2FnZSA9ICdcImF1dG9tYXRlZCBjb21taXQgZnJvbSBwaGV0c2ltcy9jb21tdW5pdHk7IGFkZGluZyBQUiB0ZW1wbGF0ZSwgc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jb21tdW5pdHkvaXNzdWVzLzlcIic7XHJcbiAgY29uc3QgY29tbWFuZHMgPSBbXHJcbiAgICAnZ2l0IHB1bGwgb3JpZ2luIG1haW4nLFxyXG4gICAgJ2dpdCBhZGQgLmdpdGh1YicsXHJcbiAgICBgZ2l0IGNvbW1pdCAtLW1lc3NhZ2UgJHtjb21taXRNZXNzYWdlfSAtLW5vLXZlcmlmeWAsXHJcbiAgICAnZ2l0IHB1c2ggb3JpZ2luIG1haW4nXHJcbiAgXTtcclxuICBmb3IgKCBjb25zdCBjb21tYW5kIG9mIGNvbW1hbmRzICkge1xyXG4gICAgY29uc29sZS5sb2coIGBleGVjdXRpbmcgY29tbWFuZDogJHtjb21tYW5kfWAgKTtcclxuICAgIGV4ZWNTeW5jKCBjb21tYW5kICk7XHJcbiAgfVxyXG4gIGNvbnNvbGUubG9nKCAnZ29pbmcgYmFjayBvbmUgZGlyZWN0b3J5JyApO1xyXG4gIGNoZGlyKCAnLi4nICk7XHJcbn0iXSwibWFwcGluZ3MiOiI7O0FBVUEsSUFBQUEsa0JBQUEsR0FBQUMsT0FBQTtBQUNBLElBQUFDLE9BQUEsR0FBQUQsT0FBQTtBQUdBLElBQUFFLGdCQUFBLEdBQUFDLHNCQUFBLENBQUFILE9BQUE7QUFDQSxJQUFBSSxTQUFBLEdBQUFKLE9BQUE7QUFDQSxJQUFBSyxZQUFBLEdBQUFMLE9BQUE7QUFBMEMsU0FBQUcsdUJBQUFHLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQs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