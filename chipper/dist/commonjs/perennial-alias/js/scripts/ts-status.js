"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright 2022, University of Colorado Boulder
/**
 *
 * The tsc-status script runs through relevant common code repos and counts the lines of code written in javascript
 * and typescript. Provides data on conversion status, as well as occurrences of @ts-expect-error.
 *
 * Run from sims root directory
 * USAGE:
 * cd ${root containing all repos}
 * node ./perennial/js/scripts/ts-status.js
 *
 * @author Marla Schulz (PhET Interactive Simulations)
 */

var _ = require('lodash');
var fs = require('fs');

// The repositories the script will iterate through to produce data
var repos = ['axon', 'brand', 'chipper', 'dot', 'joist', 'kite', 'mobius', 'nitroglycerin', 'perennial', 'phet-core', 'phet-io', 'phetcommon', 'phetmarks', 'scenery', 'scenery-phet', 'shred', 'studio', 'sun', 'tambo', 'tandem', 'tappi', 'twixt', 'utterance-queue', 'vegas'];

// Table headers. Begin here to add another data point.
var jsHeader = 'JS';
var tsHeader = 'TS';
var tsExpectErrorHeader = '"@ts-expect-error"';
var completeHeader = '% Complete';
var tableData = {};
var doesNotCountJS = ['-overrides.js'];
var percent = function percent(numerator, denominator) {
  return Math.floor(numerator / denominator * 100);
};

// Counts by every line of text in a file vs `wc -l` which counts by every newline.
// Therefore, `wc -l` is inaccurate by at least 1 line per file.
var countLines = function countLines(path) {
  var text = fs.readFileSync(path, 'utf8');
  var textLines = text.trim().split(/\r?\n/);
  return textLines.length;
};

// Uses `.include` to check if word is present in line and then ups word count by 1.
// Does not count multiple uses of same word in one line. For those types of scenarios,
// this function is inaccurate.
var countWord = function countWord(path, word) {
  var occurrence = [];
  var text = fs.readFileSync(path, 'utf8');
  var textLines = text.trim().split(/\r?\n/);
  textLines.forEach(function (line) {
    if (line.includes(word)) {
      occurrence.push(word);
    }
  });
  return occurrence.length;
};

// recursively navigates each repository to find relevant javascript and typescript files
var captureData = function captureData(path, tableData) {
  var tsCount = 0;
  var jsCount = 0;
  var tsExpectErrorCount = 0;
  var entries = fs.readdirSync(path);
  entries.forEach(function (file) {
    var newPath = "".concat(path, "/").concat(file);
    if (fs.statSync(newPath).isDirectory()) {
      captureData(newPath, tableData);
    } else if (file.match(/\.js$/)) {
      if (!_.some(doesNotCountJS, function (string) {
        return file.includes(string);
      })) {
        jsCount += countLines(newPath);
      }
    } else if (file.match(/\.ts$/)) {
      tsCount += countLines(newPath);
      tsExpectErrorCount += countWord(newPath, '@ts-expect-error');
    }
  });

  // Adds count to respective key in nested repo object.
  tableData[jsHeader] += jsCount;
  tableData[tsHeader] += tsCount;
  tableData[tsExpectErrorHeader] += tsExpectErrorCount;
};

// iterate through list of common code repos to fill out data
repos.forEach(function (repo) {
  // Sets baseline for nested repo object. New data point baselines should be added here.
  tableData[repo] = _defineProperty(_defineProperty(_defineProperty(_defineProperty({}, jsHeader, 0), tsHeader, 0), completeHeader, 0), tsExpectErrorHeader, 0);
  var repoData = tableData[repo];
  captureData("./".concat(repo, "/js"), repoData);
  repoData[completeHeader] = percent(repoData.TS, repoData.TS + repoData.JS);
});

// calculates total sum across all provided repos
var rows = Object.values(tableData);
var totalJS = _.sumBy(rows, jsHeader);
var totalTS = _.sumBy(rows, tsHeader);
var totalTSExpectError = _.sumBy(rows, tsExpectErrorHeader);
var summary = "\n --------- SUMMARY ----------\n Total ".concat(tsExpectErrorHeader, ": ").concat(totalTSExpectError, "\n Total ").concat(jsHeader, ": ").concat(totalJS, "\n Total ").concat(tsHeader, ": ").concat(totalTS, "\n ").concat(completeHeader, ": ").concat(percent(totalTS, totalTS + totalJS), "%\n ");
console.log(summary);
console.table(tableData);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,