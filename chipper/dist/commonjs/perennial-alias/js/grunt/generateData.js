"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2017, University of Colorado Boulder

/**
 * Generates the lists under perennial/data/, and if there were changes, will commit and push.
 *
 * This grunt task should be run manually by developers when a change has been made that would add or remove
 * an entry from one of the perennial/data/ lists. But it will also be run as part of daily-grunt-work.sh
 * to catch anything that was forgotten.
 *
 * This used to be run automatically by bayes whenever a relevant change was made, see
 * https://github.com/phetsims/perennial/issues/66
 *
 * But we decided to change it to a manual step with a daily fallback, see
 * https://github.com/phetsims/perennial/issues/213
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var getActiveRepos = require('../common/getActiveRepos');
var getBranch = require('../common/getBranch');
var gitAdd = require('../common/gitAdd');
var gitCommit = require('../common/gitCommit');
var gitIsClean = require('../common/gitIsClean');
var gitPush = require('../common/gitPush');
var assert = require('assert');
var fs = require('fs');
var grunt = require('grunt');
var os = require('os');
var winston = require('../../../../../../perennial-alias/node_modules/winston');

/**
 * Generates the lists under perennial/data/, and if there were changes, will commit and push.
 * @public
 */
module.exports = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var activeRepos, writeList, hasChanges;
  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        writeList = function _writeList(name, packageFilter) {
          var repos = activeRepos.filter(function (repo) {
            // Make sure that if someone doesn't have all repositories checked out that this will FAIL. Otherwise bad things.
            assert(grunt.file.exists("../".concat(repo)));
            var packageObject;
            try {
              packageObject = JSON.parse(fs.readFileSync("../".concat(repo, "/package.json"), 'utf8'));
            } catch (e) {
              return false;
            }
            return packageObject.phet && packageFilter(packageObject.phet);
          });
          grunt.log.writeln("Writing to data/".concat(name));
          fs.writeFileSync("data/".concat(name), repos.join(os.EOL) + os.EOL);
        };
        _context.next = 3;
        return getBranch('perennial');
      case 3:
        _context.t1 = _context.sent;
        _context.t0 = _context.t1 !== 'main';
        if (_context.t0) {
          _context.next = 9;
          break;
        }
        _context.next = 8;
        return gitIsClean('perennial');
      case 8:
        _context.t0 = !_context.sent;
      case 9:
        if (!_context.t0) {
          _context.next = 11;
          break;
        }
        grunt.fail.fatal('Data will only be generated if perennial is on main with no working-copy changes.');
      case 11:
        activeRepos = getActiveRepos();
        writeList('interactive-description', function (phet) {
          return phet.simFeatures && phet.simFeatures.supportsInteractiveDescription;
        });
        writeList('voicing', function (phet) {
          return phet.simFeatures && phet.simFeatures.supportsVoicing;
        });
        writeList('active-runnables', function (phet) {
          return phet.runnable;
        });
        writeList('active-sims', function (phet) {
          return phet.simulation;
        });
        writeList('unit-tests', function (phet) {
          return phet.generatedUnitTests;
        });
        writeList('phet-io', function (phet) {
          return phet.runnable && phet.supportedBrands && phet.supportedBrands.includes('phet-io');
        });
        writeList('phet-io-api-stable', function (phet) {
          return phet.runnable && phet.supportedBrands && phet.supportedBrands.includes('phet-io') && phet['phet-io'] && phet['phet-io'].compareDesignedAPIChanges;
        });
        _context.next = 21;
        return gitAdd('perennial', 'data/interactive-description');
      case 21:
        _context.next = 23;
        return gitAdd('perennial', 'data/voicing');
      case 23:
        _context.next = 25;
        return gitAdd('perennial', 'data/active-runnables');
      case 25:
        _context.next = 27;
        return gitAdd('perennial', 'data/active-sims');
      case 27:
        _context.next = 29;
        return gitAdd('perennial', 'data/unit-tests');
      case 29:
        _context.next = 31;
        return gitAdd('perennial', 'data/phet-io');
      case 31:
        _context.next = 33;
        return gitAdd('perennial', 'data/phet-io-api-stable');
      case 33:
        _context.next = 35;
        return gitIsClean('perennial');
      case 35:
        hasChanges = !_context.sent;
        if (!hasChanges) {
          _context.next = 44;
          break;
        }
        winston.info('Changes to data files detected, will push');
        _context.next = 40;
        return gitCommit('perennial', 'Automated update of perennial data files');
      case 40:
        _context.next = 42;
        return gitPush('perennial', 'main');
      case 42:
        _context.next = 45;
        break;
      case 44:
        winston.info('No changes detected');
      case 45:
      case "end":
        return _context.stop();
    }
  }, _callee);
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZSIsInQiLCJyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibiIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJrZXkiLCJpbmZvIiwiZXJyb3IiLCJfYXN5bmNUb0dlbmVyYXRvciIsImZuIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsImdldEFjdGl2ZVJlcG9zIiwicmVxdWlyZSIsImdldEJyYW5jaCIsImdpdEFkZCIsImdpdENvbW1pdCIsImdpdElzQ2xlYW4iLCJnaXRQdXNoIiwiYXNzZXJ0IiwiZnMiLCJncnVudCIsIm9zIiwid2luc3RvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJfY2FsbGVlIiwiYWN0aXZlUmVwb3MiLCJ3cml0ZUxpc3QiLCJoYXNDaGFuZ2VzIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsIl93cml0ZUxpc3QiLCJwYWNrYWdlRmlsdGVyIiwicmVwb3MiLCJmaWx0ZXIiLCJyZXBvIiwiZmlsZSIsImV4aXN0cyIsImNvbmNhdCIsInBhY2thZ2VPYmplY3QiLCJKU09OIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJwaGV0IiwibG9nIiwid3JpdGVsbiIsIndyaXRlRmlsZVN5bmMiLCJqb2luIiwiRU9MIiwidDEiLCJ0MCIsImZhaWwiLCJmYXRhbCIsInNpbUZlYXR1cmVzIiwic3VwcG9ydHNJbnRlcmFjdGl2ZURlc2NyaXB0aW9uIiwic3VwcG9ydHNWb2ljaW5nIiwicnVubmFibGUiLCJzaW11bGF0aW9uIiwiZ2VuZXJhdGVkVW5pdFRlc3RzIiwic3VwcG9ydGVkQnJhbmRzIiwiaW5jbHVkZXMiLCJjb21wYXJlRGVzaWduZWRBUElDaGFuZ2VzIl0sInNvdXJjZXMiOlsiZ2VuZXJhdGVEYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgdGhlIGxpc3RzIHVuZGVyIHBlcmVubmlhbC9kYXRhLywgYW5kIGlmIHRoZXJlIHdlcmUgY2hhbmdlcywgd2lsbCBjb21taXQgYW5kIHB1c2guXHJcbiAqXHJcbiAqIFRoaXMgZ3J1bnQgdGFzayBzaG91bGQgYmUgcnVuIG1hbnVhbGx5IGJ5IGRldmVsb3BlcnMgd2hlbiBhIGNoYW5nZSBoYXMgYmVlbiBtYWRlIHRoYXQgd291bGQgYWRkIG9yIHJlbW92ZVxyXG4gKiBhbiBlbnRyeSBmcm9tIG9uZSBvZiB0aGUgcGVyZW5uaWFsL2RhdGEvIGxpc3RzLiBCdXQgaXQgd2lsbCBhbHNvIGJlIHJ1biBhcyBwYXJ0IG9mIGRhaWx5LWdydW50LXdvcmsuc2hcclxuICogdG8gY2F0Y2ggYW55dGhpbmcgdGhhdCB3YXMgZm9yZ290dGVuLlxyXG4gKlxyXG4gKiBUaGlzIHVzZWQgdG8gYmUgcnVuIGF1dG9tYXRpY2FsbHkgYnkgYmF5ZXMgd2hlbmV2ZXIgYSByZWxldmFudCBjaGFuZ2Ugd2FzIG1hZGUsIHNlZVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGVyZW5uaWFsL2lzc3Vlcy82NlxyXG4gKlxyXG4gKiBCdXQgd2UgZGVjaWRlZCB0byBjaGFuZ2UgaXQgdG8gYSBtYW51YWwgc3RlcCB3aXRoIGEgZGFpbHkgZmFsbGJhY2ssIHNlZVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGVyZW5uaWFsL2lzc3Vlcy8yMTNcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmNvbnN0IGdldEFjdGl2ZVJlcG9zID0gcmVxdWlyZSggJy4uL2NvbW1vbi9nZXRBY3RpdmVSZXBvcycgKTtcclxuY29uc3QgZ2V0QnJhbmNoID0gcmVxdWlyZSggJy4uL2NvbW1vbi9nZXRCcmFuY2gnICk7XHJcbmNvbnN0IGdpdEFkZCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0QWRkJyApO1xyXG5jb25zdCBnaXRDb21taXQgPSByZXF1aXJlKCAnLi4vY29tbW9uL2dpdENvbW1pdCcgKTtcclxuY29uc3QgZ2l0SXNDbGVhbiA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0SXNDbGVhbicgKTtcclxuY29uc3QgZ2l0UHVzaCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0UHVzaCcgKTtcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSggJ2Fzc2VydCcgKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZnMnICk7XHJcbmNvbnN0IGdydW50ID0gcmVxdWlyZSggJ2dydW50JyApO1xyXG5jb25zdCBvcyA9IHJlcXVpcmUoICdvcycgKTtcclxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoICd3aW5zdG9uJyApO1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyB0aGUgbGlzdHMgdW5kZXIgcGVyZW5uaWFsL2RhdGEvLCBhbmQgaWYgdGhlcmUgd2VyZSBjaGFuZ2VzLCB3aWxsIGNvbW1pdCBhbmQgcHVzaC5cclxuICogQHB1YmxpY1xyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbigpIHtcclxuICBpZiAoIGF3YWl0IGdldEJyYW5jaCggJ3BlcmVubmlhbCcgKSAhPT0gJ21haW4nIHx8ICFhd2FpdCBnaXRJc0NsZWFuKCAncGVyZW5uaWFsJyApICkge1xyXG4gICAgZ3J1bnQuZmFpbC5mYXRhbCggJ0RhdGEgd2lsbCBvbmx5IGJlIGdlbmVyYXRlZCBpZiBwZXJlbm5pYWwgaXMgb24gbWFpbiB3aXRoIG5vIHdvcmtpbmctY29weSBjaGFuZ2VzLicgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGFjdGl2ZVJlcG9zID0gZ2V0QWN0aXZlUmVwb3MoKTtcclxuXHJcbiAgZnVuY3Rpb24gd3JpdGVMaXN0KCBuYW1lLCBwYWNrYWdlRmlsdGVyICkge1xyXG4gICAgY29uc3QgcmVwb3MgPSBhY3RpdmVSZXBvcy5maWx0ZXIoIHJlcG8gPT4ge1xyXG4gICAgICAvLyBNYWtlIHN1cmUgdGhhdCBpZiBzb21lb25lIGRvZXNuJ3QgaGF2ZSBhbGwgcmVwb3NpdG9yaWVzIGNoZWNrZWQgb3V0IHRoYXQgdGhpcyB3aWxsIEZBSUwuIE90aGVyd2lzZSBiYWQgdGhpbmdzLlxyXG4gICAgICBhc3NlcnQoIGdydW50LmZpbGUuZXhpc3RzKCBgLi4vJHtyZXBvfWAgKSApO1xyXG5cclxuICAgICAgbGV0IHBhY2thZ2VPYmplY3Q7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcGFja2FnZU9iamVjdCA9IEpTT04ucGFyc2UoIGZzLnJlYWRGaWxlU3luYyggYC4uLyR7cmVwb30vcGFja2FnZS5qc29uYCwgJ3V0ZjgnICkgKTtcclxuICAgICAgfVxyXG4gICAgICBjYXRjaCggZSApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHBhY2thZ2VPYmplY3QucGhldCAmJiBwYWNrYWdlRmlsdGVyKCBwYWNrYWdlT2JqZWN0LnBoZXQgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBncnVudC5sb2cud3JpdGVsbiggYFdyaXRpbmcgdG8gZGF0YS8ke25hbWV9YCApO1xyXG4gICAgZnMud3JpdGVGaWxlU3luYyggYGRhdGEvJHtuYW1lfWAsIHJlcG9zLmpvaW4oIG9zLkVPTCApICsgb3MuRU9MICk7XHJcbiAgfVxyXG5cclxuICB3cml0ZUxpc3QoICdpbnRlcmFjdGl2ZS1kZXNjcmlwdGlvbicsIHBoZXQgPT4gcGhldC5zaW1GZWF0dXJlcyAmJiBwaGV0LnNpbUZlYXR1cmVzLnN1cHBvcnRzSW50ZXJhY3RpdmVEZXNjcmlwdGlvbiApO1xyXG4gIHdyaXRlTGlzdCggJ3ZvaWNpbmcnLCBwaGV0ID0+IHBoZXQuc2ltRmVhdHVyZXMgJiYgcGhldC5zaW1GZWF0dXJlcy5zdXBwb3J0c1ZvaWNpbmcgKTtcclxuICB3cml0ZUxpc3QoICdhY3RpdmUtcnVubmFibGVzJywgcGhldCA9PiBwaGV0LnJ1bm5hYmxlICk7XHJcbiAgd3JpdGVMaXN0KCAnYWN0aXZlLXNpbXMnLCBwaGV0ID0+IHBoZXQuc2ltdWxhdGlvbiApO1xyXG4gIHdyaXRlTGlzdCggJ3VuaXQtdGVzdHMnLCBwaGV0ID0+IHBoZXQuZ2VuZXJhdGVkVW5pdFRlc3RzICk7XHJcbiAgd3JpdGVMaXN0KCAncGhldC1pbycsIHBoZXQgPT4gcGhldC5ydW5uYWJsZSAmJiBwaGV0LnN1cHBvcnRlZEJyYW5kcyAmJiBwaGV0LnN1cHBvcnRlZEJyYW5kcy5pbmNsdWRlcyggJ3BoZXQtaW8nICkgKTtcclxuICB3cml0ZUxpc3QoICdwaGV0LWlvLWFwaS1zdGFibGUnLCBwaGV0ID0+IHtcclxuICAgIHJldHVybiBwaGV0LnJ1bm5hYmxlICYmIHBoZXQuc3VwcG9ydGVkQnJhbmRzICYmIHBoZXQuc3VwcG9ydGVkQnJhbmRzLmluY2x1ZGVzKCAncGhldC1pbycgKSAmJlxyXG4gICAgICAgICAgIHBoZXRbICdwaGV0LWlvJyBdICYmIHBoZXRbICdwaGV0LWlvJyBdLmNvbXBhcmVEZXNpZ25lZEFQSUNoYW5nZXM7XHJcbiAgfSApO1xyXG5cclxuICBhd2FpdCBnaXRBZGQoICdwZXJlbm5pYWwnLCAnZGF0YS9pbnRlcmFjdGl2ZS1kZXNjcmlwdGlvbicgKTtcclxuICBhd2FpdCBnaXRBZGQoICdwZXJlbm5pYWwnLCAnZGF0YS92b2ljaW5nJyApO1xyXG4gIGF3YWl0IGdpdEFkZCggJ3BlcmVubmlhbCcsICdkYXRhL2FjdGl2ZS1ydW5uYWJsZXMnICk7XHJcbiAgYXdhaXQgZ2l0QWRkKCAncGVyZW5uaWFsJywgJ2RhdGEvYWN0aXZlLXNpbXMnICk7XHJcbiAgYXdhaXQgZ2l0QWRkKCAncGVyZW5uaWFsJywgJ2RhdGEvdW5pdC10ZXN0cycgKTtcclxuICBhd2FpdCBnaXRBZGQoICdwZXJlbm5pYWwnLCAnZGF0YS9waGV0LWlvJyApO1xyXG4gIGF3YWl0IGdpdEFkZCggJ3BlcmVubmlhbCcsICdkYXRhL3BoZXQtaW8tYXBpLXN0YWJsZScgKTtcclxuXHJcbiAgY29uc3QgaGFzQ2hhbmdlcyA9ICFhd2FpdCBnaXRJc0NsZWFuKCAncGVyZW5uaWFsJyApO1xyXG4gIGlmICggaGFzQ2hhbmdlcyApIHtcclxuICAgIHdpbnN0b24uaW5mbyggJ0NoYW5nZXMgdG8gZGF0YSBmaWxlcyBkZXRlY3RlZCwgd2lsbCBwdXNoJyApO1xyXG4gICAgYXdhaXQgZ2l0Q29tbWl0KCAncGVyZW5uaWFsJywgJ0F1dG9tYXRlZCB1cGRhdGUgb2YgcGVyZW5uaWFsIGRhdGEgZmlsZXMnICk7XHJcbiAgICBhd2FpdCBnaXRQdXNoKCAncGVyZW5uaWFsJywgJ21haW4nICk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgd2luc3Rvbi5pbmZvKCAnTm8gY2hhbmdlcyBkZXRlY3RlZCcgKTtcclxuICB9XHJcbn07Il0sIm1hcHBpbmdzIjoiOzs7K0NBQ0EscUpBQUFBLG1CQUFBLFlBQUFBLG9CQUFBLFdBQUFDLENBQUEsU0FBQUMsQ0FBQSxFQUFBRCxDQUFBLE9BQUFFLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxTQUFBLEVBQUFDLENBQUEsR0FBQUgsQ0FBQSxDQUFBSSxjQUFBLEVBQUFDLENBQUEsR0FBQUosTUFBQSxDQUFBSyxjQUFBLGNBQUFQLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLElBQUFELENBQUEsQ0FBQUQsQ0FBQSxJQUFBRSxDQUFBLENBQUFPLEtBQUEsS0FBQUMsQ0FBQSx3QkFBQUMsTUFBQSxHQUFBQSxNQUFBLE9BQUFDLENBQUEsR0FBQUYsQ0FBQSxDQUFBRyxRQUFBLGtCQUFBQyxDQUFBLEdBQUFKLENBQUEsQ0FBQUssYUFBQSx1QkFBQUMsQ0FBQSxHQUFBTixDQUFBLENBQUFPLFdBQUEsOEJBQUFDLE9BQUFqQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxXQUFBQyxNQUFBLENBQUFLLGNBQUEsQ0FBQVAsQ0FB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