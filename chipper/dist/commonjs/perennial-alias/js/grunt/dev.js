"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2017-2019, University of Colorado Boulder

/**
 * Deploys a dev version after incrementing the test version number.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var SimVersion = require('../common/SimVersion');
var booleanPrompt = require('../common/booleanPrompt');
var build = require('../common/build');
var buildLocal = require('../common/buildLocal');
var devDirectoryExists = require('../common/devDirectoryExists');
var devScp = require('../common/devScp');
var devSsh = require('../common/devSsh');
var getBranch = require('../common/getBranch');
var getRemoteBranchSHAs = require('../common/getRemoteBranchSHAs');
var getRepoVersion = require('../common/getRepoVersion');
var gitIsClean = require('../common/gitIsClean');
var getDependencyRepos = require('../common/getDependencyRepos');
var gitPush = require('../common/gitPush');
var gitRevParse = require('../common/gitRevParse');
var lintAllRunnable = require('../common/lintAllRunnable');
var npmUpdate = require('../common/npmUpdate');
var setRepoVersion = require('../common/setRepoVersion');
var updateDependenciesJSON = require('../common/updateDependenciesJSON');
var updateHTMLVersion = require('../common/updateHTMLVersion');
var vpnCheck = require('../common/vpnCheck');
var writePhetioHtaccess = require('../common/writePhetioHtaccess');
var assert = require('assert');
var grunt = require('grunt');

/**
 * Deploys a dev version after incrementing the test version number.
 * @public
 *
 * @param {string} repo
 * @param {Array.<string>} brands
 * @param {boolean} noninteractive
 * @param {string} branch - 'main' for normal dev deploys, otherwise is the name of a one-off branch
 * @param {string} [message] - Optional message to append to the version-increment commit.
 * @returns {Promise}
 */
module.exports = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(repo, brands, noninteractive, branch, message) {
    var isOneOff, testType, currentBranch, previousVersion, dependencies, i, dependency, isClean, currentSHA, latestSHA, supportedBrands, version, versionString, simPath, versionPath, simPathExists, versionPathExists, _iterator, _step, brand, htaccessLocation, versionURL;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          isOneOff = branch !== 'main';
          testType = isOneOff ? branch : 'dev';
          if (isOneOff) {
            assert(!branch.includes('-'), 'One-off versions should be from branches that do not include hyphens');
          }
          _context.next = 5;
          return vpnCheck();
        case 5:
          if (_context.sent) {
            _context.next = 7;
            break;
          }
          grunt.fail.fatal('VPN or being on campus is required for this build. Ensure VPN is enabled, or that you have access to phet-server2.int.colorado.edu');
        case 7:
          _context.next = 9;
          return getBranch(repo);
        case 9:
          currentBranch = _context.sent;
          if (currentBranch !== branch) {
            grunt.fail.fatal("".concat(testType, " deployment should be on the branch ").concat(branch, ", not: ").concat(currentBranch ? currentBranch : '(detached head)'));
          }
          _context.next = 13;
          return getRepoVersion(repo);
        case 13:
          previousVersion = _context.sent;
          if (previousVersion.testType !== testType) {
            if (isOneOff) {
              grunt.fail.fatal("The current version identifier is not a one-off version (should be something like ".concat(previousVersion.major, ".").concat(previousVersion.minor, ".").concat(previousVersion.maintenance, "-").concat(testType, ".").concat(previousVersion.testNumber === null ? '0' : previousVersion.testNumber, "), aborting."));
            } else {
              grunt.fail.fatal('The current version identifier is not a dev version, aborting.');
            }
          }
          _context.next = 17;
          return getDependencyRepos(repo);
        case 17:
          dependencies = _context.sent;
          i = 0;
        case 19:
          if (!(i < dependencies.length)) {
            _context.next = 29;
            break;
          }
          dependency = dependencies[i];
          _context.next = 23;
          return gitIsClean(dependency);
        case 23:
          isClean = _context.sent;
          if (isClean) {
            _context.next = 26;
            break;
          }
          throw new Error("Unclean status in ".concat(dependency, ", cannot deploy"));
        case 26:
          i++;
          _context.next = 19;
          break;
        case 29:
          _context.next = 31;
          return gitRevParse(repo, 'HEAD');
        case 31:
          currentSHA = _context.sent;
          _context.next = 34;
          return getRemoteBranchSHAs(repo);
        case 34:
          _context.t0 = branch;
          latestSHA = _context.sent[_context.t0];
          if (currentSHA !== latestSHA) {
            // See https://github.com/phetsims/chipper/issues/699
            grunt.fail.fatal("Out of date with remote, please push or pull repo. Current SHA: ".concat(currentSHA, ", latest SHA: ").concat(latestSHA));
          }

          // Ensure we don't try to request an unsupported brand
          supportedBrands = grunt.file.readJSON("../".concat(repo, "/package.json")).phet.supportedBrands || [];
          brands.forEach(function (brand) {
            return assert(supportedBrands.includes(brand), "Brand ".concat(brand, " not included in ").concat(repo, "'s supported brands: ").concat(supportedBrands.join(',')));
          });

          // Ensure that the repository and its dependencies pass lint before continuing.
          // See https://github.com/phetsims/perennial/issues/76
          _context.next = 41;
          return lintAllRunnable(repo);
        case 41:
          // Bump the version
          version = new SimVersion(previousVersion.major, previousVersion.minor, previousVersion.maintenance, {
            testType: testType,
            testNumber: previousVersion.testNumber + 1
          });
          versionString = version.toString();
          simPath = buildLocal.devDeployPath + repo;
          versionPath = "".concat(simPath, "/").concat(versionString);
          _context.next = 47;
          return devDirectoryExists(simPath);
        case 47:
          simPathExists = _context.sent;
          _context.next = 50;
          return devDirectoryExists(versionPath);
        case 50:
          versionPathExists = _context.sent;
          if (versionPathExists) {
            grunt.fail.fatal("Directory ".concat(versionPath, " already exists.  If you intend to replace the content then remove the directory manually from ").concat(buildLocal.devDeployServer, "."));
          }
          _context.next = 54;
          return booleanPrompt("Deploy ".concat(versionString, " to ").concat(buildLocal.devDeployServer), noninteractive);
        case 54:
          if (_context.sent) {
            _context.next = 56;
            break;
          }
          grunt.fail.fatal("Aborted ".concat(testType, " deploy"));
        case 56:
          _context.next = 58;
          return npmUpdate(repo);
        case 58:
          _context.next = 60;
          return npmUpdate('chipper');
        case 60:
          _context.next = 62;
          return npmUpdate('perennial-alias');
        case 62:
          _context.next = 64;
          return setRepoVersion(repo, version, message);
        case 64:
          _context.next = 66;
          return updateHTMLVersion(repo);
        case 66:
          _context.next = 68;
          return gitPush(repo, branch);
        case 68:
          _context.t1 = grunt.log;
          _context.next = 71;
          return build(repo, {
            brands: brands,
            allHTML: true,
            debugHTML: true
          });
        case 71:
          _context.t2 = _context.sent;
          _context.t1.writeln.call(_context.t1, _context.t2);
          if (simPathExists) {
            _context.next = 76;
            break;
          }
          _context.next = 76;
          return devSsh("mkdir -p \"".concat(simPath, "\" && echo \"IndexOrderDefault Descending Date\n\" > \"").concat(simPath, "/.htaccess\""));
        case 76:
          _context.next = 78;
          return devSsh("mkdir -p \"".concat(versionPath, "\""));
        case 78:
          // Copy the build contents into the version-specific directory
          _iterator = _createForOfIteratorHelper(brands);
          _context.prev = 79;
          _iterator.s();
        case 81:
          if ((_step = _iterator.n()).done) {
            _context.next = 87;
            break;
          }
          brand = _step.value;
          _context.next = 85;
          return devScp("../".concat(repo, "/build/").concat(brand), "".concat(versionPath, "/"));
        case 85:
          _context.next = 81;
          break;
        case 87:
          _context.next = 92;
          break;
        case 89:
          _context.prev = 89;
          _context.t3 = _context["catch"](79);
          _iterator.e(_context.t3);
        case 92:
          _context.prev = 92;
          _iterator.f();
          return _context.finish(92);
        case 95:
          if (!(brands.includes('phet-io') && buildLocal.devDeployServer === 'bayes.colorado.edu')) {
            _context.next = 99;
            break;
          }
          htaccessLocation = "../".concat(repo, "/build/phet-io");
          _context.next = 99;
          return writePhetioHtaccess(htaccessLocation, null, versionPath);
        case 99:
          _context.next = 101;
          return updateDependenciesJSON(repo, brands, versionString, branch);
        case 101:
          versionURL = "https://phet-dev.colorado.edu/html/".concat(repo, "/").concat(versionString);
          if (brands.includes('phet')) {
            grunt.log.writeln("Deployed: ".concat(versionURL, "/phet/").concat(repo, "_all_phet.html"));
          }
          if (brands.includes('phet-io')) {
            grunt.log.writeln("Deployed: ".concat(versionURL, "/phet-io/"));
          }
        case 104:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[79, 89, 92, 95]]);
  }));
  return function (_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,