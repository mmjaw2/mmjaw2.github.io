"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2017, University of Colorado Boulder

/**
 * For `grunt create-release`, see Gruntfile for details
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var SimVersion = require('../common/SimVersion');
var build = require('../common/build');
var copyFile = require('../common/copyFile');
var getBranch = require('../common/getBranch');
var gitAdd = require('../common/gitAdd');
var gitCheckout = require('../common/gitCheckout');
var gitCommit = require('../common/gitCommit');
var gitCreateBranch = require('../common/gitCreateBranch');
var gitIsClean = require('../common/gitIsClean');
var gitPush = require('../common/gitPush');
var hasRemoteBranch = require('../common/hasRemoteBranch');
var npmUpdate = require('../common/npmUpdate');
var setRepoVersion = require('../common/setRepoVersion');
var setRepoSupportedBrands = require('../common/setRepoSupportedBrands');
var updateHTMLVersion = require('../common/updateHTMLVersion');
var assert = require('assert');
var grunt = require('grunt');
var winston = require('../../../../../../perennial-alias/node_modules/winston');

/**
 * For `grunt create-release`, see Gruntfile for details
 * @public
 *
 * @param {string} repo - The repository name
 * @param {string} branch - The branch to create (should be {{MAJOR}}.{{MINOR}})
 * @param {string[]} brands - the supported brands in the release
 * @param {string} [message] - Optional message to append to the brands/version-increment commit.
 * @returns {Promise}
 */
module.exports = /*#__PURE__*/function () {
  var _createRelease = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(repo, branch, brands, message) {
    var major, minor, currentBranch, hasBranchAlready, newVersion, isClean, brand;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          major = Number(branch.split('.')[0]);
          minor = Number(branch.split('.')[1]);
          assert(major > 0, 'Major version for a branch should be greater than zero');
          assert(minor >= 0, 'Minor version for a branch should be greater than (or equal) to zero');
          assert(Array.isArray(brands), 'supported brands required');
          assert(brands.length >= 1, 'must have a supported brand');
          _context.next = 8;
          return getBranch(repo);
        case 8:
          currentBranch = _context.sent;
          if (currentBranch !== 'main') {
            grunt.fail.fatal("Should be on main to create a release branch, not: ".concat(currentBranch ? currentBranch : '(detached head)'));
          }
          _context.next = 12;
          return hasRemoteBranch(repo, branch);
        case 12:
          hasBranchAlready = _context.sent;
          if (hasBranchAlready) {
            grunt.fail.fatal('Branch already exists, aborting');
          }
          newVersion = new SimVersion(major, minor, 0, {
            testType: 'rc',
            testNumber: 0
          });
          _context.next = 17;
          return gitIsClean(repo);
        case 17:
          isClean = _context.sent;
          if (isClean) {
            _context.next = 20;
            break;
          }
          throw new Error("Unclean status in ".concat(repo, ", cannot create release branch"));
        case 20:
          winston.info('Setting the release branch version to rc.0 so it will auto-increment to rc.1 for the first RC deployment');

          // Create the branch, update the version info
          _context.next = 23;
          return gitCreateBranch(repo, branch);
        case 23:
          _context.next = 25;
          return setRepoSupportedBrands(repo, brands);
        case 25:
          _context.next = 27;
          return setRepoVersion(repo, newVersion, message);
        case 27:
          _context.next = 29;
          return gitPush(repo, branch);
        case 29:
          _context.next = 31;
          return npmUpdate(repo);
        case 31:
          _context.next = 33;
          return npmUpdate('chipper');
        case 33:
          _context.next = 35;
          return npmUpdate('perennial-alias');
        case 35:
          brand = brands[0];
          _context.next = 38;
          return build(repo, {
            brands: [brand]
          });
        case 38:
          _context.next = 40;
          return copyFile("../".concat(repo, "/build/").concat(brand, "/dependencies.json"), "../".concat(repo, "/dependencies.json"));
        case 40:
          _context.next = 42;
          return gitAdd(repo, 'dependencies.json');
        case 42:
          _context.next = 44;
          return gitCommit(repo, "updated dependencies.json for version ".concat(newVersion.toString()));
        case 44:
          _context.next = 46;
          return gitPush(repo, branch);
        case 46:
          _context.next = 48;
          return gitCheckout(repo, 'main');
        case 48:
          _context.next = 50;
          return setRepoVersion(repo, new SimVersion(major, minor + 1, 0, {
            testType: 'dev',
            testNumber: 0
          }), message);
        case 50:
          _context.next = 52;
          return updateHTMLVersion(repo);
        case 52:
          _context.next = 54;
          return gitPush(repo, 'main');
        case 54:
          _context.next = 56;
          return gitCheckout(repo, branch);
        case 56:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  function createRelease(_x, _x2, _x3, _x4) {
    return _createRelease.apply(this, arguments);
  }
  return createRelease;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZSIsInQiLCJyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibiIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJrZXkiLCJpbmZvIiwiZXJyb3IiLCJfYXN5bmNUb0dlbmVyYXRvciIsImZuIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsIlNpbVZlcnNpb24iLCJyZXF1aXJlIiwiYnVpbGQiLCJjb3B5RmlsZSIsImdldEJyYW5jaCIsImdpdEFkZCIsImdpdENoZWNrb3V0IiwiZ2l0Q29tbWl0IiwiZ2l0Q3JlYXRlQnJhbmNoIiwiZ2l0SXNDbGVhbiIsImdpdFB1c2giLCJoYXNSZW1vdGVCcmFuY2giLCJucG1VcGRhdGUiLCJzZXRSZXBvVmVyc2lvbiIsInNldFJlcG9TdXBwb3J0ZWRCcmFuZHMiLCJ1cGRhdGVIVE1MVmVyc2lvbiIsImFzc2VydCIsImdydW50Iiwid2luc3RvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJfY3JlYXRlUmVsZWFzZSIsIl9jYWxsZWUiLCJyZXBvIiwiYnJhbmNoIiwiYnJhbmRzIiwibWVzc2FnZSIsIm1ham9yIiwibWlub3IiLCJjdXJyZW50QnJhbmNoIiwiaGFzQnJhbmNoQWxyZWFkeSIsIm5ld1ZlcnNpb24iLCJpc0NsZWFuIiwiYnJhbmQiLCJfY2FsbGVlJCIsIl9jb250ZXh0IiwiTnVtYmVyIiwic3BsaXQiLCJBcnJheSIsImlzQXJyYXkiLCJmYWlsIiwiZmF0YWwiLCJjb25jYXQiLCJ0ZXN0VHlwZSIsInRlc3ROdW1iZXIiLCJ0b1N0cmluZyIsImNyZWF0ZVJlbGVhc2UiLCJfeCIsIl94MiIsIl94MyIsIl94NCJdLCJzb3VyY2VzIjpbImNyZWF0ZVJlbGVhc2UuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTcsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEZvciBgZ3J1bnQgY3JlYXRlLXJlbGVhc2VgLCBzZWUgR3J1bnRmaWxlIGZvciBkZXRhaWxzXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5jb25zdCBTaW1WZXJzaW9uID0gcmVxdWlyZSggJy4uL2NvbW1vbi9TaW1WZXJzaW9uJyApO1xyXG5jb25zdCBidWlsZCA9IHJlcXVpcmUoICcuLi9jb21tb24vYnVpbGQnICk7XHJcbmNvbnN0IGNvcHlGaWxlID0gcmVxdWlyZSggJy4uL2NvbW1vbi9jb3B5RmlsZScgKTtcclxuY29uc3QgZ2V0QnJhbmNoID0gcmVxdWlyZSggJy4uL2NvbW1vbi9nZXRCcmFuY2gnICk7XHJcbmNvbnN0IGdpdEFkZCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0QWRkJyApO1xyXG5jb25zdCBnaXRDaGVja291dCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0Q2hlY2tvdXQnICk7XHJcbmNvbnN0IGdpdENvbW1pdCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0Q29tbWl0JyApO1xyXG5jb25zdCBnaXRDcmVhdGVCcmFuY2ggPSByZXF1aXJlKCAnLi4vY29tbW9uL2dpdENyZWF0ZUJyYW5jaCcgKTtcclxuY29uc3QgZ2l0SXNDbGVhbiA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0SXNDbGVhbicgKTtcclxuY29uc3QgZ2l0UHVzaCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0UHVzaCcgKTtcclxuY29uc3QgaGFzUmVtb3RlQnJhbmNoID0gcmVxdWlyZSggJy4uL2NvbW1vbi9oYXNSZW1vdGVCcmFuY2gnICk7XHJcbmNvbnN0IG5wbVVwZGF0ZSA9IHJlcXVpcmUoICcuLi9jb21tb24vbnBtVXBkYXRlJyApO1xyXG5jb25zdCBzZXRSZXBvVmVyc2lvbiA9IHJlcXVpcmUoICcuLi9jb21tb24vc2V0UmVwb1ZlcnNpb24nICk7XHJcbmNvbnN0IHNldFJlcG9TdXBwb3J0ZWRCcmFuZHMgPSByZXF1aXJlKCAnLi4vY29tbW9uL3NldFJlcG9TdXBwb3J0ZWRCcmFuZHMnICk7XHJcbmNvbnN0IHVwZGF0ZUhUTUxWZXJzaW9uID0gcmVxdWlyZSggJy4uL2NvbW1vbi91cGRhdGVIVE1MVmVyc2lvbicgKTtcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSggJ2Fzc2VydCcgKTtcclxuY29uc3QgZ3J1bnQgPSByZXF1aXJlKCAnZ3J1bnQnICk7XHJcbmNvbnN0IHdpbnN0b24gPSByZXF1aXJlKCAnd2luc3RvbicgKTtcclxuXHJcbi8qKlxyXG4gKiBGb3IgYGdydW50IGNyZWF0ZS1yZWxlYXNlYCwgc2VlIEdydW50ZmlsZSBmb3IgZGV0YWlsc1xyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBvIC0gVGhlIHJlcG9zaXRvcnkgbmFtZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnJhbmNoIC0gVGhlIGJyYW5jaCB0byBjcmVhdGUgKHNob3VsZCBiZSB7e01BSk9SfX0ue3tNSU5PUn19KVxyXG4gKiBAcGFyYW0ge3N0cmluZ1tdfSBicmFuZHMgLSB0aGUgc3VwcG9ydGVkIGJyYW5kcyBpbiB0aGUgcmVsZWFzZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdIC0gT3B0aW9uYWwgbWVzc2FnZSB0byBhcHBlbmQgdG8gdGhlIGJyYW5kcy92ZXJzaW9uLWluY3JlbWVudCBjb21taXQuXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlfVxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbiBjcmVhdGVSZWxlYXNlKCByZXBvLCBicmFuY2gsIGJyYW5kcywgbWVzc2FnZSApIHtcclxuICBjb25zdCBtYWpvciA9IE51bWJlciggYnJhbmNoLnNwbGl0KCAnLicgKVsgMCBdICk7XHJcbiAgY29uc3QgbWlub3IgPSBOdW1iZXIoIGJyYW5jaC5zcGxpdCggJy4nIClbIDEgXSApO1xyXG4gIGFzc2VydCggbWFqb3IgPiAwLCAnTWFqb3IgdmVyc2lvbiBmb3IgYSBicmFuY2ggc2hvdWxkIGJlIGdyZWF0ZXIgdGhhbiB6ZXJvJyApO1xyXG4gIGFzc2VydCggbWlub3IgPj0gMCwgJ01pbm9yIHZlcnNpb24gZm9yIGEgYnJhbmNoIHNob3VsZCBiZSBncmVhdGVyIHRoYW4gKG9yIGVxdWFsKSB0byB6ZXJvJyApO1xyXG5cclxuICBhc3NlcnQoIEFycmF5LmlzQXJyYXkoIGJyYW5kcyApLCAnc3VwcG9ydGVkIGJyYW5kcyByZXF1aXJlZCcgKTtcclxuICBhc3NlcnQoIGJyYW5kcy5sZW5ndGggPj0gMSwgJ211c3QgaGF2ZSBhIHN1cHBvcnRlZCBicmFuZCcgKTtcclxuXHJcbiAgY29uc3QgY3VycmVudEJyYW5jaCA9IGF3YWl0IGdldEJyYW5jaCggcmVwbyApO1xyXG4gIGlmICggY3VycmVudEJyYW5jaCAhPT0gJ21haW4nICkge1xyXG4gICAgZ3J1bnQuZmFpbC5mYXRhbCggYFNob3VsZCBiZSBvbiBtYWluIHRvIGNyZWF0ZSBhIHJlbGVhc2UgYnJhbmNoLCBub3Q6ICR7Y3VycmVudEJyYW5jaCA/IGN1cnJlbnRCcmFuY2ggOiAnKGRldGFjaGVkIGhlYWQpJ31gICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBoYXNCcmFuY2hBbHJlYWR5ID0gYXdhaXQgaGFzUmVtb3RlQnJhbmNoKCByZXBvLCBicmFuY2ggKTtcclxuICBpZiAoIGhhc0JyYW5jaEFscmVhZHkgKSB7XHJcbiAgICBncnVudC5mYWlsLmZhdGFsKCAnQnJhbmNoIGFscmVhZHkgZXhpc3RzLCBhYm9ydGluZycgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IG5ld1ZlcnNpb24gPSBuZXcgU2ltVmVyc2lvbiggbWFqb3IsIG1pbm9yLCAwLCB7XHJcbiAgICB0ZXN0VHlwZTogJ3JjJyxcclxuICAgIHRlc3ROdW1iZXI6IDBcclxuICB9ICk7XHJcblxyXG4gIGNvbnN0IGlzQ2xlYW4gPSBhd2FpdCBnaXRJc0NsZWFuKCByZXBvICk7XHJcbiAgaWYgKCAhaXNDbGVhbiApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggYFVuY2xlYW4gc3RhdHVzIGluICR7cmVwb30sIGNhbm5vdCBjcmVhdGUgcmVsZWFzZSBicmFuY2hgICk7XHJcbiAgfVxyXG5cclxuICB3aW5zdG9uLmluZm8oICdTZXR0aW5nIHRoZSByZWxlYXNlIGJyYW5jaCB2ZXJzaW9uIHRvIHJjLjAgc28gaXQgd2lsbCBhdXRvLWluY3JlbWVudCB0byByYy4xIGZvciB0aGUgZmlyc3QgUkMgZGVwbG95bWVudCcgKTtcclxuXHJcbiAgLy8gQ3JlYXRlIHRoZSBicmFuY2gsIHVwZGF0ZSB0aGUgdmVyc2lvbiBpbmZvXHJcbiAgYXdhaXQgZ2l0Q3JlYXRlQnJhbmNoKCByZXBvLCBicmFuY2ggKTtcclxuICBhd2FpdCBzZXRSZXBvU3VwcG9ydGVkQnJhbmRzKCByZXBvLCBicmFuZHMgKTtcclxuICBhd2FpdCBzZXRSZXBvVmVyc2lvbiggcmVwbywgbmV3VmVyc2lvbiwgbWVzc2FnZSApO1xyXG4gIGF3YWl0IGdpdFB1c2goIHJlcG8sIGJyYW5jaCApO1xyXG5cclxuICAvLyBVcGRhdGUgZGVwZW5kZW5jaWVzLmpzb24gZm9yIHRoZSByZWxlYXNlIGJyYW5jaFxyXG4gIGF3YWl0IG5wbVVwZGF0ZSggcmVwbyApO1xyXG4gIGF3YWl0IG5wbVVwZGF0ZSggJ2NoaXBwZXInICk7XHJcbiAgYXdhaXQgbnBtVXBkYXRlKCAncGVyZW5uaWFsLWFsaWFzJyApO1xyXG5cclxuICBjb25zdCBicmFuZCA9IGJyYW5kc1sgMCBdO1xyXG4gIGF3YWl0IGJ1aWxkKCByZXBvLCB7XHJcbiAgICBicmFuZHM6IFsgYnJhbmQgXVxyXG4gIH0gKTtcclxuICBhd2FpdCBjb3B5RmlsZSggYC4uLyR7cmVwb30vYnVpbGQvJHticmFuZH0vZGVwZW5kZW5jaWVzLmpzb25gLCBgLi4vJHtyZXBvfS9kZXBlbmRlbmNpZXMuanNvbmAgKTtcclxuICBhd2FpdCBnaXRBZGQoIHJlcG8sICdkZXBlbmRlbmNpZXMuanNvbicgKTtcclxuICBhd2FpdCBnaXRDb21taXQoIHJlcG8sIGB1cGRhdGVkIGRlcGVuZGVuY2llcy5qc29uIGZvciB2ZXJzaW9uICR7bmV3VmVyc2lvbi50b1N0cmluZygpfWAgKTtcclxuICBhd2FpdCBnaXRQdXNoKCByZXBvLCBicmFuY2ggKTtcclxuXHJcbiAgLy8gVXBkYXRlIHRoZSB2ZXJzaW9uIGluZm8gaW4gbWFpblxyXG4gIGF3YWl0IGdpdENoZWNrb3V0KCByZXBvLCAnbWFpbicgKTtcclxuICBhd2FpdCBzZXRSZXBvVmVyc2lvbiggcmVwbywgbmV3IFNpbVZlcnNpb24oIG1ham9yLCBtaW5vciArIDEsIDAsIHtcclxuICAgIHRlc3RUeXBlOiAnZGV2JyxcclxuICAgIHRlc3ROdW1iZXI6IDBcclxuICB9ICksIG1lc3NhZ2UgKTtcclxuICBhd2FpdCB1cGRhdGVIVE1MVmVyc2lvbiggcmVwbyApO1xyXG4gIGF3YWl0IGdpdFB1c2goIHJlcG8sICdtYWluJyApO1xyXG5cclxuICAvLyBHbyBiYWNrIHRvIHRoZSBicmFuY2ggKGFzIHRoZXkgbWF5IHdhbnQgdG8gZG8gYSBkZXBsb3kpXHJcbiAgYXdhaXQgZ2l0Q2hlY2tvdXQoIHJlcG8sIGJyYW5jaCApO1xyXG59OyJdLCJtYXBwaW5ncyI6Ijs7OytDQUNBLHFKQUFBQSxtQkFBQSxZQUFBQSxvQkFBQSxXQUFBQyxDQUFBLFNBQUFDLENBQUEsRUFBQUQsQ0FBQSxPQUFBRSxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsU0FBQSxFQUFBQyxDQUFBLEdBQUFILENBQUEsQ0FBQUksY0FBQSxFQUFBQyxDQUFBLEdBQUFKLE1BQUEsQ0FBQUssY0FBQSxjQUFBUCxDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxJQUFBRCxDQUFBLENBQUFELENBQUEsSUFBQUUsQ0FBQSxDQUFBTyxLQUFBLEtBQUFDLENBQUEsd0JBQUFDLE1B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