"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2017, University of Colorado Boulder

/**
 * Deploys an rc version after incrementing the test version number.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var SimVersion = require('../common/SimVersion');
var booleanPrompt = require('../common/booleanPrompt');
var build = require('../common/build');
var buildLocal = require('../common/buildLocal');
var buildServerRequest = require('../common/buildServerRequest');
var checkoutMain = require('../common/checkoutMain');
var checkoutTarget = require('../common/checkoutTarget');
var devDirectoryExists = require('../common/devDirectoryExists');
var getDependencies = require('../common/getDependencies');
var getRepoVersion = require('../common/getRepoVersion');
var gitCheckout = require('../common/gitCheckout');
var gitIsClean = require('../common/gitIsClean');
var gitPush = require('../common/gitPush');
var hasRemoteBranch = require('../common/hasRemoteBranch');
var loadJSON = require('../common/loadJSON');
var npmUpdate = require('../common/npmUpdate');
var setRepoVersion = require('../common/setRepoVersion');
var updateDependenciesJSON = require('../common/updateDependenciesJSON');
var vpnCheck = require('../common/vpnCheck');
var createRelease = require('./createRelease');
var grunt = require('grunt');

/**
 * Deploys an rc version after incrementing the test version number.
 * @public
 *
 * @param {string} repo
 * @param {string} branch
 * @param {Array.<string>} brands
 * @param {boolean} noninteractive
 * @param {string} [message] - Optional message to append to the version-increment commit.
 * @returns {Promise.<SimVersion>}
 */
module.exports = /*#__PURE__*/function () {
  var _rc = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(repo, branch, brands, noninteractive, message) {
    var isClean, packageObject, previousVersion, version, versionString, simPath, versionPath, versionPathExists, versionURL;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          SimVersion.ensureReleaseBranch(branch);
          _context.next = 3;
          return vpnCheck();
        case 3:
          if (_context.sent) {
            _context.next = 5;
            break;
          }
          grunt.fail.fatal('VPN or being on campus is required for this build. Ensure VPN is enabled, or that you have access to phet-server2.int.colorado.edu');
        case 5:
          _context.next = 7;
          return gitIsClean(repo);
        case 7:
          isClean = _context.sent;
          if (isClean) {
            _context.next = 10;
            break;
          }
          throw new Error("Unclean status in ".concat(repo, ", cannot create release branch"));
        case 10:
          _context.next = 12;
          return hasRemoteBranch(repo, branch);
        case 12:
          if (_context.sent) {
            _context.next = 22;
            break;
          }
          _context.t0 = noninteractive;
          if (_context.t0) {
            _context.next = 18;
            break;
          }
          _context.next = 17;
          return booleanPrompt("Release branch ".concat(branch, " does not exist. Create it?"), false);
        case 17:
          _context.t0 = !_context.sent;
        case 18:
          if (!_context.t0) {
            _context.next = 20;
            break;
          }
          throw new Error('Aborted rc deployment due to non-existing branch');
        case 20:
          _context.next = 22;
          return createRelease(repo, branch, brands);
        case 22:
          _context.next = 24;
          return gitCheckout(repo, branch);
        case 24:
          if (!brands.includes('phet-io')) {
            _context.next = 30;
            break;
          }
          _context.next = 27;
          return loadJSON("../".concat(repo, "/package.json"));
        case 27:
          packageObject = _context.sent;
          if (!(packageObject.phet['phet-io'] && packageObject.phet['phet-io'].hasOwnProperty('validation') && !packageObject.phet['phet-io'].validation)) {
            _context.next = 30;
            break;
          }
          throw new Error('PhET-iO simulations require validation for RCs');
        case 30:
          _context.next = 32;
          return checkoutTarget(repo, branch, true);
        case 32:
          _context.prev = 32;
          _context.next = 35;
          return getRepoVersion(repo);
        case 35:
          previousVersion = _context.sent;
          if (!(previousVersion.testType !== 'rc' && previousVersion.testType !== null)) {
            _context.next = 38;
            break;
          }
          throw new Error("Aborted rc deployment since the version number cannot be incremented safely (testType:".concat(previousVersion.testType, ")"));
        case 38:
          version = new SimVersion(previousVersion.major, previousVersion.minor, previousVersion.maintenance + (previousVersion.testType === null ? 1 : 0), {
            testType: 'rc',
            testNumber: previousVersion.testNumber ? previousVersion.testNumber + 1 : 1
          });
          versionString = version.toString();
          simPath = buildLocal.devDeployPath + repo;
          versionPath = "".concat(simPath, "/").concat(versionString);
          _context.next = 44;
          return devDirectoryExists(versionPath);
        case 44:
          versionPathExists = _context.sent;
          if (!versionPathExists) {
            _context.next = 47;
            break;
          }
          throw new Error("Directory ".concat(versionPath, " already exists.  If you intend to replace the content then remove the directory manually from ").concat(buildLocal.devDeployServer, "."));
        case 47:
          _context.next = 49;
          return booleanPrompt("Deploy ".concat(versionString, " to ").concat(buildLocal.devDeployServer), noninteractive);
        case 49:
          if (_context.sent) {
            _context.next = 51;
            break;
          }
          throw new Error('Aborted rc deployment');
        case 51:
          _context.next = 53;
          return setRepoVersion(repo, version, message);
        case 53:
          _context.next = 55;
          return gitPush(repo, branch);
        case 55:
          _context.next = 57;
          return npmUpdate(repo);
        case 57:
          _context.next = 59;
          return npmUpdate('chipper');
        case 59:
          _context.next = 61;
          return npmUpdate('perennial-alias');
        case 61:
          _context.t1 = grunt.log;
          _context.next = 64;
          return build(repo, {
            brands: brands,
            minify: !noninteractive
          });
        case 64:
          _context.t2 = _context.sent;
          _context.t1.writeln.call(_context.t1, _context.t2);
          _context.next = 68;
          return booleanPrompt("Please test the built version of ".concat(repo, ".\nIs it ready to deploy"), noninteractive);
        case 68:
          if (_context.sent) {
            _context.next = 76;
            break;
          }
          _context.next = 71;
          return setRepoVersion(repo, previousVersion, message);
        case 71:
          _context.next = 73;
          return gitPush(repo, branch);
        case 73:
          _context.next = 75;
          return checkoutMain(repo, true);
        case 75:
          throw new Error('Aborted rc deployment (aborted version change too).');
        case 76:
          _context.next = 78;
          return updateDependenciesJSON(repo, brands, versionString, branch);
        case 78:
          _context.t3 = buildServerRequest;
          _context.t4 = repo;
          _context.t5 = version;
          _context.t6 = branch;
          _context.next = 84;
          return getDependencies(repo);
        case 84:
          _context.t7 = _context.sent;
          _context.t8 = {
            locales: ['en'],
            brands: brands,
            servers: ['dev']
          };
          _context.next = 88;
          return (0, _context.t3)(_context.t4, _context.t5, _context.t6, _context.t7, _context.t8);
        case 88:
          _context.next = 90;
          return checkoutMain(repo, true);
        case 90:
          versionURL = "https://phet-dev.colorado.edu/html/".concat(repo, "/").concat(versionString);
          if (brands.includes('phet')) {
            grunt.log.writeln("Deployed: ".concat(versionURL, "/phet/").concat(repo, "_all_phet.html"));
          }
          if (brands.includes('phet-io')) {
            grunt.log.writeln("Deployed: ".concat(versionURL, "/phet-io/"));
          }
          grunt.log.writeln('Please wait for the build-server to complete the deployment, and then test!');
          grunt.log.writeln("To view the current build status, visit ".concat(buildLocal.productionServerURL, "/deploy-status"));
          return _context.abrupt("return", version);
        case 98:
          _context.prev = 98;
          _context.t9 = _context["catch"](32);
          grunt.log.warn('Detected failure during deploy, reverting to main');
          _context.next = 103;
          return checkoutMain(repo, true);
        case 103:
          throw _context.t9;
        case 104:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[32, 98]]);
  }));
  function rc(_x, _x2, _x3, _x4, _x5) {
    return _rc.apply(this, arguments);
  }
  return rc;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,