"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2017-2019, University of Colorado Boulder

/**
 * Deploys a decaf simulation after incrementing the test version number.  This file ported from dev.js
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

var assert = require('assert');
var SimVersion = require('../../common/SimVersion');
var buildLocal = require('../../common/buildLocal');
var devDirectoryExists = require('../../common/devDirectoryExists');
var devScp = require('../../common/devScp');
var devSsh = require('../../common/devSsh');
var getBranch = require('../../common/getBranch');
var getRemoteBranchSHAs = require('../../common/getRemoteBranchSHAs');
var gitIsClean = require('../../common/gitIsClean');
var gitRevParse = require('../../common/gitRevParse');
var loadJSON = require('../../common/loadJSON');
var vpnCheck = require('../../common/vpnCheck');
var grunt = require('grunt');
var fs = require('fs');

// constants
var BUILD_LOCAL_FILENAME = "".concat(process.env.HOME, "/.phet/build-local.json");

/**
 * Deploys a dev version after incrementing the test version number.
 * @public
 *
 * @param {string} project
 * @param {boolean} dev
 * @param {boolean} production
 * @returns {Promise}
 */
module.exports = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(project, dev, production) {
    var buildLocalJSON, gitRoot, trunkPath, stringFiles, locales, javaProperties, flavorLines, flavors, currentBranch, packageFileRelative, packageFile, packageObject, version, isClean, currentSHA, latestSHA, versionString, simPath, versionPath, simPathExists, versionPathExists, versionURL, URL, productionServerURL, template;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          buildLocalJSON = JSON.parse(fs.readFileSync(BUILD_LOCAL_FILENAME, {
            encoding: 'utf-8'
          }));
          gitRoot = buildLocalJSON.gitRoot;
          trunkPath = buildLocalJSON.decafTrunkPath;
          assert && assert(gitRoot !== undefined, 'buildLocal.gitRoot is undefined');
          assert && assert(trunkPath !== undefined, 'buildLocal.decafTrunkPath is undefined');
          stringFiles = fs.readdirSync("".concat(trunkPath, "/simulations-java/simulations/").concat(project, "/data/").concat(project, "/localization"));
          locales = stringFiles.filter(function (stringFile) {
            return stringFile.indexOf('_') >= 0;
          }).map(function (file) {
            return file.substring(file.indexOf('_') + 1, file.lastIndexOf('.'));
          });
          console.log(locales.join('\n'));

          // Output the flavors and locales
          javaProperties = fs.readFileSync("".concat(trunkPath, "/simulations-java/simulations/").concat(project, "/").concat(project, "-build.properties"), 'utf-8'); // console.log(javaProperties);
          // like  project.flavor.moving-man.mainclass=edu.colorado.phet.movingman.MovingManApplication
          flavorLines = javaProperties.split('\n').filter(function (line) {
            return line.startsWith('project.flavor');
          });
          flavors = flavorLines.length > 0 ? flavorLines.map(function (line) {
            return line.split('.')[2];
          }) : ["".concat(project)];
          console.log(flavors.join('\n'));
          _context.next = 14;
          return vpnCheck();
        case 14:
          if (_context.sent) {
            _context.next = 16;
            break;
          }
          grunt.fail.fatal('VPN or being on campus is required for this build. Ensure VPN is enabled, or that you have access to phet-server2.int.colorado.edu');
        case 16:
          _context.next = 18;
          return getBranch('decaf');
        case 18:
          currentBranch = _context.sent;
          if (currentBranch !== 'main') {
            grunt.fail.fatal("deployment should be on the branch main, not: ".concat(currentBranch ? currentBranch : '(detached head)'));
          }
          packageFileRelative = "projects/".concat(project, "/package.json");
          packageFile = "../decaf/".concat(packageFileRelative);
          _context.next = 24;
          return loadJSON(packageFile);
        case 24:
          packageObject = _context.sent;
          version = SimVersion.parse(packageObject.version);
          _context.next = 28;
          return gitIsClean('decaf');
        case 28:
          isClean = _context.sent;
          if (isClean) {
            _context.next = 31;
            break;
          }
          throw new Error("Unclean status in ".concat(project, ", cannot deploy"));
        case 31:
          _context.next = 33;
          return gitRevParse('decaf', 'HEAD');
        case 33:
          currentSHA = _context.sent;
          _context.next = 36;
          return getRemoteBranchSHAs('decaf');
        case 36:
          latestSHA = _context.sent.main;
          if (currentSHA !== latestSHA) {
            // See https://github.com/phetsims/chipper/issues/699
            grunt.fail.fatal("Out of date with remote, please push or pull repo. Current SHA: ".concat(currentSHA, ", latest SHA: ").concat(latestSHA));
          }
          versionString = version.toString(); // await gitAdd( 'decaf', packageFileRelative );
          // await gitCommit( 'decaf', `Bumping version to ${version.toString()}` );
          // await gitPush( 'decaf', 'main' );
          // Create (and fix permissions for) the main simulation directory, if it didn't already exist
          if (!dev) {
            _context.next = 77;
            break;
          }
          simPath = buildLocal.decafDeployPath + project;
          versionPath = "".concat(simPath, "/").concat(versionString);
          _context.next = 44;
          return devDirectoryExists(simPath);
        case 44:
          simPathExists = _context.sent;
          _context.next = 47;
          return devDirectoryExists(versionPath);
        case 47:
          versionPathExists = _context.sent;
          if (versionPathExists) {
            grunt.fail.fatal("Directory ".concat(versionPath, " already exists.  If you intend to replace the content then remove the directory manually from ").concat(buildLocal.devDeployServer, "."));
          }
          if (simPathExists) {
            _context.next = 52;
            break;
          }
          _context.next = 52;
          return devSsh("mkdir -p \"".concat(simPath, "\" && echo \"IndexOrderDefault Descending Date\n\" > \"").concat(simPath, "/.htaccess\""));
        case 52:
          _context.next = 54;
          return devSsh("mkdir -p \"".concat(versionPath, "\""));
        case 54:
          // Copy the build contents into the version-specific directory
          console.log("../decaf/projects/".concat(project));
          console.log("".concat(versionPath, "/"));
          _context.next = 58;
          return devScp("../decaf/projects/".concat(project, "/build/").concat(project, "_all.jar"), "".concat(versionPath, "/"));
        case 58:
          _context.next = 60;
          return devScp("../decaf/projects/".concat(project, "/build/").concat(project, "_all.jar.js"), "".concat(versionPath, "/"));
        case 60:
          _context.next = 62;
          return devScp("../decaf/projects/".concat(project, "/build/").concat(project, ".html"), "".concat(versionPath, "/"));
        case 62:
          _context.next = 64;
          return devScp("../decaf/projects/".concat(project, "/build/splash.gif"), "".concat(versionPath, "/"));
        case 64:
          _context.next = 66;
          return devScp("../decaf/projects/".concat(project, "/build/style.css"), "".concat(versionPath, "/"));
        case 66:
          _context.next = 68;
          return devScp("../decaf/projects/".concat(project, "/build/dependencies.json"), "".concat(versionPath, "/"));
        case 68:
          _context.next = 70;
          return devScp("../decaf/projects/".concat(project, "/build/locales.txt"), "".concat(versionPath, "/"));
        case 70:
          _context.next = 72;
          return devScp("../decaf/projects/".concat(project, "/build/simulations.txt"), "".concat(versionPath, "/"));
        case 72:
          versionURL = "https://phet-dev.colorado.edu/decaf/".concat(project, "/").concat(versionString);
          console.log('DEPLOYED');
          if (!fs.existsSync("".concat(gitRoot, "/decaf/build/log.txt"))) {
            fs.mkdirSync("".concat(gitRoot, "/decaf/build"));
          }
          flavors.forEach(function (flavor) {
            var url = "".concat(versionURL, "/").concat(project, ".html?simulation=").concat(flavor);
            grunt.log.writeln(url);
            fs.appendFileSync("".concat(gitRoot, "/decaf/build/log.txt"), "".concat(url, "\n"));
          });
          if (flavors.length === 0) {
            URL = "".concat(versionURL, "/").concat(project, ".html");
            grunt.log.writeln(URL);
            fs.appendFileSync("".concat(gitRoot, "/decaf/build/log.txt"), "".concat(URL, "\n"));
          }
        case 77:
          console.log('FLAVORS');
          console.log(flavors.join(', '));
          console.log('LOCALES');
          console.log(locales.join(', '));
          if (production) {
            productionServerURL = buildLocal.productionServerURL || 'https://phet.colorado.edu'; // await devSsh( `mkdir -p "/data/web/static/phetsims/sims/cheerpj/${project}"` );
            template = "cd /data/web/static/phetsims/sims/cheerpj/\nsudo -u phet-admin mkdir -p ".concat(project, "\ncd ").concat(project, "\nsudo -u phet-admin scp -r bayes.colorado.edu:/data/web/htdocs/dev/decaf/").concat(project, "/").concat(version, " .\n\nsudo chmod g+w *\nprintf \"RewriteEngine on\\nRewriteBase /sims/cheerpj/").concat(project, "/\\nRewriteRule ^latest(.*) ").concat(version, "\\$1\\nHeader set Access-Control-Allow-Origin \\\"*\\\"\\n\" > .htaccess\n\ncd ").concat(version, "\nsudo chmod g+w *\n\ntoken=$(grep serverToken ~/.phet/build-local.json | sed -r 's/ *\"serverToken\": \"(.*)\",/\\1/') && \\\ncurl -u \"token:${token}\" '").concat(productionServerURL, "/services/deploy-cheerpj?project=").concat(project, "&version=").concat(version, "&locales=").concat(locales.join(','), "&simulations=").concat(flavors.join(','), "'\n");
            console.log('SERVER SCRIPT TO PROMOTE DEV VERSION TO PRODUCTION VERSION');
            console.log(template);
          }
        case 82:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function (_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,