"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2017-2019, University of Colorado Boulder

/**
 * Deploys a decaf simulation after incrementing the test version number.  This file ported from dev.js
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

var assert = require('assert');
var execute = require('../../common/execute');
var copyFile = require('../../common/copyFile');
var getPreloads = require('./getPreloads');
var SimVersion = require('../../common/SimVersion');
var gitRevParse = require('../../common/gitRevParse');
var loadJSON = require('../../common/loadJSON');
var writeJSON = require('../../common/writeJSON');
var fs = require('fs');
var path = require('path');

// constants
var BUILD_LOCAL_FILENAME = "".concat(process.env.HOME, "/.phet/build-local.json");

/**
 * Deploys a dev version after incrementing the test version number.
 * @public
 *
 * @param {string} project
 * @returns {Promise}
 */
module.exports = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(project) {
    var buildLocalJSON, gitRoot, urlRoot, trunkPath, cmd, program, buildDir, allJar, javaProperties, flavors, url, preloadResources, packageFileRelative, packageFile, packageObject, previousVersion, version, versionString, html, stringFiles, locales, ensureDir, copyDirRecursive, _copyDirRecursive, cheerpjDir, decafSHA, chipperSHA, perennialAliasSHA, perennialSHA, svnInfo, dependencies;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _copyDirRecursive = function _copyDirRecursive3() {
            _copyDirRecursive = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(sourceDir, targetDir) {
              var entries, _iterator, _step, entry, sourcePath, targetPath;
              return _regeneratorRuntime().wrap(function _callee$(_context) {
                while (1) switch (_context.prev = _context.next) {
                  case 0:
                    ensureDir(targetDir);
                    entries = fs.readdirSync(sourceDir, {
                      withFileTypes: true
                    });
                    _iterator = _createForOfIteratorHelper(entries);
                    _context.prev = 3;
                    _iterator.s();
                  case 5:
                    if ((_step = _iterator.n()).done) {
                      _context.next = 18;
                      break;
                    }
                    entry = _step.value;
                    sourcePath = path.join(sourceDir, entry.name);
                    targetPath = path.join(targetDir, entry.name);
                    if (!entry.isDirectory()) {
                      _context.next = 14;
                      break;
                    }
                    _context.next = 12;
                    return copyDirRecursive(sourcePath, targetPath);
                  case 12:
                    _context.next = 16;
                    break;
                  case 14:
                    _context.next = 16;
                    return copyFile(sourcePath, targetPath);
                  case 16:
                    _context.next = 5;
                    break;
                  case 18:
                    _context.next = 23;
                    break;
                  case 20:
                    _context.prev = 20;
                    _context.t0 = _context["catch"](3);
                    _iterator.e(_context.t0);
                  case 23:
                    _context.prev = 23;
                    _iterator.f();
                    return _context.finish(23);
                  case 26:
                  case "end":
                    return _context.stop();
                }
              }, _callee, null, [[3, 20, 23, 26]]);
            }));
            return _copyDirRecursive.apply(this, arguments);
          };
          copyDirRecursive = function _copyDirRecursive2(_x2, _x3) {
            return _copyDirRecursive.apply(this, arguments);
          };
          ensureDir = function _ensureDir(dir) {
            try {
              fs.mkdirSync(dir, {
                recursive: true
              });
            } catch (error) {
              if (error.code !== 'EEXIST') {
                throw error;
              } // Ignore the error if the directory already exists
            }
          };
          buildLocalJSON = JSON.parse(fs.readFileSync(BUILD_LOCAL_FILENAME, {
            encoding: 'utf-8'
          }));
          gitRoot = buildLocalJSON.gitRoot;
          urlRoot = buildLocalJSON.urlRoot;
          trunkPath = buildLocalJSON.decafTrunkPath;
          assert && assert(gitRoot !== undefined, 'buildLocal.gitRoot is undefined');
          assert && assert(urlRoot !== undefined, 'buildLocal.urlRoot is undefined');
          assert && assert(trunkPath !== undefined, 'buildLocal.decafTrunkPath is undefined');

          // Command obtained from running in IntelliJ IDEA with the given .project.
          cmd = ['-classpath', // Build classes with
          // ~/phet-svn-trunk-2020/build-tools$ chmod u+x ./contrib/apache-ant/bin/ant
          // ~/phet-svn-trunk-2020/build-tools$ ./build.sh
          // Other jars taken from /phet-svn-trunk-2020/build-tools/build-tools-build.properties
          "".concat(trunkPath, "/build-tools/ant_output/phetbuild/classes:").concat(trunkPath, "/build-tools/contrib/proguard/lib/proguard.jar:").concat(trunkPath, "/build-tools/contrib/commons-lang/commons-lang.jar:").concat(trunkPath, "/build-tools/contrib/jsch/jsch.jar:").concat(trunkPath, "/build-tools/contrib/scala/scala-compiler.jar:").concat(trunkPath, "/build-tools/contrib/scala/scala-library.jar:").concat(trunkPath, "/build-tools/contrib/apache-ant/lib/ant.jar:").concat(trunkPath, "/build-tools/contrib/apache-ant/lib/ant-launcher.jar:").concat(trunkPath, "/build-tools/contrib/yuicompressor/yuicompressor-2.4.4.jar:").concat(trunkPath, "/build-tools/contrib/jgit/org.eclipse.jgit-1.1.0.201109151100-r.jar:/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/lib/tools.jar"), 'edu.colorado.phet.buildtools.BuildScript', trunkPath, project];
          program = '/Library/Java/JavaVirtualMachines/jdk1.7.0_80.jdk/Contents/Home/bin/java';
          _context2.next = 14;
          return execute(program, cmd);
        case 14:
          buildDir = "../decaf/projects/".concat(project, "/build/");
          try {
            fs.mkdirSync(buildDir);
          } catch (e) {
            console.log('perhaps the build directory exists');
          }
          allJar = "".concat(gitRoot, "decaf/projects/").concat(project, "/build/").concat(project, "_all.jar");
          _context2.next = 19;
          return copyFile("".concat(trunkPath, "/simulations-java/simulations/").concat(project, "/deploy/").concat(project, "_all.jar"), allJar);
        case 19:
          console.log('copied');
          javaProperties = fs.readFileSync("".concat(trunkPath, "/simulations-java/simulations/").concat(project, "/").concat(project, "-build.properties"), 'utf-8');
          flavors = javaProperties.split('\n').filter(function (line) {
            return line.startsWith('project.flavor');
          }).map(function (line) {
            return line.split('.')[2];
          });
          url = '';
          if (flavors.length === 0) {
            url = "".concat(urlRoot, "/decaf/html?project=").concat(project);
          } else {
            url = "".concat(urlRoot, "/decaf/html?project=").concat(project, "&simulation=").concat(flavors[0]);
          }
          console.log("awaiting preloads via puppeteer at url = ".concat(url));
          _context2.next = 27;
          return getPreloads(url);
        case 27:
          preloadResources = _context2.sent;
          console.log("We have the preloads!\n".concat(preloadResources));
          packageFileRelative = "projects/".concat(project, "/package.json");
          packageFile = "../decaf/".concat(packageFileRelative);
          _context2.next = 33;
          return loadJSON(packageFile);
        case 33:
          packageObject = _context2.sent;
          previousVersion = SimVersion.parse(packageObject.version); // Bump the version
          version = new SimVersion(previousVersion.major, previousVersion.minor, previousVersion.maintenance, {
            testType: 'dev',
            testNumber: previousVersion.testNumber + 1
          });
          packageObject.version = version.toString();
          _context2.next = 39;
          return writeJSON(packageFile, packageObject);
        case 39:
          versionString = version.toString();
          html = fs.readFileSync('../decaf/html/index.html', 'utf-8');
          html = html.split('{{PROJECT}}').join(project);
          html = html.split('{{VERSION}}').join(versionString);
          html = html.split('{{IS_BUILT}}').join('true');
          html = html.split('\'{{PRELOAD_RESOURCES}}\'').join(preloadResources);
          fs.writeFileSync("".concat(buildDir, "/").concat(project, ".html"), html);
          stringFiles = fs.readdirSync("".concat(trunkPath, "/simulations-java/simulations/").concat(project, "/data/").concat(project, "/localization"));
          locales = stringFiles.filter(function (stringFile) {
            return stringFile.indexOf('_') >= 0;
          }).map(function (file) {
            return file.substring(file.indexOf('_') + 1, file.lastIndexOf('.'));
          });
          console.log(locales.join('\n'));
          fs.writeFileSync("".concat(buildDir, "/locales.txt"), locales.join('\n'));
          fs.writeFileSync("".concat(buildDir, "/simulations.txt"), flavors.join('\n'));
          _context2.next = 53;
          return copyFile('../decaf/html/style.css', "".concat(buildDir, "/style.css"));
        case 53:
          _context2.next = 55;
          return copyFile('../decaf/html/splash.gif', "".concat(buildDir, "/splash.gif"));
        case 55:
          cheerpjDir = "".concat(buildDir, "/cheerpj_3.0");
          ensureDir(cheerpjDir);
          _context2.next = 59;
          return copyDirRecursive('../decaf/html/cheerpj_3.0', cheerpjDir);
        case 59:
          _context2.next = 61;
          return gitRevParse('decaf', 'HEAD');
        case 61:
          decafSHA = _context2.sent;
          _context2.next = 64;
          return gitRevParse('chipper', 'HEAD');
        case 64:
          chipperSHA = _context2.sent;
          _context2.next = 67;
          return gitRevParse('perennial-alias', 'HEAD');
        case 67:
          perennialAliasSHA = _context2.sent;
          _context2.next = 70;
          return gitRevParse('perennial', 'HEAD');
        case 70:
          perennialSHA = _context2.sent;
          _context2.next = 73;
          return execute('/opt/homebrew/bin/svn', ['info'], "".concat(trunkPath));
        case 73:
          svnInfo = _context2.sent;
          dependencies = {
            version: versionString,
            decaf: decafSHA,
            notes: 'The decaf sha is from before the version commit.',
            chipper: chipperSHA,
            'perennial-alias': perennialAliasSHA,
            perennial: perennialSHA,
            svnInfo: svnInfo
          };
          console.log(dependencies);
          _context2.next = 78;
          return writeJSON("".concat(buildDir, "/dependencies.json"), dependencies);
        case 78:
          if (flavors.length === 0) {
            console.log("build and ready for local testing: ".concat(urlRoot, "/decaf/projects/").concat(project, "/build/").concat(project, ".html"));
          } else {
            console.log('build and ready for local testing:');
            flavors.forEach(function (flavor) {
              console.log("build and ready for local testing: ".concat(urlRoot, "/decaf/projects/").concat(project, "/build/").concat(project, ".html?simulation=").concat(flavor));
            });
          }
        case 79:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,