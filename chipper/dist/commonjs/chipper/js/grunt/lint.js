"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2024, University of Colorado Boulder

/**
 * Runs the eslint process on the specified repos using the `npx` command line interface. This is the idiomatic and
 * recommended approach for this. We also add support for various options. This linting strategy was adopted over
 * using the ESLint NodeJS client in https://github.com/phetsims/chipper/issues/1429
 *
 * It is assumed that linting occurs from one level deep in any given repo. This has ramifications for how we write
 * eslint config files across the codebase.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

// modules
var _require = require('child_process'),
  spawn = _require.spawn; // eslint-disable-line require-statement-match
var _ = require('lodash');
var path = require('path');
var assert = require('assert');
var showCommandLineProgress = require('../common/showCommandLineProgress');
var chipAway = require('./chipAway');
var _require2 = require('eslint'),
  ESLint = _require2.ESLint; // eslint-disable-line require-statement-match
var fs = require('fs');
var DEBUG_MARKER = 'eslint:cli-engine';
var nxpCommand = /^win/.test(process.platform) ? 'npx.cmd' : 'npx';

// Print formatted errors and warning to the console.
function consoleLogResults(_x) {
  return _consoleLogResults.apply(this, arguments);
}
/**
 * @param repos
 * @param options
 * @returns {Promise<ESLint.LintResult[]>}
 */
function _consoleLogResults() {
  _consoleLogResults = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(results) {
    var formatter, resultText;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          _context3.next = 2;
          return new ESLint().loadFormatter('stylish');
        case 2:
          formatter = _context3.sent;
          resultText = formatter.format(results);
          console.log("\n".concat(resultText, "\n"));
        case 5:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return _consoleLogResults.apply(this, arguments);
}
function runEslint(repos, options) {
  options = _.assignIn({
    // Cache results for a speed boost.
    cache: true,
    // Fix things that can be auto-fixed (written to disk)
    fix: false,
    // prints responsible dev info for any lint errors for easier GitHub issue creation.
    chipAway: false,
    // Show a progress bar while running, based on the current repo index in the provided list parameter
    showProgressBar: true
  }, options);
  var showProgressBar = options.showProgressBar && repos.length > 1;
  showProgressBar && showCommandLineProgress(0, false);
  var patterns = repos.map(function (repo) {
    return "../".concat(repo, "/");
  });
  var args = ['eslint'];

  // If options.cache is not set, clear the cache file (if it exists)
  if (!options.cache) {
    try {
      fs.unlinkSync('../chipper/eslint/cache/.eslintcache');
      console.log('Cache file \'../chipper/eslint/cache/.eslintcache\' deleted successfully');
    } catch (err) {
      if (err.code === 'ENOENT') {
        console.log('Cache file does not exist, no need to delete');
      } else {
        // Re-throw the error if it's something else
        throw err;
      }
    }
  }

  // Always write to the cache, even if it was cleared above.
  args.push('--cache', '--cache-location', '../chipper/eslint/cache/.eslintcache');

  // Add the '--fix' option if fix is true
  if (options.fix) {
    args.push('--fix');
  }

  // Continue building the args array
  args.push.apply(args, ['--rulesdir', '../chipper/eslint/rules/', '--resolve-plugins-relative-to', '../chipper', '--no-error-on-unmatched-pattern', '--ignore-path', '../chipper/eslint/.eslintignore', '--format=json',
  // JSON output, for easier parsing later
  '--ext', '.js,.jsx,.ts,.tsx,.mjs,.cjs,.html'].concat(_toConsumableArray(patterns)));
  return new Promise(function (resolve, reject) {
    // Prepare environment for spawn process, defaulting to the existing env
    var env = Object.create(process.env);
    if (showProgressBar) {
      env.DEBUG = DEBUG_MARKER;
    }

    // Increase available memory for NodeJS heap, to future-proof for, https://github.com/phetsims/chipper/issues/1415
    env.NODE_OPTIONS = env.NODE_OPTIONS || '';
    if (!env.NODE_OPTIONS.includes('--max-old-space-size')) {
      env.NODE_OPTIONS += ' --max-old-space-size=8192';
    }

    // It is nice to use our own spawn here instead of execute() so we can stream progress updates as it runs.
    var eslint = spawn(nxpCommand, args, {
      cwd: '../chipper',
      env: env // Use the prepared environment
    });

    // It is possible the json is bigger than one chunk of data, so append to it.
    var jsonString = '';
    eslint.stdout.on('data', function (data) {
      jsonString += data.toString();
    });
    eslint.stderr.on('data', function (data) {
      var message = data.toString();

      // Log with support for debug messaging (for progress bar)
      // Handle case where the source code of this file is printed (when there are lint rules in this file)
      // It was found that debug messages only come to the stderr channel, not stdout.
      if (message.includes(DEBUG_MARKER) && !message.includes(DEBUG_MARKER + '\'')) {
        assert(showProgressBar, "should only have the debug marker for progress bar support for message:, ".concat(message));
        var repo = tryRepoFromDebugMessage(message);
        if (repo) {
          assert(repos.indexOf(repo) >= 0, "repo not in repos, ".concat(repo, ", ").concat(message));
          showProgressBar && showCommandLineProgress(repos.indexOf(repo) / repos.length, false);
        }
      } else {
        console.error(message);
      }
    });
    eslint.on('close', function () {
      try {
        var parsed = JSON.parse(jsonString);
        resolve(parsed);
      } catch (e) {
        reject(e);
      }
    });
  }).then( /*#__PURE__*/function () {
    var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(parsed) {
      var results;
      return _regeneratorRuntime().wrap(function _callee$(_context) {
        while (1) switch (_context.prev = _context.next) {
          case 0:
            showProgressBar && showCommandLineProgress(1, true);

            // Ignore non-errors/warnings
            results = parsed.filter(function (x) {
              return x.errorCount !== 0 || x.warningCount !== 0;
            });
            if (!(results.length > 0)) {
              _context.next = 6;
              break;
            }
            _context.next = 5;
            return consoleLogResults(results);
          case 5:
            options.chipAway && console.log(chipAway(results), '\n');
          case 6:
            return _context.abrupt("return", results);
          case 7:
          case "end":
            return _context.stop();
        }
      }, _callee);
    }));
    return function (_x2) {
      return _ref.apply(this, arguments);
    };
  }());
}

/**
 * Lints the specified repositories.
 * @public
 *
 * @param {string[]} originalRepos - list of repos to lint
 * @param {Object} [options]
 * @returns {Promise<{results:Array<Object>,ok:boolean}>} - results from linting files, see ESLint.lintFiles.
 */
var lint = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(originalRepos, options) {
    var results;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          _context2.prev = 0;
          _context2.next = 3;
          return runEslint(originalRepos, options);
        case 3:
          results = _context2.sent;
          if (!(results.length === 0)) {
            _context2.next = 8;
            break;
          }
          return _context2.abrupt("return", {
            results: [],
            ok: true
          });
        case 8:
          return _context2.abrupt("return", {
            results: results,
            ok: false
          });
        case 9:
          _context2.next = 15;
          break;
        case 11:
          _context2.prev = 11;
          _context2.t0 = _context2["catch"](0);
          console.error('Error running ESLint:', _context2.t0.message);
          throw _context2.t0;
        case 15:
        case "end":
          return _context2.stop();
      }
    }, _callee2, null, [[0, 11]]);
  }));
  return function lint(_x3, _x4) {
    return _ref2.apply(this, arguments);
  };
}();
var repoRootPath = path.join(__dirname, '../../../'); // Will end in a slash
var escaped = repoRootPath.replace(/\\/g, '\\\\'); // Handle any backslashes in the path

// Regex that captures the repo via the path
var regExp = new RegExp("".concat(escaped, "([\\w-]+)[\\\\\\/]"));
function tryRepoFromDebugMessage(message) {
  assert(message.includes(DEBUG_MARKER));
  var match = message.match(regExp);
  return match ? match[1] : null;
}

// Mark the version so that we don't try to lint old shas if on an older version of chipper.
lint.chipperAPIVersion = 'npx';
module.exports = lint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZSIsInQiLCJyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibiIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiX3RvQ29uc3VtYWJsZUFycmF5IiwiYXJyIiwiX2FycmF5V2l0aG91dEhvbGVzIiwiX2l0ZXJhYmxlVG9BcnJheSIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVNwcmVhZCIsIm1pbkxlbiIsIl9hcnJheUxpa2VUb0FycmF5IiwidG9TdHJpbmciLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwiaXRlciIsImlzQXJyYXkiLCJsZW4iLCJhcnIyIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJrZXkiLCJpbmZvIiwiZXJyb3IiLCJfYXN5bmNUb0dlbmVyYXRvciIsImZuIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsIl9yZXF1aXJlIiwicmVxdWlyZSIsInNwYXduIiwiXyIsInBhdGgiLCJhc3NlcnQiLCJzaG93Q29tbWFuZExpbmVQcm9ncmVzcyIsImNoaXBBd2F5IiwiX3JlcXVpcmUyIiwiRVNMaW50IiwiZnMiLCJERUJVR19NQVJLRVIiLCJueHBDb21tYW5kIiwicHJvY2VzcyIsInBsYXRmb3JtIiwiY29uc29sZUxvZ1Jlc3VsdHMiLCJfeCIsIl9jb25zb2xlTG9nUmVzdWx0cyIsIl9jYWxsZWUzIiwicmVzdWx0cyIsImZvcm1hdHRlciIsInJlc3VsdFRleHQiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJsb2FkRm9ybWF0dGVyIiwiZm9ybWF0IiwiY29uc29sZSIsImxvZyIsImNvbmNhdCIsInJ1bkVzbGludCIsInJlcG9zIiwib3B0aW9ucyIsImFzc2lnbkluIiwiY2FjaGUiLCJmaXgiLCJzaG93UHJvZ3Jlc3NCYXIiLCJwYXR0ZXJucyIsIm1hcCIsInJlcG8iLCJ1bmxpbmtTeW5jIiwiY29kZSIsImVudiIsIkRFQlVHIiwiTk9ERV9PUFRJT05TIiwiaW5jbHVkZXMiLCJlc2xpbnQiLCJjd2QiLCJqc29uU3RyaW5nIiwic3Rkb3V0Iiwib24iLCJkYXRhIiwic3RkZXJyIiwibWVzc2FnZSIsInRyeVJlcG9Gcm9tRGVidWdNZXNzYWdlIiwiaW5kZXhPZiIsInBhcnNlZCIsIkpTT04iLCJwYXJzZSIsIl9yZWYiLCJfY2FsbGVlIiwiX2NhbGxlZSQiLCJfY29udGV4dCIsImZpbHRlciIsIngiLCJlcnJvckNvdW50Iiwid2FybmluZ0NvdW50IiwiX3gyIiwibGludCIsIl9yZWYyIiwiX2NhbGxlZTIiLCJvcmlnaW5hbFJlcG9zIiwiX2NhbGxlZTIkIiwiX2NvbnRleHQyIiwib2siLCJ0MCIsIl94MyIsIl94NCIsInJlcG9Sb290UGF0aCIsImpvaW4iLCJfX2Rpcm5hbWUiLCJlc2NhcGVkIiwicmVwbGFjZSIsInJlZ0V4cCIsIlJlZ0V4cCIsIm1hdGNoIiwiY2hpcHBlckFQSVZlcnNpb24iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsibGludC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUnVucyB0aGUgZXNsaW50IHByb2Nlc3Mgb24gdGhlIHNwZWNpZmllZCByZXBvcyB1c2luZyB0aGUgYG5weGAgY29tbWFuZCBsaW5lIGludGVyZmFjZS4gVGhpcyBpcyB0aGUgaWRpb21hdGljIGFuZFxyXG4gKiByZWNvbW1lbmRlZCBhcHByb2FjaCBmb3IgdGhpcy4gV2UgYWxzbyBhZGQgc3VwcG9ydCBmb3IgdmFyaW91cyBvcHRpb25zLiBUaGlzIGxpbnRpbmcgc3RyYXRlZ3kgd2FzIGFkb3B0ZWQgb3ZlclxyXG4gKiB1c2luZyB0aGUgRVNMaW50IE5vZGVKUyBjbGllbnQgaW4gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NoaXBwZXIvaXNzdWVzLzE0MjlcclxuICpcclxuICogSXQgaXMgYXNzdW1lZCB0aGF0IGxpbnRpbmcgb2NjdXJzIGZyb20gb25lIGxldmVsIGRlZXAgaW4gYW55IGdpdmVuIHJlcG8uIFRoaXMgaGFzIHJhbWlmaWNhdGlvbnMgZm9yIGhvdyB3ZSB3cml0ZVxyXG4gKiBlc2xpbnQgY29uZmlnIGZpbGVzIGFjcm9zcyB0aGUgY29kZWJhc2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG4vLyBtb2R1bGVzXHJcbmNvbnN0IHsgc3Bhd24gfSA9IHJlcXVpcmUoICdjaGlsZF9wcm9jZXNzJyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIHJlcXVpcmUtc3RhdGVtZW50LW1hdGNoXHJcbmNvbnN0IF8gPSByZXF1aXJlKCAnbG9kYXNoJyApO1xyXG5jb25zdCBwYXRoID0gcmVxdWlyZSggJ3BhdGgnICk7XHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoICdhc3NlcnQnICk7XHJcbmNvbnN0IHNob3dDb21tYW5kTGluZVByb2dyZXNzID0gcmVxdWlyZSggJy4uL2NvbW1vbi9zaG93Q29tbWFuZExpbmVQcm9ncmVzcycgKTtcclxuY29uc3QgY2hpcEF3YXkgPSByZXF1aXJlKCAnLi9jaGlwQXdheScgKTtcclxuY29uc3QgeyBFU0xpbnQgfSA9IHJlcXVpcmUoICdlc2xpbnQnICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1zdGF0ZW1lbnQtbWF0Y2hcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZnMnICk7XHJcblxyXG5jb25zdCBERUJVR19NQVJLRVIgPSAnZXNsaW50OmNsaS1lbmdpbmUnO1xyXG5jb25zdCBueHBDb21tYW5kID0gL153aW4vLnRlc3QoIHByb2Nlc3MucGxhdGZvcm0gKSA/ICducHguY21kJyA6ICducHgnO1xyXG5cclxuLy8gUHJpbnQgZm9ybWF0dGVkIGVycm9ycyBhbmQgd2FybmluZyB0byB0aGUgY29uc29sZS5cclxuYXN5bmMgZnVuY3Rpb24gY29uc29sZUxvZ1Jlc3VsdHMoIHJlc3VsdHMgKSB7XHJcblxyXG4gIC8vIE5vIG5lZWQgdG8gaGF2ZSB0aGUgc2FtZSBFU0xpbnQganVzdCB0byBmb3JtYXRcclxuICBjb25zdCBmb3JtYXR0ZXIgPSBhd2FpdCBuZXcgRVNMaW50KCkubG9hZEZvcm1hdHRlciggJ3N0eWxpc2gnICk7XHJcbiAgY29uc3QgcmVzdWx0VGV4dCA9IGZvcm1hdHRlci5mb3JtYXQoIHJlc3VsdHMgKTtcclxuICBjb25zb2xlLmxvZyggYFxcbiR7cmVzdWx0VGV4dH1cXG5gICk7XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0gcmVwb3NcclxuICogQHBhcmFtIG9wdGlvbnNcclxuICogQHJldHVybnMge1Byb21pc2U8RVNMaW50LkxpbnRSZXN1bHRbXT59XHJcbiAqL1xyXG5mdW5jdGlvbiBydW5Fc2xpbnQoIHJlcG9zLCBvcHRpb25zICkge1xyXG5cclxuICBvcHRpb25zID0gXy5hc3NpZ25Jbigge1xyXG5cclxuICAgIC8vIENhY2hlIHJlc3VsdHMgZm9yIGEgc3BlZWQgYm9vc3QuXHJcbiAgICBjYWNoZTogdHJ1ZSxcclxuXHJcbiAgICAvLyBGaXggdGhpbmdzIHRoYXQgY2FuIGJlIGF1dG8tZml4ZWQgKHdyaXR0ZW4gdG8gZGlzaylcclxuICAgIGZpeDogZmFsc2UsXHJcblxyXG4gICAgLy8gcHJpbnRzIHJlc3BvbnNpYmxlIGRldiBpbmZvIGZvciBhbnkgbGludCBlcnJvcnMgZm9yIGVhc2llciBHaXRIdWIgaXNzdWUgY3JlYXRpb24uXHJcbiAgICBjaGlwQXdheTogZmFsc2UsXHJcblxyXG4gICAgLy8gU2hvdyBhIHByb2dyZXNzIGJhciB3aGlsZSBydW5uaW5nLCBiYXNlZCBvbiB0aGUgY3VycmVudCByZXBvIGluZGV4IGluIHRoZSBwcm92aWRlZCBsaXN0IHBhcmFtZXRlclxyXG4gICAgc2hvd1Byb2dyZXNzQmFyOiB0cnVlXHJcbiAgfSwgb3B0aW9ucyApO1xyXG5cclxuICBjb25zdCBzaG93UHJvZ3Jlc3NCYXIgPSBvcHRpb25zLnNob3dQcm9ncmVzc0JhciAmJiByZXBvcy5sZW5ndGggPiAxO1xyXG4gIHNob3dQcm9ncmVzc0JhciAmJiBzaG93Q29tbWFuZExpbmVQcm9ncmVzcyggMCwgZmFsc2UgKTtcclxuXHJcbiAgY29uc3QgcGF0dGVybnMgPSByZXBvcy5tYXAoIHJlcG8gPT4gYC4uLyR7cmVwb30vYCApO1xyXG5cclxuICBjb25zdCBhcmdzID0gWyAnZXNsaW50JyBdO1xyXG5cclxuICAvLyBJZiBvcHRpb25zLmNhY2hlIGlzIG5vdCBzZXQsIGNsZWFyIHRoZSBjYWNoZSBmaWxlIChpZiBpdCBleGlzdHMpXHJcbiAgaWYgKCAhb3B0aW9ucy5jYWNoZSApIHtcclxuXHJcbiAgICB0cnkge1xyXG4gICAgICBmcy51bmxpbmtTeW5jKCAnLi4vY2hpcHBlci9lc2xpbnQvY2FjaGUvLmVzbGludGNhY2hlJyApO1xyXG4gICAgICBjb25zb2xlLmxvZyggJ0NhY2hlIGZpbGUgXFwnLi4vY2hpcHBlci9lc2xpbnQvY2FjaGUvLmVzbGludGNhY2hlXFwnIGRlbGV0ZWQgc3VjY2Vzc2Z1bGx5JyApO1xyXG4gICAgfVxyXG4gICAgY2F0Y2goIGVyciApIHtcclxuICAgICAgaWYgKCBlcnIuY29kZSA9PT0gJ0VOT0VOVCcgKSB7XHJcblxyXG4gICAgICAgIGNvbnNvbGUubG9nKCAnQ2FjaGUgZmlsZSBkb2VzIG5vdCBleGlzdCwgbm8gbmVlZCB0byBkZWxldGUnICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcblxyXG4gICAgICAgIC8vIFJlLXRocm93IHRoZSBlcnJvciBpZiBpdCdzIHNvbWV0aGluZyBlbHNlXHJcbiAgICAgICAgdGhyb3cgZXJyO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBBbHdheXMgd3JpdGUgdG8gdGhlIGNhY2hlLCBldmVuIGlmIGl0IHdhcyBjbGVhcmVkIGFib3ZlLlxyXG4gIGFyZ3MucHVzaCggJy0tY2FjaGUnLCAnLS1jYWNoZS1sb2NhdGlvbicsICcuLi9jaGlwcGVyL2VzbGludC9jYWNoZS8uZXNsaW50Y2FjaGUnICk7XHJcblxyXG4gIC8vIEFkZCB0aGUgJy0tZml4JyBvcHRpb24gaWYgZml4IGlzIHRydWVcclxuICBpZiAoIG9wdGlvbnMuZml4ICkge1xyXG4gICAgYXJncy5wdXNoKCAnLS1maXgnICk7XHJcbiAgfVxyXG5cclxuICAvLyBDb250aW51ZSBidWlsZGluZyB0aGUgYXJncyBhcnJheVxyXG4gIGFyZ3MucHVzaCggLi4uW1xyXG4gICAgJy0tcnVsZXNkaXInLCAnLi4vY2hpcHBlci9lc2xpbnQvcnVsZXMvJyxcclxuICAgICctLXJlc29sdmUtcGx1Z2lucy1yZWxhdGl2ZS10bycsICcuLi9jaGlwcGVyJyxcclxuICAgICctLW5vLWVycm9yLW9uLXVubWF0Y2hlZC1wYXR0ZXJuJyxcclxuICAgICctLWlnbm9yZS1wYXRoJywgJy4uL2NoaXBwZXIvZXNsaW50Ly5lc2xpbnRpZ25vcmUnLFxyXG4gICAgJy0tZm9ybWF0PWpzb24nLCAvLyBKU09OIG91dHB1dCwgZm9yIGVhc2llciBwYXJzaW5nIGxhdGVyXHJcbiAgICAnLS1leHQnLCAnLmpzLC5qc3gsLnRzLC50c3gsLm1qcywuY2pzLC5odG1sJyxcclxuICAgIC4uLnBhdHRlcm5zXHJcbiAgXSApO1xyXG5cclxuICByZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xyXG5cclxuICAgIC8vIFByZXBhcmUgZW52aXJvbm1lbnQgZm9yIHNwYXduIHByb2Nlc3MsIGRlZmF1bHRpbmcgdG8gdGhlIGV4aXN0aW5nIGVudlxyXG4gICAgY29uc3QgZW52ID0gT2JqZWN0LmNyZWF0ZSggcHJvY2Vzcy5lbnYgKTtcclxuICAgIGlmICggc2hvd1Byb2dyZXNzQmFyICkge1xyXG4gICAgICBlbnYuREVCVUcgPSBERUJVR19NQVJLRVI7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gSW5jcmVhc2UgYXZhaWxhYmxlIG1lbW9yeSBmb3IgTm9kZUpTIGhlYXAsIHRvIGZ1dHVyZS1wcm9vZiBmb3IsIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jaGlwcGVyL2lzc3Vlcy8xNDE1XHJcbiAgICBlbnYuTk9ERV9PUFRJT05TID0gZW52Lk5PREVfT1BUSU9OUyB8fCAnJztcclxuXHJcbiAgICBpZiAoICFlbnYuTk9ERV9PUFRJT05TLmluY2x1ZGVzKCAnLS1tYXgtb2xkLXNwYWNlLXNpemUnICkgKSB7XHJcbiAgICAgIGVudi5OT0RFX09QVElPTlMgKz0gJyAtLW1heC1vbGQtc3BhY2Utc2l6ZT04MTkyJztcclxuICAgIH1cclxuXHJcbiAgICAvLyBJdCBpcyBuaWNlIHRvIHVzZSBvdXIgb3duIHNwYXduIGhlcmUgaW5zdGVhZCBvZiBleGVjdXRlKCkgc28gd2UgY2FuIHN0cmVhbSBwcm9ncmVzcyB1cGRhdGVzIGFzIGl0IHJ1bnMuXHJcbiAgICBjb25zdCBlc2xpbnQgPSBzcGF3biggbnhwQ29tbWFuZCwgYXJncywge1xyXG4gICAgICBjd2Q6ICcuLi9jaGlwcGVyJyxcclxuICAgICAgZW52OiBlbnYgLy8gVXNlIHRoZSBwcmVwYXJlZCBlbnZpcm9ubWVudFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEl0IGlzIHBvc3NpYmxlIHRoZSBqc29uIGlzIGJpZ2dlciB0aGFuIG9uZSBjaHVuayBvZiBkYXRhLCBzbyBhcHBlbmQgdG8gaXQuXHJcbiAgICBsZXQganNvblN0cmluZyA9ICcnO1xyXG4gICAgZXNsaW50LnN0ZG91dC5vbiggJ2RhdGEnLCBkYXRhID0+IHtcclxuICAgICAganNvblN0cmluZyArPSBkYXRhLnRvU3RyaW5nKCk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgZXNsaW50LnN0ZGVyci5vbiggJ2RhdGEnLCBkYXRhID0+IHtcclxuICAgICAgY29uc3QgbWVzc2FnZSA9IGRhdGEudG9TdHJpbmcoKTtcclxuXHJcbiAgICAgIC8vIExvZyB3aXRoIHN1cHBvcnQgZm9yIGRlYnVnIG1lc3NhZ2luZyAoZm9yIHByb2dyZXNzIGJhcilcclxuICAgICAgLy8gSGFuZGxlIGNhc2Ugd2hlcmUgdGhlIHNvdXJjZSBjb2RlIG9mIHRoaXMgZmlsZSBpcyBwcmludGVkICh3aGVuIHRoZXJlIGFyZSBsaW50IHJ1bGVzIGluIHRoaXMgZmlsZSlcclxuICAgICAgLy8gSXQgd2FzIGZvdW5kIHRoYXQgZGVidWcgbWVzc2FnZXMgb25seSBjb21lIHRvIHRoZSBzdGRlcnIgY2hhbm5lbCwgbm90IHN0ZG91dC5cclxuICAgICAgaWYgKCBtZXNzYWdlLmluY2x1ZGVzKCBERUJVR19NQVJLRVIgKSAmJiAhbWVzc2FnZS5pbmNsdWRlcyggREVCVUdfTUFSS0VSICsgJ1xcJycgKSApIHtcclxuICAgICAgICBhc3NlcnQoIHNob3dQcm9ncmVzc0JhciwgYHNob3VsZCBvbmx5IGhhdmUgdGhlIGRlYnVnIG1hcmtlciBmb3IgcHJvZ3Jlc3MgYmFyIHN1cHBvcnQgZm9yIG1lc3NhZ2U6LCAke21lc3NhZ2V9YCApO1xyXG4gICAgICAgIGNvbnN0IHJlcG8gPSB0cnlSZXBvRnJvbURlYnVnTWVzc2FnZSggbWVzc2FnZSApO1xyXG4gICAgICAgIGlmICggcmVwbyApIHtcclxuICAgICAgICAgIGFzc2VydCggcmVwb3MuaW5kZXhPZiggcmVwbyApID49IDAsIGByZXBvIG5vdCBpbiByZXBvcywgJHtyZXBvfSwgJHttZXNzYWdlfWAgKTtcclxuICAgICAgICAgIHNob3dQcm9ncmVzc0JhciAmJiBzaG93Q29tbWFuZExpbmVQcm9ncmVzcyggcmVwb3MuaW5kZXhPZiggcmVwbyApIC8gcmVwb3MubGVuZ3RoLCBmYWxzZSApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICBjb25zb2xlLmVycm9yKCBtZXNzYWdlICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICAgIGVzbGludC5vbiggJ2Nsb3NlJywgKCkgPT4ge1xyXG4gICAgICB0cnkge1xyXG4gICAgICAgIGNvbnN0IHBhcnNlZCA9IEpTT04ucGFyc2UoIGpzb25TdHJpbmcgKTtcclxuICAgICAgICByZXNvbHZlKCBwYXJzZWQgKTtcclxuICAgICAgfVxyXG4gICAgICBjYXRjaCggZSApIHtcclxuICAgICAgICByZWplY3QoIGUgKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICB9ICkudGhlbiggYXN5bmMgcGFyc2VkID0+IHtcclxuXHJcbiAgICBzaG93UHJvZ3Jlc3NCYXIgJiYgc2hvd0NvbW1hbmRMaW5lUHJvZ3Jlc3MoIDEsIHRydWUgKTtcclxuXHJcbiAgICAvLyBJZ25vcmUgbm9uLWVycm9ycy93YXJuaW5nc1xyXG4gICAgY29uc3QgcmVzdWx0cyA9IHBhcnNlZC5maWx0ZXIoIHggPT4geC5lcnJvckNvdW50ICE9PSAwIHx8IHgud2FybmluZ0NvdW50ICE9PSAwICk7XHJcblxyXG4gICAgaWYgKCByZXN1bHRzLmxlbmd0aCA+IDAgKSB7XHJcbiAgICAgIGF3YWl0IGNvbnNvbGVMb2dSZXN1bHRzKCByZXN1bHRzICk7XHJcbiAgICAgIG9wdGlvbnMuY2hpcEF3YXkgJiYgY29uc29sZS5sb2coIGNoaXBBd2F5KCByZXN1bHRzICksICdcXG4nICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdHM7XHJcbiAgfSApO1xyXG59XHJcblxyXG4vKipcclxuICogTGludHMgdGhlIHNwZWNpZmllZCByZXBvc2l0b3JpZXMuXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmdbXX0gb3JpZ2luYWxSZXBvcyAtIGxpc3Qgb2YgcmVwb3MgdG8gbGludFxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEByZXR1cm5zIHtQcm9taXNlPHtyZXN1bHRzOkFycmF5PE9iamVjdD4sb2s6Ym9vbGVhbn0+fSAtIHJlc3VsdHMgZnJvbSBsaW50aW5nIGZpbGVzLCBzZWUgRVNMaW50LmxpbnRGaWxlcy5cclxuICovXHJcbmNvbnN0IGxpbnQgPSBhc3luYyAoIG9yaWdpbmFsUmVwb3MsIG9wdGlvbnMgKSA9PiB7XHJcbiAgdHJ5IHtcclxuICAgIGNvbnN0IHJlc3VsdHMgPSBhd2FpdCBydW5Fc2xpbnQoIG9yaWdpbmFsUmVwb3MsIG9wdGlvbnMgKTtcclxuICAgIGlmICggcmVzdWx0cy5sZW5ndGggPT09IDAgKSB7XHJcbiAgICAgIHJldHVybiB7IHJlc3VsdHM6IFtdLCBvazogdHJ1ZSB9O1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHJldHVybiB7IHJlc3VsdHM6IHJlc3VsdHMsIG9rOiBmYWxzZSB9O1xyXG4gICAgfVxyXG4gIH1cclxuICBjYXRjaCggZXJyb3IgKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCAnRXJyb3IgcnVubmluZyBFU0xpbnQ6JywgZXJyb3IubWVzc2FnZSApO1xyXG4gICAgdGhyb3cgZXJyb3I7XHJcbiAgfVxyXG59O1xyXG5cclxuY29uc3QgcmVwb1Jvb3RQYXRoID0gcGF0aC5qb2luKCBfX2Rpcm5hbWUsICcuLi8uLi8uLi8nICk7IC8vIFdpbGwgZW5kIGluIGEgc2xhc2hcclxuY29uc3QgZXNjYXBlZCA9IHJlcG9Sb290UGF0aC5yZXBsYWNlKCAvXFxcXC9nLCAnXFxcXFxcXFwnICk7IC8vIEhhbmRsZSBhbnkgYmFja3NsYXNoZXMgaW4gdGhlIHBhdGhcclxuXHJcbi8vIFJlZ2V4IHRoYXQgY2FwdHVyZXMgdGhlIHJlcG8gdmlhIHRoZSBwYXRoXHJcbmNvbnN0IHJlZ0V4cCA9IG5ldyBSZWdFeHAoIGAke2VzY2FwZWR9KFtcXFxcdy1dKylbXFxcXFxcXFxcXFxcL11gICk7XHJcblxyXG5mdW5jdGlvbiB0cnlSZXBvRnJvbURlYnVnTWVzc2FnZSggbWVzc2FnZSApIHtcclxuICBhc3NlcnQoIG1lc3NhZ2UuaW5jbHVkZXMoIERFQlVHX01BUktFUiApICk7XHJcbiAgY29uc3QgbWF0Y2ggPSBtZXNzYWdlLm1hdGNoKCByZWdFeHAgKTtcclxuICByZXR1cm4gbWF0Y2ggPyBtYXRjaFsgMSBdIDogbnVsbDtcclxufVxyXG5cclxuLy8gTWFyayB0aGUgdmVyc2lvbiBzbyB0aGF0IHdlIGRvbid0IHRyeSB0byBsaW50IG9sZCBzaGFzIGlmIG9uIGFuIG9sZGVyIHZlcnNpb24gb2YgY2hpcHBlci5cclxubGludC5jaGlwcGVyQVBJVmVyc2lvbiA9ICducHgnO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBsaW50OyJdLCJtYXBwaW5ncyI6Ijs7OytDQUNBLHFKQUFBQSxtQkFBQSxZQUFBQSxvQkFBQSxXQUFBQyxDQUFBLFNBQUFDLENBQUEsRUFBQUQsQ0FBQSxPQUFBRSxDQUFBLEdBQUFDLE1BQUEsQ0FBQUMsU0FBQSxFQUFBQyxDQUFBLEdBQUFILENBQUEsQ0FBQUksY0FBQSxFQUFBQyxDQUFBLEdBQUFKLE1BQUEsQ0FBQUssY0FBQSxjQUFBUCxDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxJQUFBRCxDQUFBLENBQUFELENBQUEsSUFBQUUsQ0FBQSxDQUFBTyxLQUFBLEtBQUFDLENBQUEsd0JBQUFDLE1BQUEsR0FBQUEsTUFBQSxPQUFBQyxDQUFBLEdBQUFGLENBQUEsQ0FBQUcsUUFBQSxrQkFBQUMsQ0FBQSxHQUFBSixDQUFBLENBQUFLLGFBQUEsdUJBQUFDLENBQUEsR0FBQU4sQ0FBQSxDQUFBTyxXQUFBLDhCQUFBQyxPQUFBakIsQ0FBQSxFQUFBRCxDQUFBLEVBQUFFLENBQUEsV0FBQUMsTUFBQSxDQUFBSyxjQUFBLENBQUFQLENBQUEsRUFBQUQsQ0FBQSxJQUFBUyxLQUFBLEVBQUFQLENBQUEsRUFBQWlCLFVBQUEsTUFBQUMsWUFBQSxNQUFBQyxRQUFBLFNBQUFwQixDQUFBLENBQUFELENBQUEsV0FBQWtCLE1BQUEsbUJBQUFqQixDQUFBLElBQUFpQixNQUFBLFlBQUFBLE9BQUFqQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxXQUFB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