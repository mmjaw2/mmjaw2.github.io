"use strict";

// Copyright 2016-2024, University of Colorado Boulder

/**
 * From the a11y view template file, fill in the templated values and return the html as a string.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

// modules
var ChipperConstants = require('../common/ChipperConstants');
var ChipperStringUtils = require('../common/ChipperStringUtils');
var fixEOL = require('./fixEOL');
var getTitleStringKey = require('./getTitleStringKey');
var grunt = require('grunt');

/**
 * @param {string} repo
 * @returns {string} - the html string, filled in from the template.
 */
module.exports = function (repo) {
  var html = grunt.file.read('../chipper/templates/sim-a11y-view.html'); // the template file

  var englishStringsString = grunt.file.read("../".concat(repo, "/").concat(repo, "-strings_en.json")); // the english strings file
  var englishStringsJSON = JSON.parse(englishStringsString);
  var englishSimTitle = englishStringsJSON[getTitleStringKey(repo).split('/')[1]].value;

  // Replace placeholders in the template.
  html = ChipperStringUtils.replaceAll(html, '{{PHET_SIM_TITLE}}', englishSimTitle);
  html = ChipperStringUtils.replaceAll(html, '{{PHET_SIM_URL}}', "".concat(repo, "_").concat(ChipperConstants.FALLBACK_LOCALE, ".html"));
  html = ChipperStringUtils.replaceAll(html, '{{PHET_REPOSITORY}}', repo);

  // Remove to-dos so they don't propagate to all repo copies
  html = html.replace(/^.*\/\/[\s]?TODO.*\r?\n/mg, '');
  return fixEOL(html);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGlwcGVyQ29uc3RhbnRzIiwicmVxdWlyZSIsIkNoaXBwZXJTdHJpbmdVdGlscyIsImZpeEVPTCIsImdldFRpdGxlU3RyaW5nS2V5IiwiZ3J1bnQiLCJtb2R1bGUiLCJleHBvcnRzIiwicmVwbyIsImh0bWwiLCJmaWxlIiwicmVhZCIsImVuZ2xpc2hTdHJpbmdzU3RyaW5nIiwiY29uY2F0IiwiZW5nbGlzaFN0cmluZ3NKU09OIiwiSlNPTiIsInBhcnNlIiwiZW5nbGlzaFNpbVRpdGxlIiwic3BsaXQiLCJ2YWx1ZSIsInJlcGxhY2VBbGwiLCJGQUxMQkFDS19MT0NBTEUiLCJyZXBsYWNlIl0sInNvdXJjZXMiOlsiZ2V0QTExeVZpZXdIVE1MRnJvbVRlbXBsYXRlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEZyb20gdGhlIGExMXkgdmlldyB0ZW1wbGF0ZSBmaWxlLCBmaWxsIGluIHRoZSB0ZW1wbGF0ZWQgdmFsdWVzIGFuZCByZXR1cm4gdGhlIGh0bWwgYXMgYSBzdHJpbmcuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5cclxuLy8gbW9kdWxlc1xyXG5jb25zdCBDaGlwcGVyQ29uc3RhbnRzID0gcmVxdWlyZSggJy4uL2NvbW1vbi9DaGlwcGVyQ29uc3RhbnRzJyApO1xyXG5jb25zdCBDaGlwcGVyU3RyaW5nVXRpbHMgPSByZXF1aXJlKCAnLi4vY29tbW9uL0NoaXBwZXJTdHJpbmdVdGlscycgKTtcclxuY29uc3QgZml4RU9MID0gcmVxdWlyZSggJy4vZml4RU9MJyApO1xyXG5jb25zdCBnZXRUaXRsZVN0cmluZ0tleSA9IHJlcXVpcmUoICcuL2dldFRpdGxlU3RyaW5nS2V5JyApO1xyXG5jb25zdCBncnVudCA9IHJlcXVpcmUoICdncnVudCcgKTtcclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwb1xyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSAtIHRoZSBodG1sIHN0cmluZywgZmlsbGVkIGluIGZyb20gdGhlIHRlbXBsYXRlLlxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggcmVwbyApIHtcclxuXHJcbiAgbGV0IGh0bWwgPSBncnVudC5maWxlLnJlYWQoICcuLi9jaGlwcGVyL3RlbXBsYXRlcy9zaW0tYTExeS12aWV3Lmh0bWwnICk7IC8vIHRoZSB0ZW1wbGF0ZSBmaWxlXHJcblxyXG4gIGNvbnN0IGVuZ2xpc2hTdHJpbmdzU3RyaW5nID0gZ3J1bnQuZmlsZS5yZWFkKCBgLi4vJHtyZXBvfS8ke3JlcG99LXN0cmluZ3NfZW4uanNvbmAgKTsgLy8gdGhlIGVuZ2xpc2ggc3RyaW5ncyBmaWxlXHJcbiAgY29uc3QgZW5nbGlzaFN0cmluZ3NKU09OID0gSlNPTi5wYXJzZSggZW5nbGlzaFN0cmluZ3NTdHJpbmcgKTtcclxuICBjb25zdCBlbmdsaXNoU2ltVGl0bGUgPSBlbmdsaXNoU3RyaW5nc0pTT05bIGdldFRpdGxlU3RyaW5nS2V5KCByZXBvICkuc3BsaXQoICcvJyApWyAxIF0gXS52YWx1ZTtcclxuXHJcbiAgLy8gUmVwbGFjZSBwbGFjZWhvbGRlcnMgaW4gdGhlIHRlbXBsYXRlLlxyXG4gIGh0bWwgPSBDaGlwcGVyU3RyaW5nVXRpbHMucmVwbGFjZUFsbCggaHRtbCwgJ3t7UEhFVF9TSU1fVElUTEV9fScsIGVuZ2xpc2hTaW1UaXRsZSApO1xyXG4gIGh0bWwgPSBDaGlwcGVyU3RyaW5nVXRpbHMucmVwbGFjZUFsbCggaHRtbCwgJ3t7UEhFVF9TSU1fVVJMfX0nLCBgJHtyZXBvfV8ke0NoaXBwZXJDb25zdGFudHMuRkFMTEJBQ0tfTE9DQUxFfS5odG1sYCApO1xyXG4gIGh0bWwgPSBDaGlwcGVyU3RyaW5nVXRpbHMucmVwbGFjZUFsbCggaHRtbCwgJ3t7UEhFVF9SRVBPU0lUT1JZfX0nLCByZXBvICk7XHJcblxyXG4gIC8vIFJlbW92ZSB0by1kb3Mgc28gdGhleSBkb24ndCBwcm9wYWdhdGUgdG8gYWxsIHJlcG8gY29waWVzXHJcbiAgaHRtbCA9IGh0bWwucmVwbGFjZSggL14uKlxcL1xcL1tcXHNdP1RPRE8uKlxccj9cXG4vbWcsICcnICk7XHJcblxyXG4gIHJldHVybiBmaXhFT0woIGh0bWwgKTtcclxufTsiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBLElBQU1BLGdCQUFnQixHQUFHQyxPQUFPLENBQUUsNEJBQTZCLENBQUM7QUFDaEUsSUFBTUMsa0JBQWtCLEdBQUdELE9BQU8sQ0FBRSw4QkFBK0IsQ0FBQztBQUNwRSxJQUFNRSxNQUFNLEdBQUdGLE9BQU8sQ0FBRSxVQUFXLENBQUM7QUFDcEMsSUFBTUcsaUJBQWlCLEdBQUdILE9BQU8sQ0FBRSxxQkFBc0IsQ0FBQztBQUMxRCxJQUFNSSxLQUFLLEdBQUdKLE9BQU8sQ0FBRSxPQUFRLENBQUM7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0FLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFVBQVVDLElBQUksRUFBRztFQUVoQyxJQUFJQyxJQUFJLEdBQUdKLEtBQUssQ0FBQ0ssSUFBSSxDQUFDQyxJQUFJLENBQUUseUNBQTBDLENBQUMsQ0FBQyxDQUFDOztFQUV6RSxJQUFNQyxvQkFBb0IsR0FBR1AsS0FBSyxDQUFDSyxJQUFJLENBQUNDLElBQUksT0FBQUUsTUFBQSxDQUFRTCxJQUFJLE9BQUFLLE1BQUEsQ0FBSUwsSUFBSSxxQkFBbUIsQ0FBQyxDQUFDLENBQUM7RUFDdEYsSUFBTU0sa0JBQWtCLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFFSixvQkFBcUIsQ0FBQztFQUM3RCxJQUFNSyxlQUFlLEdBQUdILGtCQUFrQixDQUFFVixpQkFBaUIsQ0FBRUksSUFBSyxDQUFDLENBQUNVLEtBQUssQ0FBRSxHQUFJLENBQUMsQ0FBRSxDQUFDLENBQUUsQ0FBRSxDQUFDQyxLQUFLOztFQUUvRjtFQUNBVixJQUFJLEdBQUdQLGtCQUFrQixDQUFDa0IsVUFBVSxDQUFFWCxJQUFJLEVBQUUsb0JBQW9CLEVBQUVRLGVBQWdCLENBQUM7RUFDbkZSLElBQUksR0FBR1Asa0JBQWtCLENBQUNrQixVQUFVLENBQUVYLElBQUksRUFBRSxrQkFBa0IsS0FBQUksTUFBQSxDQUFLTCxJQUFJLE9BQUFLLE1BQUEsQ0FBSWIsZ0JBQWdCLENBQUNxQixlQUFlLFVBQVEsQ0FBQztFQUNwSFosSUFBSSxHQUFHUCxrQkFBa0IsQ0FBQ2tCLFVBQVUsQ0FBRVgsSUFBSSxFQUFFLHFCQUFxQixFQUFFRCxJQUFLLENBQUM7O0VBRXpFO0VBQ0FDLElBQUksR0FBR0EsSUFBSSxDQUFDYSxPQUFPLENBQUUsMkJBQTJCLEVBQUUsRUFBRyxDQUFDO0VBRXRELE9BQU9uQixNQUFNLENBQUVNLElBQUssQ0FBQztBQUN2QixDQUFDIiwiaWdub3JlTGlzdCI6W119