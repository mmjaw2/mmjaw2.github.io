"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
// Copyright 2015-2024, University of Colorado Boulder

/**
 * This function returns an object literal that describes the third-party libraries that are included in the html deliverable.
 * License info is read from sherpa/lib/license.json, and the format of the object literal is similar to that syntax.
 *
 * See getLicenseEntry.js for a description & syntax of the license entries
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 */

// modules
var _ = require('lodash');
var assert = require('assert');
var getLicenseKeys = require('./getLicenseKeys');
var grunt = require('grunt');
var THIRD_PARTY_LICENSES_FILENAME = '../sherpa/lib/license.json'; // contains third-party license info
var LICENSES_DIRECTORY = '../sherpa/licenses/'; // contains third-party licenses themselves.

/**
 * @param {string} repo
 * @param {string} brand
 */
module.exports = function (repo, brand) {
  // Read license info
  var licenseInfo = grunt.file.readJSON(THIRD_PARTY_LICENSES_FILENAME);
  var licenseKeys = getLicenseKeys(repo, brand);

  // Add all dependencies. Duplicates will be removed later.
  for (var i = 0; i < licenseKeys.length; i++) {
    var license = licenseInfo[licenseKeys[i]];
    assert(license, "".concat(THIRD_PARTY_LICENSES_FILENAME, ": no entry for key = ").concat(licenseKeys[i]));
    var dependencies = license.dependencies;
    if (_typeof(dependencies) === 'object') {
      licenseKeys = licenseKeys.concat(dependencies);
    }
  }

  // Sort keys and remove duplicates
  licenseKeys = _.uniq(_.sortBy(licenseKeys, function (key) {
    return key.toUpperCase();
  }));
  grunt.log.debug("licenseKeys = ".concat(licenseKeys.toString()));

  // Combine all licenses into 1 object literal
  var libEntries = {};
  licenseKeys.forEach(function (key) {
    var license = licenseInfo[key];

    // verify required keys
    assert(license, "".concat(THIRD_PARTY_LICENSES_FILENAME, ": no entry for key = ").concat(key));
    assert(license.text, "".concat(THIRD_PARTY_LICENSES_FILENAME, ": no text field for key = ").concat(key));
    assert(license.license, "".concat(THIRD_PARTY_LICENSES_FILENAME, ": no license field for key = ").concat(key));
    assert(license.projectURL, "".concat(THIRD_PARTY_LICENSES_FILENAME, ": no projectURL field for key = ").concat(key));
    assert(license.notes, "".concat(THIRD_PARTY_LICENSES_FILENAME, ": no notes field for key = ").concat(key));

    // read the license file
    var licenseText = grunt.file.read("".concat(LICENSES_DIRECTORY + key, ".txt"), 'utf-8');
    license.licenseText = licenseText.split(/\r?\n/);
    libEntries[key] = license;
  });
  return libEntries;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsImFzc2VydCIsImdldExpY2Vuc2VLZXlzIiwiZ3J1bnQiLCJUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRSIsIkxJQ0VOU0VTX0RJUkVDVE9SWSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXBvIiwiYnJhbmQiLCJsaWNlbnNlSW5mbyIsImZpbGUiLCJyZWFkSlNPTiIsImxpY2Vuc2VLZXlzIiwiaSIsImxlbmd0aCIsImxpY2Vuc2UiLCJjb25jYXQiLCJkZXBlbmRlbmNpZXMiLCJfdHlwZW9mIiwidW5pcSIsInNvcnRCeSIsImtleSIsInRvVXBwZXJDYXNlIiwibG9nIiwiZGVidWciLCJ0b1N0cmluZyIsImxpYkVudHJpZXMiLCJmb3JFYWNoIiwidGV4dCIsInByb2plY3RVUkwiLCJub3RlcyIsImxpY2Vuc2VUZXh0IiwicmVhZCIsInNwbGl0Il0sInNvdXJjZXMiOlsiZ2V0VGhpcmRQYXJ0eUxpYkVudHJpZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTUtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIG9iamVjdCBsaXRlcmFsIHRoYXQgZGVzY3JpYmVzIHRoZSB0aGlyZC1wYXJ0eSBsaWJyYXJpZXMgdGhhdCBhcmUgaW5jbHVkZWQgaW4gdGhlIGh0bWwgZGVsaXZlcmFibGUuXHJcbiAqIExpY2Vuc2UgaW5mbyBpcyByZWFkIGZyb20gc2hlcnBhL2xpYi9saWNlbnNlLmpzb24sIGFuZCB0aGUgZm9ybWF0IG9mIHRoZSBvYmplY3QgbGl0ZXJhbCBpcyBzaW1pbGFyIHRvIHRoYXQgc3ludGF4LlxyXG4gKlxyXG4gKiBTZWUgZ2V0TGljZW5zZUVudHJ5LmpzIGZvciBhIGRlc2NyaXB0aW9uICYgc3ludGF4IG9mIHRoZSBsaWNlbnNlIGVudHJpZXNcclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5cclxuLy8gbW9kdWxlc1xyXG5jb25zdCBfID0gcmVxdWlyZSggJ2xvZGFzaCcgKTtcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSggJ2Fzc2VydCcgKTtcclxuY29uc3QgZ2V0TGljZW5zZUtleXMgPSByZXF1aXJlKCAnLi9nZXRMaWNlbnNlS2V5cycgKTtcclxuY29uc3QgZ3J1bnQgPSByZXF1aXJlKCAnZ3J1bnQnICk7XHJcblxyXG5jb25zdCBUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRSA9ICcuLi9zaGVycGEvbGliL2xpY2Vuc2UuanNvbic7IC8vIGNvbnRhaW5zIHRoaXJkLXBhcnR5IGxpY2Vuc2UgaW5mb1xyXG5jb25zdCBMSUNFTlNFU19ESVJFQ1RPUlkgPSAnLi4vc2hlcnBhL2xpY2Vuc2VzLyc7IC8vIGNvbnRhaW5zIHRoaXJkLXBhcnR5IGxpY2Vuc2VzIHRoZW1zZWx2ZXMuXHJcblxyXG4vKipcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcG9cclxuICogQHBhcmFtIHtzdHJpbmd9IGJyYW5kXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCByZXBvLCBicmFuZCApIHtcclxuXHJcbiAgLy8gUmVhZCBsaWNlbnNlIGluZm9cclxuICBjb25zdCBsaWNlbnNlSW5mbyA9IGdydW50LmZpbGUucmVhZEpTT04oIFRISVJEX1BBUlRZX0xJQ0VOU0VTX0ZJTEVOQU1FICk7XHJcblxyXG4gIGxldCBsaWNlbnNlS2V5cyA9IGdldExpY2Vuc2VLZXlzKCByZXBvLCBicmFuZCApO1xyXG5cclxuICAvLyBBZGQgYWxsIGRlcGVuZGVuY2llcy4gRHVwbGljYXRlcyB3aWxsIGJlIHJlbW92ZWQgbGF0ZXIuXHJcbiAgZm9yICggbGV0IGkgPSAwOyBpIDwgbGljZW5zZUtleXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICBjb25zdCBsaWNlbnNlID0gbGljZW5zZUluZm9bIGxpY2Vuc2VLZXlzWyBpIF0gXTtcclxuICAgIGFzc2VydCggbGljZW5zZSwgYCR7VEhJUkRfUEFSVFlfTElDRU5TRVNfRklMRU5BTUV9OiBubyBlbnRyeSBmb3Iga2V5ID0gJHtsaWNlbnNlS2V5c1sgaSBdfWAgKTtcclxuICAgIGNvbnN0IGRlcGVuZGVuY2llcyA9IGxpY2Vuc2UuZGVwZW5kZW5jaWVzO1xyXG4gICAgaWYgKCB0eXBlb2YgZGVwZW5kZW5jaWVzID09PSAnb2JqZWN0JyApIHtcclxuICAgICAgbGljZW5zZUtleXMgPSBsaWNlbnNlS2V5cy5jb25jYXQoIGRlcGVuZGVuY2llcyApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLy8gU29ydCBrZXlzIGFuZCByZW1vdmUgZHVwbGljYXRlc1xyXG4gIGxpY2Vuc2VLZXlzID0gXy51bmlxKCBfLnNvcnRCeSggbGljZW5zZUtleXMsIGtleSA9PiBrZXkudG9VcHBlckNhc2UoKSApICk7XHJcblxyXG4gIGdydW50LmxvZy5kZWJ1ZyggYGxpY2Vuc2VLZXlzID0gJHtsaWNlbnNlS2V5cy50b1N0cmluZygpfWAgKTtcclxuXHJcbiAgLy8gQ29tYmluZSBhbGwgbGljZW5zZXMgaW50byAxIG9iamVjdCBsaXRlcmFsXHJcbiAgY29uc3QgbGliRW50cmllcyA9IHt9O1xyXG4gIGxpY2Vuc2VLZXlzLmZvckVhY2goIGtleSA9PiB7XHJcblxyXG4gICAgY29uc3QgbGljZW5zZSA9IGxpY2Vuc2VJbmZvWyBrZXkgXTtcclxuXHJcbiAgICAvLyB2ZXJpZnkgcmVxdWlyZWQga2V5c1xyXG4gICAgYXNzZXJ0KCBsaWNlbnNlLCBgJHtUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRX06IG5vIGVudHJ5IGZvciBrZXkgPSAke2tleX1gICk7XHJcbiAgICBhc3NlcnQoIGxpY2Vuc2UudGV4dCwgYCR7VEhJUkRfUEFSVFlfTElDRU5TRVNfRklMRU5BTUV9OiBubyB0ZXh0IGZpZWxkIGZvciBrZXkgPSAke2tleX1gICk7XHJcbiAgICBhc3NlcnQoIGxpY2Vuc2UubGljZW5zZSwgYCR7VEhJUkRfUEFSVFlfTElDRU5TRVNfRklMRU5BTUV9OiBubyBsaWNlbnNlIGZpZWxkIGZvciBrZXkgPSAke2tleX1gICk7XHJcbiAgICBhc3NlcnQoIGxpY2Vuc2UucHJvamVjdFVSTCwgYCR7VEhJUkRfUEFSVFlfTElDRU5TRVNfRklMRU5BTUV9OiBubyBwcm9qZWN0VVJMIGZpZWxkIGZvciBrZXkgPSAke2tleX1gICk7XHJcbiAgICBhc3NlcnQoIGxpY2Vuc2Uubm90ZXMsIGAke1RISVJEX1BBUlRZX0xJQ0VOU0VTX0ZJTEVOQU1FfTogbm8gbm90ZXMgZmllbGQgZm9yIGtleSA9ICR7a2V5fWAgKTtcclxuXHJcbiAgICAvLyByZWFkIHRoZSBsaWNlbnNlIGZpbGVcclxuICAgIGNvbnN0IGxpY2Vuc2VUZXh0ID0gZ3J1bnQuZmlsZS5yZWFkKCBgJHtMSUNFTlNFU19ESVJFQ1RPUlkgKyBrZXl9LnR4dGAsICd1dGYtOCcgKTtcclxuICAgIGxpY2Vuc2UubGljZW5zZVRleHQgPSBsaWNlbnNlVGV4dC5zcGxpdCggL1xccj9cXG4vICk7XHJcblxyXG4gICAgbGliRW50cmllc1sga2V5IF0gPSBsaWNlbnNlO1xyXG4gIH0gKTtcclxuXHJcbiAgcmV0dXJuIGxpYkVudHJpZXM7XHJcbn07Il0sIm1hcHBpbmdzIjoiOzs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0E7QUFDQSxJQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBRSxRQUFTLENBQUM7QUFDN0IsSUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUUsUUFBUyxDQUFDO0FBQ2xDLElBQU1FLGNBQWMsR0FBR0YsT0FBTyxDQUFFLGtCQUFtQixDQUFDO0FBQ3BELElBQU1HLEtBQUssR0FBR0gsT0FBTyxDQUFFLE9BQVEsQ0FBQztBQUVoQyxJQUFNSSw2QkFBNkIsR0FBRyw0QkFBNEIsQ0FBQyxDQUFDO0FBQ3BFLElBQU1DLGtCQUFrQixHQUFHLHFC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