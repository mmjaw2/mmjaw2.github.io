"use strict";

function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2017-2024, University of Colorado Boulder

/**
 * Builds a runnable (something that builds like a simulation)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

// modules
var _ = require('lodash');
var assert = require('assert');
var ChipperConstants = require('../common/ChipperConstants');
var ChipperStringUtils = require('../common/ChipperStringUtils');
var getLicenseEntry = require('../common/getLicenseEntry');
var copyDirectory = require('./copyDirectory');
var copySupplementalPhetioFiles = require('./copySupplementalPhetioFiles');
var generateThumbnails = require('./generateThumbnails');
var generateTwitterCard = require('./generateTwitterCard');
var getA11yViewHTMLFromTemplate = require('./getA11yViewHTMLFromTemplate');
var getAllThirdPartyEntries = require('./getAllThirdPartyEntries');
var getDependencies = require('./getDependencies');
var getInitializationScript = require('./getInitializationScript');
var getLocalesFromRepository = require('./getLocalesFromRepository');
var getPhetLibs = require('./getPhetLibs');
var getPreloads = require('./getPreloads');
var getStringMap = require('./getStringMap');
var getTitleStringKey = require('./getTitleStringKey');
var grunt = require('grunt');
var path = require('path');
var jimp = require('jimp');
var loadFileAsDataURI = require('../common/loadFileAsDataURI');
var minify = require('./minify');
var nodeHTMLEncoder = require('node-html-encoder'); // eslint-disable-line require-statement-match
var packageRunnable = require('./packageRunnable');
var packageXHTML = require('./packageXHTML');
var reportUnusedMedia = require('./reportUnusedMedia');
var reportUnusedStrings = require('./reportUnusedStrings');
var webpackBuild = require('./webpackBuild');
var zlib = require('zlib');
var phetTimingLog = require('../../../perennial-alias/js/common/phetTimingLog');
var recordTime = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(name, asyncCallback, timeCallback) {
    var beforeTime, result, afterTime;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          beforeTime = Date.now();
          _context2.next = 3;
          return phetTimingLog.startAsync(name, /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
            var result;
            return _regeneratorRuntime().wrap(function _callee$(_context) {
              while (1) switch (_context.prev = _context.next) {
                case 0:
                  _context.next = 2;
                  return asyncCallback();
                case 2:
                  result = _context.sent;
                  return _context.abrupt("return", result);
                case 4:
                case "end":
                  return _context.stop();
              }
            }, _callee);
          })));
        case 3:
          result = _context2.sent;
          afterTime = Date.now();
          timeCallback(afterTime - beforeTime, result);
          return _context2.abrupt("return", result);
        case 7:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function recordTime(_x, _x2, _x3) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Builds a runnable (e.g. a simulation).
 * @public
 *
 * @param {string} repo
 * @param {Object} minifyOptions - see minify.js
 * @param {boolean} allHTML - If the _all.html file should be generated
 * @param {string} brand
 * @param {string} localesOption - e.g,. '*', 'en,es', etc.
 * @param {boolean} buildLocal
 * @param {boolean} encodeStringMap
 * @param {boolean} compressScripts
 * @param {boolean} profileFileSize
 * @returns {Promise} - Does not resolve a value
 */
module.exports = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(repo, minifyOptions, allHTML, brand, localesOption, buildLocal, encodeStringMap, compressScripts, profileFileSize) {
    var packageObject, encoder, timestamp, webpackResult, webpackJS, debugMinifyOptions, usedModules, licenseEntries, phetLibs, allLocales, locales, dependencies, version, thirdPartyEntries, simTitleStringKey, _getStringMap, stringMap, stringMetadata, _iterator, _step, _locale, englishTitle, htmlHeader, startupScripts, minifiableScripts, productionScripts, debugScripts, licenseScript, commonInitializationOptions, buildDir, _iterator2, _step2, locale, initializationScript, _initializationScript, allHTMLFilename, allHTMLContents, debugInitializationScript, xhtmlDir, xhtmlInitializationScript, _englishTitle, iframeTestHtml, iframeLocales, a11yHTML, thumbnailSizes, _i, _thumbnailSizes, size;
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          assert(typeof repo === 'string');
          assert(_typeof(minifyOptions) === 'object');
          if (brand === 'phet-io') {
            assert(grunt.file.exists('../phet-io'), 'Aborting the build of phet-io brand since proprietary repositories are not checked out.\nPlease use --brands=={{BRAND}} in the future to avoid this.');
          }
          packageObject = grunt.file.readJSON("../".concat(repo, "/package.json"));
          encoder = new nodeHTMLEncoder.Encoder('entity'); // All html files share the same build timestamp
          timestamp = new Date().toISOString().split('T').join(' ');
          timestamp = "".concat(timestamp.substring(0, timestamp.indexOf('.')), " UTC");

          // Start running webpack
          _context6.next = 9;
          return recordTime('webpack', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
              while (1) switch (_context3.prev = _context3.next) {
                case 0:
                  return _context3.abrupt("return", webpackBuild(repo, brand, {
                    profileFileSize: profileFileSize
                  }));
                case 1:
                case "end":
                  return _context3.stop();
              }
            }, _callee3);
          })), function (time) {
            grunt.log.ok("Webpack build complete: ".concat(time, "ms"));
          });
        case 9:
          webpackResult = _context6.sent;
          // NOTE: This build currently (due to the string/mipmap plugins) modifies globals. Some operations need to be done after this.
          webpackJS = wrapProfileFileSize("phet.chipper.runWebpack = function() {".concat(webpackResult.js, "};"), profileFileSize, 'WEBPACK'); // Debug version is independent of passed in minifyOptions.  PhET-iO brand is minified, but leaves assertions & logging.
          debugMinifyOptions = brand === 'phet-io' ? {
            stripAssertions: false,
            stripLogging: false
          } : {
            minify: false
          }; // If turning off minification for the main build, don't minify the debug version also
          if (minifyOptions.minify === false) {
            debugMinifyOptions.minify = false;
          }
          usedModules = webpackResult.usedModules;
          reportUnusedMedia(repo, usedModules);
          licenseEntries = {};
          ChipperConstants.MEDIA_TYPES.forEach(function (mediaType) {
            licenseEntries[mediaType] = {};
          });
          usedModules.forEach(function (module) {
            ChipperConstants.MEDIA_TYPES.forEach(function (mediaType) {
              if (module.split('/')[1] === mediaType) {
                // The file suffix is stripped and restored to its non-js extension. This is because getLicenseEntry doesn't
                // handle modulified media files.
                var index = module.lastIndexOf('_');
                var _path = "".concat(module.slice(0, index), ".").concat(module.slice(index + 1, -3));
                licenseEntries[mediaType][module] = getLicenseEntry("../".concat(_path));
              }
            });
          });
          phetLibs = getPhetLibs(repo, brand);
          allLocales = [ChipperConstants.FALLBACK_LOCALE].concat(_toConsumableArray(getLocalesFromRepository(repo)));
          locales = localesOption === '*' ? allLocales : localesOption.split(',');
          _context6.next = 23;
          return getDependencies(repo);
        case 23:
          dependencies = _context6.sent;
          webpackResult.usedModules.forEach(function (moduleDependency) {
            // The first part of the path is the repo.  Or if no directory is specified, the file is in the sim repo.
            var pathSeparatorIndex = moduleDependency.indexOf(path.sep);
            var moduleRepo = pathSeparatorIndex >= 0 ? moduleDependency.slice(0, pathSeparatorIndex) : repo;
            assert(Object.keys(dependencies).includes(moduleRepo), "repo ".concat(moduleRepo, " missing from package.json's phetLibs for ").concat(moduleDependency));
          });
          version = packageObject.version; // Include the one-off name in the version
          thirdPartyEntries = getAllThirdPartyEntries(repo, brand, licenseEntries);
          simTitleStringKey = getTitleStringKey(repo);
          _getStringMap = getStringMap(repo, allLocales, phetLibs, webpackResult.usedModules), stringMap = _getStringMap.stringMap, stringMetadata = _getStringMap.stringMetadata; // After our string map is constructed, report which of the translatable strings are unused.
          reportUnusedStrings(repo, packageObject.phet.requirejsNamespace, stringMap[ChipperConstants.FALLBACK_LOCALE]);

          // If we have NO strings for a given locale that we want, we'll need to fill it in with all English strings, see
          // https://github.com/phetsims/perennial/issues/83
          _iterator = _createForOfIteratorHelper(locales);
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              _locale = _step.value;
              if (!stringMap[_locale]) {
                stringMap[_locale] = stringMap[ChipperConstants.FALLBACK_LOCALE];
              }
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          englishTitle = stringMap[ChipperConstants.FALLBACK_LOCALE][simTitleStringKey];
          assert(englishTitle, "missing entry for sim title, key = ".concat(simTitleStringKey));

          // Select the HTML comment header based on the brand, see https://github.com/phetsims/chipper/issues/156

          if (brand === 'phet-io') {
            // License text provided by @kathy-phet in https://github.com/phetsims/chipper/issues/148#issuecomment-112584773
            htmlHeader = "".concat(englishTitle, " ").concat(version, "\n") + "Copyright 2002-".concat(grunt.template.today('yyyy'), ", Regents of the University of Colorado\n") + 'PhET Interactive Simulations, University of Colorado Boulder\n' + '\n' + 'This Interoperable PhET Simulation file requires a license.\n' + 'USE WITHOUT A LICENSE AGREEMENT IS STRICTLY PROHIBITED.\n' + 'Contact phethelp@colorado.edu regarding licensing.\n' + 'https://phet.colorado.edu/en/licensing';
          } else {
            htmlHeader = "".concat(englishTitle, " ").concat(version, "\n") + "Copyright 2002-".concat(grunt.template.today('yyyy'), ", Regents of the University of Colorado\n") + 'PhET Interactive Simulations, University of Colorado Boulder\n' + '\n' + 'This file is licensed under Creative Commons Attribution 4.0\n' + 'For alternate source code licensing, see https://github.com/phetsims\n' + 'For licenses for third-party software used by this simulation, see below\n' + 'For more information, see https://phet.colorado.edu/en/licensing/html\n' + '\n' + 'The PhET name and PhET logo are registered trademarks of The Regents of the\n' + 'University of Colorado. Permission is granted to use the PhET name and PhET logo\n' + 'only for attribution purposes. Use of the PhET name and/or PhET logo for promotional,\n' + 'marketing, or advertising purposes requires a separate license agreement from the\n' + 'University of Colorado. Contact phethelp@colorado.edu regarding licensing.';
          }

          // Scripts that are run before our main minifiable content
          startupScripts = [
          // Splash image
          wrapProfileFileSize("window.PHET_SPLASH_DATA_URI=\"".concat(loadFileAsDataURI("../brand/".concat(brand, "/images/splash.svg")), "\";"), profileFileSize, 'SPLASH')];
          minifiableScripts = [].concat(_toConsumableArray(getPreloads(repo, brand, true).map(function (filename) {
            return wrapProfileFileSize(grunt.file.read(filename), profileFileSize, 'PRELOAD', filename);
          })), [
          // Our main module content, wrapped in a function called in the startup below
          webpackJS,
          // Main startup
          wrapProfileFileSize(grunt.file.read('../chipper/templates/chipper-startup.js'), profileFileSize, 'STARTUP')]);
          _context6.next = 39;
          return recordTime('minify-production', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
              while (1) switch (_context4.prev = _context4.next) {
                case 0:
                  return _context4.abrupt("return", [].concat(startupScripts, _toConsumableArray(minifiableScripts.map(function (js) {
                    return minify(js, minifyOptions);
                  }))));
                case 1:
                case "end":
                  return _context4.stop();
              }
            }, _callee4);
          })), function (time, scripts) {
            grunt.log.ok("Production minification complete: ".concat(time, "ms (").concat(_.sum(scripts.map(function (js) {
              return js.length;
            })), " bytes)"));
          });
        case 39:
          productionScripts = _context6.sent;
          _context6.next = 42;
          return recordTime('minify-debug', /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5() {
            return _regeneratorRuntime().wrap(function _callee5$(_context5) {
              while (1) switch (_context5.prev = _context5.next) {
                case 0:
                  return _context5.abrupt("return", [].concat(startupScripts, _toConsumableArray(minifiableScripts.map(function (js) {
                    return minify(js, debugMinifyOptions);
                  }))));
                case 1:
                case "end":
                  return _context5.stop();
              }
            }, _callee5);
          })), function (time, scripts) {
            grunt.log.ok("Debug minification complete: ".concat(time, "ms (").concat(_.sum(scripts.map(function (js) {
              return js.length;
            })), " bytes)"));
          });
        case 42:
          debugScripts = _context6.sent;
          licenseScript = wrapProfileFileSize(ChipperStringUtils.replacePlaceholders(grunt.file.read('../chipper/templates/license-initialization.js'), {
            PHET_START_THIRD_PARTY_LICENSE_ENTRIES: ChipperConstants.START_THIRD_PARTY_LICENSE_ENTRIES,
            PHET_THIRD_PARTY_LICENSE_ENTRIES: JSON.stringify(thirdPartyEntries, null, 2),
            PHET_END_THIRD_PARTY_LICENSE_ENTRIES: ChipperConstants.END_THIRD_PARTY_LICENSE_ENTRIES
          }), profileFileSize, 'LICENSE');
          commonInitializationOptions = {
            brand: brand,
            repo: repo,
            allLocales: allLocales,
            stringMap: stringMap,
            stringMetadata: stringMetadata,
            dependencies: dependencies,
            timestamp: timestamp,
            version: version,
            packageObject: packageObject,
            allowLocaleSwitching: false,
            encodeStringMap: encodeStringMap,
            profileFileSize: profileFileSize,
            wrapStringsJS: function wrapStringsJS(stringsJS) {
              return wrapProfileFileSize(stringsJS, profileFileSize, 'STRINGS');
            }
          }; // Create the build-specific directory
          buildDir = "../".concat(repo, "/build/").concat(brand);
          grunt.file.mkdir(buildDir);

          // {{locale}}.html
          if (brand !== 'phet-io') {
            _iterator2 = _createForOfIteratorHelper(locales);
            try {
              for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {
                locale = _step2.value;
                initializationScript = getInitializationScript(_.assignIn({
                  locale: locale,
                  includeAllLocales: false,
                  isDebugBuild: false
                }, commonInitializationOptions));
                grunt.file.write("".concat(buildDir, "/").concat(repo, "_").concat(locale, "_").concat(brand, ".html"), packageRunnable({
                  repo: repo,
                  stringMap: stringMap,
                  htmlHeader: htmlHeader,
                  locale: locale,
                  compressScripts: compressScripts,
                  licenseScript: licenseScript,
                  scripts: [initializationScript].concat(_toConsumableArray(productionScripts))
                }));
              }
            } catch (err) {
              _iterator2.e(err);
            } finally {
              _iterator2.f();
            }
          }

          // _all.html (forced for phet-io)
          if (allHTML || brand === 'phet-io') {
            _initializationScript = getInitializationScript(_.assignIn({
              locale: ChipperConstants.FALLBACK_LOCALE,
              includeAllLocales: true,
              isDebugBuild: false
            }, commonInitializationOptions, {
              allowLocaleSwitching: true
            }));
            allHTMLFilename = "".concat(buildDir, "/").concat(repo, "_all_").concat(brand, ".html");
            allHTMLContents = packageRunnable({
              repo: repo,
              stringMap: stringMap,
              htmlHeader: htmlHeader,
              locale: ChipperConstants.FALLBACK_LOCALE,
              compressScripts: compressScripts,
              licenseScript: licenseScript,
              scripts: [_initializationScript].concat(_toConsumableArray(productionScripts))
            });
            grunt.file.write(allHTMLFilename, allHTMLContents);

            // Add a compressed file to improve performance in the iOS app, see https://github.com/phetsims/chipper/issues/746
            grunt.file.write("".concat(allHTMLFilename, ".gz"), zlib.gzipSync(allHTMLContents));
          }

          // Debug build (always included)
          debugInitializationScript = getInitializationScript(_.assignIn({
            locale: ChipperConstants.FALLBACK_LOCALE,
            includeAllLocales: true,
            isDebugBuild: true
          }, commonInitializationOptions, {
            allowLocaleSwitching: true
          }));
          grunt.file.write("".concat(buildDir, "/").concat(repo, "_all_").concat(brand, "_debug.html"), packageRunnable({
            repo: repo,
            stringMap: stringMap,
            htmlHeader: htmlHeader,
            locale: ChipperConstants.FALLBACK_LOCALE,
            compressScripts: compressScripts,
            licenseScript: licenseScript,
            scripts: [debugInitializationScript].concat(_toConsumableArray(debugScripts))
          }));

          // XHTML build (ePub compatibility, etc.)
          xhtmlDir = "".concat(buildDir, "/xhtml");
          grunt.file.mkdir(xhtmlDir);
          xhtmlInitializationScript = getInitializationScript(_.assignIn({
            locale: ChipperConstants.FALLBACK_LOCALE,
            includeAllLocales: true,
            isDebugBuild: false
          }, commonInitializationOptions, {
            allowLocaleSwitching: true
          }));
          packageXHTML(xhtmlDir, {
            repo: repo,
            brand: brand,
            stringMap: stringMap,
            htmlHeader: htmlHeader,
            initializationScript: xhtmlInitializationScript,
            licenseScript: licenseScript,
            scripts: productionScripts
          });

          // dependencies.json
          grunt.file.write("".concat(buildDir, "/dependencies.json"), JSON.stringify(dependencies, null, 2));

          // string-map.json and english-string-map.json, for things like Rosetta that need to know what strings are used
          grunt.file.write("".concat(buildDir, "/string-map.json"), JSON.stringify(stringMap, null, 2));
          grunt.file.write("".concat(buildDir, "/english-string-map.json"), JSON.stringify(stringMap.en, null, 2));

          // -iframe.html (English is assumed as the locale).
          if (_.includes(locales, ChipperConstants.FALLBACK_LOCALE) && brand === 'phet') {
            _englishTitle = stringMap[ChipperConstants.FALLBACK_LOCALE][getTitleStringKey(repo)];
            grunt.log.debug('Constructing HTML for iframe testing from template');
            iframeTestHtml = grunt.file.read('../chipper/templates/sim-iframe.html');
            iframeTestHtml = ChipperStringUtils.replaceFirst(iframeTestHtml, '{{PHET_SIM_TITLE}}', encoder.htmlEncode("".concat(_englishTitle, " iframe test")));
            iframeTestHtml = ChipperStringUtils.replaceFirst(iframeTestHtml, '{{PHET_REPOSITORY}}', repo);
            iframeLocales = ['en'].concat(allHTML ? ['all'] : []);
            iframeLocales.forEach(function (locale) {
              var iframeHtml = ChipperStringUtils.replaceFirst(iframeTestHtml, '{{PHET_LOCALE}}', locale);
              grunt.file.write("".concat(buildDir, "/").concat(repo, "_").concat(locale, "_iframe_phet.html"), iframeHtml);
            });
          }

          // If the sim is a11y outfitted, then add the a11y pdom viewer to the build dir. NOTE: Not for phet-io builds.
          if (packageObject.phet.simFeatures && packageObject.phet.simFeatures.supportsInteractiveDescription && brand === 'phet') {
            // (a11y) Create the a11y-view HTML file for PDOM viewing.
            a11yHTML = getA11yViewHTMLFromTemplate(repo); // this replaceAll is outside of the getA11yViewHTMLFromTemplate because we only want it filled in during the build
            a11yHTML = ChipperStringUtils.replaceAll(a11yHTML, '{{IS_BUILT}}', 'true');
            grunt.file.write("".concat(buildDir, "/").concat(repo).concat(ChipperConstants.A11Y_VIEW_HTML_SUFFIX), a11yHTML);
          }

          // copy over supplemental files or dirs to package with the build. Only supported in phet brand
          if (packageObject.phet && packageObject.phet.packageWithBuild) {
            assert(Array.isArray(packageObject.phet.packageWithBuild));
            packageObject.phet.packageWithBuild.forEach(function (path) {
              assert(typeof path === 'string', 'path should be a string');
              assert(grunt.file.exists(path), "path does not exist: ".concat(path));
              if (grunt.file.isDir(path)) {
                copyDirectory(path, "".concat(buildDir, "/").concat(path));
              } else {
                grunt.file.copy(path, "".concat(buildDir, "/").concat(path));
              }
            });
          }
          if (!(brand === 'phet-io')) {
            _context6.next = 64;
            break;
          }
          _context6.next = 64;
          return copySupplementalPhetioFiles(repo, version, englishTitle, packageObject, buildLocal, true);
        case 64:
          if (!grunt.file.exists("../".concat(repo, "/assets/").concat(repo, "-screenshot.png"))) {
            _context6.next = 91;
            break;
          }
          thumbnailSizes = [{
            width: 128,
            height: 84
          }, {
            width: 600,
            height: 394
          }];
          _i = 0, _thumbnailSizes = thumbnailSizes;
        case 67:
          if (!(_i < _thumbnailSizes.length)) {
            _context6.next = 78;
            break;
          }
          size = _thumbnailSizes[_i];
          _context6.t0 = grunt.file;
          _context6.t1 = "".concat(buildDir, "/").concat(repo, "-").concat(size.width, ".png");
          _context6.next = 73;
          return generateThumbnails(repo, size.width, size.height, 100, jimp.MIME_PNG);
        case 73:
          _context6.t2 = _context6.sent;
          _context6.t0.write.call(_context6.t0, _context6.t1, _context6.t2);
        case 75:
          _i++;
          _context6.next = 67;
          break;
        case 78:
          if (!(brand === 'phet')) {
            _context6.next = 91;
            break;
          }
          _context6.t3 = grunt.file;
          _context6.t4 = "".concat(buildDir, "/").concat(repo, "-ios.png");
          _context6.next = 83;
          return generateThumbnails(repo, 420, 276, 90, jimp.MIME_JPEG);
        case 83:
          _context6.t5 = _context6.sent;
          _context6.t3.write.call(_context6.t3, _context6.t4, _context6.t5);
          _context6.t6 = grunt.file;
          _context6.t7 = "".concat(buildDir, "/").concat(repo, "-twitter-card.png");
          _context6.next = 89;
          return generateTwitterCard(repo);
        case 89:
          _context6.t8 = _context6.sent;
          _context6.t6.write.call(_context6.t6, _context6.t7, _context6.t8);
        case 91:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return function (_x4, _x5, _x6, _x7, _x8, _x9, _x10, _x11, _x12) {
    return _ref3.apply(this, arguments);
  };
}();

// For profiling file size. Name is optional
var wrapProfileFileSize = function wrapProfileFileSize(string, profileFileSize, type, name) {
  if (profileFileSize) {
    var conditionalName = name ? ",\"".concat(name, "\"") : '';
    return "console.log(\"START_".concat(type.toUpperCase(), "\"").concat(conditionalName, ");\n").concat(string, "\nconsole.log(\"END_").concat(type.toUpperCase(), "\"").concat(conditionalName, ");\n\n");
  } else {
    return string;
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,