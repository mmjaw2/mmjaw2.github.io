"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2015-2023, University of Colorado Boulder

/**
 * Creates a composite report of all of the 3rd party images, code, sounds and other media used by all of the published
 * PhET Simulations. The reports is published at: https://github.com/phetsims/sherpa/blob/main/third-party-licenses.md
 *
 * Usage:
 * grunt report-third-party
 * // then push sherpa/third-party-licenses.md
 *
 * Third party entries are parsed from the HTML files for all simulations published on the PhET website.
 * See getLicenseEntry.js for documentation of the fields in the entries.
 *
 * Copy the local-auth-code key value from phet-server2:/usr/local/tomcat8/conf/context.xml into the value for
 * websiteAuthorizationCode in ~/.phet/build-local.json
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var _ = require('lodash');
var assert = require('assert');
var ChipperConstants = require('../common/ChipperConstants');
var fs = require('fs');
var grunt = require('grunt');
var https = require('https');
var axios = require('axios');

/**
 * @returns {Promise} - Resolves when complete.
 */
module.exports = /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
  var serverName, BUILD_LOCAL_FILENAME, buildLocalJSON, outputFilename, compositeCode, compositeMedia, simTitles, simLibraries, activeSims, _iterator, _step, sim, url, html, startIndex, endIndex, substring, firstCurlyBrace, lastCurlyBrace, jsonString, json, title, libString, _entry2, requestPromise, entry, licenseJSON, codeOutput, codeLicensesUsed, mediaLicensesUsed, libraryNames, lib, i, library, lineElementsForLibrary, mediaOutput, mediaKeys, imageAudioEntry, _i, mediaKey, text, projectURL, notes, license, mediaEntryLines, fileList, outputString, parseTitle, augment;
  return _regeneratorRuntime().wrap(function _callee$(_context) {
    while (1) switch (_context.prev = _context.next) {
      case 0:
        augment = function _augment(repositoryName, source, destination) {
          for (var _entry in source) {
            if (source.hasOwnProperty(_entry)) {
              if (!destination.hasOwnProperty(_entry)) {
                destination[_entry] = source[_entry]; //overwrites
                destination[_entry].usedBy = [];
              }
              destination[_entry].usedBy.push(repositoryName);
            }
          }
        };
        parseTitle = function _parseTitle(html) {
          var startKey = '<title>';
          var endKey = '</title>';
          var startIndex = html.indexOf(startKey);
          var endIndex = html.indexOf(endKey);
          return html.substring(startIndex + startKey.length, endIndex).trim();
        };
        // read configuration file - required to write to website database
        serverName = 'phet.colorado.edu';
        BUILD_LOCAL_FILENAME = "".concat(process.env.HOME, "/.phet/build-local.json");
        buildLocalJSON = JSON.parse(fs.readFileSync(BUILD_LOCAL_FILENAME, {
          encoding: 'utf-8'
        }));
        assert(buildLocalJSON && buildLocalJSON.websiteAuthorizationCode, "websiteAuthorizationCode missing from ".concat(BUILD_LOCAL_FILENAME));

        // The file where the report will be written
        outputFilename = '../sherpa/third-party-licenses.md'; // Aggregate results for each of the license types
        compositeCode = {};
        compositeMedia = {}; // List of all of the repository names, so that we can detect which libraries are used by all-sims
        simTitles = []; // List of libraries for each sim
        // Type: string in JSON format
        simLibraries = []; // Download all sims. If it's not published, it will be skipped in the report
        activeSims = fs.readFileSync('../perennial-alias/data/active-sims', 'utf-8').trim().split('\n').map(function (sim) {
          return sim.trim();
        });
        _iterator = _createForOfIteratorHelper(activeSims);
        _context.prev = 13;
        _iterator.s();
      case 15:
        if ((_step = _iterator.n()).done) {
          _context.next = 46;
          break;
        }
        sim = _step.value;
        url = "https://".concat(serverName, "/sims/html/").concat(sim, "/latest/").concat(sim, "_en.html");
        console.log("downloading ".concat(sim));
        _context.prev = 19;
        _context.next = 22;
        return axios(url);
      case 22:
        html = _context.sent.data.trim();
        startIndex = html.indexOf(ChipperConstants.START_THIRD_PARTY_LICENSE_ENTRIES);
        endIndex = html.indexOf(ChipperConstants.END_THIRD_PARTY_LICENSE_ENTRIES);
        substring = html.substring(startIndex, endIndex);
        firstCurlyBrace = substring.indexOf('{');
        lastCurlyBrace = substring.lastIndexOf('}');
        jsonString = substring.substring(firstCurlyBrace, lastCurlyBrace + 1);
        json = JSON.parse(jsonString);
        title = parseTitle(html);
        if (!title || title.indexOf('undefined') === 0 || title.indexOf('TITLE') >= 0) {
          grunt.log.writeln("title not found for ".concat(sim));
          title = sim;
        }
        augment(title, json.lib, compositeCode);
        augment(title, json.sounds, compositeMedia);
        augment(title, json.images, compositeMedia);
        simTitles.push(title);

        // Concatenate all the libraries for this sim with html newline.
        libString = '';
        for (_entry2 in json.lib) {
          libString += "".concat(_entry2, "<br/>");
        }

        //  Update the object to be pushed to the website database
        simLibraries.push({
          name: sim,
          libraries: libString
        });
        _context.next = 44;
        break;
      case 41:
        _context.prev = 41;
        _context.t0 = _context["catch"](19);
        console.log("".concat(sim, " not found on production"));
      case 44:
        _context.next = 15;
        break;
      case 46:
        _context.next = 51;
        break;
      case 48:
        _context.prev = 48;
        _context.t1 = _context["catch"](13);
        _iterator.e(_context.t1);
      case 51:
        _context.prev = 51;
        _iterator.f();
        return _context.finish(51);
      case 54:
        requestPromise = new Promise(function (resolve, reject) {
          // Change libraryobject to string in format that the database will recognize.
          // i.e. '{"sim-name":"Library Name<br/>Library Name", ...}'
          var libraryString = "{".concat(simLibraries.map(function (o) {
            return "\"".concat(o.name, "\":\"").concat(o.libraries, "\"");
          }).join(','), "}");
          var requestOptions = {
            host: serverName,
            path: '/services/add-simulation-libraries',
            port: 443,
            method: 'POST',
            auth: "token:".concat(buildLocalJSON.websiteAuthorizationCode),
            headers: {
              'Content-Type': 'application/x-www-form-urlencoded',
              'Content-Length': Buffer.byteLength(libraryString)
            }
          };
          var request = https.request(requestOptions, function (res) {
            return resolve(res);
          });
          request.on('error', function (e) {
            grunt.log.writeln("There was a problem uploading the data to the website: ".concat(e.message));
            reject(e);
          });

          // write data to request body
          request.write(libraryString);
          request.end();
        });
        grunt.log.writeln('Sending license data to /services/add-simulation-libraries');
        _context.next = 58;
        return requestPromise;
      case 58:
        grunt.log.writeln('Sending data complete');

        // Sort to easily compare lists of repositoryNames with usedBy columns, to see which resources are used by everything.
        simTitles.sort();

        // If anything is used by every sim indicate that here
        for (entry in compositeCode) {
          if (compositeCode.hasOwnProperty(entry)) {
            compositeCode[entry].usedBy.sort();
            if (_.isEqual(simTitles, compositeCode[entry].usedBy)) {
              compositeCode[entry].usedBy = 'all-sims'; // this is an annotation, not the vestigial all-sims repo
            }
          }
        }
        licenseJSON = grunt.file.readJSON('../sherpa/lib/license.json');
        codeOutput = [];
        codeLicensesUsed = [];
        mediaLicensesUsed = []; // Get a list of the library names
        libraryNames = [];
        for (lib in licenseJSON) {
          if (licenseJSON.hasOwnProperty(lib)) {
            libraryNames.push(lib);
          }
        }

        // Use a case insensitive sort, see http://stackoverflow.com/questions/8996963/how-to-perform-case-insensitive-sorting-in-javascript
        libraryNames.sort(function (a, b) {
          return a.toLowerCase().localeCompare(b.toLowerCase());
        });

        // Add info for each library to the MD report
        for (i = 0; i < libraryNames.length; i++) {
          library = libraryNames[i];
          lineElementsForLibrary = ["**".concat(library, "**"), licenseJSON[library].text.join('<br>'), licenseJSON[library].projectURL, "License: [".concat(licenseJSON[library].license, "](licenses/").concat(library, ".txt)"), "Notes: ".concat(licenseJSON[library].notes)];
          if (licenseJSON[library].dependencies) {
            lineElementsForLibrary.push("Dependencies: **".concat(licenseJSON[library].dependencies, "**"));
          }
          if (compositeCode.hasOwnProperty(library) && Array.isArray(compositeCode[library].usedBy)) {
            lineElementsForLibrary.push("Used by: ".concat(compositeCode[library].usedBy.join(', ')));
          }

          // \n worked well when viewing GitHub markdown as an issue comment, but for unknown reasons <br> is necessary when
          // viewing from https://github.com/phetsims/sherpa/blob/main/third-party-licenses.md
          codeOutput.push(lineElementsForLibrary.join('<br>'));
          if (codeLicensesUsed.indexOf(licenseJSON[library].license) < 0) {
            codeLicensesUsed.push(licenseJSON[library].license);
          }
        }
        mediaOutput = [];
        mediaKeys = [];
        for (imageAudioEntry in compositeMedia) {
          if (compositeMedia.hasOwnProperty(imageAudioEntry)) {
            mediaKeys.push(imageAudioEntry);
          }
        }
        // Use a case insensitive sort, see http://stackoverflow.com/questions/8996963/how-to-perform-case-insensitive-sorting-in-javascript
        mediaKeys.sort(function (a, b) {
          return a.toLowerCase().localeCompare(b.toLowerCase());
        });

        // Create the text for the image and sound, and keep track of which licenses were used by them.
        for (_i = 0; _i < mediaKeys.length; _i++) {
          mediaKey = mediaKeys[_i];
          text = compositeMedia[mediaKey].text.join('<br>').trim();
          projectURL = compositeMedia[mediaKey].projectURL.trim();
          if (text.length === 0) {
            text = '(no text)';
          }
          if (projectURL.length === 0) {
            projectURL = '(no project url)';
          }
          notes = compositeMedia[mediaKey].notes.trim();
          if (notes.length === 0) {
            notes = '(no notes)';
          }
          license = compositeMedia[mediaKey].license.trim();
          assert && assert(license.length > 0, 'All media entries must have a license');
          mediaEntryLines = ["**".concat(mediaKey, "**"), text, projectURL, "License: ".concat(license), "Notes: ".concat(notes)]; // PhET has temporarily chosen to publish John Travoltage with incompatible licenses, so the reasons for
          // making the exceptions are noted here.  The new artwork is being developed now and the simulation
          // will be republished without exception cases soon.
          // This code will remain in case we have other exception cases in the future.
          if (compositeMedia[mediaKey].exception) {
            mediaEntryLines.push("Exception: ".concat(compositeMedia[mediaKey].exception));
          }
          if (license !== 'contact phethelp@colorado.edu') {
            mediaOutput.push(mediaEntryLines.join('<br>'));
            if (mediaLicensesUsed.indexOf(license) < 0) {
              mediaLicensesUsed.push(license);
            }
          }
        }

        // Summarize licenses used
        fileList = simTitles.join('\n* ');
        outputString = '<!--@formatter:off-->\n' + "".concat('This report enumerates the third-party resources (code, images, sounds, etc) used in a set of simulations.\n' + '* [Third-party Code](#third-party-code)\n' + '* [Third-party Code License Summary](#third-party-code-license-summary)\n' + '* [Third-party Media](#third-party-media)\n' + '* [Third-party Media License Summary](#third-party-media-license-summary)\n' + '\n' + 'This report is for the following simulations: \n\n* ').concat(fileList, "\n\nTo see the third party resources used in a particular published ") + "simulation, inspect the HTML file between the `".concat(ChipperConstants.START_THIRD_PARTY_LICENSE_ENTRIES, "` and `").concat(ChipperConstants.END_THIRD_PARTY_LICENSE_ENTRIES, "` ") + '(only exists in sim publications after Aug 7, 2015).\n' + "# <a name=\"third-party-code\"></a>Third-party Code:<br>\n".concat(codeOutput.join('\n\n'), "\n\n") + '---\n' + "# <a name=\"third-party-code-and-license-summary\"></a>Third-party Code License Summary:<br>\n".concat(codeLicensesUsed.join('<br>'), "\n\n") + '---\n' + "# <a name=\"third-party-media\"></a>Third-party Media:<br>\n".concat(mediaOutput.join('\n\n'), "\n\n") + '---\n' + "# <a name=\"third-party-media-license-summary\"></a>Third-party Media License Summary:<br>\n".concat(mediaLicensesUsed.join('<br>'), "\n\n") + '<!--@formatter:on-->\\n'; // Compare the file output to the existing file, and write & git commit only if different
        if (!grunt.file.exists(outputFilename) || grunt.file.read(outputFilename) !== outputString) {
          grunt.log.writeln("File output changed, writing file ".concat(outputFilename));
          grunt.file.write(outputFilename, outputString);
        } else {
          grunt.log.writeln("".concat(outputFilename, " contents are the same.  No need to save."));
        }

        /**
         * Given an HTML text, find the title attribute by parsing for <title>
         * @param {string} html
         * @returns {string}
         */

        /**
         * Add the source (images/sounds/media or code) entries to the destination object, keyed by name.
         * @param {string} repositoryName - the name of the repository, such as 'energy-skate-park-basics'
         * @param {Object} source - the object from which to read the entry
         * @param {Object} destination - the object to which to append the entry
         */
      case 77:
      case "end":
        return _context.stop();
    }
  }, _callee, null, [[13, 48, 51, 54], [19, 41]]);
}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,