"use strict";

// Copyright 2016-2024, University of Colorado Boulder

/**
 * Copy a directory and all of its contents recursively
 * @author Sam Reid (PhET Interactive Simulations)
 */

var _ = require('lodash');
var assert = require('assert');
var grunt = require('grunt');
var minify = require('./minify');

/**
 * @param {string} src - the source directory
 * @param {string} dst - the destination directory
 * @param {function} [filter] - rules for filtering files.  If returns falsy, then the file will be copied directly (helps with images)
 * @param {Object} [options]
 */
module.exports = function (src, dst, filter, options) {
  options = _.assignIn({
    failOnExistingFiles: false,
    exclude: [],
    // list to exclude
    minifyJS: false,
    minifyOptions: {},
    licenseToPrepend: ''
  }, options);

  // Copy built sim files (assuming they exist from a prior grunt command)
  grunt.file.recurse(src, function (abspath, rootdir, subdir, filename) {
    var isExcludedDir = false;
    subdir && subdir.split('/').forEach(function (pathPart) {
      // Exclude all directories that are in the excluded list
      if (options.exclude.indexOf(pathPart) >= 0) {
        isExcludedDir = true;
      }
    });

    // Exit out if the file is excluded or if it is in a excluded dir.
    if (isExcludedDir || options.exclude.indexOf(filename) >= 0) {
      return;
    }
    var contents = grunt.file.read(abspath);
    var dstPath = subdir ? "".concat(dst, "/").concat(subdir, "/").concat(filename) : "".concat(dst, "/").concat(filename);
    if (options.failOnExistingFiles && grunt.file.exists(dstPath)) {
      assert && assert(false, 'file existed already');
    }
    var filteredContents = filter && filter(abspath, contents);

    // Minify the file if it is javascript code
    if (options.minifyJS && filename.endsWith('.js') && abspath.indexOf('chipper/templates/') < 0) {
      var toBeMinified = filteredContents ? filteredContents : contents;
      filteredContents = minify(toBeMinified, options.minifyOptions);

      // Only add the license to the javascript code
      filteredContents = options.licenseToPrepend + filteredContents;
    }
    if (filteredContents) {
      grunt.file.write(dstPath, filteredContents);
    } else {
      grunt.file.copy(abspath, dstPath);
    }
  });
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsImFzc2VydCIsImdydW50IiwibWluaWZ5IiwibW9kdWxlIiwiZXhwb3J0cyIsInNyYyIsImRzdCIsImZpbHRlciIsIm9wdGlvbnMiLCJhc3NpZ25JbiIsImZhaWxPbkV4aXN0aW5nRmlsZXMiLCJleGNsdWRlIiwibWluaWZ5SlMiLCJtaW5pZnlPcHRpb25zIiwibGljZW5zZVRvUHJlcGVuZCIsImZpbGUiLCJyZWN1cnNlIiwiYWJzcGF0aCIsInJvb3RkaXIiLCJzdWJkaXIiLCJmaWxlbmFtZSIsImlzRXhjbHVkZWREaXIiLCJzcGxpdCIsImZvckVhY2giLCJwYXRoUGFydCIsImluZGV4T2YiLCJjb250ZW50cyIsInJlYWQiLCJkc3RQYXRoIiwiY29uY2F0IiwiZXhpc3RzIiwiZmlsdGVyZWRDb250ZW50cyIsImVuZHNXaXRoIiwidG9CZU1pbmlmaWVkIiwid3JpdGUiLCJjb3B5Il0sInNvdXJjZXMiOlsiY29weURpcmVjdG9yeS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDb3B5IGEgZGlyZWN0b3J5IGFuZCBhbGwgb2YgaXRzIGNvbnRlbnRzIHJlY3Vyc2l2ZWx5XHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuXHJcbmNvbnN0IF8gPSByZXF1aXJlKCAnbG9kYXNoJyApO1xyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCAnYXNzZXJ0JyApO1xyXG5jb25zdCBncnVudCA9IHJlcXVpcmUoICdncnVudCcgKTtcclxuY29uc3QgbWluaWZ5ID0gcmVxdWlyZSggJy4vbWluaWZ5JyApO1xyXG5cclxuLyoqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzcmMgLSB0aGUgc291cmNlIGRpcmVjdG9yeVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gZHN0IC0gdGhlIGRlc3RpbmF0aW9uIGRpcmVjdG9yeVxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZmlsdGVyXSAtIHJ1bGVzIGZvciBmaWx0ZXJpbmcgZmlsZXMuICBJZiByZXR1cm5zIGZhbHN5LCB0aGVuIHRoZSBmaWxlIHdpbGwgYmUgY29waWVkIGRpcmVjdGx5IChoZWxwcyB3aXRoIGltYWdlcylcclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiggc3JjLCBkc3QsIGZpbHRlciwgb3B0aW9ucyApIHtcclxuXHJcbiAgb3B0aW9ucyA9IF8uYXNzaWduSW4oIHtcclxuICAgIGZhaWxPbkV4aXN0aW5nRmlsZXM6IGZhbHNlLFxyXG4gICAgZXhjbHVkZTogW10sIC8vIGxpc3QgdG8gZXhjbHVkZVxyXG4gICAgbWluaWZ5SlM6IGZhbHNlLFxyXG4gICAgbWluaWZ5T3B0aW9uczoge30sXHJcbiAgICBsaWNlbnNlVG9QcmVwZW5kOiAnJ1xyXG4gIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgLy8gQ29weSBidWlsdCBzaW0gZmlsZXMgKGFzc3VtaW5nIHRoZXkgZXhpc3QgZnJvbSBhIHByaW9yIGdydW50IGNvbW1hbmQpXHJcbiAgZ3J1bnQuZmlsZS5yZWN1cnNlKCBzcmMsICggYWJzcGF0aCwgcm9vdGRpciwgc3ViZGlyLCBmaWxlbmFtZSApID0+IHtcclxuXHJcblxyXG4gICAgbGV0IGlzRXhjbHVkZWREaXIgPSBmYWxzZTtcclxuICAgIHN1YmRpciAmJiBzdWJkaXIuc3BsaXQoICcvJyApLmZvckVhY2goIHBhdGhQYXJ0ID0+IHtcclxuXHJcbiAgICAgIC8vIEV4Y2x1ZGUgYWxsIGRpcmVjdG9yaWVzIHRoYXQgYXJlIGluIHRoZSBleGNsdWRlZCBsaXN0XHJcbiAgICAgIGlmICggb3B0aW9ucy5leGNsdWRlLmluZGV4T2YoIHBhdGhQYXJ0ICkgPj0gMCApIHtcclxuICAgICAgICBpc0V4Y2x1ZGVkRGlyID0gdHJ1ZTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEV4aXQgb3V0IGlmIHRoZSBmaWxlIGlzIGV4Y2x1ZGVkIG9yIGlmIGl0IGlzIGluIGEgZXhjbHVkZWQgZGlyLlxyXG4gICAgaWYgKCBpc0V4Y2x1ZGVkRGlyIHx8IG9wdGlvbnMuZXhjbHVkZS5pbmRleE9mKCBmaWxlbmFtZSApID49IDAgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBjb250ZW50cyA9IGdydW50LmZpbGUucmVhZCggYWJzcGF0aCApO1xyXG5cclxuICAgIGNvbnN0IGRzdFBhdGggPSBzdWJkaXIgPyAoIGAke2RzdH0vJHtzdWJkaXJ9LyR7ZmlsZW5hbWV9YCApIDogKCBgJHtkc3R9LyR7ZmlsZW5hbWV9YCApO1xyXG5cclxuICAgIGlmICggb3B0aW9ucy5mYWlsT25FeGlzdGluZ0ZpbGVzICYmIGdydW50LmZpbGUuZXhpc3RzKCBkc3RQYXRoICkgKSB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZmlsZSBleGlzdGVkIGFscmVhZHknICk7XHJcbiAgICB9XHJcbiAgICBsZXQgZmlsdGVyZWRDb250ZW50cyA9IGZpbHRlciAmJiBmaWx0ZXIoIGFic3BhdGgsIGNvbnRlbnRzICk7XHJcblxyXG4gICAgLy8gTWluaWZ5IHRoZSBmaWxlIGlmIGl0IGlzIGphdmFzY3JpcHQgY29kZVxyXG4gICAgaWYgKCBvcHRpb25zLm1pbmlmeUpTICYmIGZpbGVuYW1lLmVuZHNXaXRoKCAnLmpzJyApICYmIGFic3BhdGguaW5kZXhPZiggJ2NoaXBwZXIvdGVtcGxhdGVzLycgKSA8IDAgKSB7XHJcbiAgICAgIGNvbnN0IHRvQmVNaW5pZmllZCA9IGZpbHRlcmVkQ29udGVudHMgPyBmaWx0ZXJlZENvbnRlbnRzIDogY29udGVudHM7XHJcbiAgICAgIGZpbHRlcmVkQ29udGVudHMgPSBtaW5pZnkoIHRvQmVNaW5pZmllZCwgb3B0aW9ucy5taW5pZnlPcHRpb25zICk7XHJcblxyXG4gICAgICAvLyBPbmx5IGFkZCB0aGUgbGljZW5zZSB0byB0aGUgamF2YXNjcmlwdCBjb2RlXHJcbiAgICAgIGZpbHRlcmVkQ29udGVudHMgPSBvcHRpb25zLmxpY2Vuc2VUb1ByZXBlbmQgKyBmaWx0ZXJlZENvbnRlbnRzO1xyXG4gICAgfVxyXG5cclxuICAgIGlmICggZmlsdGVyZWRDb250ZW50cyApIHtcclxuICAgICAgZ3J1bnQuZmlsZS53cml0ZSggZHN0UGF0aCwgZmlsdGVyZWRDb250ZW50cyApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIGdydW50LmZpbGUuY29weSggYWJzcGF0aCwgZHN0UGF0aCApO1xyXG4gICAgfVxyXG4gIH0gKTtcclxufTsiXSwibWFwcGluZ3MiOiI7O0FBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsSUFBTUEsQ0FBQyxHQUFHQyxPQUFPLENBQUUsUUFBUyxDQUFDO0FBQzdCLElBQU1DLE1BQU0sR0FBR0QsT0FBTyxDQUFFLFFBQVMsQ0FBQztBQUNsQyxJQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBRSxPQUFRLENBQUM7QUFDaEMsSUFBTUcsTUFBTSxHQUFHSCxPQUFPLENBQUUsVUFBVyxDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUksTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsR0FBRyxFQUFFQyxHQUFHLEVBQUVDLE1BQU0sRUFBRUMsT0FBTyxFQUFHO0VBRXJEQSxPQUFPLEdBQUdWLENBQUMsQ0FBQ1csUUFBUSxDQUFFO0lBQ3BCQyxtQkFBbUIsRUFBRSxLQUFLO0lBQzFCQyxPQUFPLEVBQUUsRUFBRTtJQUFFO0lBQ2JDLFFBQVEsRUFBRSxLQUFLO0lBQ2ZDLGFBQWEsRUFBRSxDQUFDLENBQUM7SUFDakJDLGdCQUFnQixFQUFFO0VBQ3BCLENBQUMsRUFBRU4sT0FBUSxDQUFDOztFQUVaO0VBQ0FQLEtBQUssQ0FBQ2MsSUFBSSxDQUFDQyxPQUFPLENBQUVYLEdBQUcsRUFBRSxVQUFFWSxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFFQyxRQUFRLEVBQU07SUFHakUsSUFBSUMsYUFBYSxHQUFHLEtBQUs7SUFDekJGLE1BQU0sSUFBSUEsTUFBTSxDQUFDRyxLQUFLLENBQUUsR0FBSSxDQUFDLENBQUNDLE9BQU8sQ0FBRSxVQUFBQyxRQUFRLEVBQUk7TUFFakQ7TUFDQSxJQUFLaEIsT0FBTyxDQUFDRyxPQUFPLENBQUNjLE9BQU8sQ0FBRUQsUUFBUyxDQUFDLElBQUksQ0FBQyxFQUFHO1FBQzlDSCxhQUFhLEdBQUcsSUFBSTtNQUN0QjtJQUNGLENBQUUsQ0FBQzs7SUFFSDtJQUNBLElBQUtBLGFBQWEsSUFBSWIsT0FBTyxDQUFDRyxPQUFPLENBQUNjLE9BQU8sQ0FBRUwsUUFBUyxDQUFDLElBQUksQ0FBQyxFQUFHO01BQy9EO0lBQ0Y7SUFFQSxJQUFNTSxRQUFRLEdBQUd6QixLQUFLLENBQUNjLElBQUksQ0FBQ1ksSUFBSSxDQUFFVixPQUFRLENBQUM7SUFFM0MsSUFBTVcsT0FBTyxHQUFHVCxNQUFNLE1BQUFVLE1BQUEsQ0FBUXZCLEdBQUcsT0FBQXVCLE1BQUEsQ0FBSVYsTUFBTSxPQUFBVSxNQUFBLENBQUlULFFBQVEsT0FBQVMsTUFBQSxDQUFZdkIsR0FBRyxPQUFBdUIsTUFBQSxDQUFJVCxRQUFRLENBQUk7SUFFdEYsSUFBS1osT0FBTyxDQUFDRSxtQkFBbUIsSUFBSVQsS0FBSyxDQUFDYyxJQUFJLENBQUNlLE1BQU0sQ0FBRUYsT0FBUSxDQUFDLEVBQUc7TUFDakU1QixNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsc0JBQXVCLENBQUM7SUFDbkQ7SUFDQSxJQUFJK0IsZ0JBQWdCLEdBQUd4QixNQUFNLElBQUlBLE1BQU0sQ0FBRVUsT0FBTyxFQUFFUyxRQUFTLENBQUM7O0lBRTVEO0lBQ0EsSUFBS2xCLE9BQU8sQ0FBQ0ksUUFBUSxJQUFJUSxRQUFRLENBQUNZLFFBQVEsQ0FBRSxLQUFNLENBQUMsSUFBSWYsT0FBTyxDQUFDUSxPQUFPLENBQUUsb0JBQXFCLENBQUMsR0FBRyxDQUFDLEVBQUc7TUFDbkcsSUFBTVEsWUFBWSxHQUFHRixnQkFBZ0IsR0FBR0EsZ0JBQWdCLEdBQUdMLFFBQVE7TUFDbkVLLGdCQUFnQixHQUFHN0IsTUFBTSxDQUFFK0IsWUFBWSxFQUFFekIsT0FBTyxDQUFDSyxhQUFjLENBQUM7O01BRWhFO01BQ0FrQixnQkFBZ0IsR0FBR3ZCLE9BQU8sQ0FBQ00sZ0JBQWdCLEdBQUdpQixnQkFBZ0I7SUFDaEU7SUFFQSxJQUFLQSxnQkFBZ0IsRUFBRztNQUN0QjlCLEtBQUssQ0FBQ2MsSUFBSSxDQUFDbUIsS0FBSyxDQUFFTixPQUFPLEVBQUVHLGdCQUFpQixDQUFDO0lBQy9DLENBQUMsTUFDSTtNQUNIOUIsS0FBSyxDQUFDYyxJQUFJLENBQUNvQixJQUFJLENBQUVsQixPQUFPLEVBQUVXLE9BQVEsQ0FBQztJQUNyQztFQUNGLENBQUUsQ0FBQztBQUNMLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=