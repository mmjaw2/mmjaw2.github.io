"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2024, University of Colorado Boulder

/**
 * Analyzes the file size of a built file (that has been built with --profileFileSize), and prints out the results.
 *
 * To profile a sim, go to the sim directory and run:
 *
 * grunt --allHTML --locales=* --brands=phet --profileFileSize
 * grunt profile-file-size
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var fs = require('fs');
var zlib = require('zlib');
var _ = require('lodash');

/**
 * @param {string} repo
 */
module.exports = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(repo) {
    var file, rootSection, size, gzippedSize, printString, printFilter, _iterator, _step, _repo;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          file = fs.readFileSync("../".concat(repo, "/build/phet/").concat(repo, "_all_phet.html"), 'utf-8');
          rootSection = parseToSections(file);
          size = rootSection.getSize();
          gzippedSize = rootSection.getGzippedSize();
          printString = function printString(name, string) {
            console.log("".concat(name, ": ").concat(getSizeString(string, size, gzippedSize)));
          };
          printFilter = function printFilter(name, filter) {
            printString(name, rootSection.getApproxFilteredString(filter));
          };
          console.log('summary:\n');
          printString('TOTAL', rootSection.getApproxString());
          console.log('');
          printString('images', rootSection.getApproxImagesString());
          printString('sounds', rootSection.getApproxSoundsString());
          printFilter('webpack (includes assets)', function (section) {
            return section.type === 'WEBPACK';
          });
          printFilter('preload', function (section) {
            return section.type === 'PRELOAD';
          });
          printFilter('strings', function (section) {
            return section.type === 'STRINGS';
          });
          printFilter('license', function (section) {
            return section.type === 'LICENSE';
          });
          _iterator = _createForOfIteratorHelper(rootSection.getRepos().sort());
          try {
            for (_iterator.s(); !(_step = _iterator.n()).done;) {
              _repo = _step.value;
              printString("js ".concat(_repo), rootSection.getApproxRepoString(_repo));
            }
          } catch (err) {
            _iterator.e(err);
          } finally {
            _iterator.f();
          }
          console.log('\ndetails:\n');
          console.log(rootSection.toReportString(true, size, gzippedSize));
        case 19:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function (_x) {
    return _ref.apply(this, arguments);
  };
}();
var TagMatch = /*#__PURE__*/_createClass(function TagMatch(startIndex, endIndex, isStart, type, name) {
  _classCallCheck(this, TagMatch);
  this.startIndex = startIndex;
  this.endIndex = endIndex;
  this.isStart = isStart;
  this.type = type;
  this.name = name || null;
});
var TaggedSection = /*#__PURE__*/function () {
  function TaggedSection(type, name) {
    _classCallCheck(this, TaggedSection);
    this.type = type;
    this.name = name || null;
    this.children = []; // ( TaggedSection | string )[]
  }

  // @public
  return _createClass(TaggedSection, [{
    key: "getSize",
    value: function getSize() {
      return getUtf8Length(this.getApproxString());
    }

    // @public
  }, {
    key: "getGzippedSize",
    value: function getGzippedSize() {
      return getGzippedLength(this.getApproxString());
    }

    // @public
  }, {
    key: "getApproxString",
    value: function getApproxString() {
      return this.children.map(function (child) {
        if (typeof child === 'string') {
          return child;
        } else {
          return child.getApproxString();
        }
      }).join('');
    }

    // @public
  }, {
    key: "getApproxFilteredString",
    value: function getApproxFilteredString(filter) {
      if (filter(this)) {
        return this.getApproxString();
      } else {
        return this.children.map(function (child) {
          if (typeof child === 'string') {
            return '';
          } else {
            return child.getApproxFilteredString(filter);
          }
        }).join('');
      }
    }

    // @public
  }, {
    key: "getApproxRepoString",
    value: function getApproxRepoString(repo) {
      return this.getApproxFilteredString(function (section) {
        return section.type === 'MODULE' && section.name && section.name.includes("chipper/dist/js/".concat(repo, "/"));
      });
    }

    // @public
  }, {
    key: "getApproxImagesString",
    value: function getApproxImagesString() {
      return this.getApproxFilteredString(function (section) {
        return section.type === 'MODULE' && section.name && /chipper\/dist\/js\/[^/]+\/(images|mipmaps)\//.test(section.name);
      });
    }

    // @public
  }, {
    key: "getApproxSoundsString",
    value: function getApproxSoundsString() {
      return this.getApproxFilteredString(function (section) {
        return section.type === 'MODULE' && section.name && /chipper\/dist\/js\/[^/]+\/sounds\//.test(section.name);
      });
    }

    // @public
  }, {
    key: "getRepos",
    value: function getRepos() {
      var repo = null;
      if (this.type === 'MODULE' && this.name && this.name.includes('chipper/dist/js/')) {
        var index = this.name.indexOf('chipper/dist/js/') + 'chipper/dist/js/'.length;
        repo = this.name.slice(index).split('/')[0];
      }
      return _.uniq([].concat(_toConsumableArray(repo ? [repo] : []), _toConsumableArray(this.children.flatMap(function (child) {
        if (typeof child === 'string') {
          return [];
        } else {
          return child.getRepos();
        }
      }))));
    }

    // @public
  }, {
    key: "toReportString",
    value: function toReportString(sort, size, gzippedSize) {
      var indent = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : '';
      // TOD: sort by gzipped size?
      var children = sort ? _.sortBy(this.children, function (child) {
        return -(typeof child === 'string' ? getUtf8Length(child) : child.getSize());
      }) : this.children;
      return "".concat(getSizeString(this.getApproxString(), size, gzippedSize), " ").concat(indent).concat(this.type).concat(this.name ? ' ' + this.name : '', "\n").concat(children.map(function (child) {
        if (typeof child === 'string') {
          return '';
        } else {
          return child.toReportString(sort, size, gzippedSize, "".concat(indent, "  "));
        }
      }).join(''));
    }
  }]);
}();
var findNextMatch = function findNextMatch(string, startIndex) {
  var match = /console\.log\("(START|END)_([A-Z_]+)"(,"([^"]+)")?\)/g.exec(string.slice(startIndex));
  if (match) {
    var matchIndex = match.index + startIndex;
    return new TagMatch(matchIndex, matchIndex + match[0].length, match[1] === 'START', match[2], match[4]);
  } else {
    return null;
  }
};
var getUtf8Length = function getUtf8Length(string) {
  return Buffer.from(string, 'utf-8').length;
};
var getGzippedLength = function getGzippedLength(string) {
  return zlib.gzipSync(Buffer.from(string, 'utf-8')).length;
};
var getSizeString = function getSizeString(string, size, gzippedSize) {
  var ourSize = getUtf8Length(string);
  var ourGzippedSize = getGzippedLength(string);
  var sizeString = '' + ourSize;
  var gzippedSizeString = '' + ourGzippedSize;
  var sizePercentage = Math.round(ourSize / size * 1000) / 10;
  if (sizePercentage !== 0) {
    sizeString += " (".concat(sizePercentage, "%)");
  }
  var gzippedSizePercentage = Math.round(ourGzippedSize / gzippedSize * 1000) / 10;
  if (gzippedSizePercentage !== 0) {
    gzippedSizeString += " (".concat(gzippedSizePercentage, "%)");
  }
  var megabytes = Math.round(ourSize / 1024 / 1024 * 100) / 100;
  if (megabytes !== 0) {
    sizeString += " ".concat(megabytes, " MB");
  }
  var gzippedMegabytes = Math.round(ourGzippedSize / 1024 / 1024 * 100) / 100;
  if (gzippedMegabytes !== 0) {
    gzippedSizeString += " ".concat(gzippedMegabytes, " MB");
  }
  return "utf-8: ".concat(sizeString, " gzip: ").concat(gzippedSizeString);
};
var parseToSections = function parseToSections(string) {
  var rootSection = new TaggedSection('ROOT', null);
  var stack = [rootSection];
  var index = 0;
  var match;
  // eslint-disable-next-line no-cond-assign
  while (match = findNextMatch(string, index)) {
    // console.log( match.type, match.name, match.isStart ? 'START' : 'END', match.startIndex, match.endIndex );

    // Append any string before the match
    if (match.startIndex > index) {
      stack[stack.length - 1].children.push(string.slice(index, match.startIndex));
    }
    if (match.isStart) {
      var newSection = new TaggedSection(match.type, match.name);
      stack[stack.length - 1].children.push(newSection);
      stack.push(newSection);
    } else {
      var popped = stack.pop();
      if (popped.type !== match.type || popped.name !== match.name) {
        throw new Error("Mismatched tags: ".concat(popped.type, " ").concat(popped.name, " !== ").concat(match.type, " ").concat(match.name));
      }
    }
    index = match.endIndex;
  }
  if (index < string.length) {
    stack[stack.length - 1].children.push(string.slice(index));
  }
  return rootSection;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,