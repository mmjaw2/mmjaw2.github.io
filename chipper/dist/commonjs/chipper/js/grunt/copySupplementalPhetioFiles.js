"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2016-2024, University of Colorado Boulder

/**
 * Copies all supporting PhET-iO files, including wrappers, indices, lib files, etc.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Matt Pennington (PhET Interactive Simulations)
 */

// modules
var _ = require('lodash');
var assert = require('assert');
var archiver = require('archiver');
var ChipperStringUtils = require('../common/ChipperStringUtils');
var copyDirectory = require('../grunt/copyDirectory');
var execute = require('../../../perennial-alias/js/common/execute');
var fs = require('fs');
var grunt = require('grunt');
var generatePhetioMacroAPI = require('../phet-io/generatePhetioMacroAPI');
var formatPhetioAPI = require('../phet-io/formatPhetioAPI');
var buildStandalone = require('../grunt/buildStandalone');
var minify = require('../grunt/minify');
var marked = require('marked');
var tsc = require('./tsc');
var reportTscResults = require('./reportTscResults');
var getPhetLibs = require('./getPhetLibs');
var path = require('path');
var webpack = require('webpack');
var webpackBuild = require('../grunt/webpackBuild');

// constants
var DEDICATED_REPO_WRAPPER_PREFIX = 'phet-io-wrapper-';
var WRAPPER_COMMON_FOLDER = 'phet-io-wrappers/common';
var WRAPPERS_FOLDER = 'wrappers/'; // The wrapper index assumes this constant, please see phet-io-wrappers/index/index.js before changing

// For PhET-iO Client Guides
var PHET_IO_SIM_SPECIFIC = '../phet-io-sim-specific';
var GUIDES_COMMON_DIR = 'client-guide-common/client-guide';
var EXAMPLES_FILENAME = 'examples';
var PHET_IO_GUIDE_FILENAME = 'phet-io-guide';
var LIB_OUTPUT_FILE = 'phet-io.js';

// These files are bundled into the lib/phet-io.js file before PhET's phet-io code, and can be used by any wrapper
var THIRD_PARTY_LIB_PRELOADS = ['../sherpa/lib/react-18.1.0.production.min.js', '../sherpa/lib/react-dom-18.1.0.production.min.js', '../sherpa/lib/pako-2.0.3.min.js', '../sherpa/lib/lodash-4.17.4.min.js'];

// phet-io internal files to be consolidated into 1 file and publicly served as a minified phet-io library.
// Make sure to add new files to the jsdoc generation list below also
var PHET_IO_LIB_PRELOADS = ['../query-string-machine/js/QueryStringMachine.js',
// must be first, other types use this
'../assert/js/assert.js', '../chipper/js/phet-io/phetioCompareAPIs.js', '../tandem/js/PhetioIDUtils.js', '../perennial-alias/js/common/SimVersion.js'];
var LIB_PRELOADS = THIRD_PARTY_LIB_PRELOADS.concat(PHET_IO_LIB_PRELOADS);

// Additional libraries and third party files that are used by some phet-io wrappers, copied to a contrib/ directory.
// These are not bundled with the lib file to reduce the size of the central dependency of PhET-iO wrappers.
var CONTRIB_FILES = ['../sherpa/lib/ua-parser-0.7.21.min.js', '../sherpa/lib/bootstrap-2.2.2.js', '../sherpa/lib/font-awesome-4.5.0', '../sherpa/lib/jquery-2.1.0.min.js', '../sherpa/lib/jquery-ui-1.8.24.min.js', '../sherpa/lib/d3-4.2.2.js', '../sherpa/lib/jsondiffpatch-v0.3.11.umd.js', '../sherpa/lib/jsondiffpatch-v0.3.11-annotated.css', '../sherpa/lib/jsondiffpatch-v0.3.11-html.css', '../sherpa/lib/prism-1.23.0.js', '../sherpa/lib/prism-okaidia-1.23.0.css', '../sherpa/lib/clarinet-0.12.4.js'];

// This path is used for jsdoc. Transpilation happens before we get to this point. SR and MK recognize that this feels
// a bit risky, even though comments are currently preserved in the babel transpile step. See https://stackoverflow.com/questions/51720894/is-there-any-way-to-use-jsdoc-with-ts-files-maybe-transpile-with-babel-the
var transpiledClientPath = "../chipper/dist/js/".concat(WRAPPER_COMMON_FOLDER, "/js/Client.js");

// List of files to run jsdoc generation with. This list is manual to keep files from sneaking into the public documentation.
var JSDOC_FILES = ["../chipper/dist/js/".concat(WRAPPER_COMMON_FOLDER, "/js/PhetioClient.js"), transpiledClientPath, '../tandem/js/PhetioIDUtils.js', '../phet-io/js/phet-io-initialize-globals.js', '../chipper/js/initialize-globals.js', '../perennial-alias/js/common/SimVersion.js'];
var JSDOC_README_FILE = '../phet-io/doc/wrapper/phet-io-documentation_README.md';
var STUDIO_BUILT_FILENAME = 'studio.min.js';

/**
 * @param {string} repo
 * @param {string} version
 * @param {string} simulationDisplayName
 * @param {Object} packageObject
 * @param {Object} buildLocal
 * @param {boolean} [generateMacroAPIFile]
 */
module.exports = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(repo, version, simulationDisplayName, packageObject, buildLocal) {
    var generateMacroAPIFile,
      repoPhetLibs,
      simRepoSHA,
      buildDir,
      wrappersLocation,
      matches,
      major,
      minor,
      latestVersion,
      standardPhetioWrapperTemplateSkeleton,
      customPhetioWrapperTemplateSkeleton,
      filterWrapper,
      wrappers,
      wrappersUnallowed,
      libFileNames,
      fullUnallowedList,
      copyWrapper,
      simSpecificWrappers,
      additionalWrappers,
      fullAPI,
      _args = arguments;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          generateMacroAPIFile = _args.length > 5 && _args[5] !== undefined ? _args[5] : false;
          repoPhetLibs = getPhetLibs(repo, 'phet-io');
          assert(_.every(getPhetLibs('phet-io-wrappers'), function (repo) {
            return repoPhetLibs.includes(repo);
          }), 'every dependency of phet-io-wrappers is not included in phetLibs of ' + repo + ' ' + repoPhetLibs + ' ' + getPhetLibs('phet-io-wrappers'));
          assert(_.every(getPhetLibs('studio'), function (repo) {
            return repoPhetLibs.includes(repo);
          }), 'every dependency of studio is not included in phetLibs of ' + repo + ' ' + repoPhetLibs + ' ' + getPhetLibs('studio'));

          // This must be checked after copySupplementalPhetioFiles is called, since all the imports and outer code is run in
          // every brand. Developers without phet-io checked out still need to be able to build.
          assert(fs.readFileSync(transpiledClientPath).toString().indexOf('/**') >= 0, 'babel should not strip comments from transpiling');
          _context.next = 7;
          return execute('git', ['rev-parse', 'HEAD'], "../".concat(repo));
        case 7:
          simRepoSHA = _context.sent.trim();
          buildDir = "../".concat(repo, "/build/phet-io/");
          wrappersLocation = "".concat(buildDir).concat(WRAPPERS_FOLDER); // This regex was copied from perennial's `SimVersion.parse()` consult that code before changing things here.
          matches = version.match(/^(\d+)\.(\d+)\.(\d+)(-(([^.-]+)\.(\d+)))?(-([^.-]+))?$/);
          if (matches) {
            _context.next = 13;
            break;
          }
          throw new Error("could not parse version: ".concat(version));
        case 13:
          major = Number(matches[1]);
          minor = Number(matches[2]);
          latestVersion = "".concat(major, ".").concat(minor);
          standardPhetioWrapperTemplateSkeleton = fs.readFileSync('../phet-io-wrappers/common/html/standardPhetioWrapperTemplateSkeleton.html', 'utf8');
          customPhetioWrapperTemplateSkeleton = fs.readFileSync('../phet-io-wrappers/common/html/customPhetioWrapperTemplateSkeleton.html', 'utf8');
          assert(!standardPhetioWrapperTemplateSkeleton.includes('`'), 'The templates cannot contain backticks due to how the templates are passed through below');
          assert(!customPhetioWrapperTemplateSkeleton.includes('`'), 'The templates cannot contain backticks due to how the templates are passed through below');

          // The filter that we run every phet-io wrapper file through to transform dev content into built content. This mainly
          // involves lots of hard coded copy replace of template strings and marker values.
          filterWrapper = function filterWrapper(absPath, contents) {
            var originalContents = "".concat(contents);
            var isWrapperIndex = absPath.indexOf('index/index.html') >= 0;

            // For info about LIB_OUTPUT_FILE, see handleLib()
            var pathToLib = "lib/".concat(LIB_OUTPUT_FILE);
            if (absPath.indexOf('.html') >= 0) {
              // change the paths of sherpa files to point to the contrib/ folder
              CONTRIB_FILES.forEach(function (filePath) {
                // No need to do this is this file doesn't have this contrib import in it.
                if (contents.indexOf(filePath) >= 0) {
                  var filePathParts = filePath.split('/');

                  // If the file is in a dedicated wrapper repo, then it is one level higher in the dir tree, and needs 1 less set of dots.
                  // see https://github.com/phetsims/phet-io-wrappers/issues/17 for more info. This is hopefully a temporary workaround
                  var needsExtraDots = absPath.indexOf(DEDICATED_REPO_WRAPPER_PREFIX) >= 0;
                  var fileName = filePathParts[filePathParts.length - 1];
                  var contribFileName = "contrib/".concat(fileName);
                  var pathToContrib = needsExtraDots ? "../../".concat(contribFileName) : "../".concat(contribFileName);

                  // The wrapper index is a different case because it is placed at the top level of the build dir.
                  if (isWrapperIndex) {
                    pathToContrib = contribFileName;
                    filePath = "../".concat(filePath); // filePath has one less set of relative than are actually in the index.html file.
                  }
                  contents = ChipperStringUtils.replaceAll(contents, filePath, pathToContrib);
                }
              });
              var includesElement = function includesElement(line, array) {
                return !!array.find(function (element) {
                  return line.includes(element);
                });
              };

              // Remove files listed as preloads to the phet-io lib file.
              contents = contents.split(/\r?\n/).filter(function (line) {
                return !includesElement(line, LIB_PRELOADS);
              }).join('\n');

              // Delete the imports the phet-io-wrappers-main, as it will be bundled with the phet-io.js lib file.
              // MUST GO BEFORE BELOW REPLACE: 'phet-io-wrappers/' -> '/'
              contents = contents.replace(/<script type="module" src="(..\/)+chipper\/dist\/js\/phet-io-wrappers\/js\/phet-io-wrappers-main.js"><\/script>/g,
              // '.*' is to support `data-phet-io-client-name` in wrappers like "multi"
              '');

              // Support wrappers that use code from phet-io-wrappers
              contents = ChipperStringUtils.replaceAll(contents, '/phet-io-wrappers/', '/');

              // Don't use ChipperStringUtils because we want to capture the relative path and transfer it to the new script.
              // This is to support providing the relative path through the build instead of just hard coding it.
              contents = contents.replace(/<!--(<script src="[./]*\{\{PATH_TO_LIB_FILE}}".*><\/script>)-->/g,
              // '.*' is to support `data-phet-io-client-name` in wrappers like "multi"
              '$1' // just uncomment, don't fill it in yet
              );
              contents = ChipperStringUtils.replaceAll(contents, '<!--{{GOOGLE_ANALYTICS.js}}-->', '<script src="/assets/js/phet-io-ga.js"></script>');
              contents = ChipperStringUtils.replaceAll(contents, '<!--{{FAVICON.ico}}-->', '<link rel="shortcut icon" href="/assets/favicon.ico"/>');

              // There should not be any imports of PhetioClient directly except using the "multi-wrapper" functionality of
              // providing a ?clientName, for unbuilt only, so we remove it here.
              contents = contents.replace(/^.*\/common\/js\/PhetioClient.js.*$/mg, '');
            }
            if (absPath.indexOf('.js') >= 0 || absPath.indexOf('.html') >= 0) {
              // Fill these in first so the following lines will also hit the content in these template vars
              contents = ChipperStringUtils.replaceAll(contents, '{{CUSTOM_WRAPPER_SKELETON}}', customPhetioWrapperTemplateSkeleton);
              contents = ChipperStringUtils.replaceAll(contents, '{{STANDARD_WRAPPER_SKELETON}}', standardPhetioWrapperTemplateSkeleton);

              // The rest
              contents = ChipperStringUtils.replaceAll(contents, '{{PATH_TO_LIB_FILE}}', pathToLib); // This must be after the script replacement that uses this variable above.
              contents = ChipperStringUtils.replaceAll(contents, '{{SIMULATION_NAME}}', repo);
              contents = ChipperStringUtils.replaceAll(contents, '{{SIMULATION_DISPLAY_NAME}}', simulationDisplayName);
              contents = ChipperStringUtils.replaceAll(contents, '{{SIMULATION_DISPLAY_NAME_ESCAPED}}', simulationDisplayName.replace(/'/g, '\\\''));
              contents = ChipperStringUtils.replaceAll(contents, '{{SIMULATION_VERSION_STRING}}', version);
              contents = ChipperStringUtils.replaceAll(contents, '{{SIMULATION_LATEST_VERSION}}', latestVersion);
              contents = ChipperStringUtils.replaceAll(contents, '{{SIMULATION_IS_BUILT}}', 'true');
              contents = ChipperStringUtils.replaceAll(contents, '{{PHET_IO_LIB_RELATIVE_PATH}}', pathToLib);
              contents = ChipperStringUtils.replaceAll(contents, '{{Built API Docs not available in unbuilt mode}}', 'API Docs');

              // phet-io-wrappers/common will be in the top level of wrappers/ in the build directory
              contents = ChipperStringUtils.replaceAll(contents, "".concat(WRAPPER_COMMON_FOLDER, "/"), 'common/');
            }
            if (isWrapperIndex) {
              var getGuideRowText = function getGuideRowText(fileName, linkText, description) {
                return "<tr>\n        <td><a href=\"doc/guides/".concat(fileName, ".html\">").concat(linkText, "</a>\n        </td>\n        <td>").concat(description, "</td>\n      </tr>");
              };

              // The phet-io-guide is not sim-specific, so always create it.
              contents = ChipperStringUtils.replaceAll(contents, '{{PHET_IO_GUIDE_ROW}}', getGuideRowText(PHET_IO_GUIDE_FILENAME, 'PhET-iO Guide', 'Documentation for instructional designers about best practices for simulation customization with PhET-iO Studio.'));
              var exampleRowContents = fs.existsSync("".concat(PHET_IO_SIM_SPECIFIC, "/repos/").concat(repo, "/").concat(EXAMPLES_FILENAME, ".md")) ? getGuideRowText(EXAMPLES_FILENAME, 'Examples', 'Provides instructions and the specific phetioIDs for customizing the simulation.') : '';
              contents = ChipperStringUtils.replaceAll(contents, '{{EXAMPLES_ROW}}', exampleRowContents);
            }

            // Special handling for studio paths since it is not nested under phet-io-wrappers
            if (absPath.indexOf('studio/index.html') >= 0) {
              contents = ChipperStringUtils.replaceAll(contents, '<script src="../contrib/', '<script src="../../contrib/');
              contents = ChipperStringUtils.replaceAll(contents, '<script type="module" src="../chipper/dist/js/studio/js/studio-main.js"></script>', "<script src=\"./".concat(STUDIO_BUILT_FILENAME, "\"></script>"));
              contents = ChipperStringUtils.replaceAll(contents, '{{PHET_IO_GUIDE_LINK}}', "../../doc/guides/".concat(PHET_IO_GUIDE_FILENAME, ".html"));
              contents = ChipperStringUtils.replaceAll(contents, '{{EXAMPLES_LINK}}', "../../doc/guides/".concat(EXAMPLES_FILENAME, ".html"));
            }

            // Collapse >1 blank lines in html files.  This helps as a postprocessing step after removing lines with <script> tags
            if (absPath.endsWith('.html')) {
              var lines = contents.split(/\r?\n/);
              var pruned = [];
              for (var i = 0; i < lines.length; i++) {
                if (i >= 1 && lines[i - 1].trim().length === 0 && lines[i].trim().length === 0) {

                  // skip redundant blank line
                } else {
                  pruned.push(lines[i]);
                }
              }
              contents = pruned.join('\n');
            }
            if (contents !== originalContents) {
              return contents;
            } else {
              return null; // signify no change (helps for images)
            }
          }; // a list of the phet-io wrappers that are built with the phet-io sim
          wrappers = fs.readFileSync('../perennial-alias/data/wrappers', 'utf-8').trim().split('\n').map(function (wrappers) {
            return wrappers.trim();
          }); // Files and directories from wrapper folders that we don't want to copy
          wrappersUnallowed = ['.git', 'README.md', '.gitignore', 'node_modules', 'package.json', 'build'];
          libFileNames = PHET_IO_LIB_PRELOADS.map(function (filePath) {
            var parts = filePath.split('/');
            return parts[parts.length - 1];
          }); // Don't copy over the files that are in the lib file, this way we can catch wrapper bugs that are not pointing to the lib.
          fullUnallowedList = wrappersUnallowed.concat(libFileNames); // wrapping function for copying the wrappers to the build dir
          copyWrapper = function copyWrapper(src, dest, wrapper, wrapperName) {
            var wrapperFilterWithNameFilter = function wrapperFilterWithNameFilter(absPath, contents) {
              var result = filterWrapper(absPath, contents);

              // Support loading relative-path resources, like
              //{ url: '../phet-io-wrapper-hookes-law-energy/sounds/precipitate-chimes-v1-shorter.mp3' }
              // -->
              //{ url: 'wrappers/hookes-law-energy/sounds/precipitate-chimes-v1-shorter.mp3' }
              if (wrapper && wrapperName && result) {
                return ChipperStringUtils.replaceAll(result, "../".concat(wrapper, "/"), "wrappers/".concat(wrapperName, "/"));
              }
              return result;
            };
            copyDirectory(src, dest, wrapperFilterWithNameFilter, {
              exclude: fullUnallowedList,
              minifyJS: true,
              minifyOptions: {
                stripAssertions: false
              }
            });
          }; // Make sure to copy the phet-io-wrappers common wrapper code too.
          wrappers.push(WRAPPER_COMMON_FOLDER);

          // Add sim-specific wrappers

          try {
            simSpecificWrappers = fs.readdirSync("../phet-io-sim-specific/repos/".concat(repo, "/wrappers/"), {
              withFileTypes: true
            }).filter(function (dirent) {
              return dirent.isDirectory();
            }).map(function (dirent) {
              return "phet-io-sim-specific/repos/".concat(repo, "/wrappers/").concat(dirent.name);
            });
          } catch (e) {
            simSpecificWrappers = [];
          }
          wrappers.push.apply(wrappers, _toConsumableArray(simSpecificWrappers));
          additionalWrappers = packageObject.phet && packageObject.phet['phet-io'] && packageObject.phet['phet-io'].wrappers ? packageObject.phet['phet-io'].wrappers : []; // phet-io-sim-specific wrappers are automatically added above
          wrappers.push.apply(wrappers, _toConsumableArray(additionalWrappers.filter(function (x) {
            return !x.includes('phet-io-sim-specific');
          })));
          wrappers.forEach(function (wrapper) {
            var wrapperParts = wrapper.split('/');

            // either take the last path part, or take the first (repo name) and remove the wrapper prefix
            var wrapperName = wrapperParts.length > 1 ? wrapperParts[wrapperParts.length - 1] : wrapperParts[0].replace(DEDICATED_REPO_WRAPPER_PREFIX, '');

            // Copy the wrapper into the build dir /wrappers/, exclude the excluded list
            copyWrapper("../".concat(wrapper), "".concat(wrappersLocation).concat(wrapperName), wrapper, wrapperName);
          });

          // Copy the wrapper index into the top level of the build dir, exclude the excluded list
          copyWrapper('../phet-io-wrappers/index', "".concat(buildDir), null, null);

          // Create the lib file that is minified and publicly available under the /lib folder of the build
          _context.next = 35;
          return handleLib(repo, buildDir, filterWrapper);
        case 35:
          _context.next = 37;
          return handleOfflineArtifact(buildDir, repo, version);
        case 37:
          // Create the contrib folder and add to it third party libraries used by wrappers.
          handleContrib(buildDir);

          // Create the rendered jsdoc in the `doc` folder
          _context.next = 40;
          return handleJSDOC(buildDir);
        case 40:
          // create the client guides
          handleClientGuides(repo, simulationDisplayName, buildDir, version, simRepoSHA);
          _context.next = 43;
          return handleStudio(repo, wrappersLocation);
        case 43:
          if (!generateMacroAPIFile) {
            _context.next = 50;
            break;
          }
          _context.next = 46;
          return generatePhetioMacroAPI([repo], {
            fromBuiltVersion: true
          });
        case 46:
          _context.t0 = repo;
          fullAPI = _context.sent[_context.t0];
          assert(fullAPI, 'Full API expected but not created from puppeteer step, likely caused by https://github.com/phetsims/chipper/issues/1022.');
          grunt.file.write("".concat(buildDir).concat(repo, "-phet-io-api.json"), formatPhetioAPI(fullAPI));
        case 50:
          // The nested index wrapper will be broken on build, so get rid of it for clarity
          fs.rmSync("".concat(wrappersLocation, "index/"), {
            recursive: true
          });
        case 51:
        case "end":
          return _context.stop();
      }
    }, _callee);
  }));
  return function (_x, _x2, _x3, _x4, _x5) {
    return _ref.apply(this, arguments);
  };
}();

/**
 * Given the list of lib files, apply a filter function to them. Then minify them and consolidate into a single string.
 * Finally, write them to the build dir with a license prepended. See https://github.com/phetsims/phet-io/issues/353

 * @param {string} repo
 * @param {string} buildDir
 * @param {Function} filter - the filter function used when copying over wrapper files to fix relative paths and such.
 *                            Has arguments like "function(absPath, contents)"
 */
var handleLib = /*#__PURE__*/function () {
  var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(repo, buildDir, filter) {
    var phetioLibCode, migrationProcessorsCode, minifiedPhetioCode, results, wrappersMain, filteredMain, mainCopyright;
    return _regeneratorRuntime().wrap(function _callee2$(_context2) {
      while (1) switch (_context2.prev = _context2.next) {
        case 0:
          grunt.log.debug('Creating phet-io lib file from: ', PHET_IO_LIB_PRELOADS);
          grunt.file.mkdir("".concat(buildDir, "lib"));

          // phet-written preloads
          phetioLibCode = PHET_IO_LIB_PRELOADS.map(function (libFile) {
            var contents = grunt.file.read(libFile);
            var filteredContents = filter(libFile, contents);

            // The filter returns null if nothing changes
            return filteredContents || contents;
          }).join('');
          _context2.next = 5;
          return getCompiledMigrationProcessors(repo, buildDir);
        case 5:
          migrationProcessorsCode = _context2.sent;
          minifiedPhetioCode = minify("".concat(phetioLibCode, "\n").concat(migrationProcessorsCode), {
            stripAssertions: false
          });
          _context2.next = 9;
          return tsc('../phet-io-wrappers');
        case 9:
          results = _context2.sent;
          reportTscResults(results, grunt);
          _context2.next = 13;
          return buildStandalone('phet-io-wrappers', {
            stripAssertions: false,
            stripLogging: false,
            tempOutputDir: repo,
            // Avoid getting a 2nd copy of the files that are already bundled into the lib file
            omitPreloads: THIRD_PARTY_LIB_PRELOADS
          });
        case 13:
          wrappersMain = _context2.sent;
          // In loadWrapperTemplate in unbuilt mode, it uses readFile to dynamically load the templates at runtime.
          // In built mode, we must inline the templates into the build artifact. See loadWrapperTemplate.js
          assert(wrappersMain.includes('"{{STANDARD_WRAPPER_SKELETON}}"') || wrappersMain.includes('\'{{STANDARD_WRAPPER_SKELETON}}\''), 'Template variable is missing: STANDARD_WRAPPER_SKELETON');
          assert(wrappersMain.includes('"{{CUSTOM_WRAPPER_SKELETON}}"') || wrappersMain.includes('\'{{CUSTOM_WRAPPER_SKELETON}}\''), 'Template variable is missing: CUSTOM_WRAPPER_SKELETON');

          // Robustly handle double or single quotes.  At the moment it is double quotes.
          // buildStandalone will mangle a template string into "" because it hasn't been filled in yet, bring it back here (with
          // support for it changing in the future from double to single quotes).
          wrappersMain = wrappersMain.replace('"{{STANDARD_WRAPPER_SKELETON}}"', '`{{STANDARD_WRAPPER_SKELETON}}`');
          wrappersMain = wrappersMain.replace('\'{{STANDARD_WRAPPER_SKELETON}}\'', '`{{STANDARD_WRAPPER_SKELETON}}`');
          wrappersMain = wrappersMain.replace('"{{CUSTOM_WRAPPER_SKELETON}}"', '`{{CUSTOM_WRAPPER_SKELETON}}`');
          wrappersMain = wrappersMain.replace('\'{{CUSTOM_WRAPPER_SKELETON}}\'', '`{{CUSTOM_WRAPPER_SKELETON}}`');
          filteredMain = filter(LIB_OUTPUT_FILE, wrappersMain);
          mainCopyright = "// Copyright 2002-".concat(new Date().getFullYear(), ", University of Colorado Boulder\n// This PhET-iO file requires a license\n// USE WITHOUT A LICENSE AGREEMENT IS STRICTLY PROHIBITED.\n// For licensing, please contact phethelp@colorado.edu");
          grunt.file.write("".concat(buildDir, "lib/").concat(LIB_OUTPUT_FILE), "".concat(mainCopyright, "\n// \n// Contains additional code under the specified licenses:\n\n").concat(THIRD_PARTY_LIB_PRELOADS.map(function (contribFile) {
            return grunt.file.read(contribFile);
          }).join('\n\n'), "\n\n").concat(mainCopyright, "\n\n").concat(minifiedPhetioCode, "\n").concat(filteredMain));
        case 23:
        case "end":
          return _context2.stop();
      }
    }, _callee2);
  }));
  return function handleLib(_x6, _x7, _x8) {
    return _ref2.apply(this, arguments);
  };
}();

/**
 * Copy all the third party libraries from sherpa to the build directory under the 'contrib' folder.
 * @param {string} buildDir
 */
var handleContrib = function handleContrib(buildDir) {
  grunt.log.debug('Creating phet-io contrib folder');
  CONTRIB_FILES.forEach(function (filePath) {
    var filePathParts = filePath.split('/');
    var filename = filePathParts[filePathParts.length - 1];
    grunt.file.copy(filePath, "".concat(buildDir, "contrib/").concat(filename));
  });
};

/**
 * Combine the files necessary to run and host PhET-iO locally into a zip that can be easily downloaded by the client.
 * This does not include any documentation, or wrapper suite wrapper examples.
 * @param {string} buildDir
 * @param {string} repo
 * @param {string} version
 * @returns {Promise.<void>}
 */
var handleOfflineArtifact = /*#__PURE__*/function () {
  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(buildDir, repo, version) {
    var output, archive;
    return _regeneratorRuntime().wrap(function _callee3$(_context3) {
      while (1) switch (_context3.prev = _context3.next) {
        case 0:
          output = fs.createWriteStream("".concat(buildDir).concat(repo, "-phet-io-").concat(version, ".zip"));
          archive = archiver('zip');
          archive.on('error', function (err) {
            return grunt.fail.fatal("error creating archive: ".concat(err));
          });
          archive.pipe(output);

          // copy over the lib directory and its contents, and an index to test. Note that these use the files from the buildDir
          // because they have been post-processed and contain filled in template vars.
          archive.directory("".concat(buildDir, "lib"), 'lib');

          // Take from build directory so that it has been filtered/mapped to correct paths.
          archive.file("".concat(buildDir).concat(WRAPPERS_FOLDER, "/common/html/offline-example.html"), {
            name: 'index.html'
          });

          // get the all html and the debug version too, use `cwd` so that they are at the top level of the zip.
          archive.glob("".concat(repo, "*all*.html"), {
            cwd: "".concat(buildDir)
          });
          archive.finalize();
          return _context3.abrupt("return", new Promise(function (resolve) {
            return output.on('close', resolve);
          }));
        case 9:
        case "end":
          return _context3.stop();
      }
    }, _callee3);
  }));
  return function handleOfflineArtifact(_x9, _x10, _x11) {
    return _ref3.apply(this, arguments);
  };
}();

/**
 * Generate jsdoc and put it in "build/phet-io/doc"
 * @param {string} buildDir
 * @returns {Promise.<void>}
 */
var handleJSDOC = /*#__PURE__*/function () {
  var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(buildDir) {
    var i, getArgs, explanation, imageDir, json;
    return _regeneratorRuntime().wrap(function _callee4$(_context4) {
      while (1) switch (_context4.prev = _context4.next) {
        case 0:
          i = 0;
        case 1:
          if (!(i < JSDOC_FILES.length)) {
            _context4.next = 7;
            break;
          }
          if (fs.existsSync(JSDOC_FILES[i])) {
            _context4.next = 4;
            break;
          }
          throw new Error("file doesnt exist: ".concat(JSDOC_FILES[i]));
        case 4:
          i++;
          _context4.next = 1;
          break;
        case 7:
          getArgs = function getArgs(explain) {
            return ['../chipper/node_modules/jsdoc/jsdoc.js'].concat(_toConsumableArray(explain ? ['-X'] : []), JSDOC_FILES, ['-c', '../phet-io/doc/wrapper/jsdoc-config.json', '-d', "".concat(buildDir, "doc/api"), '-t', '../chipper/node_modules/docdash', '--readme', JSDOC_README_FILE]);
          }; // FOR DEBUGGING JSDOC:
          // uncomment this line, and run it from the top level of a sim directory
          // console.log( 'node', getArgs( false ).join( ' ' ) );
          // First we tried to run the jsdoc binary as the cmd, but that wasn't working, and was quite finicky. Then @samreid
          // found https://stackoverflow.com/questions/33664843/how-to-use-jsdoc-with-gulp which recommends the following method
          // (node executable with jsdoc js file)
          _context4.next = 10;
          return execute('node', getArgs(false), process.cwd(), {
            shell: true
          });
        case 10:
          _context4.next = 12;
          return execute('node', getArgs(true), process.cwd(), {
            shell: true
          });
        case 12:
          explanation = _context4.sent.trim();
          // Copy the logo file
          imageDir = "".concat(buildDir, "doc/images");
          if (!fs.existsSync(imageDir)) {
            fs.mkdirSync(imageDir);
          }
          fs.copyFileSync('../brand/phet-io/images/logoOnWhite.png', "".concat(imageDir, "/logo.png"));
          json = explanation.substring(explanation.indexOf('['), explanation.lastIndexOf(']') + 1); // basic sanity checks
          assert(json.length > 5000, 'JSON seems odd');
          try {
            JSON.parse(json);
          } catch (e) {
            assert(false, 'JSON parsing failed');
          }
          fs.writeFileSync("".concat(buildDir, "doc/jsdoc-explanation.json"), json);
        case 20:
        case "end":
          return _context4.stop();
      }
    }, _callee4);
  }));
  return function handleJSDOC(_x12) {
    return _ref4.apply(this, arguments);
  };
}();

/**
 * Generates the phet-io client guides and puts them in `build/phet-io/doc/guides/`
 * @param {string} repoName
 * @param {string} simulationDisplayName
 * @param {string} buildDir
 * @param {string} version
 * @param {string} simRepoSHA
 */
var handleClientGuides = function handleClientGuides(repoName, simulationDisplayName, buildDir, version, simRepoSHA) {
  var builtClientGuidesOutputDir = "".concat(buildDir, "doc/guides/");
  var clientGuidesSourceRoot = "".concat(PHET_IO_SIM_SPECIFIC, "/repos/").concat(repoName, "/");
  var commonDir = "".concat(PHET_IO_SIM_SPECIFIC, "/").concat(GUIDES_COMMON_DIR);

  // copy over common images and styles
  copyDirectory(commonDir, "".concat(builtClientGuidesOutputDir));

  // handle generating and writing the html file for each client guide
  generateAndWriteClientGuide(repoName, "".concat(simulationDisplayName, " PhET-iO Guide"), simulationDisplayName, "".concat(commonDir, "/").concat(PHET_IO_GUIDE_FILENAME, ".md"), "".concat(builtClientGuidesOutputDir).concat(PHET_IO_GUIDE_FILENAME, ".html"), version, simRepoSHA, false);
  generateAndWriteClientGuide(repoName, "".concat(simulationDisplayName, " Examples"), simulationDisplayName, "".concat(clientGuidesSourceRoot).concat(EXAMPLES_FILENAME, ".md"), "".concat(builtClientGuidesOutputDir).concat(EXAMPLES_FILENAME, ".html"), version, simRepoSHA, true);
};

/**
 * Takes a markdown client guides, fills in the links, and then generates and writes it as html
 * @param {string} repoName
 * @param {string} title
 * @param {string} simulationDisplayName
 * @param {string} mdFilePath - to get the source md file
 * @param {string} destinationPath - to write to
 * @param {string} version
 * @param {string} simRepoSHA
 * @param {boolean} assertNoConstAwait - handle asserting for "const X = await ..." in examples, see https://github.com/phetsims/phet-io-sim-specific/issues/34
 */
var generateAndWriteClientGuide = function generateAndWriteClientGuide(repoName, title, simulationDisplayName, mdFilePath, destinationPath, version, simRepoSHA, assertNoConstAwait) {
  // make sure the source markdown file exists
  if (!fs.existsSync(mdFilePath)) {
    grunt.log.warn("no client guide found at ".concat(mdFilePath, ", no guide being built."));
    return;
  }
  var simCamelCaseName = _.camelCase(repoName);
  var modelDocumentationLine = '';
  if (fs.existsSync("../".concat(repoName, "/doc/model.md"))) {
    modelDocumentationLine = "* [Model Documentation](https://github.com/phetsims/".concat(repoName, "/blob/").concat(simRepoSHA, "/doc/model.md)");
  }

  // fill in links
  var clientGuideSource = grunt.file.read(mdFilePath);

  ///////////////////////////////////////////
  // DO NOT UPDATE OR ADD TO THESE WITHOUT ALSO UPDATING THE LIST IN phet-io-sim-specific/client-guide-common/README.md
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{WRAPPER_INDEX_PATH}}', '../../');
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{SIMULATION_DISPLAY_NAME}}', simulationDisplayName);
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{SIM_PATH}}', "../../".concat(repoName, "_all_phet-io.html?postMessageOnError&phetioStandalone"));
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{STUDIO_PATH}}', '../../wrappers/studio/');
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{PHET_IO_GUIDE_PATH}}', "./".concat(PHET_IO_GUIDE_FILENAME, ".html"));
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{DATE}}', new Date().toString());
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{simCamelCaseName}}', simCamelCaseName);
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{simKebabName}}', repoName);
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{SIMULATION_VERSION_STRING}}', version);
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, '{{MODEL_DOCUMENTATION_LINE}}', modelDocumentationLine);
  ///////////////////////////////////////////

  // support relative and absolute paths for unbuilt common image previews by replacing them with the correct relative path. Order matters!
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, "../../../".concat(GUIDES_COMMON_DIR), '');
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, "../../".concat(GUIDES_COMMON_DIR), '');
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, "../".concat(GUIDES_COMMON_DIR), '');
  clientGuideSource = ChipperStringUtils.replaceAll(clientGuideSource, "/".concat(GUIDES_COMMON_DIR), '');

  // Since we don't have a bad-text lint rule for md files, see https://github.com/phetsims/phet-io-sim-specific/issues/34
  assertNoConstAwait && assert(!/^.*const.*await.*$/gm.test(clientGuideSource), "use let instead of const when awaiting values in PhET-iO \"".concat(EXAMPLES_FILENAME, "\" files"));
  var renderedClientGuide = marked.parse(clientGuideSource);

  // link a stylesheet
  var clientGuideHTML = "<head>\n                   <link rel='stylesheet' href='css/github-markdown.css' type='text/css'>\n                   <title>".concat(title, "</title>\n                 </head>\n                 <body>\n                 <div class=\"markdown-body\">\n                   ").concat(renderedClientGuide, "\n                 </div>\n                 </body>");

  // write the output to the build directory
  grunt.file.write(destinationPath, clientGuideHTML);
};

/**
 * Support building studio. This compiles the studio modules into a runnable, and copies that over to the expected spot
 * on build.
 * @param {string} repo
 * @param {string} wrappersLocation
 * @returns {Promise.<void>}
 */
var handleStudio = /*#__PURE__*/function () {
  var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(repo, wrappersLocation) {
    var results;
    return _regeneratorRuntime().wrap(function _callee5$(_context5) {
      while (1) switch (_context5.prev = _context5.next) {
        case 0:
          grunt.log.debug('building studio');
          _context5.next = 3;
          return tsc('../studio');
        case 3:
          results = _context5.sent;
          reportTscResults(results, grunt);
          _context5.t0 = fs;
          _context5.t1 = "".concat(wrappersLocation, "studio/").concat(STUDIO_BUILT_FILENAME);
          _context5.next = 9;
          return buildStandalone('studio', {
            stripAssertions: false,
            stripLogging: false,
            tempOutputDir: repo
          });
        case 9:
          _context5.t2 = _context5.sent;
          _context5.t0.writeFileSync.call(_context5.t0, _context5.t1, _context5.t2);
        case 11:
        case "end":
          return _context5.stop();
      }
    }, _callee5);
  }));
  return function handleStudio(_x13, _x14) {
    return _ref5.apply(this, arguments);
  };
}();

/**
 * Use webpack to bundle the migration processors into a compiled code string, for use in phet-io lib file.
 * @param {string} repo
 * @param {string} buildDir
 * @returns {Promise.<string>}
 */
var getCompiledMigrationProcessors = /*#__PURE__*/function () {
  var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(repo, buildDir) {
    return _regeneratorRuntime().wrap(function _callee6$(_context6) {
      while (1) switch (_context6.prev = _context6.next) {
        case 0:
          return _context6.abrupt("return", new Promise(function (resolve, reject) {
            var migrationProcessorsFilename = "".concat(repo, "-migration-processors.js");
            var entryPointFilename = "../chipper/dist/js/phet-io-sim-specific/repos/".concat(repo, "/js/").concat(migrationProcessorsFilename);
            if (!fs.existsSync(entryPointFilename)) {
              grunt.log.debug("No migration processors found at ".concat(entryPointFilename, ", no processors to be bundled with ").concat(LIB_OUTPUT_FILE, "."));
              resolve(''); // blank string because there are no processors to add.
            } else {
              // output dir must be an absolute path
              var outputDir = path.resolve(__dirname, "../../".concat(repo, "/").concat(buildDir));
              var compiler = webpack({
                module: {
                  rules: webpackBuild.getModuleRules() // Support preload-like library globals used via `import`
                },
                // We uglify as a step after this, with many custom rules. So we do NOT optimize or uglify in this step.
                optimization: {
                  minimize: false
                },
                // Simulations or runnables will have a single entry point
                entry: {
                  repo: entryPointFilename
                },
                // We output our builds to the following dir
                output: {
                  path: outputDir,
                  filename: migrationProcessorsFilename
                }
              });
              compiler.run(function (err, stats) {
                if (err || stats.hasErrors()) {
                  console.error('Migration processors webpack build errors:', stats.compilation.errors);
                  reject(err || stats.compilation.errors[0]);
                } else {
                  var jsFile = "".concat(outputDir, "/").concat(migrationProcessorsFilename);
                  var js = fs.readFileSync(jsFile, 'utf-8');
                  fs.unlinkSync(jsFile);
                  resolve(js);
                }
              });
            }
          }));
        case 1:
        case "end":
          return _context6.stop();
      }
    }, _callee6);
  }));
  return function getCompiledMigrationProcessors(_x15, _x16) {
    return _ref6.apply(this, arguments);
  };
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,