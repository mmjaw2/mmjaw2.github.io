"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }
function _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
// Copyright 2024, University of Colorado Boulder

/**
 * @author Matt Pennington (PhET Interactive Simulations)
 */

var child_process = require('child_process');
var fs = require('fs');
var localeInfo = require('./localeInfo');
var newLocaleInfo = _objectSpread({
  _comment: 'This file is automatically generated by js/data/updateLocaleInfo.js. Do not modify it directly.'
}, localeInfo);
fs.writeFileSync('../../data/localeInfo.json', JSON.stringify(newLocaleInfo, null, 2));
var newModuleSourceCode = "// Copyright 2015-".concat(new Date().getFullYear(), ", University of Colorado Boulder\n\n/**\n  * This file is automatically generated by js/data/updateLocaleInfo.js. Do not modify it directly.\n  *\n  * @author automatically generated by updateLocaleInfo.js\n  */\n\n/* eslint-env browser, node */\n\n\nexport default {");

// Add properties for all locales
for (var locale in localeInfo) {
  newModuleSourceCode += "\n  ".concat(locale, ": {\n    name: '").concat(localeInfo[locale].name, "',\n    localizedName: '").concat(localeInfo[locale].localizedName, "',\n    direction: '").concat(localeInfo[locale].direction, "'\n  },");
}
// Remove the trailing comma
newModuleSourceCode = newModuleSourceCode.slice(0, -1);
// Close the object
newModuleSourceCode += '\n};';
fs.writeFileSync('./localeInfoModule.js', newModuleSourceCode);
console.log('locale info files updated');
var needsCommit = true;
try {
  // 0 exit code if there are no working copy changes from HEAD.
  child_process.execSync('git diff-index --quiet HEAD --');
} catch (e) {
  needsCommit = false;
  console.log('No locale info changes, no commit needed.');
}
if (needsCommit) {
  try {
    console.log('pulling');

    // Some devs have rebase set by default, and you cannot rebase-pull with working copy changes.
    child_process.execSync('git pull --no-rebase');
    child_process.execSync('git add ../../data/localeInfo.json');
    child_process.execSync('git add ./localeInfoModule.js');
    if (needsCommit) {
      console.log('committing');
      child_process.execSync('git commit --no-verify ../../data/localeInfo.json ./localeInfoModule.js -m "Automatically updated generated localeInfo files"');
      console.log('pushing');
      child_process.execSync('git push');
    }
  } catch (e) {
    console.error('Unable to update files in git.', e);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGlsZF9wcm9jZXNzIiwicmVxdWlyZSIsImZzIiwibG9jYWxlSW5mbyIsIm5ld0xvY2FsZUluZm8iLCJfb2JqZWN0U3ByZWFkIiwiX2NvbW1lbnQiLCJ3cml0ZUZpbGVTeW5jIiwiSlNPTiIsInN0cmluZ2lmeSIsIm5ld01vZHVsZVNvdXJjZUNvZGUiLCJjb25jYXQiLCJEYXRlIiwiZ2V0RnVsbFllYXIiLCJsb2NhbGUiLCJuYW1lIiwibG9jYWxpemVkTmFtZSIsImRpcmVjdGlvbiIsInNsaWNlIiwiY29uc29sZSIsImxvZyIsIm5lZWRzQ29tbWl0IiwiZXhlY1N5bmMiLCJlIiwiZXJyb3IiXSwic291cmNlcyI6WyJ1cGRhdGVMb2NhbGVJbmZvLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBAYXV0aG9yIE1hdHQgUGVubmluZ3RvbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5jb25zdCBjaGlsZF9wcm9jZXNzID0gcmVxdWlyZSggJ2NoaWxkX3Byb2Nlc3MnICk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSggJ2ZzJyApO1xyXG5jb25zdCBsb2NhbGVJbmZvID0gcmVxdWlyZSggJy4vbG9jYWxlSW5mbycgKTtcclxuXHJcbmNvbnN0IG5ld0xvY2FsZUluZm8gPSB7XHJcbiAgX2NvbW1lbnQ6ICdUaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkganMvZGF0YS91cGRhdGVMb2NhbGVJbmZvLmpzLiBEbyBub3QgbW9kaWZ5IGl0IGRpcmVjdGx5LicsXHJcbiAgLi4ubG9jYWxlSW5mb1xyXG59O1xyXG5cclxuZnMud3JpdGVGaWxlU3luYyggJy4uLy4uL2RhdGEvbG9jYWxlSW5mby5qc29uJywgSlNPTi5zdHJpbmdpZnkoIG5ld0xvY2FsZUluZm8sIG51bGwsIDIgKSApO1xyXG5cclxuXHJcbmxldCBuZXdNb2R1bGVTb3VyY2VDb2RlID1cclxuICBgLy8gQ29weXJpZ2h0IDIwMTUtJHtuZXcgRGF0ZSgpLmdldEZ1bGxZZWFyKCl9LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gICogVGhpcyBmaWxlIGlzIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IGpzL2RhdGEvdXBkYXRlTG9jYWxlSW5mby5qcy4gRG8gbm90IG1vZGlmeSBpdCBkaXJlY3RseS5cclxuICAqXHJcbiAgKiBAYXV0aG9yIGF1dG9tYXRpY2FsbHkgZ2VuZXJhdGVkIGJ5IHVwZGF0ZUxvY2FsZUluZm8uanNcclxuICAqL1xyXG5cclxuLyogZXNsaW50LWVudiBicm93c2VyLCBub2RlICovXHJcblxyXG5cclxuZXhwb3J0IGRlZmF1bHQge2A7XHJcblxyXG5cclxuLy8gQWRkIHByb3BlcnRpZXMgZm9yIGFsbCBsb2NhbGVzXHJcbmZvciAoIGNvbnN0IGxvY2FsZSBpbiBsb2NhbGVJbmZvICkge1xyXG4gIG5ld01vZHVsZVNvdXJjZUNvZGUgKz0gYFxyXG4gICR7bG9jYWxlfToge1xyXG4gICAgbmFtZTogJyR7bG9jYWxlSW5mb1sgbG9jYWxlIF0ubmFtZX0nLFxyXG4gICAgbG9jYWxpemVkTmFtZTogJyR7bG9jYWxlSW5mb1sgbG9jYWxlIF0ubG9jYWxpemVkTmFtZX0nLFxyXG4gICAgZGlyZWN0aW9uOiAnJHtsb2NhbGVJbmZvWyBsb2NhbGUgXS5kaXJlY3Rpb259J1xyXG4gIH0sYDtcclxufVxyXG4vLyBSZW1vdmUgdGhlIHRyYWlsaW5nIGNvbW1hXHJcbm5ld01vZHVsZVNvdXJjZUNvZGUgPSBuZXdNb2R1bGVTb3VyY2VDb2RlLnNsaWNlKCAwLCAtMSApO1xyXG4vLyBDbG9zZSB0aGUgb2JqZWN0XHJcbm5ld01vZHVsZVNvdXJjZUNvZGUgKz0gJ1xcbn07JztcclxuXHJcblxyXG5mcy53cml0ZUZpbGVTeW5jKCAnLi9sb2NhbGVJbmZvTW9kdWxlLmpzJywgbmV3TW9kdWxlU291cmNlQ29kZSApO1xyXG5jb25zb2xlLmxvZyggJ2xvY2FsZSBpbmZvIGZpbGVzIHVwZGF0ZWQnICk7XHJcblxyXG5sZXQgbmVlZHNDb21taXQgPSB0cnVlO1xyXG50cnkge1xyXG5cclxuICAvLyAwIGV4aXQgY29kZSBpZiB0aGVyZSBhcmUgbm8gd29ya2luZyBjb3B5IGNoYW5nZXMgZnJvbSBIRUFELlxyXG4gIGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmMoICdnaXQgZGlmZi1pbmRleCAtLXF1aWV0IEhFQUQgLS0nICk7XHJcbn1cclxuY2F0Y2goIGUgKSB7XHJcbiAgbmVlZHNDb21taXQgPSBmYWxzZTtcclxuICBjb25zb2xlLmxvZyggJ05vIGxvY2FsZSBpbmZvIGNoYW5nZXMsIG5vIGNvbW1pdCBuZWVkZWQuJyApO1xyXG59XHJcblxyXG5pZiAoIG5lZWRzQ29tbWl0ICkge1xyXG4gIHRyeSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coICdwdWxsaW5nJyApO1xyXG5cclxuICAgIC8vIFNvbWUgZGV2cyBoYXZlIHJlYmFzZSBzZXQgYnkgZGVmYXVsdCwgYW5kIHlvdSBjYW5ub3QgcmViYXNlLXB1bGwgd2l0aCB3b3JraW5nIGNvcHkgY2hhbmdlcy5cclxuICAgIGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmMoICdnaXQgcHVsbCAtLW5vLXJlYmFzZScgKTtcclxuXHJcbiAgICBjaGlsZF9wcm9jZXNzLmV4ZWNTeW5jKCAnZ2l0IGFkZCAuLi8uLi9kYXRhL2xvY2FsZUluZm8uanNvbicgKTtcclxuICAgIGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmMoICdnaXQgYWRkIC4vbG9jYWxlSW5mb01vZHVsZS5qcycgKTtcclxuXHJcbiAgICBpZiAoIG5lZWRzQ29tbWl0ICkge1xyXG4gICAgICBjb25zb2xlLmxvZyggJ2NvbW1pdHRpbmcnICk7XHJcbiAgICAgIGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmMoICdnaXQgY29tbWl0IC0tbm8tdmVyaWZ5IC4uLy4uL2RhdGEvbG9jYWxlSW5mby5qc29uIC4vbG9jYWxlSW5mb01vZHVsZS5qcyAtbSBcIkF1dG9tYXRpY2FsbHkgdXBkYXRlZCBnZW5lcmF0ZWQgbG9jYWxlSW5mbyBmaWxlc1wiJyApO1xyXG4gICAgICBjb25zb2xlLmxvZyggJ3B1c2hpbmcnICk7XHJcbiAgICAgIGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmMoICdnaXQgcHVzaCcgKTtcclxuICAgIH1cclxuICB9XHJcbiAgY2F0Y2goIGUgKSB7XHJcbiAgICBjb25zb2xlLmVycm9yKCAnVW5hYmxlIHRvIHVwZGF0ZSBmaWxlcyBpbiBnaXQuJywgZSApO1xyXG4gIH1cclxufSJdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7QUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsSUFBTUEsYUFBYSxHQUFHQyxPQUFPLENBQUUsZUFBZ0IsQ0FBQztBQUNoRCxJQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBRSxJQUFLLENBQUM7QUFDMUIsSUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUUsY0FBZSxDQUFDO0FBRTVDLElBQU1HLGFBQWEsR0FBQUMsYUFBQTtFQUNqQkMsUUFBUSxFQUFFO0FBQWlHLEdBQ3hHSCxVQUFVLENBQ2Q7QUFFREQsRUFBRSxDQUFDSyxhQUFhLENBQUUsNEJBQTRCLEVBQUVDLElBQUksQ0FBQ0MsU0FBUyxDQUFFTCxhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBRSxDQUFDO0FBRzFGLElBQUlNLG1CQUFtQix3QkFBQUMsTUFBQSxDQUNBLElBQUlDLElBQUksQ0FBQyxDQUFDLENBQUNDLFdBQVcsQ0FBQyxDQUFDLGdSQVc5Qjs7QUFHakI7QUFDQSxLQUFNLElBQU1DLE1BQU0sSUFBSVgsVUFBVSxFQUFHO0VBQ2pDTyxtQkFBbUIsV0FBQUMsTUFBQSxDQUNqQkcsTUFBTSxzQkFBQUgsTUFBQSxDQUNHUixVQUFVLENBQUVXLE1BQU0sQ0FBRSxDQUFDQyxJQUFJLDhCQUFBSixNQUFBLENBQ2hCUixVQUFVLENBQUVXLE1BQU0sQ0FBRSxDQUFDRSxhQUFhLDBCQUFBTCxNQUFBLENBQ3RDUixVQUFVLENBQUVXLE1BQU0sQ0FBRSxDQUFDRyxTQUFTLFlBQzNDO0FBQ0w7QUFDQTtBQUNBUCxtQkFBbUIsR0FBR0EsbUJBQW1CLENBQUNRLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUM7QUFDeEQ7QUFDQVIsbUJBQW1CLElBQUksTUFBTTtBQUc3QlIsRUFBRSxDQUFDSyxhQUFhLENBQUUsdUJBQXVCLEVBQUVHLG1CQUFvQixDQUFDO0FBQ2hFUyxPQUFPLENBQUNDLEdBQUcsQ0FBRSwyQkFBNEIsQ0FBQztBQUUxQyxJQUFJQyxXQUFXLEdBQUcsSUFBSTtBQUN0QixJQUFJO0VBRUY7RUFDQXJCLGFBQWEsQ0FBQ3NCLFFBQVEsQ0FBRSxnQ0FBaUMsQ0FBQztBQUM1RCxDQUFDLENBQ0QsT0FBT0MsQ0FBQyxFQUFHO0VBQ1RGLFdBQVcsR0FBRyxLQUFLO0VBQ25CRixPQUFPLENBQUNDLEdBQUcsQ0FBRSwyQ0FBNEMsQ0FBQztBQUM1RDtBQUVBLElBQUtDLFdBQVcsRUFBRztFQUNqQixJQUFJO0lBRUZGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLFNBQVUsQ0FBQzs7SUFFeEI7SUFDQXBCLGFBQWEsQ0FBQ3NCLFFBQVEsQ0FBRSxzQkFBdUIsQ0FBQztJQUVoRHRCLGFBQWEsQ0FBQ3NCLFFBQVEsQ0FBRSxvQ0FBcUMsQ0FBQztJQUM5RHRCLGFBQWEsQ0FBQ3NCLFFBQVEsQ0FBRSwrQkFBZ0MsQ0FBQztJQUV6RCxJQUFLRCxXQUFXLEVBQUc7TUFDakJGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLFlBQWEsQ0FBQztNQUMzQnBCLGFBQWEsQ0FBQ3NCLFFBQVEsQ0FBRSwrSEFBZ0ksQ0FBQztNQUN6SkgsT0FBTyxDQUFDQyxHQUFHLENBQUUsU0FBVSxDQUFDO01BQ3hCcEIsYUFBYSxDQUFDc0IsUUFBUSxDQUFFLFVBQVcsQ0FBQztJQUN0QztFQUNGLENBQUMsQ0FDRCxPQUFPQyxDQUFDLEVBQUc7SUFDVEosT0FBTyxDQUFDSyxLQUFLLENBQUUsZ0NBQWdDLEVBQUVELENBQUUsQ0FBQztFQUN0RDtBQUNGIiwiaWdub3JlTGlzdCI6W119