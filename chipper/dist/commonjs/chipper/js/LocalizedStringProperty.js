"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _DynamicProperty2 = _interopRequireDefault(require("../../axon/js/DynamicProperty.js"));
var _localeProperty = _interopRequireDefault(require("../../joist/js/i18n/localeProperty.js"));
var _StringIO = _interopRequireDefault(require("../../tandem/js/types/StringIO.js"));
var _chipper = _interopRequireDefault(require("./chipper.js"));
var _TandemConstants = _interopRequireDefault(require("../../tandem/js/TandemConstants.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); } // Copyright 2023-2024, University of Colorado Boulder
/**
 * The main Property for a translated string (subtyped so we can get the stringKey, or other things in the future).
 *
 * @author Jonathan Olson <jonathan.olson>
 */
var LocalizedStringProperty = /*#__PURE__*/function (_DynamicProperty) {
  function LocalizedStringProperty(public readonly localizedString, tandem, metadata) {
    _classCallCheck(this, LocalizedStringProperty);
    // Allow phetioReadOnly to be overridden
    var phetioReadOnly = metadata && typeof metadata.phetioReadOnly === 'boolean' ? metadata.phetioReadOnly : _TandemConstants["default"].PHET_IO_OBJECT_METADATA_DEFAULTS.phetioReadOnly;

    // All i18n model strings are phetioFeatured by default
    var phetioFeatured = metadata && typeof metadata.phetioFeatured === 'boolean' ? metadata.phetioFeatured : true;

    // Allow phetioDocumentation to be overridden
    var phetioDocumentation = metadata && typeof metadata.phetioDocumentation === 'string' ? metadata.phetioDocumentation : _TandemConstants["default"].PHET_IO_OBJECT_METADATA_DEFAULTS.phetioDocumentation;
    return _callSuper(this, LocalizedStringProperty, [_localeProperty["default"], {
      derive: function derive(locale) {
        return localizedString.getLocaleSpecificProperty(locale);
      },
      bidirectional: true,
      phetioValueType: _StringIO["default"],
      phetioState: false,
      tandem: tandem,
      phetioFeatured: phetioFeatured,
      phetioReadOnly: phetioReadOnly,
      phetioDocumentation: phetioDocumentation
    }]);
  }
  _inherits(LocalizedStringProperty, _DynamicProperty);
  return _createClass(LocalizedStringProperty, [{
    key: "stringKey",
    get: function get() {
      return this.localizedString.stringKey;
    }
  }]);
}(_DynamicProperty2["default"]);
_chipper["default"].register('LocalizedStringProperty', LocalizedStringProperty);
var _default = exports["default"] = LocalizedStringProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,