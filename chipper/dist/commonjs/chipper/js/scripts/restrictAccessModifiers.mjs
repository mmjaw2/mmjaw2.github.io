"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
var _tsMorph = require("ts-morph");
var _child_process = require("child_process");
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== "undefined" && o[Symbol.iterator] || o["@@iterator"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === "number") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError("Invalid attempt to iterate non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it["return"] != null) it["return"](); } finally { if (didErr) throw err; } } }; }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; } // Copyright 2024, University of Colorado Boulder
/**
 * This script automates the process of tightening access modifiers within TypeScript files in a specified project.
 * It iterates over TypeScript files in the 'js/' directory, attempting to change public and protected class members
 * to private. It then runs the TypeScript type checker to validate these changes. If the type checker fails, it
 * escalates the access level from private to protected, and if necessary, back to public, testing the build at each
 * stage. This helps in enforcing stricter encapsulation in the codebase.
 *
 * Usage:
 * cd chipper/
 * node js/scripts/restrictAccessModifiers.js [relative-path-to-repo-directory]
 *
 * Parameters:
 * [relative-path-to-repo-directory] - The path to the repository where TypeScript files are located. This script assumes
 *                            a 'tsconfig.json' file is present at the root of the specified directory.
 *
 * Options:
 * --help                   - Displays this help message and exits.
 *
 * Example:
 * node js/scripts/restrictAccessModifiers.js ../my-ts-project
 *
 * Note:
 * - Ensure that 'tsconfig.json' is correctly set up in your project root.
 * - The script currently targets files within the 'js/' directory by default. Adjust the glob pattern in the
 *   getSourceFiles method call if your project structure differs.
 * - This script requires Node.js and the 'ts-morph' and 'child_process' packages.
 * - The script makes changes to the repo as it progresses. If you look at the source files while this script is running
 *   you will see the changes being made to trial values.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Matt Blackman (PhET Interactive Simulations)
 */
// Function to tighten accessibility annotations
function restrictAccessModifiers(_x) {
  return _restrictAccessModifiers.apply(this, arguments);
} // Check if there is a --help command line argument
function _restrictAccessModifiers() {
  _restrictAccessModifiers = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(repoPath) {
    var project, sourceFiles, _iterator, _step, sourceFile, classes, _iterator2, _step2, classDeclaration, members, _iterator3, _step3, member;
    return _regeneratorRuntime().wrap(function _callee$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          // Initialize a new ts-morph Project
          project = new _tsMorph.Project({
            // Assuming tsconfig.json is in the root, adjust if necessary
            tsConfigFilePath: "".concat(repoPath, "/tsconfig.json")
          });
          sourceFiles = project.getSourceFiles("".concat(repoPath, "/js/**/*.ts")); // Adjust the glob pattern as necessary
          _iterator = _createForOfIteratorHelper(sourceFiles);
          _context.prev = 3;
          _iterator.s();
        case 5:
          if ((_step = _iterator.n()).done) {
            _context.next = 61;
            break;
          }
          sourceFile = _step.value;
          classes = sourceFile.getClasses();
          _iterator2 = _createForOfIteratorHelper(classes);
          _context.prev = 9;
          _iterator2.s();
        case 11:
          if ((_step2 = _iterator2.n()).done) {
            _context.next = 51;
            break;
          }
          classDeclaration = _step2.value;
          console.log("# Processing class: ".concat(classDeclaration.getName()));
          members = [].concat(_toConsumableArray(classDeclaration.getInstanceProperties()), _toConsumableArray(classDeclaration.getInstanceMethods()), _toConsumableArray(classDeclaration.getStaticProperties()), _toConsumableArray(classDeclaration.getStaticMethods()));
          _iterator3 = _createForOfIteratorHelper(members);
          _context.prev = 16;
          _iterator3.s();
        case 18:
          if ((_step3 = _iterator3.n()).done) {
            _context.next = 41;
            break;
          }
          member = _step3.value;
          console.log(member.getScope() + ' ' + member.getName());
          if (!(member.getScope() === 'public' || member.getScope() === 'protected')) {
            _context.next = 39;
            break;
          }
          // Try setting to private
          member.setScope('private');
          _context.next = 25;
          return sourceFile.save();
        case 25:
          if (isBuildSuccessful()) {
            _context.next = 38;
            break;
          }
          // If not successful, try protected
          member.setScope('protected');
          _context.next = 29;
          return sourceFile.save();
        case 29:
          if (isBuildSuccessful()) {
            _context.next = 35;
            break;
          }
          // If still not successful, revert to public
          member.setScope('public');
          _context.next = 33;
          return sourceFile.save();
        case 33:
          _context.next = 36;
          break;
        case 35:
          console.log("    Successfully changed ".concat(member.getName(), " to protected."));
        case 36:
          _context.next = 39;
          break;
        case 38:
          console.log("    Successfully changed ".concat(member.getName(), " to private."));
        case 39:
          _context.next = 18;
          break;
        case 41:
          _context.next = 46;
          break;
        case 43:
          _context.prev = 43;
          _context.t0 = _context["catch"](16);
          _iterator3.e(_context.t0);
        case 46:
          _context.prev = 46;
          _iterator3.f();
          return _context.finish(46);
        case 49:
          _context.next = 11;
          break;
        case 51:
          _context.next = 56;
          break;
        case 53:
          _context.prev = 53;
          _context.t1 = _context["catch"](9);
          _iterator2.e(_context.t1);
        case 56:
          _context.prev = 56;
          _iterator2.f();
          return _context.finish(56);
        case 59:
          _context.next = 5;
          break;
        case 61:
          _context.next = 66;
          break;
        case 63:
          _context.prev = 63;
          _context.t2 = _context["catch"](3);
          _iterator.e(_context.t2);
        case 66:
          _context.prev = 66;
          _iterator.f();
          return _context.finish(66);
        case 69:
        case "end":
          return _context.stop();
      }
    }, _callee, null, [[3, 63, 66, 69], [9, 53, 56, 59], [16, 43, 46, 49]]);
  }));
  return _restrictAccessModifiers.apply(this, arguments);
}
if (process.argv.includes('--help')) {
  console.log("\n\x1B[1mUsage:\x1B[0m\n  \x1B[36mcd chipper/\x1B[0m\n  \x1B[36mnode js/scripts/restrictAccessModifiers.js [relative-path-to-repo-directory]\x1B[0m\n\n\x1B[1mParameters:\x1B[0m\n  \x1B[33m[relative-path-to-repo-directory]\x1B[0m - The path to the repository where TypeScript files are located. Assumes\n                           a 'tsconfig.json' file is present at the root of the specified directory.\n\n\x1B[1mOptions:\x1B[0m\n  \x1B[32m--help\x1B[0m                  - Displays this help message and exits.\n\n\x1B[1mExample:\x1B[0m\n  \x1B[36mnode js/scripts/restrictAccessModifiers.js ../my-ts-project\x1B[0m\n\n\x1B[1mNote:\x1B[0m\n- Ensure that 'tsconfig.json' is correctly set up in your project root.\n- The script currently targets files within the 'js/' directory by default. Adjust the glob pattern in the\n  getSourceFiles method call if your project structure differs.\n- This script requires Node.js and the 'ts-morph' and 'child_process' packages.\n- The script makes changes to the repo as it progresses. If you look at the source files while this script \n  is running you will see the changes being made to trial values.\n  ");
  process.exit(0);
}

// Check if the path to the repository directory is provided
if (process.argv.length < 3) {
  console.error('Error: Please provide the path to the repository directory. Check --help for instructions.');
  process.exit(1);
}

// Set the path to the repository directory
var repoPath = process.argv[2];

/**
 * Check if the proposed change (already saved to the filesystem) passes the type checker.
 * @returns {boolean}
 */
function isBuildSuccessful() {
  try {
    // Specify the path to the TypeScript compiler you want to use
    var tscPath = '../chipper/node_modules/typescript/bin/tsc';

    // Run the specified TypeScript compiler in the current directory
    (0, _child_process.execSync)("node ".concat(tscPath), {
      // set the working directory
      cwd: repoPath
    });

    // If tsc exits without error, the build is successful
    return true;
  } catch (error) {
    // If tsc exits with an error (non-zero exit code), the build failed
    return false;
  }
}

// Run the script
restrictAccessModifiers(repoPath).then(function () {
  return console.log('Finished processing files.');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,