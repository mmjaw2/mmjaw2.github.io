"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2020-2024, University of Colorado Boulder

/**
 * See hook-pre-commit. This implements each task for that process so they can run in parallel.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

var fs = require('fs');
var puppeteer = require('puppeteer');
var withServer = require('../../../perennial-alias/js/common/withServer');
var execute = require('../../../perennial-alias/js/common/execute');
var getPhetLibs = require('../grunt/getPhetLibs');
var getRepoList = require('../../../perennial-alias/js/common/getRepoList');
var generatePhetioMacroAPI = require('../phet-io/generatePhetioMacroAPI');
var CacheLayer = require('../../../chipper/js/common/CacheLayer');
var phetioCompareAPISets = require('../phet-io/phetioCompareAPISets');
var lint = require('../../../chipper/js/grunt/lint');
var reportMedia = require('../../../chipper/js/grunt/reportMedia');
var puppeteerQUnit = require('../../../aqua/js/local/puppeteerQUnit');
var Transpiler = require('../../../chipper/js/common/Transpiler');
var transpiler = new Transpiler({
  silent: true
});
var commandLineArguments = process.argv.slice(2);
var outputToConsole = commandLineArguments.includes('--console');
var getArg = function getArg(arg) {
  var args = commandLineArguments.filter(function (commandLineArg) {
    return commandLineArg.startsWith("--".concat(arg, "="));
  });
  if (args.length !== 1) {
    throw new Error("expected only one arg: ".concat(args));
  }
  return args[0].split('=')[1];
};
var command = getArg('command');
var repo = getArg('repo');
_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4() {
  var lintReturnValue, optOutOfReportMedia, success, results, qUnitOK, phetioAPIOK;
  return _regeneratorRuntime().wrap(function _callee4$(_context4) {
    while (1) switch (_context4.prev = _context4.next) {
      case 0:
        if (!(command === 'lint')) {
          _context4.next = 8;
          break;
        }
        _context4.next = 3;
        return lint([repo]);
      case 3:
        lintReturnValue = _context4.sent;
        outputToConsole && console.log("Linting had errors.length: ".concat(lintReturnValue.results.length));
        process.exit(lintReturnValue.ok ? 0 : 1);
        _context4.next = 41;
        break;
      case 8:
        if (!(command === 'report-media')) {
          _context4.next = 20;
          break;
        }
        // These sims don't have package.json or media that requires checking.
        optOutOfReportMedia = ['decaf', 'phet-android-app', 'babel', 'phet-info', 'phet-ios-app', 'qa', 'sherpa', 'smithers', 'tasks', 'weddell']; // Make sure license.json for images/audio is up-to-date
        if (optOutOfReportMedia.includes(repo)) {
          _context4.next = 17;
          break;
        }
        _context4.next = 13;
        return reportMedia(repo);
      case 13:
        success = _context4.sent;
        process.exit(success ? 0 : 1);
        _context4.next = 18;
        break;
      case 17:
        // no need to check
        process.exit(0);
      case 18:
        _context4.next = 41;
        break;
      case 20:
        if (!(command === 'tsc')) {
          _context4.next = 29;
          break;
        }
        _context4.next = 23;
        return execute('node', ['../chipper/js/scripts/absolute-tsc.js', '../chipper/tsconfig/all'], '../chipper', {
          errors: 'resolve'
        });
      case 23:
        results = _context4.sent;
        results.stderr.trim().length > 0 && console.log(results.stderr);
        results.stdout.trim().length > 0 && console.log(results.stdout);
        if (results.code === 0) {
          outputToConsole && console.log('tsc passed');
          process.exit(0);
        } else {
          outputToConsole && console.log('tsc failed');
          process.exit(1);
        }
        _context4.next = 41;
        break;
      case 29:
        if (!(command === 'qunit')) {
          _context4.next = 36;
          break;
        }
        _context4.next = 32;
        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {
          var cacheKey, testFilePath, exists, browser, result;
          return _regeneratorRuntime().wrap(function _callee2$(_context2) {
            while (1) switch (_context2.prev = _context2.next) {
              case 0:
                cacheKey = "puppeteerQUnit#".concat(repo);
                if (!(repo !== 'scenery' && repo !== 'phet-io-wrappers')) {
                  _context2.next = 27;
                  break;
                }
                // scenery unit tests take too long, so skip those
                testFilePath = "".concat(repo, "/").concat(repo, "-tests.html");
                exists = fs.existsSync("../".concat(testFilePath));
                if (!exists) {
                  _context2.next = 25;
                  break;
                }
                if (!CacheLayer.isCacheSafe(cacheKey)) {
                  _context2.next = 9;
                  break;
                }
                return _context2.abrupt("return", true);
              case 9:
                _context2.next = 11;
                return puppeteer.launch({
                  args: ['--disable-gpu']
                });
              case 11:
                browser = _context2.sent;
                _context2.next = 14;
                return withServer( /*#__PURE__*/function () {
                  var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee(port) {
                    return _regeneratorRuntime().wrap(function _callee$(_context) {
                      while (1) switch (_context.prev = _context.next) {
                        case 0:
                          return _context.abrupt("return", puppeteerQUnit(browser, "http://localhost:".concat(port, "/").concat(testFilePath, "?ea&brand=phet-io")));
                        case 1:
                        case "end":
                          return _context.stop();
                      }
                    }, _callee);
                  }));
                  return function (_x) {
                    return _ref3.apply(this, arguments);
                  };
                }());
              case 14:
                result = _context2.sent;
                _context2.next = 17;
                return browser.close();
              case 17:
                outputToConsole && console.log("".concat(repo, ": ").concat(JSON.stringify(result, null, 2)));
                if (result.ok) {
                  _context2.next = 23;
                  break;
                }
                console.error("unit tests failed in ".concat(repo), result);
                return _context2.abrupt("return", false);
              case 23:
                CacheLayer.onSuccess(cacheKey);
                return _context2.abrupt("return", true);
              case 25:
                outputToConsole && console.log('QUnit: no problems detected');
                return _context2.abrupt("return", true);
              case 27:
                return _context2.abrupt("return", true);
              case 28:
              case "end":
                return _context2.stop();
            }
          }, _callee2);
        }))();
      case 32:
        qUnitOK = _context4.sent;
        process.exit(qUnitOK ? 0 : 1);
        _context4.next = 41;
        break;
      case 36:
        if (!(command === 'phet-io-api-compare')) {
          _context4.next = 41;
          break;
        }
        _context4.next = 39;
        return _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {
          var getCacheKey, phetioAPIStable, reposToTest, proposedAPIs, phetioAPIComparisonSuccessful;
          return _regeneratorRuntime().wrap(function _callee3$(_context3) {
            while (1) switch (_context3.prev = _context3.next) {
              case 0:
                if (!(repo === 'phet-io-sim-specific')) {
                  _context3.next = 2;
                  break;
                }
                return _context3.abrupt("return", true);
              case 2:
                getCacheKey = function getCacheKey(repo) {
                  return "phet-io-api-compare#".concat(repo);
                }; // Test this repo and all phet-io sims that have it as a dependency.  For instance, changing sun would test
                // every phet-io stable sim.
                phetioAPIStable = getRepoList('phet-io-api-stable');
                reposToTest = phetioAPIStable.filter(function (phetioSimRepo) {
                  return getPhetLibs(phetioSimRepo).includes(repo);
                })

                // Only worry about the ones that are not cached
                .filter(function (repo) {
                  return !CacheLayer.isCacheSafe(getCacheKey(repo));
                });
                if (!(reposToTest.length > 0)) {
                  _context3.next = 17;
                  break;
                }
                transpiler.transpileAll();
                _context3.next = 9;
                return generatePhetioMacroAPI(reposToTest, {
                  showProgressBar: reposToTest.length > 1,
                  showMessagesFromSim: false
                });
              case 9:
                proposedAPIs = _context3.sent;
                _context3.next = 12;
                return phetioCompareAPISets(reposToTest, proposedAPIs);
              case 12:
                phetioAPIComparisonSuccessful = _context3.sent;
                if (phetioAPIComparisonSuccessful) {
                  reposToTest.forEach(function (repo) {
                    return CacheLayer.onSuccess(getCacheKey(repo));
                  });
                }
                return _context3.abrupt("return", phetioAPIComparisonSuccessful);
              case 17:
                return _context3.abrupt("return", true);
              case 18:
              case "end":
                return _context3.stop();
            }
          }, _callee3);
        }))();
      case 39:
        phetioAPIOK = _context4.sent;
        process.exit(phetioAPIOK ? 0 : 1);
      case 41:
      case "end":
        return _context4.stop();
    }
  }, _callee4);
}))();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcmVnZW5lcmF0b3JSdW50aW1lIiwiZSIsInQiLCJyIiwiT2JqZWN0IiwicHJvdG90eXBlIiwibiIsImhhc093blByb3BlcnR5IiwibyIsImRlZmluZVByb3BlcnR5IiwidmFsdWUiLCJpIiwiU3ltYm9sIiwiYSIsIml0ZXJhdG9yIiwiYyIsImFzeW5jSXRlcmF0b3IiLCJ1IiwidG9TdHJpbmdUYWciLCJkZWZpbmUiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJ3cmFwIiwiR2VuZXJhdG9yIiwiY3JlYXRlIiwiQ29udGV4dCIsIm1ha2VJbnZva2VNZXRob2QiLCJ0cnlDYXRjaCIsInR5cGUiLCJhcmciLCJjYWxsIiwiaCIsImwiLCJmIiwicyIsInkiLCJHZW5lcmF0b3JGdW5jdGlvbiIsIkdlbmVyYXRvckZ1bmN0aW9uUHJvdG90eXBlIiwicCIsImQiLCJnZXRQcm90b3R5cGVPZiIsInYiLCJ2YWx1ZXMiLCJnIiwiZGVmaW5lSXRlcmF0b3JNZXRob2RzIiwiZm9yRWFjaCIsIl9pbnZva2UiLCJBc3luY0l0ZXJhdG9yIiwiaW52b2tlIiwiX3R5cGVvZiIsInJlc29sdmUiLCJfX2F3YWl0IiwidGhlbiIsImNhbGxJbnZva2VXaXRoTWV0aG9kQW5kQXJnIiwiRXJyb3IiLCJkb25lIiwibWV0aG9kIiwiZGVsZWdhdGUiLCJtYXliZUludm9rZURlbGVnYXRlIiwic2VudCIsIl9zZW50IiwiZGlzcGF0Y2hFeGNlcHRpb24iLCJhYnJ1cHQiLCJUeXBlRXJyb3IiLCJyZXN1bHROYW1lIiwibmV4dCIsIm5leHRMb2MiLCJwdXNoVHJ5RW50cnkiLCJ0cnlMb2MiLCJjYXRjaExvYyIsImZpbmFsbHlMb2MiLCJhZnRlckxvYyIsInRyeUVudHJpZXMiLCJwdXNoIiwicmVzZXRUcnlFbnRyeSIsImNvbXBsZXRpb24iLCJyZXNldCIsImlzTmFOIiwibGVuZ3RoIiwiZGlzcGxheU5hbWUiLCJpc0dlbmVyYXRvckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJuYW1lIiwibWFyayIsInNldFByb3RvdHlwZU9mIiwiX19wcm90b19fIiwiYXdyYXAiLCJhc3luYyIsIlByb21pc2UiLCJrZXlzIiwicmV2ZXJzZSIsInBvcCIsInByZXYiLCJjaGFyQXQiLCJzbGljZSIsInN0b3AiLCJydmFsIiwiaGFuZGxlIiwiY29tcGxldGUiLCJmaW5pc2giLCJfY2F0Y2giLCJkZWxlZ2F0ZVlpZWxkIiwiYXN5bmNHZW5lcmF0b3JTdGVwIiwiZ2VuIiwicmVqZWN0IiwiX25leHQiLCJfdGhyb3ciLCJrZXkiLCJpbmZvIiwiZXJyb3IiLCJfYXN5bmNUb0dlbmVyYXRvciIsImZuIiwic2VsZiIsImFyZ3MiLCJhcmd1bWVudHMiLCJhcHBseSIsImVyciIsInVuZGVmaW5lZCIsImZzIiwicmVxdWlyZSIsInB1cHBldGVlciIsIndpdGhTZXJ2ZXIiLCJleGVjdXRlIiwiZ2V0UGhldExpYnMiLCJnZXRSZXBvTGlzdCIsImdlbmVyYXRlUGhldGlvTWFjcm9BUEkiLCJDYWNoZUxheWVyIiwicGhldGlvQ29tcGFyZUFQSVNldHMiLCJsaW50IiwicmVwb3J0TWVkaWEiLCJwdXBwZXRlZXJRVW5pdCIsIlRyYW5zcGlsZXIiLCJ0cmFuc3BpbGVyIiwic2lsZW50IiwiY29tbWFuZExpbmVBcmd1bWVudHMiLCJwcm9jZXNzIiwiYXJndiIsIm91dHB1dFRvQ29uc29sZSIsImluY2x1ZGVzIiwiZ2V0QXJnIiwiZmlsdGVyIiwiY29tbWFuZExpbmVBcmciLCJzdGFydHNXaXRoIiwiY29uY2F0Iiwic3BsaXQiLCJjb21tYW5kIiwicmVwbyIsIl9jYWxsZWU0IiwibGludFJldHVyblZhbHVlIiwib3B0T3V0T2ZSZXBvcnRNZWRpYSIsInN1Y2Nlc3MiLCJyZXN1bHRzIiwicVVuaXRPSyIsInBoZXRpb0FQSU9LIiwiX2NhbGxlZTQkIiwiX2NvbnRleHQ0IiwiY29uc29sZSIsImxvZyIsImV4aXQiLCJvayIsImVycm9ycyIsInN0ZGVyciIsInRyaW0iLCJzdGRvdXQiLCJjb2RlIiwiX2NhbGxlZTIiLCJjYWNoZUtleSIsInRlc3RGaWxlUGF0aCIsImV4aXN0cyIsImJyb3dzZXIiLCJyZXN1bHQiLCJfY2FsbGVlMiQiLCJfY29udGV4dDIiLCJleGlzdHNTeW5jIiwiaXNDYWNoZVNhZmUiLCJsYXVuY2giLCJfcmVmMyIsIl9jYWxsZWUiLCJwb3J0IiwiX2NhbGxlZSQiLCJfY29udGV4dCIsIl94IiwiY2xvc2UiLCJKU09OIiwic3RyaW5naWZ5Iiwib25TdWNjZXNzIiwiX2NhbGxlZTMiLCJnZXRDYWNoZUtleSIsInBoZXRpb0FQSVN0YWJsZSIsInJlcG9zVG9UZXN0IiwicHJvcG9zZWRBUElzIiwicGhldGlvQVBJQ29tcGFyaXNvblN1Y2Nlc3NmdWwiLCJfY2FsbGVlMyQiLCJfY29udGV4dDMiLCJwaGV0aW9TaW1SZXBvIiwidHJhbnNwaWxlQWxsIiwic2hvd1Byb2dyZXNzQmFyIiwic2hvd01lc3NhZ2VzRnJvbVNpbSJdLCJzb3VyY2VzIjpbImhvb2stcHJlLWNvbW1pdC10YXNrLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNlZSBob29rLXByZS1jb21taXQuIFRoaXMgaW1wbGVtZW50cyBlYWNoIHRhc2sgZm9yIHRoYXQgcHJvY2VzcyBzbyB0aGV5IGNhbiBydW4gaW4gcGFyYWxsZWwuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuY29uc3QgcHVwcGV0ZWVyID0gcmVxdWlyZSggJ3B1cHBldGVlcicgKTtcclxuY29uc3Qgd2l0aFNlcnZlciA9IHJlcXVpcmUoICcuLi8uLi8uLi9wZXJlbm5pYWwtYWxpYXMvanMvY29tbW9uL3dpdGhTZXJ2ZXInICk7XHJcbmNvbnN0IGV4ZWN1dGUgPSByZXF1aXJlKCAnLi4vLi4vLi4vcGVyZW5uaWFsLWFsaWFzL2pzL2NvbW1vbi9leGVjdXRlJyApO1xyXG5jb25zdCBnZXRQaGV0TGlicyA9IHJlcXVpcmUoICcuLi9ncnVudC9nZXRQaGV0TGlicycgKTtcclxuY29uc3QgZ2V0UmVwb0xpc3QgPSByZXF1aXJlKCAnLi4vLi4vLi4vcGVyZW5uaWFsLWFsaWFzL2pzL2NvbW1vbi9nZXRSZXBvTGlzdCcgKTtcclxuY29uc3QgZ2VuZXJhdGVQaGV0aW9NYWNyb0FQSSA9IHJlcXVpcmUoICcuLi9waGV0LWlvL2dlbmVyYXRlUGhldGlvTWFjcm9BUEknICk7XHJcbmNvbnN0IENhY2hlTGF5ZXIgPSByZXF1aXJlKCAnLi4vLi4vLi4vY2hpcHBlci9qcy9jb21tb24vQ2FjaGVMYXllcicgKTtcclxuY29uc3QgcGhldGlvQ29tcGFyZUFQSVNldHMgPSByZXF1aXJlKCAnLi4vcGhldC1pby9waGV0aW9Db21wYXJlQVBJU2V0cycgKTtcclxuY29uc3QgbGludCA9IHJlcXVpcmUoICcuLi8uLi8uLi9jaGlwcGVyL2pzL2dydW50L2xpbnQnICk7XHJcbmNvbnN0IHJlcG9ydE1lZGlhID0gcmVxdWlyZSggJy4uLy4uLy4uL2NoaXBwZXIvanMvZ3J1bnQvcmVwb3J0TWVkaWEnICk7XHJcbmNvbnN0IHB1cHBldGVlclFVbml0ID0gcmVxdWlyZSggJy4uLy4uLy4uL2FxdWEvanMvbG9jYWwvcHVwcGV0ZWVyUVVuaXQnICk7XHJcbmNvbnN0IFRyYW5zcGlsZXIgPSByZXF1aXJlKCAnLi4vLi4vLi4vY2hpcHBlci9qcy9jb21tb24vVHJhbnNwaWxlcicgKTtcclxuXHJcbmNvbnN0IHRyYW5zcGlsZXIgPSBuZXcgVHJhbnNwaWxlciggeyBzaWxlbnQ6IHRydWUgfSApO1xyXG5cclxuY29uc3QgY29tbWFuZExpbmVBcmd1bWVudHMgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoIDIgKTtcclxuY29uc3Qgb3V0cHV0VG9Db25zb2xlID0gY29tbWFuZExpbmVBcmd1bWVudHMuaW5jbHVkZXMoICctLWNvbnNvbGUnICk7XHJcblxyXG5jb25zdCBnZXRBcmcgPSBhcmcgPT4ge1xyXG4gIGNvbnN0IGFyZ3MgPSBjb21tYW5kTGluZUFyZ3VtZW50cy5maWx0ZXIoIGNvbW1hbmRMaW5lQXJnID0+IGNvbW1hbmRMaW5lQXJnLnN0YXJ0c1dpdGgoIGAtLSR7YXJnfT1gICkgKTtcclxuICBpZiAoIGFyZ3MubGVuZ3RoICE9PSAxICkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCBgZXhwZWN0ZWQgb25seSBvbmUgYXJnOiAke2FyZ3N9YCApO1xyXG4gIH1cclxuICByZXR1cm4gYXJnc1sgMCBdLnNwbGl0KCAnPScgKVsgMSBdO1xyXG59O1xyXG5cclxuY29uc3QgY29tbWFuZCA9IGdldEFyZyggJ2NvbW1hbmQnICk7XHJcbmNvbnN0IHJlcG8gPSBnZXRBcmcoICdyZXBvJyApO1xyXG5cclxuKCBhc3luYyAoKSA9PiB7XHJcblxyXG4gIGlmICggY29tbWFuZCA9PT0gJ2xpbnQnICkge1xyXG5cclxuICAgIC8vIFJ1biBsaW50IHRlc3RzIGlmIHRoZXkgZXhpc3QgaW4gdGhlIGNoZWNrZWQtb3V0IFNIQXMuXHJcbiAgICAvLyBsaW50KCkgYXV0b21hdGljYWxseSBmaWx0ZXJzIG91dCBub24tbGludGFibGUgcmVwb3NcclxuICAgIGNvbnN0IGxpbnRSZXR1cm5WYWx1ZSA9IGF3YWl0IGxpbnQoIFsgcmVwbyBdICk7XHJcbiAgICBvdXRwdXRUb0NvbnNvbGUgJiYgY29uc29sZS5sb2coIGBMaW50aW5nIGhhZCBlcnJvcnMubGVuZ3RoOiAke2xpbnRSZXR1cm5WYWx1ZS5yZXN1bHRzLmxlbmd0aH1gICk7XHJcbiAgICBwcm9jZXNzLmV4aXQoIGxpbnRSZXR1cm5WYWx1ZS5vayA/IDAgOiAxICk7XHJcbiAgfVxyXG5cclxuICBlbHNlIGlmICggY29tbWFuZCA9PT0gJ3JlcG9ydC1tZWRpYScgKSB7XHJcblxyXG4gICAgLy8gVGhlc2Ugc2ltcyBkb24ndCBoYXZlIHBhY2thZ2UuanNvbiBvciBtZWRpYSB0aGF0IHJlcXVpcmVzIGNoZWNraW5nLlxyXG4gICAgY29uc3Qgb3B0T3V0T2ZSZXBvcnRNZWRpYSA9IFtcclxuICAgICAgJ2RlY2FmJyxcclxuICAgICAgJ3BoZXQtYW5kcm9pZC1hcHAnLFxyXG4gICAgICAnYmFiZWwnLFxyXG4gICAgICAncGhldC1pbmZvJyxcclxuICAgICAgJ3BoZXQtaW9zLWFwcCcsXHJcbiAgICAgICdxYScsXHJcbiAgICAgICdzaGVycGEnLFxyXG4gICAgICAnc21pdGhlcnMnLFxyXG4gICAgICAndGFza3MnLFxyXG4gICAgICAnd2VkZGVsbCdcclxuICAgIF07XHJcblxyXG4gICAgLy8gTWFrZSBzdXJlIGxpY2Vuc2UuanNvbiBmb3IgaW1hZ2VzL2F1ZGlvIGlzIHVwLXRvLWRhdGVcclxuICAgIGlmICggIW9wdE91dE9mUmVwb3J0TWVkaWEuaW5jbHVkZXMoIHJlcG8gKSApIHtcclxuXHJcbiAgICAgIGNvbnN0IHN1Y2Nlc3MgPSBhd2FpdCByZXBvcnRNZWRpYSggcmVwbyApO1xyXG4gICAgICBwcm9jZXNzLmV4aXQoIHN1Y2Nlc3MgPyAwIDogMSApO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcblxyXG4gICAgICAvLyBubyBuZWVkIHRvIGNoZWNrXHJcbiAgICAgIHByb2Nlc3MuZXhpdCggMCApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgZWxzZSBpZiAoIGNvbW1hbmQgPT09ICd0c2MnICkge1xyXG5cclxuXHJcbiAgICAvLyBSdW4gdHlwZXNjcmlwdCB0eXBlIGNoZWNrZXIgaWYgaXQgZXhpc3RzIGluIHRoZSBjaGVja2VkLW91dCBzaGFzXHJcbiAgICBjb25zdCByZXN1bHRzID0gYXdhaXQgZXhlY3V0ZSggJ25vZGUnLCBbICcuLi9jaGlwcGVyL2pzL3NjcmlwdHMvYWJzb2x1dGUtdHNjLmpzJywgJy4uL2NoaXBwZXIvdHNjb25maWcvYWxsJyBdLCAnLi4vY2hpcHBlcicsIHtcclxuICAgICAgZXJyb3JzOiAncmVzb2x2ZSdcclxuICAgIH0gKTtcclxuXHJcbiAgICByZXN1bHRzLnN0ZGVyci50cmltKCkubGVuZ3RoID4gMCAmJiBjb25zb2xlLmxvZyggcmVzdWx0cy5zdGRlcnIgKTtcclxuICAgIHJlc3VsdHMuc3Rkb3V0LnRyaW0oKS5sZW5ndGggPiAwICYmIGNvbnNvbGUubG9nKCByZXN1bHRzLnN0ZG91dCApO1xyXG5cclxuICAgIGlmICggcmVzdWx0cy5jb2RlID09PSAwICkge1xyXG4gICAgICBvdXRwdXRUb0NvbnNvbGUgJiYgY29uc29sZS5sb2coICd0c2MgcGFzc2VkJyApO1xyXG4gICAgICBwcm9jZXNzLmV4aXQoIDAgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBvdXRwdXRUb0NvbnNvbGUgJiYgY29uc29sZS5sb2coICd0c2MgZmFpbGVkJyApO1xyXG4gICAgICBwcm9jZXNzLmV4aXQoIDEgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGVsc2UgaWYgKCBjb21tYW5kID09PSAncXVuaXQnICkge1xyXG5cclxuICAgIC8vIFJ1biBxdW5pdCB0ZXN0cyBpZiBwdXBwZXRlZXJRVW5pdCBleGlzdHMgaW4gdGhlIGNoZWNrZWQtb3V0IFNIQXMgYW5kIGEgdGVzdCBIVE1MIGV4aXN0cy5cclxuICAgIGNvbnN0IHFVbml0T0sgPSBhd2FpdCAoIGFzeW5jICgpID0+IHtcclxuXHJcbiAgICAgIGNvbnN0IGNhY2hlS2V5ID0gYHB1cHBldGVlclFVbml0IyR7cmVwb31gO1xyXG5cclxuICAgICAgaWYgKCByZXBvICE9PSAnc2NlbmVyeScgJiYgcmVwbyAhPT0gJ3BoZXQtaW8td3JhcHBlcnMnICkgeyAvLyBzY2VuZXJ5IHVuaXQgdGVzdHMgdGFrZSB0b28gbG9uZywgc28gc2tpcCB0aG9zZVxyXG4gICAgICAgIGNvbnN0IHRlc3RGaWxlUGF0aCA9IGAke3JlcG99LyR7cmVwb30tdGVzdHMuaHRtbGA7XHJcbiAgICAgICAgY29uc3QgZXhpc3RzID0gZnMuZXhpc3RzU3luYyggYC4uLyR7dGVzdEZpbGVQYXRofWAgKTtcclxuICAgICAgICBpZiAoIGV4aXN0cyApIHtcclxuXHJcbiAgICAgICAgICBpZiAoIENhY2hlTGF5ZXIuaXNDYWNoZVNhZmUoIGNhY2hlS2V5ICkgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICAgIGNvbnN0IGJyb3dzZXIgPSBhd2FpdCBwdXBwZXRlZXIubGF1bmNoKCB7XHJcbiAgICAgICAgICAgICAgYXJnczogW1xyXG4gICAgICAgICAgICAgICAgJy0tZGlzYWJsZS1ncHUnXHJcbiAgICAgICAgICAgICAgXVxyXG4gICAgICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCB3aXRoU2VydmVyKCBhc3luYyBwb3J0ID0+IHtcclxuICAgICAgICAgICAgICByZXR1cm4gcHVwcGV0ZWVyUVVuaXQoIGJyb3dzZXIsIGBodHRwOi8vbG9jYWxob3N0OiR7cG9ydH0vJHt0ZXN0RmlsZVBhdGh9P2VhJmJyYW5kPXBoZXQtaW9gICk7XHJcbiAgICAgICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgICAgIGF3YWl0IGJyb3dzZXIuY2xvc2UoKTtcclxuXHJcbiAgICAgICAgICAgIG91dHB1dFRvQ29uc29sZSAmJiBjb25zb2xlLmxvZyggYCR7cmVwb306ICR7SlNPTi5zdHJpbmdpZnkoIHJlc3VsdCwgbnVsbCwgMiApfWAgKTtcclxuICAgICAgICAgICAgaWYgKCAhcmVzdWx0Lm9rICkge1xyXG4gICAgICAgICAgICAgIGNvbnNvbGUuZXJyb3IoIGB1bml0IHRlc3RzIGZhaWxlZCBpbiAke3JlcG99YCwgcmVzdWx0ICk7XHJcbiAgICAgICAgICAgICAgcmV0dXJuIGZhbHNlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgIENhY2hlTGF5ZXIub25TdWNjZXNzKCBjYWNoZUtleSApO1xyXG4gICAgICAgICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBvdXRwdXRUb0NvbnNvbGUgJiYgY29uc29sZS5sb2coICdRVW5pdDogbm8gcHJvYmxlbXMgZGV0ZWN0ZWQnICk7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICB9ICkoKTtcclxuXHJcbiAgICBwcm9jZXNzLmV4aXQoIHFVbml0T0sgPyAwIDogMSApO1xyXG4gIH1cclxuXHJcbiAgZWxzZSBpZiAoIGNvbW1hbmQgPT09ICdwaGV0LWlvLWFwaS1jb21wYXJlJyApIHtcclxuXHJcbiAgICAvLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vLy8vL1xyXG4gICAgLy8gQ29tcGFyZSBQaEVULWlPIEFQSXMgZm9yIHRoaXMgcmVwbyBhbmQgYW55dGhpbmcgdGhhdCBoYXMgaXQgYXMgYSBkZXBlbmRlbmN5XHJcbiAgICAvL1xyXG4gICAgY29uc3QgcGhldGlvQVBJT0sgPSBhd2FpdCAoIGFzeW5jICgpID0+IHtcclxuXHJcbiAgICAgIC8vIElmIHJ1bm5pbmcgZ2l0IGhvb2tzIGluIHBoZXQtaW8tc2ltLXNwZWNpZmljLCBpdCBpc24ndCB3b3J0aCByZWdlbmVyYXRpbmcgdGhlIEFQSSBmb3IgZXZlcnkgc2luZ2xlIHN0YWJsZSBzaW0uXHJcbiAgICAgIC8vIEluc3RlYWQsIHJlbHkgb24gdGhlIGhvb2tzIGZyb20gdGhlIHJlcG9zIHdoZXJlIHRoZSBhcGkgY2hhbmdlcyBjb21lIGZyb20uXHJcbiAgICAgIGlmICggcmVwbyA9PT0gJ3BoZXQtaW8tc2ltLXNwZWNpZmljJyApIHtcclxuICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgfVxyXG5cclxuICAgICAgY29uc3QgZ2V0Q2FjaGVLZXkgPSByZXBvID0+IGBwaGV0LWlvLWFwaS1jb21wYXJlIyR7cmVwb31gO1xyXG5cclxuICAgICAgLy8gVGVzdCB0aGlzIHJlcG8gYW5kIGFsbCBwaGV0LWlvIHNpbXMgdGhhdCBoYXZlIGl0IGFzIGEgZGVwZW5kZW5jeS4gIEZvciBpbnN0YW5jZSwgY2hhbmdpbmcgc3VuIHdvdWxkIHRlc3RcclxuICAgICAgLy8gZXZlcnkgcGhldC1pbyBzdGFibGUgc2ltLlxyXG4gICAgICBjb25zdCBwaGV0aW9BUElTdGFibGUgPSBnZXRSZXBvTGlzdCggJ3BoZXQtaW8tYXBpLXN0YWJsZScgKTtcclxuICAgICAgY29uc3QgcmVwb3NUb1Rlc3QgPSBwaGV0aW9BUElTdGFibGVcclxuICAgICAgICAuZmlsdGVyKCBwaGV0aW9TaW1SZXBvID0+IGdldFBoZXRMaWJzKCBwaGV0aW9TaW1SZXBvICkuaW5jbHVkZXMoIHJlcG8gKSApXHJcblxyXG4gICAgICAgIC8vIE9ubHkgd29ycnkgYWJvdXQgdGhlIG9uZXMgdGhhdCBhcmUgbm90IGNhY2hlZFxyXG4gICAgICAgIC5maWx0ZXIoIHJlcG8gPT4gIUNhY2hlTGF5ZXIuaXNDYWNoZVNhZmUoIGdldENhY2hlS2V5KCByZXBvICkgKSApO1xyXG5cclxuICAgICAgaWYgKCByZXBvc1RvVGVzdC5sZW5ndGggPiAwICkge1xyXG4gICAgICAgIHRyYW5zcGlsZXIudHJhbnNwaWxlQWxsKCk7XHJcblxyXG4gICAgICAgIGNvbnN0IHByb3Bvc2VkQVBJcyA9IGF3YWl0IGdlbmVyYXRlUGhldGlvTWFjcm9BUEkoIHJlcG9zVG9UZXN0LCB7XHJcbiAgICAgICAgICBzaG93UHJvZ3Jlc3NCYXI6IHJlcG9zVG9UZXN0Lmxlbmd0aCA+IDEsXHJcbiAgICAgICAgICBzaG93TWVzc2FnZXNGcm9tU2ltOiBmYWxzZVxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgICAgY29uc3QgcGhldGlvQVBJQ29tcGFyaXNvblN1Y2Nlc3NmdWwgPSBhd2FpdCBwaGV0aW9Db21wYXJlQVBJU2V0cyggcmVwb3NUb1Rlc3QsIHByb3Bvc2VkQVBJcyApO1xyXG5cclxuICAgICAgICBpZiAoIHBoZXRpb0FQSUNvbXBhcmlzb25TdWNjZXNzZnVsICkge1xyXG4gICAgICAgICAgcmVwb3NUb1Rlc3QuZm9yRWFjaCggcmVwbyA9PiBDYWNoZUxheWVyLm9uU3VjY2VzcyggZ2V0Q2FjaGVLZXkoIHJlcG8gKSApICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICByZXR1cm4gcGhldGlvQVBJQ29tcGFyaXNvblN1Y2Nlc3NmdWw7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgIH1cclxuICAgIH0gKSgpO1xyXG5cclxuICAgIHByb2Nlc3MuZXhpdCggcGhldGlvQVBJT0sgPyAwIDogMSApO1xyXG4gIH1cclxufSApKCk7Il0sIm1hcHBpbmdzIjoiOzs7K0NBQ0EscUpBQUFBLG1CQUFBLFlBQUFBLG9CQUFBLFdBQUFDLENBQUEsU0FBQUMsQ0FBQSxFQUFBRCxDQUFBLE9BQUFFLENBQUEsR0FBQUMsTUFBQSxDQUFBQyxTQUFBLEVBQUFDLENBQUEsR0FBQUgsQ0FBQSxDQUFBSSxjQUFBLEVBQUFDLENBQUEsR0FBQUosTUFBQSxDQUFBSyxjQUFBLGNBQUFQLENBQUEsRUFBQUQsQ0FBQSxFQUFBRSxDQUFBLElBQUFELENBQUEsQ0FBQUQsQ0FBQSxJQUFBRSxDQUFBLENBQUFPLEtBQUEsS0FBQUMsQ0FBQSx3QkFBQUMsTUFBQSxHQUFBQSxNQUFBLE9BQUFDLENBQUEsR0FBQUYsQ0FBQSxDQUFBRyxRQUFBLGtCQUFBQyxDQUFBLEdBQUFKLENBQUEsQ0FBQUssYUFBQSx1QkFBQUMsQ0FBQSxHQUFBTixDQUFBLENBQUFPLFdBQUEsOEJBQUFDLE9BQUFqQixDQUFBLEVBQUFELENBQUEsRUFBQUUsQ0FBQSxXQUFBQyxNQUFBLENBQUFLLGNBQUEsQ0FBQVAsQ0FBQSxFQUFBRCxDQUFBLElBQUFTLEtBQUEsRUFBQVAsQ0FBQSxFQUFBaUIsVUFBQSxNQUFBQyxZQUFB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