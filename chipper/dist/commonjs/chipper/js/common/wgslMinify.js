"use strict";

// Copyright 2023-2024, University of Colorado Boulder

/* eslint-env node */

/**
 * Minifies a WGSL string
 *
 * IDEA: could look at places where abstract int/float could be swapped in for the explicit types
 * IDEA: could wrap long builtin function calls with a shorter named function (but that might reduce performance?)
 * IDEA: looking at you, bitcast!!!
 * IDEA: vec2(0.0, 0.0) => vec2(0.0) (and similar) -- doesn't happen often enough to bother
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var REPLACEMENT_MAP = {
  'vec2<i32>': 'vec2i',
  'vec3<i32>': 'vec3i',
  'vec4<i32>': 'vec4i',
  'vec2<u32>': 'vec2u',
  'vec3<u32>': 'vec3u',
  'vec4<u32>': 'vec4u',
  'vec2<f32>': 'vec2f',
  'vec3<f32>': 'vec3f',
  'vec4<f32>': 'vec4f',
  'vec2<f16>': 'vec2h',
  'vec3<f16>': 'vec3h',
  'vec4<f16>': 'vec4h',
  'mat2x2<f32>': 'mat2x2f',
  'mat2x3<f32>': 'mat2x3f',
  'mat2x4<f32>': 'mat2x4f',
  'mat3x2<f32>': 'mat3x2f',
  'mat3x3<f32>': 'mat3x3f',
  'mat3x4<f32>': 'mat3x4f',
  'mat4x2<f32>': 'mat4x2f',
  'mat4x3<f32>': 'mat4x3f',
  'mat4x4<f32>': 'mat4x4f',
  'mat2x2<f16>': 'mat2x2h',
  'mat2x3<f16>': 'mat2x3h',
  'mat2x4<f16>': 'mat2x4h',
  'mat3x2<f16>': 'mat3x2h',
  'mat3x3<f16>': 'mat3x3h',
  'mat3x4<f16>': 'mat3x4h',
  'mat4x2<f16>': 'mat4x2h',
  'mat4x3<f16>': 'mat4x3h',
  'mat4x4<f16>': 'mat4x4h'
};
var wgslMinify = function wgslMinify(str) {
  str = str.replace(/\r\n/g, '\n');

  // // Naga does not yet recognize `const` but web does not allow global `let`.
  str = str.replace(/\nlet /g, '\nconst ');

  // According to WGSL spec:
  // line breaks: \u000A\u000B\u000C\u000D\u0085\u2028\u2029
  // white space: \u0020\u0009\u000A\u000B\u000C\u000D\u0085\u200E\u200F\u2028\u2029

  var linebreak = "[\n\x0B\f\r\x85\u2028\u2029]";
  var whitespace = "[ \t\x85\u200E\u200F\u2028\u2029]"; // don't include most the linebreak ones
  var linebreakOrWhitespace = "[\n\x0B\f\r\x85\u2028\u2029 \t\x85\u200E\u200F]";

  // Collapse newlines
  str = str.replace(new RegExp("".concat(whitespace, "*").concat(linebreak, "+").concat(whitespace, "*"), 'g'), '\n');
  str = str.trim();

  // Collapse other whitespace
  str = str.replace(new RegExp("".concat(whitespace, "+"), 'g'), ' ');

  // Semicolon + newline => semicolon
  str = str.replace(new RegExp(";".concat(linebreak), 'g'), ';');

  // Comma + newline => comma
  str = str.replace(new RegExp(",".concat(linebreak), 'g'), ',');

  // whitespace around {}
  str = str.replace(new RegExp("".concat(linebreakOrWhitespace, "*([\\{\\}])").concat(linebreakOrWhitespace, "*"), 'g'), function (_, m) {
    return m;
  });

  // Remove whitespace after :;,
  str = str.replace(new RegExp("([:;,])".concat(linebreakOrWhitespace, "+"), 'g'), function (_, m) {
    return m;
  });

  // Remove trailing commas before }])
  str = str.replace(new RegExp(',([\\}\\]\\)])', 'g'), function (_, m) {
    return m;
  });

  // It's safe to remove whitespace before '-', however Firefox's tokenizer doesn't like 'x-1u' (presumably identifier + literal number, no operator)
  // So we'll only replace whitespace after '-' if it's not followed by a digit
  str = str.replace(new RegExp("".concat(linebreakOrWhitespace, "*-"), 'g'), '-');
  str = str.replace(new RegExp("-".concat(linebreakOrWhitespace, "+([^0-9])"), 'g'), function (_, m) {
    return "-".concat(m);
  });

  // Operators don't need whitespace around them in general
  str = str.replace(new RegExp("".concat(linebreakOrWhitespace, "*([\\+\\*/<>&\\|=\\(\\)!])").concat(linebreakOrWhitespace, "*"), 'g'), function (_, m) {
    return m;
  });

  // e.g. 0.5 => .5, 10.0 => 10.
  str = str.replace(/\d+\.\d+/g, function (m) {
    if (m.endsWith('.0')) {
      m = m.substring(0, m.length - 1);
    }
    if (m.startsWith('0.') && m.length > 2) {
      m = m.substring(1);
    }
    return m;
  });

  // Replace hex literals with decimal literals if they are shorter
  str = str.replace(/0x([0-9abcdefABCDEF]+)u/g, function (m, digits) {
    var str = '' + parseInt(digits, 16) + 'u';
    if (str.length < m.length) {
      return str;
    } else {
      return m;
    }
  });

  // Detect cases where abstract int can be used safely, instead of the explicit ones
  // str = str.replace( /(==|!=)([0-9.])+[uif]/g, ( m, op, digits ) => {
  //   return `${op}${digits}`;
  // } );

  // Replace some predeclared aliases (vec2<f32> => vec2f)
  Object.keys(REPLACEMENT_MAP).forEach(function (key) {
    // eslint-disable-next-line no-constant-condition
    while (true) {
      var match = new RegExp("[^\\w](".concat(key, ")[^\\w]"), 'g').exec(str);
      if (match) {
        var index0 = match.index + 1;
        var index1 = index0 + key.length;
        var before = str.substring(0, index0);
        var after = str.substring(index1);
        str = before + REPLACEMENT_MAP[key] + after;
      } else {
        break;
      }
    }
  });
  return str;
};
module.exports = wgslMinify;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,