"use strict";

// Copyright 2019-2024, University of Colorado Boulder

/**
 * Tests for ChipperStringUtils
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

/* eslint-env node*/

var ChipperStringUtils = require('./ChipperStringUtils');
var qunit = require('qunit');
qunit.module('ChipperStringUtils');
qunit.test('forEachString', function (assert) {
  var map1 = {
    x: {
      value: 'x'
    },
    y: {
      value: 'y',
      z: {
        value: 'z'
      }
    },
    intermediary: {
      a: {
        value: 'a'
      },
      b: {
        value: 'b'
      },
      intermediary2: {
        c: {
          value: 'c'
        }
      }
    }
  };
  var count = 0;
  var expectedKeys = ['x', 'y', 'y.z', 'intermediary.a', 'intermediary.b', 'intermediary.intermediary2.c'];
  ChipperStringUtils.forEachString(map1, function (key) {
    count++;
    var keyIndex = expectedKeys.indexOf(key);
    assert.ok(keyIndex >= 0, "unexpected key:".concat(key));
    expectedKeys.splice(keyIndex, 1); // just remove the single item
  });
  assert.ok(expectedKeys.length === 0, 'all keys should be accounted for');
  assert.ok(count === 6, 'should be three string');
  assert.ok(true, 'success');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGlwcGVyU3RyaW5nVXRpbHMiLCJyZXF1aXJlIiwicXVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0IiwibWFwMSIsIngiLCJ2YWx1ZSIsInkiLCJ6IiwiaW50ZXJtZWRpYXJ5IiwiYSIsImIiLCJpbnRlcm1lZGlhcnkyIiwiYyIsImNvdW50IiwiZXhwZWN0ZWRLZXlzIiwiZm9yRWFjaFN0cmluZyIsImtleSIsImtleUluZGV4IiwiaW5kZXhPZiIsIm9rIiwiY29uY2F0Iiwic3BsaWNlIiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiQ2hpcHBlclN0cmluZ1V0aWxUZXN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBmb3IgQ2hpcHBlclN0cmluZ1V0aWxzXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG4vKiBlc2xpbnQtZW52IG5vZGUqL1xyXG5cclxuXHJcbmNvbnN0IENoaXBwZXJTdHJpbmdVdGlscyA9IHJlcXVpcmUoICcuL0NoaXBwZXJTdHJpbmdVdGlscycgKTtcclxuY29uc3QgcXVuaXQgPSByZXF1aXJlKCAncXVuaXQnICk7XHJcbnF1bml0Lm1vZHVsZSggJ0NoaXBwZXJTdHJpbmdVdGlscycgKTtcclxuXHJcblxyXG5xdW5pdC50ZXN0KCAnZm9yRWFjaFN0cmluZycsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgbWFwMSA9IHtcclxuICAgIHg6IHsgdmFsdWU6ICd4JyB9LFxyXG4gICAgeToge1xyXG4gICAgICB2YWx1ZTogJ3knLFxyXG4gICAgICB6OiB7IHZhbHVlOiAneicgfVxyXG4gICAgfSxcclxuICAgIGludGVybWVkaWFyeToge1xyXG4gICAgICBhOiB7IHZhbHVlOiAnYScgfSxcclxuICAgICAgYjogeyB2YWx1ZTogJ2InIH0sXHJcbiAgICAgIGludGVybWVkaWFyeTI6IHtcclxuICAgICAgICBjOiB7IHZhbHVlOiAnYycgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgbGV0IGNvdW50ID0gMDtcclxuICBjb25zdCBleHBlY3RlZEtleXMgPSBbXHJcbiAgICAneCcsXHJcbiAgICAneScsXHJcbiAgICAneS56JyxcclxuICAgICdpbnRlcm1lZGlhcnkuYScsXHJcbiAgICAnaW50ZXJtZWRpYXJ5LmInLFxyXG4gICAgJ2ludGVybWVkaWFyeS5pbnRlcm1lZGlhcnkyLmMnXHJcbiAgXTtcclxuICBDaGlwcGVyU3RyaW5nVXRpbHMuZm9yRWFjaFN0cmluZyggbWFwMSwga2V5ID0+IHtcclxuICAgIGNvdW50Kys7XHJcbiAgICBjb25zdCBrZXlJbmRleCA9IGV4cGVjdGVkS2V5cy5pbmRleE9mKCBrZXkgKTtcclxuICAgIGFzc2VydC5vaygga2V5SW5kZXggPj0gMCwgYHVuZXhwZWN0ZWQga2V5OiR7a2V5fWAgKTtcclxuICAgIGV4cGVjdGVkS2V5cy5zcGxpY2UoIGtleUluZGV4LCAxICk7IC8vIGp1c3QgcmVtb3ZlIHRoZSBzaW5nbGUgaXRlbVxyXG4gIH0gKTtcclxuICBhc3NlcnQub2soIGV4cGVjdGVkS2V5cy5sZW5ndGggPT09IDAsICdhbGwga2V5cyBzaG91bGQgYmUgYWNjb3VudGVkIGZvcicgKTtcclxuICBhc3NlcnQub2soIGNvdW50ID09PSA2LCAnc2hvdWxkIGJlIHRocmVlIHN0cmluZycgKTtcclxuICBhc3NlcnQub2soIHRydWUsICdzdWNjZXNzJyApO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiOztBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUdBLElBQU1BLGtCQUFrQixHQUFHQyxPQUFPLENBQUUsc0JBQXVCLENBQUM7QUFDNUQsSUFBTUMsS0FBSyxHQUFHRCxPQUFPLENBQUUsT0FBUSxDQUFDO0FBQ2hDQyxLQUFLLENBQUNDLE1BQU0sQ0FBRSxvQkFBcUIsQ0FBQztBQUdwQ0QsS0FBSyxDQUFDRSxJQUFJLENBQUUsZUFBZSxFQUFFLFVBQUFDLE1BQU0sRUFBSTtFQUNyQyxJQUFNQyxJQUFJLEdBQUc7SUFDWEMsQ0FBQyxFQUFFO01BQUVDLEtBQUssRUFBRTtJQUFJLENBQUM7SUFDakJDLENBQUMsRUFBRTtNQUNERCxLQUFLLEVBQUUsR0FBRztNQUNWRSxDQUFDLEVBQUU7UUFBRUYsS0FBSyxFQUFFO01BQUk7SUFDbEIsQ0FBQztJQUNERyxZQUFZLEVBQUU7TUFDWkMsQ0FBQyxFQUFFO1FBQUVKLEtBQUssRUFBRTtNQUFJLENBQUM7TUFDakJLLENBQUMsRUFBRTtRQUFFTCxLQUFLLEVBQUU7TUFBSSxDQUFDO01BQ2pCTSxhQUFhLEVBQUU7UUFDYkMsQ0FBQyxFQUFFO1VBQUVQLEtBQUssRUFBRTtRQUFJO01BQ2xCO0lBQ0Y7RUFDRixDQUFDO0VBRUQsSUFBSVEsS0FBSyxHQUFHLENBQUM7RUFDYixJQUFNQyxZQUFZLEdBQUcsQ0FDbkIsR0FBRyxFQUNILEdBQUcsRUFDSCxLQUFLLEVBQ0wsZ0JBQWdCLEVBQ2hCLGdCQUFnQixFQUNoQiw4QkFBOEIsQ0FDL0I7RUFDRGpCLGtCQUFrQixDQUFDa0IsYUFBYSxDQUFFWixJQUFJLEVBQUUsVUFBQWEsR0FBRyxFQUFJO0lBQzdDSCxLQUFLLEVBQUU7SUFDUCxJQUFNSSxRQUFRLEdBQUdILFlBQVksQ0FBQ0ksT0FBTyxDQUFFRixHQUFJLENBQUM7SUFDNUNkLE1BQU0sQ0FBQ2lCLEVBQUUsQ0FBRUYsUUFBUSxJQUFJLENBQUMsb0JBQUFHLE1BQUEsQ0FBb0JKLEdBQUcsQ0FBRyxDQUFDO0lBQ25ERixZQUFZLENBQUNPLE1BQU0sQ0FBRUosUUFBUSxFQUFFLENBQUUsQ0FBQyxDQUFDLENBQUM7RUFDdEMsQ0FBRSxDQUFDO0VBQ0hmLE1BQU0sQ0FBQ2lCLEVBQUUsQ0FBRUwsWUFBWSxDQUFDUSxNQUFNLEtBQUssQ0FBQyxFQUFFLGtDQUFtQyxDQUFDO0VBQzFFcEIsTUFBTSxDQUFDaUIsRUFBRSxDQUFFTixLQUFLLEtBQUssQ0FBQyxFQUFFLHdCQUF5QixDQUFDO0VBQ2xEWCxNQUFNLENBQUNpQixFQUFFLENBQUUsSUFBSSxFQUFFLFNBQVUsQ0FBQztBQUM5QixDQUFFLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=