"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }
function _nonIterableSpread() { throw new TypeError("Invalid attempt to spread non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }
function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }
function _iterableToArray(iter) { if (typeof Symbol !== "undefined" && iter[Symbol.iterator] != null || iter["@@iterator"] != null) return Array.from(iter); }
function _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }
function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i]; return arr2; }
// Copyright 2023-2024, University of Colorado Boulder

/* eslint-env node */

/**
 * Scans WGSL files to determine symbol frequency, and replacement symbols for minification/mangling.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

var _ = require('lodash');
var wgslStripComments = require('./wgslStripComments');
var KEYWORDS = ['alias', 'break', 'case', 'const', 'const_assert', 'continue', 'continuing', 'default', 'diagnostic', 'discard', 'else', 'enable', 'false', 'fn', 'for', 'if', 'let', 'loop', 'override', 'requires', 'return', 'struct', 'switch', 'true', 'var', 'while'];
var RESERVED = ['NULL', 'Self', 'abstract', 'active', 'alignas', 'alignof', 'as', 'asm', 'asm_fragment', 'async', 'attribute', 'auto', 'await', 'become', 'binding_array', 'cast', 'catch', 'class', 'co_await', 'co_return', 'co_yield', 'coherent', 'column_major', 'common', 'compile', 'compile_fragment', 'concept', 'const_cast', 'consteval', 'constexpr', 'constinit', 'crate', 'debugger', 'decltype', 'delete', 'demote', 'demote_to_helper', 'do', 'dynamic_cast', 'enum', 'explicit', 'export', 'extends', 'extern', 'external', 'fallthrough', 'filter', 'final', 'finally', 'friend', 'from', 'fxgroup', 'get', 'goto', 'groupshared', 'highp', 'impl', 'implements', 'import', 'inline', 'instanceof', 'interface', 'layout', 'lowp', 'macro', 'macro_rules', 'match', 'mediump', 'meta', 'mod', 'module', 'move', 'mut', 'mutable', 'namespace', 'new', 'nil', 'noexcept', 'noinline', 'nointerpolation', 'noperspective', 'null', 'nullptr', 'of', 'operator', 'package', 'packoffset', 'partition', 'pass', 'patch', 'pixelfragment', 'precise', 'precision', 'premerge', 'priv', 'protected', 'pub', 'public', 'readonly', 'ref', 'regardless', 'register', 'reinterpret_cast', 'require', 'resource', 'restrict', 'self', 'set', 'shared', 'sizeof', 'smooth', 'snorm', 'static', 'static_assert', 'static_cast', 'std', 'subroutine', 'super', 'target', 'template', 'this', 'thread_local', 'throw', 'trait', 'try', 'type', 'typedef', 'typeid', 'typename', 'typeof', 'union', 'unless', 'unorm', 'unsafe', 'unsized', 'use', 'using', 'varying', 'virtual', 'volatile', 'wgsl', 'where', 'with', 'writeonly', 'yield'];
var ATTRIBUTES = ['align', 'binding', 'builtin', 'compute', 'const', 'fragment', 'group', 'id', 'interpolate', 'invariant', 'location', 'size', 'vertex', 'workgroup_size'];
var SWIZZLES = _.flatten(['rgba', 'xyzw'].map(function (rgba) {
  var result = [];
  var recur = function recur(prefix, remaining) {
    prefix && result.push(prefix);
    if (remaining > 0) {
      for (var i = 0; i < rgba.length; i++) {
        recur(prefix + rgba[i], remaining - 1);
      }
    }
  };
  recur('', 4);
  return result;
}));
var OTHER = ['array', 'bool', 'f16', 'f32', 'i32', 'mat2x2', 'mat2x3', 'mat2x4', 'mat3x2', 'mat3x3', 'mat3x4', 'mat4x2', 'mat4x3', 'mat4x4', 'u32', 'vec2', 'vec3', 'vec4', 'bitcast', 'all', 'any', 'select', 'arrayLength', 'abs', 'acos', 'acosh', 'asin', 'asinh', 'atan', 'atanh', 'atan2', 'ceil', 'clamp', 'cos', 'cosh', 'countLeadingZeros', 'countOneBits', 'countTrailingZeros', 'cross', 'degrees', 'determinant', 'distance', 'dot', 'exp', 'exp2', 'extractBits', 'extractBits', 'faceForward', 'firstLeadingBit', 'firstLeadingBit', 'firstTrailingBit', 'floor', 'fma', 'fract', 'frexp', 'insertBits', 'inverseSqrt', 'ldexp', 'length', 'log', 'log2', 'max', 'min', 'mix', 'modf', 'normalize', 'pow', 'quantizeToF16', 'radians', 'reflect', 'refract', 'reverseBits', 'round', 'saturate', 'sign', 'sin', 'sinh', 'smoothstep', 'sqrt', 'step', 'tan', 'tanh', 'transpose', 'trunc', 'dpdx', 'dpdxCoarse', 'dpdxFine', 'dpdy', 'dpdyCoarse', 'dpdyFine', 'fwidth', 'fwidthCoarse', 'fwidthFine', 'textureDimensions', 'textureGather', 'textureGatherCompare', 'textureLoad', 'textureNumLayers', 'textureNumLevels', 'textureNumSamples', 'textureSample', 'textureSampleBias', 'textureSampleCompare', 'textureSampleCompareLevel', 'textureSampleGrad', 'textureSampleLevel', 'textureSampleBaseClampToEdge', 'textureStore', 'atomicLoad', 'atomicStore', 'atomicAdd', 'atomicSub', 'atomicMax', 'atomicMin', 'atomicAnd', 'atomicOr', 'atomicXor', 'atomicExchange', 'atomicCompareExchangeWeak', 'pack4x8snorm', 'pack4x8unorm', 'pack2x16snorm', 'pack2x16unorm', 'pack2x16float', 'unpack4x8snorm', 'unpack4x8unorm', 'unpack2x16snorm', 'unpack2x16unorm', 'unpack2x16float', 'storageBarrier', 'workgroupBarrier', 'workgroupUniformLoad', 'vec2i', 'vec3i', 'vec4i', 'vec2u', 'vec3u', 'vec4u', 'vec2f', 'vec3f', 'vec4f', 'vec2h', 'vec3h', 'vec4h', 'mat2x2f', 'mat2x3f', 'mat2x4f', 'mat3x2f', 'mat3x3f', 'mat3x4f', 'mat4x2f', 'mat4x3f', 'mat4x4f', 'mat2x2h', 'mat2x3h', 'mat2x4h', 'mat3x2h', 'mat3x3h', 'mat3x4h', 'mat4x2h', 'mat4x3h', 'mat4x4h', 'atomic', 'read', 'write', 'read_write', 'function', 'private', 'workgroup', 'uniform', 'storage', 'perspective', 'linear', 'flat', 'center', 'centroid', 'sample', 'vertex_index', 'instance_index', 'position', 'front_facing', 'frag_depth', 'local_invocation_id', 'local_invocation_index', 'global_invocation_id', 'workgroup_id', 'num_workgroups', 'sample_index', 'sample_mask', 'rgba8unorm', 'rgba8snorm', 'rgba8uint', 'rgba8sint', 'rgba16uint', 'rgba16sint', 'rgba16float', 'r32uint', 'r32sint', 'r32float', 'rg32uint', 'rg32sint', 'rg32float', 'rgba32uint', 'rgba32sint', 'rgba32float', 'bgra8unorm', 'texture_1d', 'texture_2d', 'texture_2d_array', 'texture_3d', 'texture_cube', 'texture_cube_array', 'texture_multisampled_2d', 'texture_depth_multisampled_2d', 'texture_external', 'texture_storage_1d', 'texture_storage_2d', 'texture_storage_2d_array', 'texture_storage_3d', 'texture_depth_2d', 'texture_depth_2d_array', 'texture_depth_cube', 'texture_depth_cube_array', 'sampler', 'sampler_comparison', 'alias', 'ptr', 'vertex_index', 'instance_index', 'position', 'fragment', 'front_facing', 'frag_depth', 'sample_index', 'sample_mask', 'fragment', 'local_invocation_id', 'local_invocation_index', 'global_invocation_id', 'workgroup_id', 'num_workgroups', 'align', 'binding', 'builtin', 'compute', 'const', 'diagnostic', 'fragment', 'group', 'id', 'interpolate', 'invariant', 'location', 'must_use', 'size', 'vertex', 'workgroup_size', 'true', 'false', 'diagnostic', 'error', 'info', 'off', 'warning'];
var AVOID_SYMBOLS = _.uniq([].concat(KEYWORDS, RESERVED, ATTRIBUTES, _toConsumableArray(SWIZZLES), OTHER)).sort();
var REPLACEMENT_MAP = {
  'vec2<i32>': 'vec2i',
  'vec3<i32>': 'vec3i',
  'vec4<i32>': 'vec4i',
  'vec2<u32>': 'vec2u',
  'vec3<u32>': 'vec3u',
  'vec4<u32>': 'vec4u',
  'vec2<f32>': 'vec2f',
  'vec3<f32>': 'vec3f',
  'vec4<f32>': 'vec4f',
  'vec2<f16>': 'vec2h',
  'vec3<f16>': 'vec3h',
  'vec4<f16>': 'vec4h',
  'mat2x2<f32>': 'mat2x2f',
  'mat2x3<f32>': 'mat2x3f',
  'mat2x4<f32>': 'mat2x4f',
  'mat3x2<f32>': 'mat3x2f',
  'mat3x3<f32>': 'mat3x3f',
  'mat3x4<f32>': 'mat3x4f',
  'mat4x2<f32>': 'mat4x2f',
  'mat4x3<f32>': 'mat4x3f',
  'mat4x4<f32>': 'mat4x4f',
  'mat2x2<f16>': 'mat2x2h',
  'mat2x3<f16>': 'mat2x3h',
  'mat2x4<f16>': 'mat2x4h',
  'mat3x2<f16>': 'mat3x2h',
  'mat3x3<f16>': 'mat3x3h',
  'mat3x4<f16>': 'mat3x4h',
  'mat4x2<f16>': 'mat4x2h',
  'mat4x3<f16>': 'mat4x3h',
  'mat4x4<f16>': 'mat4x4h'
};
var GLOBALLY_ALIASABLE_TYPES = ['u32', 'i32', 'f32', 'bool', 'f16', 'vec2i', 'vec3i', 'vec4i', 'vec2u', 'vec3u', 'vec4u', 'vec2f', 'vec3f', 'vec4f', 'vec2h', 'vec3h', 'vec4h', 'mat2x2f', 'mat2x3f', 'mat2x4f', 'mat3x2f', 'mat3x3f', 'mat3x4f', 'mat4x2f', 'mat4x3f', 'mat4x4f', 'mat2x2h', 'mat2x3h', 'mat2x4h', 'mat3x2h', 'mat3x3h', 'mat3x4h', 'mat4x2h', 'mat4x3h', 'mat4x4h', 'atomic<u32>', 'atomic<i32>', 'array<u32>', 'array<i32>', 'array<f32>'
// NOTE: potentially other arrays?
// NOTE: potentially we can insert aliases AFTER struct defs that are for arrays of them?
];
var firstCharAlphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_';
var otherCharAlphabet = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_0123456789';

/**
 *
 * @param {string[]} wgslFileContents
 * @returns {{
 *   preamble: string,
 *   symbols: string[],
 *   newSymbols: string[],
 *   symbolCounts: Record<string,number>,
 *   floatZeroSymbol: string,
 *   floatOneSymbol: string,
 *   intZeroSymbol: string,
 *   intOneSymbol: string
 * }}
 */
var wgslGetSymbolInfo = function wgslGetSymbolInfo(wgslFileContents) {
  var _symbols;
  // Generator to iterate through possible replacement symbols
  var generateSymbol = /*#__PURE__*/_regeneratorRuntime().mark(function generateSymbol() {
    var length, indexStack, pushedNext, index, nextIndex, symbol;
    return _regeneratorRuntime().wrap(function generateSymbol$(_context) {
      while (1) switch (_context.prev = _context.next) {
        case 0:
          length = 0;
          indexStack = [firstCharAlphabet.length];
        case 2:
          if (!true) {
            _context.next = 21;
            break;
          }
          pushedNext = false;
        case 4:
          if (!(indexStack.length > 0)) {
            _context.next = 13;
            break;
          }
          index = indexStack.pop();
          nextIndex = index + 1;
          if (!(nextIndex < (indexStack.length ? otherCharAlphabet : firstCharAlphabet).length)) {
            _context.next = 11;
            break;
          }
          indexStack.push(nextIndex);
          pushedNext = true;
          return _context.abrupt("break", 13);
        case 11:
          _context.next = 4;
          break;
        case 13:
          if (!pushedNext) {
            length++;
          }
          while (indexStack.length < length) {
            indexStack.push(0);
          }
          symbol = indexStack.map(function (index, i) {
            return i === 0 ? firstCharAlphabet[index] : otherCharAlphabet[index];
          }).join('');
          if (!(!AVOID_SYMBOLS.includes(symbol) && symbol !== '_' && !symbol.startsWith('__'))) {
            _context.next = 19;
            break;
          }
          _context.next = 19;
          return symbol;
        case 19:
          _context.next = 2;
          break;
        case 21:
        case "end":
          return _context.stop();
      }
    }, generateSymbol);
  });
  var symbols = [];
  var totalStr = '';
  var scanSymbols = function scanSymbols(str) {
    // NOTE: don't require this specific formatting! Search for symbols otherwise?
    totalStr += str;
    str = wgslStripComments(str);
    _toConsumableArray(str.matchAll(/struct ([\w]+) {/g)).forEach(function (match) {
      symbols.push(match[1]);
    });
    _toConsumableArray(str.matchAll(/fn ([\w]+)\(/g)).forEach(function (match) {
      symbols.push(match[1]);
    });
    _toConsumableArray(str.matchAll(/let ([\w]+) = /g)).forEach(function (match) {
      symbols.push(match[1]);
    });
    _toConsumableArray(str.matchAll(/var ([\w]+) = /g)).forEach(function (match) {
      symbols.push(match[1]);
    });
    _toConsumableArray(str.matchAll(/alias ([\w]+) = /g)).forEach(function (match) {
      symbols.push(match[1]);
    });
    _toConsumableArray(str.matchAll(/\s([\w]+):/g)).forEach(function (match) {
      symbols.push(match[1]);
    });
  };
  wgslFileContents.forEach(scanSymbols);
  symbols = _.uniq(symbols).filter(function (symbol) {
    if (_.some(_.range(0, 10), function (i) {
      return symbol.startsWith("".concat(i));
    })) {
      return false;
    }
    if (AVOID_SYMBOLS.includes(symbol)) {
      return false;
    }

    // OUR main entry point (NOT general)
    return symbol !== 'main';
  });
  var symbolCounts = {};
  // Count symbols, and sort by the count. We'll use the count later to remove unused constants!
  symbols = _.sortBy(symbols, function (symbol) {
    var count = _toConsumableArray(totalStr.matchAll(new RegExp("[^\\w]".concat(symbol, "[^\\w]"), 'g'))).length;
    symbolCounts[symbol] = count;
    return count;
  }).reverse();
  var globalAliasesCounts = {};
  var globalAliases = _.sortBy(GLOBALLY_ALIASABLE_TYPES.filter(function (alias) {
    var count = _toConsumableArray(totalStr.matchAll(new RegExp("[^\\w]".concat(alias, "[^\\w]"), 'g'))).length;

    // If vec2f, also check vec2<f32>
    var expandedAlias = Object.keys(REPLACEMENT_MAP).find(function (before) {
      return REPLACEMENT_MAP[before] === alias;
    });
    if (expandedAlias) {
      count += _toConsumableArray(totalStr.matchAll(new RegExp("[^\\w]".concat(expandedAlias, "[^\\w]"), 'g'))).length;
    }
    globalAliasesCounts[alias] = count;
    // Just anticipate 2 characters per alias (though some might get 1 char?) - we don't want to blow up our preamble
    // with useless things.
    return count * (alias.length - 2) > "alias ".concat(alias, "=XX;").length;
  }), function (alias) {
    return globalAliasesCounts[alias];
  }).reverse();
  var combinedSymbolEntries = _.sortBy([].concat(_toConsumableArray(symbols.map(function (symbol) {
    return {
      type: 'symbol',
      name: symbol
    };
  })), _toConsumableArray(globalAliases.map(function (alias) {
    return {
      type: 'alias',
      name: alias
    };
  }))), function (symbolEntry) {
    return (symbolEntry.type === 'symbol' ? symbolCounts : globalAliasesCounts)[symbolEntry.name];
  }).reverse();
  var newSymbols = [];
  var newGlobalAliases = [];
  var symbolGenerator = generateSymbol();

  // NOTE: this is a hack, order things correctly
  var floatZeroSymbol = symbolGenerator.next().value;
  var floatOneSymbol = symbolGenerator.next().value;
  var intZeroSymbol = symbolGenerator.next().value;
  var intOneSymbol = symbolGenerator.next().value;
  for (var i = 0; i < combinedSymbolEntries.length; i++) {
    var entry = combinedSymbolEntries[i];
    if (entry.type === 'symbol') {
      newSymbols.push(symbolGenerator.next().value);
    } else {
      newGlobalAliases.push(symbolGenerator.next().value);
    }
  }
  var preamble = globalAliases.map(function (alias, index) {
    return "alias ".concat(newGlobalAliases[index], "=").concat(alias, ";");
  }).join('') + "const ".concat(floatZeroSymbol, "=0.;const ").concat(floatOneSymbol, "=1.;const ").concat(intZeroSymbol, "=0u;const ").concat(intOneSymbol, "=1u;");
  (_symbols = symbols).push.apply(_symbols, _toConsumableArray(globalAliases));
  newSymbols.push.apply(newSymbols, newGlobalAliases);
  return {
    symbols: symbols,
    newSymbols: newSymbols,
    symbolCounts: symbolCounts,
    preamble: preamble,
    floatZeroSymbol: floatZeroSymbol,
    floatOneSymbolL: floatOneSymbol,
    intZeroSymbol: intZeroSymbol,
    intOneSymbol: intOneSymbol
  };
};
module.exports = wgslGetSymbolInfo;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,