"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.localizedStrings = exports["default"] = void 0;
var _PhetioObject = _interopRequireDefault(require("../../tandem/js/PhetioObject.js"));
var _Tandem = _interopRequireDefault(require("../../tandem/js/Tandem.js"));
var _CouldNotYetDeserializeError = _interopRequireDefault(require("../../tandem/js/CouldNotYetDeserializeError.js"));
var _IOType = _interopRequireDefault(require("../../tandem/js/types/IOType.js"));
var _ObjectLiteralIO = _interopRequireDefault(require("../../tandem/js/types/ObjectLiteralIO.js"));
var _LocalizedString = _interopRequireDefault(require("./LocalizedString.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); } // Copyright 2020-2024, University of Colorado Boulder
/**
 * Given a requirejsNamespace, we filter out strings from phet.chipper.strings that start with it, and construct an
 * object with locale fallbacks already pre-computed, so that the correct strings can be accessed via object literal
 * access, e.g. getStringModule( 'JOIST' ).ResetAllButton.name will give the desired string value for whatever locale
 * the sim is being run with.
 *
 * A string "key" is in the form of "NAMESPACE/key.from.strings.json"
 *
 * NOTE: This file likely belongs in joist/js/i18n/, but should stay here to make maintenance-release maintainability easier.
 *
 * @author Jonathan Olson <jonathan.olson>
 */
// constants
var FALLBACK_LOCALE = 'en';

// Holds all of our localizedStrings, so that we can save our phet-io string change state
var localizedStrings = exports.localizedStrings = [];

// For developer internal use, particularly for memory leak detection
// e.g. _.max( phet.chipper.localizedStrings.map( ls => ls.property.tinyProperty.listeners.size ) ) to see if there is
// likely a leak
window.phet.chipper.localizedStrings = localizedStrings;

// For developer internal use, similar to the stringTest query parameter
window.phet.chipper.setAllStrings = function (str) {
  localizedStrings.forEach(function (localizedString) {
    localizedString.property.value = str;
  });
};
var stringKeyToTandemName = function stringKeyToTandemName(key) {
  return key.replace(/(?:[-_\s]\w)/g, function (word) {
    return word[1].toUpperCase();
  });
};
var StringStateIOType = new _IOType["default"]('StringStateIO', {
  valueType: _PhetioObject["default"],
  toStateObject: function toStateObject() {
    var data = {};
    localizedStrings.forEach(function (localizedString) {
      var state = localizedString.getStateDelta();

      // Only create an entry if there is anything (we can save bytes by not including the tandem here)
      if (Object.keys(state).length > 0) {
        data[localizedString.property.tandem.phetioID] = state;
      }
    });
    return {
      data: data // Data nested for a valid schema
    };
  },
  stateSchema: {
    data: _ObjectLiteralIO["default"]
  },
  applyState: function applyState(ignored, state) {
    // Every string in state has to be in localizedStrings to continue
    Object.keys(state.data).forEach(function (phetioID) {
      var match = localizedStrings.find(function (localizedString) {
        return localizedString.property.tandem.phetioID === phetioID;
      });

      // When PhetioDynamicElementContainer elements such as PhetioGroup members add localizedStrings, we wait until
      // all of the members have been created (populating localizedStrings) before trying to set any of the strings.
      if (!match) {
        throw new _CouldNotYetDeserializeError["default"]();
      }
    });

    // We need to iterate through every string in this runtime, since it might need to revert back to "initial" state.
    localizedStrings.forEach(function (localizedString) {
      localizedString.setStateDelta(state.data[localizedString.property.tandem.phetioID] || {});
    });
  }
});
_PhetioObject["default"].create({
  phetioType: StringStateIOType,
  tandem: _Tandem["default"].GENERAL_MODEL.createTandem('stringsState'),
  phetioDocumentation: 'Strings that have changed from their initial values. Each string value is specific to the locale it changed in.',
  phetioState: true
});
/**
 * @param requirejsNamespace - E.g. 'JOIST', to pull string keys out from that namespace
 * @returns Nested object to be accessed like JoistStrings.ResetAllButton.name
 */
var getStringModule = function getStringModule(requirejsNamespace) {
  // Our string information is pulled globally, e.g. phet.chipper.strings[ locale ][ stringKey ] = stringValue;
  // Our locale information is from phet.chipper.locale

  assert && assert(typeof phet.chipper.locale === 'string', 'phet.chipper.locale should have been loaded by now');
  assert && assert(Object.keys(phet.chipper.localeData).includes(phet.chipper.locale), 'phet.chipper.locale should have been loaded by now');
  assert && assert(phet.chipper.strings, 'phet.chipper.strings should have been loaded by now');

  // Construct locales in increasing specificity, e.g. [ 'en', 'zh', 'zh_CN' ], so we get fallbacks in order
  // const locales = [ FALLBACK_LOCALE ];
  var stringKeyPrefix = "".concat(requirejsNamespace, "/");

  // We may have other older (unused) keys in babel, and we are only doing the search that matters with the English
  // string keys.
  var allStringKeysInRepo = Object.keys(phet.chipper.strings[FALLBACK_LOCALE]).filter(function (stringKey) {
    return stringKey.startsWith(stringKeyPrefix);
  });

  // TODO: https://github.com/phetsims/phet-io/issues/1877 What if this list doesn't exist?  Should that be an error?
  // Or an error if running an api-stable phet-io sim?
  // TODO: https://github.com/phetsims/phet-io/issues/1877 What will happen if this is stale? How will a developer know
  // to update it? Should it run in daily-grunt-work?
  if (phet.chipper.usedStringsEN) {
    allStringKeysInRepo = allStringKeysInRepo.filter(function (stringKey) {
      return phet.chipper.usedStringsEN.hasOwnProperty(stringKey);
    });
  }

  // localizedStringMap[ stringKey ]
  var localizedStringMap = {};
  var stringModule = {};
  allStringKeysInRepo.forEach(function (stringKey) {
    // strip off the requirejsNamespace, e.g. 'JOIST/ResetAllButton.name' => 'ResetAllButton.name'
    var stringKeyWithoutPrefix = stringKey.slice(stringKeyPrefix.length);
    var keyParts = stringKeyWithoutPrefix.split('.');
    var lastKeyPart = keyParts[keyParts.length - 1];
    var allButLastKeyPart = keyParts.slice(0, keyParts.length - 1);

    // During traversal into the string object, this will hold the object where the next level needs to be defined,
    // whether that's another child object, or the string value itself.
    var reference = stringModule;

    // We'll traverse down through the parts of a string key (separated by '.'), creating a new level in the
    // string object for each one. This is done for all BUT the last part, since we'll want to assign the result
    // of that to a raw string value (rather than an object).
    var partialKey = stringKeyPrefix;
    allButLastKeyPart.forEach(function (keyPart, i) {
      // When concatenating each level into the final string key, we don't want to put a '.' directly after the
      // slash, because `JOIST/.ResetAllButton.name` would be invalid.
      // See https://github.com/phetsims/chipper/issues/922
      partialKey += "".concat(i > 0 ? '.' : '').concat(keyPart);

      // Don't allow e.g. JOIST/a and JOIST/a.b, since localeObject.a would need to be a string AND an object at the
      // same time.
      assert && assert(typeof reference[keyPart] !== 'string', 'It is not allowed to have two different string keys where one is extended by adding a period (.) at the end ' + "of the other. The string key ".concat(partialKey, " is extended by ").concat(stringKey, " in this case, and should be changed."));

      // Create the next nested level, and move into it
      if (!reference[keyPart]) {
        reference[keyPart] = {};
      }
      reference = reference[keyPart]; // since we are on all but the last key part, it cannot be stringlike
    });
    assert && assert(_typeof(reference[lastKeyPart]) !== 'object', 'It is not allowed to have two different string keys where one is extended by adding a period (.) at the end ' + "of the other. The string key ".concat(stringKey, " is extended by another key, something containing ").concat(reference[lastKeyPart] && Object.keys(reference[lastKeyPart]), "."));
    assert && assert(!reference[lastKeyPart], "We should not have defined this place in the object (".concat(stringKey, "), otherwise it means a duplicated string key OR extended string key"));

    // In case our assertions are not enabled, we'll need to proceed without failing out (so we allow for the
    // extended string keys in our actual code, even though assertions should prevent that).
    if (typeof reference !== 'string') {
      var tandem = _Tandem["default"].STRINGS.createTandem(_.camelCase(requirejsNamespace));
      for (var i = 0; i < keyParts.length; i++) {
        var tandemName = stringKeyToTandemName(keyParts[i]);

        // If it is the tail of the string key, then make the tandem be a "*StringProperty"
        if (i === keyParts.length - 1) {
          var currentTandemName = tandemName;
          var j = 0;
          var tandemNameTaken = true;

          // Handle the case where two unique string keys map to the same camel case value, i.e. "Solid" and "solid".
          // Here we will be solidStringProperty and solid2StringProperty
          while (tandemNameTaken) {
            j++;
            currentTandemName = "".concat(tandemName).concat(j === 1 ? '' : j, "StringProperty");
            tandemNameTaken = tandem.hasChild(currentTandemName);
          }
          tandemName = currentTandemName;
        }
        tandem = tandem.createTandem(tandemName);
      }

      // strings nested under the a11y section are not currently PhET-iO instrumented, see https://github.com/phetsims/chipper/issues/1352
      if (tandem.phetioID.includes('.a11y.')) {
        tandem = _Tandem["default"].OPT_OUT;
      }
      var localeToTranslationMap = {};
      Object.keys(phet.chipper.strings).forEach(function (locale) {
        var string = phet.chipper.strings[locale][stringKey];
        // Ignore zero-length strings, see https://github.com/phetsims/chipper/issues/1343
        if (locale === FALLBACK_LOCALE || typeof string === 'string' && string !== '') {
          localeToTranslationMap[locale] = phet.chipper.mapString(string);
        }
      });
      var localizedString = new _LocalizedString["default"](stringKey, localeToTranslationMap, tandem, phet.chipper.stringMetadata[stringKey]);
      localizedStringMap[stringKey] = localizedString;

      // Put our Property in the stringModule
      reference["".concat(lastKeyPart, "StringProperty")] = localizedString.property;

      // Change our stringModule based on the Property value
      localizedString.property.link(function (string) {
        reference[lastKeyPart] = string;
      });
    }
  });
  return stringModule;
};
var _default = exports["default"] = getStringModule;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,