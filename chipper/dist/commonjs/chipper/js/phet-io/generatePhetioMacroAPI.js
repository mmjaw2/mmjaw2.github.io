"use strict";

function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _regeneratorRuntime() { "use strict"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = "function" == typeof Symbol ? Symbol : {}, a = i.iterator || "@@iterator", c = i.asyncIterator || "@@asyncIterator", u = i.toStringTag || "@@toStringTag"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, ""); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, "_invoke", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: "normal", arg: t.call(e, r) }; } catch (t) { return { type: "throw", arg: t }; } } e.wrap = wrap; var h = "suspendedStart", l = "suspendedYield", f = "executing", s = "completed", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { ["next", "throw", "return"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if ("throw" !== c.type) { var u = c.arg, h = u.value; return h && "object" == _typeof(h) && n.call(h, "__await") ? e.resolve(h.__await).then(function (t) { invoke("next", t, i, a); }, function (t) { invoke("throw", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke("throw", t, i, a); }); } a(c.arg); } var r; o(this, "_invoke", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error("Generator is already running"); if (o === s) { if ("throw" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if ("next" === n.method) n.sent = n._sent = n.arg;else if ("throw" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else "return" === n.method && n.abrupt("return", n.arg); o = f; var p = tryCatch(e, r, n); if ("normal" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } "throw" === p.type && (o = s, n.method = "throw", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, "throw" === n && e.iterator["return"] && (r.method = "return", r.arg = t, maybeInvokeDelegate(e, r), "throw" === r.method) || "return" !== n && (r.method = "throw", r.arg = new TypeError("The iterator does not provide a '" + n + "' method")), y; var i = tryCatch(o, e.iterator, r.arg); if ("throw" === i.type) return r.method = "throw", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, "return" !== r.method && (r.method = "next", r.arg = t), r.delegate = null, y) : a : (r.method = "throw", r.arg = new TypeError("iterator result is not an object"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = "normal", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: "root" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || "" === e) { var r = e[a]; if (r) return r.call(e); if ("function" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + " is not iterable"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, "constructor", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, "constructor", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, "GeneratorFunction"), e.isGeneratorFunction = function (t) { var e = "function" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || "GeneratorFunction" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, "GeneratorFunction")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, "Generator"), define(g, a, function () { return this; }), define(g, "toString", function () { return "[object Generator]"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = "next", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) "t" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if ("throw" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = "throw", a.arg = e, r.next = n, o && (r.method = "next", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if ("root" === i.tryLoc) return handle("end"); if (i.tryLoc <= this.prev) { var c = n.call(i, "catchLoc"), u = n.call(i, "finallyLoc"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error("try statement without catch or finally"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, "finallyLoc") && this.prev < o.finallyLoc) { var i = o; break; } } i && ("break" === t || "continue" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = "next", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if ("throw" === t.type) throw t.arg; return "break" === t.type || "continue" === t.type ? this.next = t.arg : "return" === t.type ? (this.rval = this.arg = t.arg, this.method = "return", this.next = "end") : "normal" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, "catch": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if ("throw" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error("illegal catch attempt"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, "next" === this.method && (this.arg = t), y; } }, e; }
function asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }
function _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "next", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, "throw", err); } _next(undefined); }); }; }
// Copyright 2019-2024, University of Colorado Boulder

/**
 * Launch an instance of the simulation using puppeteer, gather the PhET-iO API of the simulation,
 * see phetioEngine.getPhetioElementsBaseline
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

var puppeteer = require('puppeteer');
var _ = require('lodash');
var assert = require('assert');
var showCommandLineProgress = require('../common/showCommandLineProgress');
var withServer = require('../../../perennial-alias/js/common/withServer');

/**
 * Load each sim provided and get the
 * @param {string[]} repos
 * @param {Object} [options]
 * @returns {Promise.<Object.<string, Object>>} - keys are the repos, values are the APIs for each repo. If there was a problem with getting the API with throwAPIGenerationErrors:false, then it will return null for that repo.
 */
var generatePhetioMacroAPI = /*#__PURE__*/function () {
  var _ref = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(repos, options) {
    return _regeneratorRuntime().wrap(function _callee8$(_context8) {
      while (1) switch (_context8.prev = _context8.next) {
        case 0:
          assert(repos.length === _.uniq(repos).length, 'repos should be unique');
          options = _.assignIn({
            fromBuiltVersion: false,
            // if the built file should be used to generate the API (otherwise uses unbuilt)
            chunkSize: 4,
            // split into chunks with (at most) this many elements per chunk
            showProgressBar: false,
            showMessagesFromSim: true,
            // If false, allow individual repos return null if they encountered problems
            throwAPIGenerationErrors: true
          }, options);
          repos.length > 1 && console.log('Generating PhET-iO API for repos:', repos.join(', '));
          return _context8.abrupt("return", withServer( /*#__PURE__*/function () {
            var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(port) {
              var browser, chunks, macroAPI, errors, i, chunk, promises, chunkResults;
              return _regeneratorRuntime().wrap(function _callee7$(_context7) {
                while (1) switch (_context7.prev = _context7.next) {
                  case 0:
                    _context7.next = 2;
                    return puppeteer.launch({
                      timeout: 120000,
                      args: ['--disable-gpu',
                      // Fork child processes directly to prevent orphaned chrome instances from lingering on sparky, https://github.com/phetsims/aqua/issues/150#issuecomment-1170140994
                      '--no-zygote', '--no-sandbox']
                    });
                  case 2:
                    browser = _context7.sent;
                    chunks = _.chunk(repos, options.chunkSize);
                    macroAPI = {}; // if throwAPIGenerationErrors:false, a repo will be null if it encountered errors.
                    errors = {};
                    i = 0;
                  case 7:
                    if (!(i < chunks.length)) {
                      _context7.next = 18;
                      break;
                    }
                    chunk = chunks[i];
                    options.showProgressBar && showCommandLineProgress(i / chunks.length, false);
                    promises = chunk.map( /*#__PURE__*/function () {
                      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6(repo) {
                        var page;
                        return _regeneratorRuntime().wrap(function _callee6$(_context6) {
                          while (1) switch (_context6.prev = _context6.next) {
                            case 0:
                              _context6.next = 2;
                              return browser.newPage();
                            case 2:
                              page = _context6.sent;
                              return _context6.abrupt("return", new Promise( /*#__PURE__*/function () {
                                var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(resolve, reject) {
                                  var cleaned, cleanup, cleanupAndResolve, cleanupAndReject, id, relativePath, url;
                                  return _regeneratorRuntime().wrap(function _callee5$(_context5) {
                                    while (1) switch (_context5.prev = _context5.next) {
                                      case 0:
                                        // eslint-disable-line no-async-promise-executor
                                        cleaned = false; // Returns whether we closed the page
                                        cleanup = /*#__PURE__*/function () {
                                          var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {
                                            return _regeneratorRuntime().wrap(function _callee$(_context) {
                                              while (1) switch (_context.prev = _context.next) {
                                                case 0:
                                                  if (!cleaned) {
                                                    _context.next = 2;
                                                    break;
                                                  }
                                                  return _context.abrupt("return", false);
                                                case 2:
                                                  cleaned = true; // must be before the close to prevent cleaning from being done twice if errors occur from page close.

                                                  clearTimeout(id);
                                                  _context.next = 6;
                                                  return page.close();
                                                case 6:
                                                  return _context.abrupt("return", true);
                                                case 7:
                                                case "end":
                                                  return _context.stop();
                                              }
                                            }, _callee);
                                          }));
                                          return function cleanup() {
                                            return _ref5.apply(this, arguments);
                                          };
                                        }(); // This is likely to occur in the middle of page.goto, so we need to be graceful to the fact that resolving
                                        // and closing the page will then cause an error in the page.goto call, see https://github.com/phetsims/perennial/issues/268#issuecomment-1382374092
                                        cleanupAndResolve = /*#__PURE__*/function () {
                                          var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(value) {
                                            return _regeneratorRuntime().wrap(function _callee2$(_context2) {
                                              while (1) switch (_context2.prev = _context2.next) {
                                                case 0:
                                                  _context2.next = 2;
                                                  return cleanup();
                                                case 2:
                                                  if (!_context2.sent) {
                                                    _context2.next = 4;
                                                    break;
                                                  }
                                                  resolve(value);
                                                case 4:
                                                case "end":
                                                  return _context2.stop();
                                              }
                                            }, _callee2);
                                          }));
                                          return function cleanupAndResolve(_x7) {
                                            return _ref6.apply(this, arguments);
                                          };
                                        }();
                                        cleanupAndReject = /*#__PURE__*/function () {
                                          var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3(e) {
                                            return _regeneratorRuntime().wrap(function _callee3$(_context3) {
                                              while (1) switch (_context3.prev = _context3.next) {
                                                case 0:
                                                  _context3.next = 2;
                                                  return cleanup();
                                                case 2:
                                                  if (!_context3.sent) {
                                                    _context3.next = 4;
                                                    break;
                                                  }
                                                  resolve({
                                                    repo: repo,
                                                    error: e
                                                  });
                                                case 4:
                                                case "end":
                                                  return _context3.stop();
                                              }
                                            }, _callee3);
                                          }));
                                          return function cleanupAndReject(_x8) {
                                            return _ref7.apply(this, arguments);
                                          };
                                        }(); // Fail if this takes too long.  Doesn't need to be cleared since only the first resolve/reject is used
                                        id = setTimeout(function () {
                                          return cleanupAndReject(new Error("Timeout in generatePhetioMacroAPI for ".concat(repo)));
                                        }, 120000);
                                        page.on('console', /*#__PURE__*/function () {
                                          var _ref8 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(msg) {
                                            var messageText, fullAPI;
                                            return _regeneratorRuntime().wrap(function _callee4$(_context4) {
                                              while (1) switch (_context4.prev = _context4.next) {
                                                case 0:
                                                  messageText = msg.text();
                                                  if (messageText.indexOf('"phetioFullAPI": true,') >= 0) {
                                                    fullAPI = messageText;
                                                    cleanupAndResolve({
                                                      // to keep track of which repo this is for
                                                      repo: repo,
                                                      // For machine readability
                                                      api: JSON.parse(fullAPI)
                                                    });
                                                  }
                                                case 2:
                                                case "end":
                                                  return _context4.stop();
                                              }
                                            }, _callee4);
                                          }));
                                          return function (_x9) {
                                            return _ref8.apply(this, arguments);
                                          };
                                        }());
                                        page.on('error', cleanupAndReject);
                                        page.on('pageerror', cleanupAndReject);
                                        relativePath = options.fromBuiltVersion ? "build/phet-io/".concat(repo, "_all_phet-io.html") : "".concat(repo, "_en.html"); // NOTE: DUPLICATION ALERT: This random seed is copied wherever API comparison is done against the generated API. Don't change this
                                        // without looking for other usages of this random seed value.
                                        url = "http://localhost:".concat(port, "/").concat(repo, "/").concat(relativePath, "?ea&brand=phet-io&phetioStandalone&phetioPrintAPI&randomSeed=332211&locales=*&webgl=false");
                                        _context5.prev = 10;
                                        _context5.next = 13;
                                        return page["goto"](url, {
                                          timeout: 120000
                                        });
                                      case 13:
                                        _context5.next = 19;
                                        break;
                                      case 15:
                                        _context5.prev = 15;
                                        _context5.t0 = _context5["catch"](10);
                                        _context5.next = 19;
                                        return cleanupAndReject(new Error("page.goto failure: ".concat(_context5.t0)));
                                      case 19:
                                      case "end":
                                        return _context5.stop();
                                    }
                                  }, _callee5, null, [[10, 15]]);
                                }));
                                return function (_x5, _x6) {
                                  return _ref4.apply(this, arguments);
                                };
                              }()));
                            case 4:
                            case "end":
                              return _context6.stop();
                          }
                        }, _callee6);
                      }));
                      return function (_x4) {
                        return _ref3.apply(this, arguments);
                      };
                    }());
                    _context7.next = 13;
                    return Promise.allSettled(promises);
                  case 13:
                    chunkResults = _context7.sent;
                    chunkResults.forEach(function (chunkResult) {
                      var repo = chunkResult.value.repo;
                      macroAPI[repo] = chunkResult.value.api || null;
                      var error = chunkResult.value.error;
                      if (error) {
                        if (options.throwAPIGenerationErrors) {
                          console.error("Error in ".concat(repo, ":"));
                          throw error;
                        } else {
                          errors[repo] = error;
                        }
                      }
                    });
                  case 15:
                    i++;
                    _context7.next = 7;
                    break;
                  case 18:
                    options.showProgressBar && showCommandLineProgress(1, true);
                    _context7.next = 21;
                    return browser.close();
                  case 21:
                    if (Object.keys(errors).length > 0) {
                      console.error('Errors while generating PhET-iO APIs:', errors);
                    }
                    return _context7.abrupt("return", macroAPI);
                  case 23:
                  case "end":
                    return _context7.stop();
                }
              }, _callee7);
            }));
            return function (_x3) {
              return _ref2.apply(this, arguments);
            };
          }()));
        case 4:
        case "end":
          return _context8.stop();
      }
    }, _callee8);
  }));
  return function generatePhetioMacroAPI(_x, _x2) {
    return _ref.apply(this, arguments);
  };
}();

// @public (read-only)
generatePhetioMacroAPI.apiVersion = '1.0.0-dev.0';

/**
 * @param {string[]} repos
 * @param {Object} [options]
 */
module.exports = generatePhetioMacroAPI;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,