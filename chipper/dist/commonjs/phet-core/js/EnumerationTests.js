"use strict";

var _Enumeration = _interopRequireDefault(require("./Enumeration.js"));
var _EnumerationValue3 = _interopRequireDefault(require("./EnumerationValue.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright 2022-2024, University of Colorado Boulder
/**
 * Tests for Enumeration, EnumerationValue
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */
QUnit.module('Enumeration');
QUnit.test('Enumeration', function (assert) {
  var _MyEnumeration;
  var MyEnumeration = /*#__PURE__*/function (_EnumerationValue) {
    function MyEnumeration() {
      _classCallCheck(this, MyEnumeration);
      return _callSuper(this, MyEnumeration, arguments);
    }
    _inherits(MyEnumeration, _EnumerationValue);
    return _createClass(MyEnumeration);
  }(_EnumerationValue3["default"]);
  _MyEnumeration = MyEnumeration;
  _defineProperty(MyEnumeration, "ITEM_1", new _MyEnumeration());
  _defineProperty(MyEnumeration, "ITEM_2", new _MyEnumeration());
  _defineProperty(MyEnumeration, "ITEM_3", new _MyEnumeration());
  _defineProperty(MyEnumeration, "enumeration", new _Enumeration["default"](_MyEnumeration));
  assert.ok(MyEnumeration.enumeration.keys.length === 3, 'keys all there');
  assert.ok(MyEnumeration.enumeration.values.length === 3, 'values all there');
  assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_1.enumeration, 'enumeration instances are the same');
  assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_2.enumeration, 'enumeration instances are the same 2');
  assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_3.enumeration, 'enumeration instances are the same 3');
  window.assert && assert["throws"](function () {
    return new MyEnumeration();
  }, 'cannot create new instances after class is defined and sealed');
});
QUnit.test('Enumeration Subtyping', function (assert) {
  var _MyEnumeration2, _MySubEnumeration;
  var MyEnumeration = /*#__PURE__*/function (_EnumerationValue2) {
    function MyEnumeration() {
      _classCallCheck(this, MyEnumeration);
      return _callSuper(this, MyEnumeration, arguments);
    }
    _inherits(MyEnumeration, _EnumerationValue2);
    return _createClass(MyEnumeration);
  }(_EnumerationValue3["default"]);
  _MyEnumeration2 = MyEnumeration;
  _defineProperty(MyEnumeration, "ITEM_1", new _MyEnumeration2());
  _defineProperty(MyEnumeration, "ITEM_2", new _MyEnumeration2());
  _defineProperty(MyEnumeration, "ITEM_3", new _MyEnumeration2());
  _defineProperty(MyEnumeration, "enumeration", new _Enumeration["default"](_MyEnumeration2));
  var MySubEnumeration = /*#__PURE__*/function (_MyEnumeration3) {
    function MySubEnumeration() {
      _classCallCheck(this, MySubEnumeration);
      return _callSuper(this, MySubEnumeration, arguments);
    }
    _inherits(MySubEnumeration, _MyEnumeration3);
    return _createClass(MySubEnumeration);
  }(MyEnumeration);
  _MySubEnumeration = MySubEnumeration;
  _defineProperty(MySubEnumeration, "ITEM_4", new _MySubEnumeration());
  _defineProperty(MySubEnumeration, "enumeration", new _Enumeration["default"](_MySubEnumeration, {
    instanceType: MyEnumeration
  }));
  assert.ok(MySubEnumeration.enumeration.keys.length === 4, 'keys all there');
  assert.ok(MySubEnumeration.enumeration.values.length === 4, 'values all there');
  assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_1.enumeration, 'enumeration instances from parent');
  assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_2.enumeration, 'enumeration instances from parent 2');
  assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_3.enumeration, 'enumeration instances from parent 3');
  assert.ok(MySubEnumeration.enumeration !== MySubEnumeration.ITEM_1.enumeration, 'enumeration instances not from child');
  assert.ok(MySubEnumeration.enumeration !== MySubEnumeration.ITEM_2.enumeration, 'enumeration instances not from child 2');

  // @ts-expect-error INTENTIONAL - we know this doesn't exist, but still want the runtime check
  assert.ok(!MyEnumeration.ITEM_4, 'super should not have sub item');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,