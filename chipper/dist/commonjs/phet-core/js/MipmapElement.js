"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _phetCore = _interopRequireDefault(require("./phetCore.js"));
var _asyncLoader = _interopRequireDefault(require("./asyncLoader.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright 2022, University of Colorado Boulder
/**
 * Size and raster data for levels in a mipmap.  See also type Mipmap in Imageable.ts.  Defined in phet-core instead of
 * scenery because it is loaded upstream and should not have any downstream dependencies such as scenery.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
var MipmapElement = exports["default"] = /*#__PURE__*/_createClass(function MipmapElement(width, height, url) {
  var _this = this;
  _classCallCheck(this, MipmapElement);
  _defineProperty(this, "width", void 0);
  _defineProperty(this, "height", void 0);
  _defineProperty(this, "url", void 0);
  _defineProperty(this, "img", void 0);
  _defineProperty(this, "canvas", void 0);
  _defineProperty(this, "updateCanvas", void 0);
  this.width = width;
  this.height = height;
  this.url = url;
  this.img = new Image(); // eslint-disable-line no-html-constructors
  var unlock = _asyncLoader["default"].createLock(this.img);
  this.img.onload = unlock;
  this.img.src = this.url; // trigger the loading of the image for its level
  this.canvas = document.createElement('canvas');
  this.canvas.width = this.width;
  this.canvas.height = this.height;
  var context = this.canvas.getContext('2d');

  // TODO: https://github.com/phetsims/chipper/issues/1218 Could likely be moved to prototype, but would also need a
  // rendered: boolean flag, and there are other usages in scenery that would require adjustment
  this.updateCanvas = function () {
    if (_this.img.complete && (typeof _this.img.naturalWidth === 'undefined' || _this.img.naturalWidth > 0)) {
      context.drawImage(_this.img, 0, 0);
      delete _this.updateCanvas;
    }
  };
});
_phetCore["default"].register('MipmapElement', MipmapElement);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcGhldENvcmUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9hc3luY0xvYWRlciIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfdHlwZW9mIiwibyIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiY29uc3RydWN0b3IiLCJwcm90b3R5cGUiLCJfZGVmaW5lUHJvcGVydGllcyIsInRhcmdldCIsInByb3BzIiwiaSIsImxlbmd0aCIsImRlc2NyaXB0b3IiLCJlbnVtZXJhYmxlIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsIl90b1Byb3BlcnR5S2V5Iiwia2V5IiwiX2NyZWF0ZUNsYXNzIiwiQ29uc3RydWN0b3IiLCJwcm90b1Byb3BzIiwic3RhdGljUHJvcHMiLCJfY2xhc3NDYWxsQ2hlY2siLCJpbnN0YW5jZSIsIlR5cGVFcnJvciIsIl9kZWZpbmVQcm9wZXJ0eSIsInZhbHVlIiwidCIsIl90b1ByaW1pdGl2ZSIsInIiLCJlIiwidG9QcmltaXRpdmUiLCJjYWxsIiwiU3RyaW5nIiwiTnVtYmVyIiwiTWlwbWFwRWxlbWVudCIsImV4cG9ydHMiLCJ3aWR0aCIsImhlaWdodCIsInVybCIsIl90aGlzIiwiaW1nIiwiSW1hZ2UiLCJ1bmxvY2siLCJhc3luY0xvYWRlciIsImNyZWF0ZUxvY2siLCJvbmxvYWQiLCJzcmMiLCJjYW52YXMiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJjb250ZXh0IiwiZ2V0Q29udGV4dCIsInVwZGF0ZUNhbnZhcyIsImNvbXBsZXRlIiwibmF0dXJhbFdpZHRoIiwiZHJhd0ltYWdlIiwicGhldENvcmUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk1pcG1hcEVsZW1lbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjIsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuaW1wb3J0IHBoZXRDb3JlIGZyb20gJy4vcGhldENvcmUuanMnO1xyXG5pbXBvcnQgYXN5bmNMb2FkZXIgZnJvbSAnLi9hc3luY0xvYWRlci5qcyc7XHJcblxyXG4vKipcclxuICogU2l6ZSBhbmQgcmFzdGVyIGRhdGEgZm9yIGxldmVscyBpbiBhIG1pcG1hcC4gIFNlZSBhbHNvIHR5cGUgTWlwbWFwIGluIEltYWdlYWJsZS50cy4gIERlZmluZWQgaW4gcGhldC1jb3JlIGluc3RlYWQgb2ZcclxuICogc2NlbmVyeSBiZWNhdXNlIGl0IGlzIGxvYWRlZCB1cHN0cmVhbSBhbmQgc2hvdWxkIG5vdCBoYXZlIGFueSBkb3duc3RyZWFtIGRlcGVuZGVuY2llcyBzdWNoIGFzIHNjZW5lcnkuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBNaXBtYXBFbGVtZW50IHtcclxuICBwdWJsaWMgcmVhZG9ubHkgd2lkdGg6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgaGVpZ2h0OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHVybDogc3RyaW5nO1xyXG4gIHB1YmxpYyByZWFkb25seSBpbWc6IEhUTUxJbWFnZUVsZW1lbnQ7XHJcbiAgcHVibGljIHJlYWRvbmx5IGNhbnZhczogSFRNTENhbnZhc0VsZW1lbnQ7XHJcbiAgcHVibGljIHVwZGF0ZUNhbnZhcz86ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIsIHVybDogc3RyaW5nICkge1xyXG4gICAgdGhpcy53aWR0aCA9IHdpZHRoO1xyXG4gICAgdGhpcy5oZWlnaHQgPSBoZWlnaHQ7XHJcbiAgICB0aGlzLnVybCA9IHVybDtcclxuXHJcbiAgICB0aGlzLmltZyA9IG5ldyBJbWFnZSgpOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLWh0bWwtY29uc3RydWN0b3JzXHJcbiAgICBjb25zdCB1bmxvY2sgPSBhc3luY0xvYWRlci5jcmVhdGVMb2NrKCB0aGlzLmltZyApO1xyXG4gICAgdGhpcy5pbWcub25sb2FkID0gdW5sb2NrO1xyXG4gICAgdGhpcy5pbWcuc3JjID0gdGhpcy51cmw7IC8vIHRyaWdnZXIgdGhlIGxvYWRpbmcgb2YgdGhlIGltYWdlIGZvciBpdHMgbGV2ZWxcclxuICAgIHRoaXMuY2FudmFzID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2NhbnZhcycgKTtcclxuICAgIHRoaXMuY2FudmFzLndpZHRoID0gdGhpcy53aWR0aDtcclxuICAgIHRoaXMuY2FudmFzLmhlaWdodCA9IHRoaXMuaGVpZ2h0O1xyXG4gICAgY29uc3QgY29udGV4dCA9IHRoaXMuY2FudmFzLmdldENvbnRleHQoICcyZCcgKSE7XHJcblxyXG4gICAgLy8gVE9ETzogaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NoaXBwZXIvaXNzdWVzLzEyMTggQ291bGQgbGlrZWx5IGJlIG1vdmVkIHRvIHByb3RvdHlwZSwgYnV0IHdvdWxkIGFsc28gbmVlZCBhXHJcbiAgICAvLyByZW5kZXJlZDogYm9vbGVhbiBmbGFnLCBhbmQgdGhlcmUgYXJlIG90aGVyIHVzYWdlcyBpbiBzY2VuZXJ5IHRoYXQgd291bGQgcmVxdWlyZSBhZGp1c3RtZW50XHJcbiAgICB0aGlzLnVwZGF0ZUNhbnZhcyA9ICgpID0+IHtcclxuICAgICAgaWYgKCB0aGlzLmltZy5jb21wbGV0ZSAmJiAoIHR5cGVvZiB0aGlzLmltZy5uYXR1cmFsV2lkdGggPT09ICd1bmRlZmluZWQnIHx8IHRoaXMuaW1nLm5hdHVyYWxXaWR0aCA+IDAgKSApIHtcclxuICAgICAgICBjb250ZXh0LmRyYXdJbWFnZSggdGhpcy5pbWcsIDAsIDAgKTtcclxuICAgICAgICBkZWxldGUgdGhpcy51cGRhdGVDYW52YXM7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgfVxyXG59XHJcblxyXG5waGV0Q29yZS5yZWdpc3RlciggJ01pcG1hcEVsZW1lbnQnLCBNaXBtYXBFbGVtZW50ICk7Il0s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