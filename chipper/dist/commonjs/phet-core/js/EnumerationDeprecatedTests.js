"use strict";

var _EnumerationDeprecated = _interopRequireDefault(require("./EnumerationDeprecated.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright 2018-2023, University of Colorado Boulder
/**
 * Tests for EnumerationDeprecated
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */
QUnit.module('EnumerationDeprecated');
QUnit.test('Basic enumeration', function (assert) {
  var CardinalDirection = _EnumerationDeprecated["default"].byKeys(['NORTH', 'SOUTH', 'EAST', 'WEST']);
  assert.equal(CardinalDirection.NORTH, 'NORTH', 'Equality for NORTH');
  assert.equal(CardinalDirection.SOUTH, 'SOUTH', 'Equality for SOUTH');
  assert.equal(CardinalDirection.EAST, 'EAST', 'Equality for EAST');
  assert.equal(CardinalDirection.WEST, 'WEST', 'Equality for WEST');
  assert.equal(CardinalDirection.includes(CardinalDirection.NORTH), true, 'NORTH is in the enumeration');
  assert.equal(CardinalDirection.includes('NORTH'), false, 'Strings shouln\'t match');
  assert.equal(CardinalDirection.includes('YORKSHIRE_TERRIER_WITH_THE_CANDLE_STICK_IN_THE_BALLROOM'), false, 'Not in the enumeration');
  assert.equal(CardinalDirection.includes({
    name: 'NORTH'
  }), false, 'Should not be able to synthesize EnumerationDeprecated values');

  // Test toString
  var object = {};
  object[CardinalDirection.NORTH] = 'exit';
  assert.equal(object.NORTH, 'exit', 'toString should work seamlessly');
  window.assert && assert["throws"](function () {
    CardinalDirection.SOMETHING_AFTER_THE_FREEZE = 5;
  }, 'Should not be able to set things after initialization');
  window.assert && assert["throws"](function () {
    var X = _EnumerationDeprecated["default"].byKeys(['lowercase', 'should', 'fail']);
    assert.ok(!!X, 'fake assertion so x is used');
  }, 'EnumerationDeprecated should fail for lowercase values');
});
QUnit.test('Before freeze test', function (assert) {
  var E = _EnumerationDeprecated["default"].byKeys(['A', 'B'], {
    beforeFreeze: function beforeFreeze(E) {
      E.opposite = function (e) {
        window.assert && window.assert(E.includes(e));
        return e === E.A ? E.B : E.A;
      };
    }
  });
  assert.equal(E.A, 'A', 'Equality for A');
  assert.equal(E.B, 'B', 'Equality for B');
  assert.equal(E.opposite(E.A), E.B, 'Custom function check 1');
  assert.equal(E.opposite(E.B), E.A, 'Custom function check 2');
  window.assert && assert["throws"](function () {
    E.SOMETHING_AFTER_THE_FREEZE = 5;
  }, 'Should not be able to set things after initialization');
});
QUnit.test('VALUES', function (assert) {
  var People = _EnumerationDeprecated["default"].byKeys(['ALICE', 'BOB']);
  assert.ok(true, 'at least one assertion must run per test');
  window.assert && assert["throws"](function () {
    People.VALUES = 'something else';
  }, 'Setting values after initialization should throw an error.');
});
QUnit.test('Rich', function (assert) {
  var Planet = /*#__PURE__*/function () {
    function Planet(order) {
      _classCallCheck(this, Planet);
      this.order = order;
    }

    // @public
    return _createClass(Planet, [{
      key: "getString",
      value: function getString(name) {
        return "".concat(name, " is a person from the ").concat(this.order, " planet.");
      }
    }]);
  }();
  var Venus = /*#__PURE__*/function (_Planet) {
    function Venus() {
      _classCallCheck(this, Venus);
      return _callSuper(this, Venus, arguments);
    }
    _inherits(Venus, _Planet);
    return _createClass(Venus);
  }(Planet);
  var Planets = _EnumerationDeprecated["default"].byMap({
    MARS: new Planet(2),
    EARTH: new Planet(3)
  });
  assert.ok(Planets.MARS.order === 2, 'mars order should match');
  assert.ok(typeof Planets.EARTH.getString('bob') === 'string', 'should return a string');
  window.assert && assert["throws"](function () {
    Planets.MARS = 'hello'; // fails because enumeration values should not be reassignable
  });
  window.assert && assert["throws"](function () {
    Planets.MARS.name = 'not mars!'; // Should not be able to reassign enumeration value properties
  });
  window.assert && assert["throws"](function () {
    _EnumerationDeprecated["default"].byMap({
      MARS: new Planet(2),
      EARTH: new Planet(3),
      VENUS: new Venus(7) // Forbidden at the moment, see https://github.com/phetsims/phet-core/issues/50#issuecomment-575324970
    });
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,