"use strict";

var _dimensionForEach = _interopRequireDefault(require("./dimensionForEach.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
// Copyright 2018-2023, University of Colorado Boulder

/**
 * Tests for dimensionForEach
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

QUnit.module('dimensionForEach');
QUnit.test('1 dimensional', function (assert) {
  var normalValues = [];
  var ourValues = [];
  var arr = [1, 2, 4, 9];
  arr.forEach(function (element, index) {
    normalValues.push({
      element: element,
      index: index
    });
  });
  (0, _dimensionForEach["default"])(1, arr, function (element, index) {
    ourValues.push({
      element: element,
      index: index
    });
  });
  assert.ok(_.isEqual(normalValues, ourValues), '1-dimensional comparison');
});
QUnit.test('2 dimensional', function (assert) {
  var arr = [[1, 2, 4], [9, 5]];
  var values = [];
  var expectedValues = [{
    element: 1,
    idx1: 0,
    idx2: 0
  }, {
    element: 2,
    idx1: 0,
    idx2: 1
  }, {
    element: 4,
    idx1: 0,
    idx2: 2
  }, {
    element: 9,
    idx1: 1,
    idx2: 0
  }, {
    element: 5,
    idx1: 1,
    idx2: 1
  }];
  (0, _dimensionForEach["default"])(2, arr, function (element, idx1, idx2) {
    values.push({
      element: element,
      idx1: idx1,
      idx2: idx2
    });
  });
  assert.ok(_.isEqual(values, expectedValues), '2-dimensional comparison');
});
QUnit.test('3 dimensional', function (assert) {
  var arr = [[[1, 5], [9, 2]], [[3, 3, 4]]];
  var values = [];
  var expectedValues = [{
    element: 1,
    idx1: 0,
    idx2: 0,
    idx3: 0
  }, {
    element: 5,
    idx1: 0,
    idx2: 0,
    idx3: 1
  }, {
    element: 9,
    idx1: 0,
    idx2: 1,
    idx3: 0
  }, {
    element: 2,
    idx1: 0,
    idx2: 1,
    idx3: 1
  }, {
    element: 3,
    idx1: 1,
    idx2: 0,
    idx3: 0
  }, {
    element: 3,
    idx1: 1,
    idx2: 0,
    idx3: 1
  }, {
    element: 4,
    idx1: 1,
    idx2: 0,
    idx3: 2
  }];
  (0, _dimensionForEach["default"])(3, arr, function (element, idx1, idx2, idx3) {
    values.push({
      element: element,
      idx1: idx1,
      idx2: idx2,
      idx3: idx3
    });
  });
  assert.ok(_.isEqual(values, expectedValues), '3-dimensional comparison');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfZGltZW5zaW9uRm9yRWFjaCIsIl9pbnRlcm9wUmVxdWlyZURlZmF1bHQiLCJyZXF1aXJlIiwib2JqIiwiX19lc01vZHVsZSIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsIm5vcm1hbFZhbHVlcyIsIm91clZhbHVlcyIsImFyciIsImZvckVhY2giLCJlbGVtZW50IiwiaW5kZXgiLCJwdXNoIiwiZGltZW5zaW9uRm9yRWFjaCIsIm9rIiwiXyIsImlzRXF1YWwiLCJ2YWx1ZXMiLCJleHBlY3RlZFZhbHVlcyIsImlkeDEiLCJpZHgyIiwiaWR4MyJdLCJzb3VyY2VzIjpbImRpbWVuc2lvbkZvckVhY2hUZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBmb3IgZGltZW5zaW9uRm9yRWFjaFxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IGRpbWVuc2lvbkZvckVhY2ggZnJvbSAnLi9kaW1lbnNpb25Gb3JFYWNoLmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ2RpbWVuc2lvbkZvckVhY2gnICk7XHJcblxyXG50eXBlIEVsZW1lbnQgPSB7IGVsZW1lbnQ6IG51bWJlcjsgaW5kZXg6IG51bWJlciB9O1xyXG5cclxuUVVuaXQudGVzdCggJzEgZGltZW5zaW9uYWwnLCBhc3NlcnQgPT4ge1xyXG4gIGNvbnN0IG5vcm1hbFZhbHVlczogRWxlbWVudFtdID0gW107XHJcbiAgY29uc3Qgb3VyVmFsdWVzOiBFbGVtZW50W10gPSBbXTtcclxuXHJcbiAgY29uc3QgYXJyID0gWyAxLCAyLCA0LCA5IF07XHJcblxyXG4gIGFyci5mb3JFYWNoKCAoIGVsZW1lbnQsIGluZGV4ICkgPT4ge1xyXG4gICAgbm9ybWFsVmFsdWVzLnB1c2goIHtcclxuICAgICAgZWxlbWVudDogZWxlbWVudCxcclxuICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICB9ICk7XHJcbiAgfSApO1xyXG5cclxuICBkaW1lbnNpb25Gb3JFYWNoKCAxLCBhcnIsICggZWxlbWVudCwgaW5kZXggKSA9PiB7XHJcbiAgICBvdXJWYWx1ZXMucHVzaCgge1xyXG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICBpbmRleDogaW5kZXhcclxuICAgIH0gKTtcclxuICB9ICk7XHJcblxyXG4gIGFzc2VydC5vayggXy5pc0VxdWFsKCBub3JtYWxWYWx1ZXMsIG91clZhbHVlcyApLCAnMS1kaW1lbnNpb25hbCBjb21wYXJpc29uJyApO1xyXG59ICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnMiBkaW1lbnNpb25hbCcsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgYXJyID0gW1xyXG4gICAgWyAxLCAyLCA0IF0sXHJcbiAgICBbIDksIDUgXVxyXG4gIF07XHJcbiAgY29uc3QgdmFsdWVzOiBBcnJheTx7IGVsZW1lbnQ6IG51bWJlcjsgaWR4MTogbnVtYmVyOyBpZHgyOiBudW1iZXIgfT4gPSBbXTtcclxuICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IFtcclxuICAgIHsgZWxlbWVudDogMSwgaWR4MTogMCwgaWR4MjogMCB9LFxyXG4gICAgeyBlbGVtZW50OiAyLCBpZHgxOiAwLCBpZHgyOiAxIH0sXHJcbiAgICB7IGVsZW1lbnQ6IDQsIGlkeDE6IDAsIGlkeDI6IDIgfSxcclxuICAgIHsgZWxlbWVudDogOSwgaWR4MTogMSwgaWR4MjogMCB9LFxyXG4gICAgeyBlbGVtZW50OiA1LCBpZHgxOiAxLCBpZHgyOiAxIH1cclxuICBdO1xyXG5cclxuICBkaW1lbnNpb25Gb3JFYWNoKCAyLCBhcnIsICggZWxlbWVudCwgaWR4MSwgaWR4MiApID0+IHtcclxuICAgIHZhbHVlcy5wdXNoKCB7XHJcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXHJcbiAgICAgIGlkeDE6IGlkeDEsXHJcbiAgICAgIGlkeDI6IGlkeDJcclxuICAgIH0gKTtcclxuICB9ICk7XHJcblxyXG4gIGFzc2VydC5vayggXy5pc0VxdWFsKCB2YWx1ZXMsIGV4cGVjdGVkVmFsdWVzICksICcyLWRpbWVuc2lvbmFsIGNvbXBhcmlzb24nICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICczIGRpbWVuc2lvbmFsJywgYXNzZXJ0ID0+IHtcclxuICBjb25zdCBhcnIgPSBbXHJcbiAgICBbXHJcbiAgICAgIFsgMSwgNSBdLFxyXG4gICAgICBbIDksIDIgXVxyXG4gICAgXSxcclxuICAgIFtcclxuICAgICAgWyAzLCAzLCA0IF1cclxuICAgIF1cclxuICBdO1xyXG4gIGNvbnN0IHZhbHVlczogQXJyYXk8eyBlbGVtZW50OiBudW1iZXI7IGlkeDE6IG51bWJlcjsgaWR4MjogbnVtYmVyOyBpZHgzOiBudW1iZXIgfT4gPSBbXTtcclxuICBjb25zdCBleHBlY3RlZFZhbHVlcyA9IFtcclxuICAgIHsgZWxlbWVudDogMSwgaWR4MTogMCwgaWR4MjogMCwgaWR4MzogMCB9LFxyXG4gICAgeyBlbGVtZW50OiA1LCBpZHgxOiAwLCBpZHgyOiAwLCBpZHgzOiAxIH0sXHJcbiAgICB7IGVsZW1lbnQ6IDksIGlkeDE6IDAsIGlkeDI6IDEsIGlkeDM6IDAgfSxcclxuICAgIHsgZWxlbWVudDogMiwgaWR4MTogMCwgaWR4MjogMSwgaWR4MzogMSB9LFxyXG4gICAgeyBlbGVtZW50OiAzLCBpZHgxOiAxLCBpZHgyOiAwLCBpZHgzOiAwIH0sXHJcbiAgICB7IGVsZW1lbnQ6IDMsIGlkeDE6IDEsIGlkeDI6IDAsIGlkeDM6IDEgfSxcclxuICAgIHsgZWxlbWVudDogNCwgaWR4MTogMSwgaWR4MjogMCwgaWR4MzogMiB9XHJcbiAgXTtcclxuXHJcbiAgZGltZW5zaW9uRm9yRWFjaCggMywgYXJyLCAoIGVsZW1lbnQsIGlkeDEsIGlkeDIsIGlkeDMgKSA9PiB7XHJcbiAgICB2YWx1ZXMucHVzaCgge1xyXG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICBpZHgxOiBpZHgxLFxyXG4gICAgICBpZHgyOiBpZHgyLFxyXG4gICAgICBpZHgzOiBpZHgzXHJcbiAgICB9ICk7XHJcbiAgfSApO1xyXG5cclxuICBhc3NlcnQub2soIF8uaXNFcXVhbCggdmFsdWVzLCBleHBlY3RlZFZhbHVlcyApLCAnMy1kaW1lbnNpb25hbCBjb21wYXJpc29uJyApO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiOztBQVFBLElBQUFBLGlCQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBcUQsU0FBQUQsdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQVJyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUlBRSxLQUFLLENBQUNDLE1BQU0sQ0FBRSxrQkFBbUIsQ0FBQztBQUlsQ0QsS0FBSyxDQUFDRSxJQUFJLENBQUUsZUFBZSxFQUFFLFVBQUFDLE1BQU0sRUFBSTtFQUNyQyxJQUFNQyxZQUF1QixHQUFHLEVBQUU7RUFDbEMsSUFBTUMsU0FBb0IsR0FBRyxFQUFFO0VBRS9CLElBQU1DLEdBQUcsR0FBRyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRTtFQUUxQkEsR0FBRyxDQUFDQyxPQUFPLENBQUUsVUFBRUMsT0FBTyxFQUFFQyxLQUFLLEVBQU07SUFDakNMLFlBQVksQ0FBQ00sSUFBSSxDQUFFO01BQ2pCRixPQUFPLEVBQUVBLE9BQU87TUFDaEJDLEtBQUssRUFBRUE7SUFDVCxDQUFFLENBQUM7RUFDTCxDQUFFLENBQUM7RUFFSCxJQUFBRSw0QkFBZ0IsRUFBRSxDQUFDLEVBQUVMLEdBQUcsRUFBRSxVQUFFRSxPQUFPLEVBQUVDLEtBQUssRUFBTTtJQUM5Q0osU0FBUyxDQUFDSyxJQUFJLENBQUU7TUFDZEYsT0FBTyxFQUFFQSxPQUFPO01BQ2hCQyxLQUFLLEVBQUVBO0lBQ1QsQ0FBRSxDQUFDO0VBQ0wsQ0FBRSxDQUFDO0VBRUhO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