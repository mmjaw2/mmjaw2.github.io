"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _phetCore = _interopRequireDefault(require("./phetCore.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
// Copyright 2013-2023, University of Colorado Boulder

/**
 * Loads a script
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

/*
 * Load a script. The only required argument is src, and can be specified either as
 * loadScript( "<url>" ) or loadScript( { src: "<url>", ... other options ... } ).
 *
 * Arguments:
 *   src:         The source of the script to load
 *   callback:    A callback to call (with no arguments) once the script is loaded and has been executed
 *   async:       Whether the script should be loaded asynchronously. Defaults to true
 *   cacheBust: Whether the URL should have an appended query string to work around caches
 */
function loadScript(inputArgs) {
  // handle a string argument
  var args = typeof inputArgs === 'string' ? {
    src: inputArgs
  } : inputArgs;
  var src = args.src;
  var callback = args.callback;
  var async = args.async === undefined ? true : args.async;
  var cacheBust = args.cacheBust === undefined ? false : args.cacheBust;
  var called = false;
  var script = document.createElement('script');
  script.type = 'text/javascript';
  script.async = async;

  // @ts-expect-error
  script.onload = script.onreadystatechange = function () {
    // @ts-expect-error
    var state = this.readyState;
    if (state && state !== 'complete' && state !== 'loaded') {
      return;
    }
    if (!called) {
      called = true;
      if (callback) {
        callback();
      }
    }
  };

  // make sure things aren't cached, just in case
  script.src = src + (cacheBust ? "?random=".concat(Math.random().toFixed(10)) : ''); // eslint-disable-line bad-sim-text

  var other = document.getElementsByTagName('script')[0];
  other.parentNode.insertBefore(script, other);
}
_phetCore["default"].register('loadScript', loadScript);
var _default = exports["default"] = loadScript;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfcGhldENvcmUiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIm9iaiIsIl9fZXNNb2R1bGUiLCJsb2FkU2NyaXB0IiwiaW5wdXRBcmdzIiwiYXJncyIsInNyYyIsImNhbGxiYWNrIiwiYXN5bmMiLCJ1bmRlZmluZWQiLCJjYWNoZUJ1c3QiLCJjYWxsZWQiLCJzY3JpcHQiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnQiLCJ0eXBlIiwib25sb2FkIiwib25yZWFkeXN0YXRlY2hhbmdlIiwic3RhdGUiLCJyZWFkeVN0YXRlIiwiY29uY2F0IiwiTWF0aCIsInJhbmRvbSIsInRvRml4ZWQiLCJvdGhlciIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwicGFyZW50Tm9kZSIsImluc2VydEJlZm9yZSIsInBoZXRDb3JlIiwicmVnaXN0ZXIiLCJfZGVmYXVsdCIsImV4cG9ydHMiXSwic291cmNlcyI6WyJsb2FkU2NyaXB0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExvYWRzIGEgc2NyaXB0XHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi9waGV0Q29yZS5qcyc7XHJcblxyXG50eXBlIExvYWRTY3JpcHRBcmdzID0ge1xyXG4gIHNyYzogc3RyaW5nO1xyXG4gIGNhbGxiYWNrPzogVm9pZEZ1bmN0aW9uO1xyXG4gIGFzeW5jPzogYm9vbGVhbjtcclxuICBjYWNoZUJ1c3Q/OiBib29sZWFuO1xyXG59O1xyXG5cclxuLypcclxuICogTG9hZCBhIHNjcmlwdC4gVGhlIG9ubHkgcmVxdWlyZWQgYXJndW1lbnQgaXMgc3JjLCBhbmQgY2FuIGJlIHNwZWNpZmllZCBlaXRoZXIgYXNcclxuICogbG9hZFNjcmlwdCggXCI8dXJsPlwiICkgb3IgbG9hZFNjcmlwdCggeyBzcmM6IFwiPHVybD5cIiwgLi4uIG90aGVyIG9wdGlvbnMgLi4uIH0gKS5cclxuICpcclxuICogQXJndW1lbnRzOlxyXG4gKiAgIHNyYzogICAgICAgICBUaGUgc291cmNlIG9mIHRoZSBzY3JpcHQgdG8gbG9hZFxyXG4gKiAgIGNhbGxiYWNrOiAgICBBIGNhbGxiYWNrIHRvIGNhbGwgKHdpdGggbm8gYXJndW1lbnRzKSBvbmNlIHRoZSBzY3JpcHQgaXMgbG9hZGVkIGFuZCBoYXMgYmVlbiBleGVjdXRlZFxyXG4gKiAgIGFzeW5jOiAgICAgICBXaGV0aGVyIHRoZSBzY3JpcHQgc2hvdWxkIGJlIGxvYWRlZCBhc3luY2hyb25vdXNseS4gRGVmYXVsdHMgdG8gdHJ1ZVxyXG4gKiAgIGNhY2hlQnVzdDogV2hldGhlciB0aGUgVVJMIHNob3VsZCBoYXZlIGFuIGFwcGVuZGVkIHF1ZXJ5IHN0cmluZyB0byB3b3JrIGFyb3VuZCBjYWNoZXNcclxuICovXHJcbmZ1bmN0aW9uIGxvYWRTY3JpcHQoIGlucHV0QXJnczogTG9hZFNjcmlwdEFyZ3MgfCBzdHJpbmcgKTogdm9pZCB7XHJcblxyXG4gIC8vIGhhbmRsZSBhIHN0cmluZyBhcmd1bWVudFxyXG4gIGNvbnN0IGFyZ3MgPSB0eXBlb2YgaW5wdXRBcmdzID09PSAnc3RyaW5nJyA/IHsgc3JjOiBpbnB1dEFyZ3MgfSA6IGlucHV0QXJncztcclxuXHJcbiAgY29uc3Qgc3JjID0gYXJncy5zcmM7XHJcbiAgY29uc3QgY2FsbGJhY2sgPSBhcmdzLmNhbGxiYWNrO1xyXG4gIGNvbnN0IGFzeW5jID0gYXJncy5hc3luYyA9PT0gdW5kZWZpbmVkID8gdHJ1ZSA6IGFyZ3MuYXN5bmM7XHJcbiAgY29uc3QgY2FjaGVCdXN0ID0gYXJncy5jYWNoZUJ1c3QgPT09IHVuZGVmaW5lZCA/IGZhbHNlIDogYXJncy5jYWNoZUJ1c3Q7XHJcblxyXG4gIGxldCBjYWxsZWQgPSBmYWxzZTtcclxuXHJcbiAgY29uc3Qgc2NyaXB0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ3NjcmlwdCcgKTtcclxuICBzY3JpcHQudHlwZSA9ICd0ZXh0L2phdmFzY3JpcHQnO1xyXG4gIHNjcmlwdC5hc3luYyA9IGFzeW5jO1xyXG5cclxuICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgc2NyaXB0Lm9ubG9hZCA9IHNjcmlwdC5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBmdW5jdGlvbigpIHtcclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3JcclxuICAgIGNvbnN0IHN0YXRlID0gdGhpcy5yZWFkeVN0YXRlO1xyXG4gICAgaWYgKCBzdGF0ZSAmJiBzdGF0ZSAhPT0gJ2NvbXBsZXRlJyAmJiBzdGF0ZSAhPT0gJ2xvYWRlZCcgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoICFjYWxsZWQgKSB7XHJcbiAgICAgIGNhbGxlZCA9IHRydWU7XHJcblxyXG4gICAgICBpZiAoIGNhbGxiYWNrICkge1xyXG4gICAgICAgIGNhbGxiYWNrKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG5cclxuICAvLyBtYWtlIHN1cmUgdGhpbmdzIGFyZW4ndCBjYWNoZWQsIGp1c3QgaW4gY2FzZVxyXG4gIHNjcmlwdC5zcmMgPSBzcmMgKyAoIGNhY2hlQnVzdCA/IGA/cmFuZG9tPSR7TWF0aC5yYW5kb20oKS50b0ZpeGVkKCAxMCApfWAgOiAnJyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIGJhZC1zaW0tdGV4dFxyXG5cclxuICBjb25zdCBvdGhlciA9IGRvY3VtZW50LmdldEVsZW1lbnRzQnlUYWdOYW1lKCAnc2NyaXB0JyApWyAwIF07XHJcbiAgb3RoZXIucGFyZW50Tm9kZSEuaW5zZXJ0QmVmb3JlKCBzY3JpcHQsIG90aGVyICk7XHJcbn1cclxuXHJcbnBoZXRDb3JlLnJlZ2lzdGVyKCAnbG9hZFNjcmlwdCcsIGxvYWRTY3JpcHQgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxvYWRTY3JpcHQ7Il0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFRQSxJQUFBQSxTQUFBLEdBQUFDLHNCQUFBLENBQUFDLE9BQUE7QUFBcUMsU0FBQUQsdUJBQUFFLEdBQUEsV0FBQUEsR0FBQSxJQUFBQSxHQUFBLENBQUFDLFVBQUEsR0FBQUQsR0FBQSxnQkFBQUEsR0FBQTtBQVJyQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQVdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0UsVUFBVUEsQ0FBRUMsU0FBa0MsRUFBUztFQUU5RDtFQUNBLElBQU1DLElBQUksR0FBRyxPQUFPRCxTQUFTLEtBQUssUUFBUSxHQUFHO0lBQUVFLEdBQUcsRUFBRUY7RUFBVSxDQUFDLEdBQUdBLFNBQVM7RUFFM0UsSUFBTUUsR0FBRyxHQUFHRCxJQUFJLENBQUNDLEdBQUc7RUFDcEIsSUFBTUMsUUFBUSxHQUFHRixJQUFJLENBQUNFLFFBQVE7RUFDOUIsSUFBTUMsS0FBSyxHQUFHSCxJQUFJLENBQUNHLEtBQUssS0FBS0MsU0FBUyxHQUFHLElBQUksR0FBR0osSUFBSSxDQUFDRyxLQUFLO0VBQzFELElBQU1FLFNBQVMsR0FBR0wsSUFBSSxDQUFDSyxTQUFTLEtBQUtELFNBQVMsR0FBRyxLQUFLLEdBQUdKLElBQUksQ0FBQ0ssU0FBUztFQUV2RSxJQUFJQyxNQUFNLEdBQUcsS0FBSztFQUVsQixJQUFNQyxNQUFNLEdBQUdDLFFBQVEsQ0FBQ0MsYUFBYSxDQUFFLFFBQVMsQ0FBQztFQUNqREYsTUFBTSxDQUFDRyxJQUFJLEdBQUcsaUJBQWlCO0VBQy9CSCxNQUFNLENBQUNKLEtBQUssR0FBR0EsS0FBSzs7RUFFcEI7RUFDQUksTUFBTSxDQUFDSSxNQUFNLEdBQUdKLE1BQU0sQ0FBQ0ssa0JBQWtCLEdBQUcsWUFBVztJQUNyRDtJQUNBLElBQU1DLEtBQUssR0FBRyxJQUFJLENBQUNDLFVBQVU7SUFDN0IsSUFBS0QsS0FBSyxJQUFJQSxLQUFLLEtBQUssVUFBVSxJQUFJQSxLQUFLLEtBQUssUUFBUSxFQUFHO01BQ3pEO0lBQ0Y7SUFFQSxJQUFLLENBQUNQLE1BQU0sRUFBRztNQUNiQSxNQUFNLEdBQUcsSUFBSTtNQUViLElBQUtKLFFBQVEsRUFBRztRQUNkQSxRQUFRLENBQUMsQ0FBQztNQUNaO0lBQ0Y7RUFDRixDQUFDOztFQUVEO0VBQ0FLLE1BQU0sQ0FBQ04sR0FBRyxHQUFHQSxHQUFHLElBQUtJLFNBQVMsY0FBQVUsTUFBQSxDQUFjQyxJQUFJLENBQUNDLE1BQU0sQ0FBQyxDQUFDLENBQUNDLE9BQU8sQ0FBRSxFQUFHLENBQUMsSUFBSyxFQUFFLENBQUUsQ0FBQyxDQUFDOztFQUVsRixJQUFNQyxLQUFLLEdBQUdYLFFBQVEsQ0FBQ1ksb0JBQW9CLENBQUUsUUFBUyxDQUFDLENBQUUsQ0FBQyxDQUFFO0VBQzVERCxLQUFLLENBQUNFLFVBQVUsQ0FBRUMsWUFBWSxDQUFFZixNQUFNLEVBQUVZLEtBQU0sQ0FBQztBQUNqRDtBQUVBSSxvQkFBUSxDQUFDQyxRQUFRLENBQUUsWUFBWSxFQUFFMUIsVUFBVyxDQUFDO0FBQUMsSUFBQTJCLFFBQUEsR0FBQUMsT0FBQSxjQUUvQjVCLFVBQVUiLCJpZ25vcmVMaXN0IjpbXX0=