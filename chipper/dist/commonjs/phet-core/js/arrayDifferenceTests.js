"use strict";

var _arrayDifference = _interopRequireDefault(require("./arrayDifference.js"));
var _arrayRemove = _interopRequireDefault(require("./arrayRemove.js"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
// Copyright 2018-2023, University of Colorado Boulder

/**
 * arrayDifference tests
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

QUnit.module('arrayDifference');
function assertDifferences(assert, a, b, expectedAOnly, expectedBOnly, expectedBoth) {
  var aOnly = [];
  var bOnly = [];
  var inBoth = [];
  var result = (0, _arrayDifference["default"])(a, b, aOnly, bOnly, inBoth);
  assert.ok(_.isEqual(aOnly, expectedAOnly), "aOnly: ".concat(a.toString(), " diff ").concat(b.toString(), " expected: ").concat(expectedAOnly.toString(), " actual: ").concat(aOnly.toString()));
  assert.ok(_.isEqual(bOnly, expectedBOnly), "bOnly: ".concat(a.toString(), " diff ").concat(b.toString(), " expected: ").concat(expectedBOnly.toString(), " actual: ").concat(bOnly.toString()));
  assert.ok(_.isEqual(inBoth, expectedBoth), "inBoth: ".concat(a.toString(), " diff ").concat(b.toString(), " expected: ").concat(expectedBoth.toString(), " actual: ").concat(inBoth.toString()));
  assert.ok(_.isEqual(aOnly, result), "return value: ".concat(a.toString(), " diff ").concat(b.toString()));
}
function generatedTest(assert, maxNumber, aSize, bSize) {
  var a = [];
  var b = [];
  var aOnly = [];
  var bOnly = [];
  var inBoth = [];
  var item;
  var range = _.range(1, maxNumber);
  var aRange = range.slice();
  var bRange = range.slice();
  while (a.length < aSize) {
    item = _.sample(aRange); // eslint-disable-line bad-sim-text
    (0, _arrayRemove["default"])(aRange, item);
    a.push(item);
  }
  while (b.length < bSize) {
    item = _.sample(bRange); // eslint-disable-line bad-sim-text
    (0, _arrayRemove["default"])(bRange, item);
    b.push(item);
  }
  for (var i = 0; i < range.length; i++) {
    item = range[i];
    var inA = _.includes(a, item);
    var inB = _.includes(b, item);
    if (inA && inB) {
      inBoth.push(item);
    } else if (inA) {
      aOnly.push(item);
    } else if (inB) {
      bOnly.push(item);
    }
  }
  aOnly.sort(function (x, y) {
    return a.indexOf(x) - a.indexOf(y);
  });
  bOnly.sort(function (x, y) {
    return b.indexOf(x) - b.indexOf(y);
  });
  inBoth.sort(function (x, y) {
    return a.indexOf(x) - a.indexOf(y);
  });
  assertDifferences(assert, a, b, aOnly, bOnly, inBoth);
}
QUnit.test('Simple Usage 1', function (assert) {
  var a = [1, 2];
  var b = [2, 3];
  assert.ok(_.isEqual((0, _arrayDifference["default"])(a, b), [1]));
});
QUnit.test('General Usage 1', function (assert) {
  assertDifferences(assert, [1, 2], [2, 3], [1], [3], [2]);
});
QUnit.test('General Usage 2', function (assert) {
  var a = [2, 19, 7, 12, 8, 6, 14, 5, 4, 9];
  var b = [17, 18, 9, 14, 20, 4, 3, 15];
  var aOnly = [2, 19, 7, 12, 8, 6, 5];
  var bOnly = [17, 18, 20, 3, 15];
  var inBoth = [14, 4, 9];
  assertDifferences(assert, a, b, aOnly, bOnly, inBoth);
});
QUnit.test('General Usage 3', function (assert) {
  assertDifferences(assert, [1, 2, 3, 4, 5], [3], [1, 2, 4, 5], [], [3]);
});
QUnit.test('General Usage 4', function (assert) {
  assertDifferences(assert, [1, 2, 3, 4, 5], [], [1, 2, 3, 4, 5], [], []);
});
QUnit.test('General Usage 5', function (assert) {
  assertDifferences(assert, [], [1, 2, 3, 4, 5], [], [1, 2, 3, 4, 5], []);
});
QUnit.test('Generated tests', function (assert) {
  _.times(20, function () {
    generatedTest(assert, 20, 10, 10);
  });
  _.times(4, function () {
    var size = 30;
    for (var i = 0; i <= size; i++) {
      generatedTest(assert, size + 5, i, size - i);
    }
  });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,