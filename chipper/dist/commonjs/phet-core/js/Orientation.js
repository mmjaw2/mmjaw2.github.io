"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;
var _phetCore = _interopRequireDefault(require("./phetCore.js"));
var _Enumeration = _interopRequireDefault(require("./Enumeration.js"));
var _EnumerationValue2 = _interopRequireDefault(require("./EnumerationValue.js"));
var _Orientation;
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }
function _typeof(o) { "@babel/helpers - typeof"; return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && "function" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? "symbol" : typeof o; }, _typeof(o); }
function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }
function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, _toPropertyKey(descriptor.key), descriptor); } }
function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); Object.defineProperty(Constructor, "prototype", { writable: false }); return Constructor; }
function _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }
function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } else if (call !== void 0) { throw new TypeError("Derived constructors may only return object or undefined"); } return _assertThisInitialized(self); }
function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }
function _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }
function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }
function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); Object.defineProperty(subClass, "prototype", { writable: false }); if (superClass) _setPrototypeOf(subClass, superClass); }
function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }
function _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }
function _toPropertyKey(t) { var i = _toPrimitive(t, "string"); return "symbol" == _typeof(i) ? i : i + ""; }
function _toPrimitive(t, r) { if ("object" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || "default"); if ("object" != _typeof(i)) return i; throw new TypeError("@@toPrimitive must return a primitive value."); } return ("string" === r ? String : Number)(t); } // Copyright 2019-2023, University of Colorado Boulder
/**
 * Either horizontal or vertical, with helper values.  Moved from Area Model Common on Nov 7, 2019
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Sam Reid (PhET Interactive Simulations)
 */
// So we don't introduce a dependency on phetcommon
var Orientation = /*#__PURE__*/function (_EnumerationValue) {
  function Orientation(coordinate, centerCoordinate, minCoordinate, maxCoordinate, minSide, maxSide, minSize, maxSize, rectCoordinate, rectSize, flowBoxOrientation, size, line, preferredSize, localPreferredSize, sizable, modelToView, viewToModel, toVector) {
    var _this;
    _classCallCheck(this, Orientation);
    _this = _callSuper(this, Orientation);
    _defineProperty(_this, "coordinate", void 0);
    // So you can position things like node[ orientation.coordinate ] = value
    _defineProperty(_this, "centerCoordinate", void 0);
    // So you can center things like node[ orientation.centerCoordinate ] = value
    _defineProperty(_this, "minCoordinate", void 0);
    // So you can center things like bounds[ orientation.minCoordinate ] = value
    _defineProperty(_this, "maxCoordinate", void 0);
    // So you can center things like bounds[ orientation.maxCoordinate ] = value
    _defineProperty(_this, "minSide", void 0);
    // For getting the minimal/maximal values from bounds/nodes
    _defineProperty(_this, "maxSide", void 0);
    _defineProperty(_this, "minSize", void 0);
    _defineProperty(_this, "maxSize", void 0);
    _defineProperty(_this, "rectCoordinate", void 0);
    // For being able to handle Rectangles (x/y) and (width/height)
    _defineProperty(_this, "rectSize", void 0);
    _defineProperty(_this, "flowBoxOrientation", void 0);
    // The name of the orientation when used for FlowBox
    _defineProperty(_this, "size", void 0);
    _defineProperty(_this, "line", void 0);
    _defineProperty(_this, "preferredSize", void 0);
    _defineProperty(_this, "localPreferredSize", void 0);
    _defineProperty(_this, "sizable", void 0);
    _defineProperty(_this, "ariaOrientation", void 0);
    // The value of the aria-orientation attribute for this Orientation.
    // Returns the single coordinate transformed by the appropriate dimension.
    _defineProperty(_this, "modelToView", void 0);
    _defineProperty(_this, "viewToModel", void 0);
    // Creates a vector (primary,secondary) for horizontal orientations, and (secondary,primary) for vertical orientations.
    _defineProperty(_this, "toVector", void 0);
    // @ts-expect-error - Assigned after instantiation, see below
    _defineProperty(_this, "opposite", void 0);
    _this.coordinate = coordinate;
    _this.centerCoordinate = centerCoordinate;
    _this.minCoordinate = minCoordinate;
    _this.maxCoordinate = maxCoordinate;
    _this.minSide = minSide;
    _this.maxSide = maxSide;
    _this.minSize = minSize;
    _this.maxSize = maxSize;
    _this.rectCoordinate = rectCoordinate;
    _this.rectSize = rectSize;
    _this.flowBoxOrientation = flowBoxOrientation;
    _this.size = size;
    _this.line = line;
    _this.preferredSize = preferredSize;
    _this.localPreferredSize = localPreferredSize;
    _this.sizable = sizable;
    _this.ariaOrientation = flowBoxOrientation;
    _this.modelToView = modelToView;
    _this.viewToModel = viewToModel;
    _this.toVector = toVector;
    return _this;
  }
  _inherits(Orientation, _EnumerationValue);
  return _createClass(Orientation, null, [{
    key: "fromLayoutOrientation",
    value: function fromLayoutOrientation(layoutOrientation) {
      return layoutOrientation === 'horizontal' ? Orientation.HORIZONTAL : Orientation.VERTICAL;
    }
  }]);
}(_EnumerationValue2["default"]); // Set up opposites as object references (circular)
_Orientation = Orientation;
_defineProperty(Orientation, "HORIZONTAL", new _Orientation('x', 'centerX', 'minX', 'maxX', 'left', 'right', 'minWidth', 'maxWidth', 'rectX', 'rectWidth', 'horizontal', 'width', 'column', 'preferredWidth', 'localPreferredWidth', 'widthSizable', function (modelViewTransform, value) {
  return modelViewTransform.modelToViewX(value);
}, function (modelViewTransform, value) {
  return modelViewTransform.viewToModelX(value);
}, function (a, b, VectorType) {
  return new VectorType(a, b, 0, 0);
}));
_defineProperty(Orientation, "VERTICAL", new _Orientation('y', 'centerY', 'minY', 'maxY', 'top', 'bottom', 'minHeight', 'maxHeight', 'rectY', 'rectHeight', 'vertical', 'height', 'row', 'preferredHeight', 'localPreferredHeight', 'heightSizable', function (modelViewTransform, value) {
  return modelViewTransform.modelToViewY(value);
}, function (modelViewTransform, value) {
  return modelViewTransform.viewToModelY(value);
}, function (a, b, VectorType) {
  return new VectorType(b, a, 0, 0);
}));
_defineProperty(Orientation, "enumeration", new _Enumeration["default"](_Orientation, {
  phetioDocumentation: 'Horizontal or vertical orientation'
}));
Orientation.HORIZONTAL.opposite = Orientation.VERTICAL;
Orientation.VERTICAL.opposite = Orientation.HORIZONTAL;
_phetCore["default"].register('Orientation', Orientation);
var _default = exports["default"] = Orientation;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,