// Copyright 2016-2024, University of Colorado Boulder

/**
 * Constants for the entire sim, global.
 *
 * @author Andrea Lin (PhET Interactive Simulations)
 */

import Range from '../../../dot/js/Range.js';
import Vector2 from '../../../dot/js/Vector2.js';
import { Shape } from '../../../kite/js/imports.js';
import ArrowNode from '../../../scenery-phet/js/ArrowNode.js';
import PhetColorScheme from '../../../scenery-phet/js/PhetColorScheme.js';
import PhetFont from '../../../scenery-phet/js/PhetFont.js';
import { Circle, Node, Path } from '../../../scenery/js/imports.js';
import projectileMotion from '../projectileMotion.js';
// constants
const AIR_RESISTANCE_ICON_PATH = new Path(Shape.arc(0, 0, 10, Math.PI * 1.15, Math.PI * 1.85), {
  lineWidth: 3,
  stroke: 'rgb( 252, 40, 252 )'
});
const SMALL_DOT_RADIUS = 1.65; // in global view coordinates, empirically determined

const TEXT_DISPLAY_WIDTH = 50;
const ProjectileMotionConstants = {
  // screen view layout
  VIEW_ORIGIN: new Vector2(70, 510),
  // cannonball defaults
  CANNONBALL_MASS: 17.6,
  CANNONBALL_DIAMETER: 0.18,
  CANNONBALL_DRAG_COEFFICIENT: 0.47,
  // productive constraints
  MAX_NUMBER_OF_TRAJECTORIES: 10,
  MAX_NUMBER_OF_TRAJECTORIES_STATS: 20,
  RAPID_FIRE_DELTA_TIME: 0.2,
  //group size
  GROUP_SIZE_DEFAULT: 10,
  GROUP_SIZE_INCREMENT: 1,
  GROUP_SIZE_MAX: 20,
  CANNON_HEIGHT_RANGE: new Range(0, 15),
  // in m
  CANNON_ANGLE_RANGE: new Range(-90, 90),
  // in degrees
  LAUNCH_VELOCITY_RANGE: new Range(0, 30),
  // m/s
  SPEED_STANDARD_DEVIATION_RANGE: new Range(0, 5),
  // m/s
  ANGLE_STANDARD_DEVIATION_RANGE: new Range(0, 10),
  // in degrees

  PROJECTILE_MASS_RANGE: new Range(0.01, 5000),
  // in original, highest is 1000
  PROJECTILE_DIAMETER_RANGE: new Range(0.01, 3),
  // in original, smallest is 0.043
  PROJECTILE_DRAG_COEFFICIENT_RANGE: new Range(0.04, 1.2),
  // teardrop to almost hemisphere shape

  ALTITUDE_RANGE: new Range(0, 5000),
  // meters, max is arbitrary but in upper stratosphere
  GRAVITY_RANGE: new Range(1, 20),
  // in m/s/s

  // projectile and trajectory
  AIR_RESISTANCE_ON_PATH_COLOR: 'rgb( 252, 40, 252 )',
  AIR_RESISTANCE_OFF_PATH_COLOR: 'blue',
  VELOCITY_ARROW_FILL: PhetColorScheme.VELOCITY,
  ACCELERATION_ARROW_FILL: PhetColorScheme.ACCELERATION,
  PATH_WIDTH: 2,
  // data point collection along the trajectory
  SLOW_MOTION_FACTOR: 0.33,
  // time slowdown factor

  // This number should be as low as possible for smooth slow motion,
  // but decreasing it causes more data points to be created - see https://github.com/phetsims/projectile-motion/issues/124
  TIME_PER_DATA_POINT: 12,
  // milliseconds

  TIME_PER_MINOR_DOT: 100,
  // milliseconds
  TIME_PER_MAJOR_DOT: 1000,
  // milliseconds
  SMALL_DOT_RADIUS: SMALL_DOT_RADIUS,
  // in global view coordinates
  LARGE_DOT_RADIUS: SMALL_DOT_RADIUS * 2,
  // in global view coordinates

  // icons
  VELOCITY_VECTOR_ICON: new ArrowNode(0, 0, 20, 0, {
    fill: 'rgb( 50, 255, 50 )',
    lineWidth: 0.5,
    tailWidth: 4,
    headWidth: 10,
    headHeight: 8
  }),
  ACCELERATION_VECTOR_ICON: new ArrowNode(0, 0, 20, 0, {
    fill: 'rgb( 255, 255, 50 )',
    lineWidth: 0.5,
    tailWidth: 4,
    headWidth: 10,
    headHeight: 8
  }),
  FORCE_VECTOR_ICON: new ArrowNode(0, 0, 20, 0, {
    fill: 'black',
    stroke: null,
    tailWidth: 4,
    headWidth: 10,
    headHeight: 8
  }),
  AIR_RESISTANCE_ICON: new Node({
    centerY: 0,
    left: 0,
    children: [AIR_RESISTANCE_ICON_PATH, new Circle(2.2, {
      x: AIR_RESISTANCE_ICON_PATH.right - 0.8,
      y: AIR_RESISTANCE_ICON_PATH.bottom - 0.2,
      fill: 'black'
    }), new Circle(2.2, {
      x: AIR_RESISTANCE_ICON_PATH.left + 0.8,
      y: AIR_RESISTANCE_ICON_PATH.bottom - 0.2,
      fill: 'black'
    }), new Circle(2.2, {
      x: AIR_RESISTANCE_ICON_PATH.centerX,
      y: AIR_RESISTANCE_ICON_PATH.top + 1.5,
      fill: 'black'
    })]
  }),
  // target
  TARGET_X_DEFAULT: 15,
  // meters
  TARGET_X_STATS: 20,
  // meters
  TARGET_WIDTH: 3,
  // meters
  TARGET_HEIGHT: 0.6,
  // meters

  // control panels
  RIGHTSIDE_PANEL_OPTIONS: {
    align: 'center',
    controlsVerticalSpace: 9,
    minWidth: 260,
    xMargin: 10,
    xSpacing: 10,
    yMargin: 10,
    fill: 'rgb( 255, 238, 218 )',
    lineWidth: 1,
    stroke: 'black',
    textDisplayWidth: TEXT_DISPLAY_WIDTH,
    numberDisplayMaxWidth: TEXT_DISPLAY_WIDTH * 1.2,
    textDisplayHeight: 24,
    readoutXMargin: 7,
    sliderLabelSpacing: 6
  },
  INITIAL_VALUE_PANEL_OPTIONS: {
    fill: 'rgb( 235, 235, 235 )',
    lineWidth: 1,
    stroke: 'black',
    xMargin: 10,
    yMargin: 5
  },
  PANEL_TITLE_OPTIONS: {
    font: new PhetFont({
      size: 14,
      weight: 'bold'
    }),
    align: 'center'
  },
  PANEL_LABEL_OPTIONS: {
    font: new PhetFont(14)
  },
  PANEL_BOLD_LABEL_OPTIONS: {
    font: new PhetFont({
      size: 14,
      weight: 'bold'
    })
  },
  NUMBER_DISPLAY_OPTIONS: {
    textOptions: {
      font: new PhetFont(14)
    },
    backgroundFill: 'white',
    backgroundStroke: 'lightGray',
    align: 'right',
    yMargin: 4
  },
  LABEL_TEXT_OPTIONS: {
    font: new PhetFont(14)
  },
  // Light gray, used as the 'disabled' color
  LIGHT_GRAY: 'rgb( 220, 220, 220 )',
  SEPARATOR_COLOR: 'gray',
  // horizontal dividing line in the control panels

  YELLOW_BUTTON_OPTIONS: {
    font: new PhetFont(14),
    baseColor: PhetColorScheme.BUTTON_YELLOW,
    cornerRadius: 4,
    xMargin: 12,
    yMargin: 7
  },
  // zooming
  MIN_ZOOM: 0.25,
  MAX_ZOOM: 2,
  DEFAULT_ZOOM: 1,
  // normal/slow/play/pause/step
  PLAY_CONTROLS_HORIZONTAL_INSET: 10,
  PLAY_CONTROLS_TEXT_MAX_WIDTH: 80
};
projectileMotion.register('ProjectileMotionConstants', ProjectileMotionConstants);
export default ProjectileMotionConstants;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSYW5nZSIsIlZlY3RvcjIiLCJTaGFwZSIsIkFycm93Tm9kZSIsIlBoZXRDb2xvclNjaGVtZSIsIlBoZXRGb250IiwiQ2lyY2xlIiwiTm9kZSIsIlBhdGgiLCJwcm9qZWN0aWxlTW90aW9uIiwiQUlSX1JFU0lTVEFOQ0VfSUNPTl9QQVRIIiwiYXJjIiwiTWF0aCIsIlBJIiwibGluZVdpZHRoIiwic3Ryb2tlIiwiU01BTExfRE9UX1JBRElVUyIsIlRFWFRfRElTUExBWV9XSURUSCIsIlByb2plY3RpbGVNb3Rpb25Db25zdGFudHMiLCJWSUVXX09SSUdJTiIsIkNBTk5PTkJBTExfTUFTUyIsIkNBTk5PTkJBTExfRElBTUVURVIiLCJDQU5OT05CQUxMX0RSQUdfQ09FRkZJQ0lFTlQiLCJNQVhfTlVNQkVSX09GX1RSQUpFQ1RPUklFUyIsIk1BWF9OVU1CRVJfT0ZfVFJBSkVDVE9SSUVTX1NUQVRTIiwiUkFQSURfRklSRV9ERUxUQV9USU1FIiwiR1JPVVBfU0laRV9ERUZBVUxUIiwiR1JPVVBfU0laRV9JTkNSRU1FTlQiLCJHUk9VUF9TSVpFX01BWCIsIkNBTk5PTl9IRUlHSFRfUkFOR0UiLCJDQU5OT05fQU5HTEVfUkFOR0UiLCJMQVVOQ0hfVkVMT0NJVFlfUkFOR0UiLCJTUEVFRF9TVEFOREFSRF9ERVZJQVRJT05fUkFOR0UiLCJBTkdMRV9TVEFOREFSRF9ERVZJQVRJT05fUkFOR0UiLCJQUk9KRUNUSUxFX01BU1NfUkFOR0UiLCJQUk9KRUNUSUxFX0RJQU1FVEVSX1JBTkdFIiwiUFJPSkVDVElMRV9EUkFHX0NPRUZGSUNJRU5UX1JBTkdFIiwiQUxUSVRVREVfUkFOR0UiLCJHUkFWSVRZX1JBTkdFIiwiQUlSX1JFU0lTVEFOQ0VfT05fUEFUSF9DT0xPUiIsIkFJUl9SRVNJU1RBTkNFX09GRl9QQVRIX0NPTE9SIiwiVkVMT0NJVFlfQVJST1dfRklMTCIsIlZFTE9DSVRZIiwiQUNDRUxFUkFUSU9OX0FSUk9XX0ZJTEwiLCJBQ0NFTEVSQVRJT04iLCJQQVRIX1dJRFRIIiwiU0xPV19NT1RJT05fRkFDVE9SIiwiVElNRV9QRVJfREFUQV9QT0lOVCIsIlRJTUVfUEVSX01JTk9SX0RPVCIsIlRJTUVfUEVSX01BSk9SX0RPVCIsIkxBUkdFX0RPVF9SQURJVVMiLCJWRUxPQ0lUWV9WRUNUT1JfSUNPTiIsImZpbGwiLCJ0YWlsV2lkdGgiLCJoZWFkV2lkdGgiLCJoZWFkSGVpZ2h0IiwiQUNDRUxFUkFUSU9OX1ZFQ1RPUl9JQ09OIiwiRk9SQ0VfVkVDVE9SX0lDT04iLCJBSVJfUkVTSVNUQU5DRV9JQ09OIiwiY2VudGVyWSIsImxlZnQiLCJjaGlsZHJlbiIsIngiLCJyaWdodCIsInkiLCJib3R0b20iLCJjZW50ZXJYIiwidG9wIiwiVEFSR0VUX1hfREVGQVVMVCIsIlRBUkdFVF9YX1NUQVRTIiwiVEFSR0VUX1dJRFRIIiwiVEFSR0VUX0hFSUdIVCIsIlJJR0hUU0lERV9QQU5FTF9PUFRJT05TIiwiYWxpZ24iLCJjb250cm9sc1ZlcnRpY2FsU3BhY2UiLCJtaW5XaWR0aCIsInhNYXJnaW4iLCJ4U3BhY2luZyIsInlNYXJnaW4iLCJ0ZXh0RGlzcGxheVdpZHRoIiwibnVtYmVyRGlzcGxheU1heFdpZHRoIiwidGV4dERpc3BsYXlIZWlnaHQiLCJyZWFkb3V0WE1hcmdpbiIsInNsaWRlckxhYmVsU3BhY2luZyIsIklOSVRJQUxfVkFMVUVfUEFORUxfT1BUSU9OUyIsIlBBTkVMX1RJVExFX09QVElPTlMiLCJmb250Iiwic2l6ZSIsIndlaWdodCIsIlBBTkVMX0xBQkVMX09QVElPTlMiLCJQQU5FTF9CT0xEX0xBQkVMX09QVElPTlMiLCJOVU1CRVJfRElTUExBWV9PUFRJT05TIiwidGV4dE9wdGlvbnMiLCJiYWNrZ3JvdW5kRmlsbCIsImJhY2tncm91bmRTdHJva2UiLCJMQUJFTF9URVhUX09QVElPTlMiLCJMSUdIVF9HUkFZIiwiU0VQQVJBVE9SX0NPTE9SIiwiWUVMTE9XX0JVVFRPTl9PUFRJT05TIiwiYmFzZUNvbG9yIiwiQlVUVE9OX1lFTExPVyIsImNvcm5lclJhZGl1cyIsIk1JTl9aT09NIiwiTUFYX1pPT00iLCJERUZBVUxUX1pPT00iLCJQTEFZX0NPTlRST0xTX0hPUklaT05UQUxfSU5TRVQiLCJQTEFZX0NPTlRST0xTX1RFWFRfTUFYX1dJRFRIIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJQcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbnN0YW50cyBmb3IgdGhlIGVudGlyZSBzaW0sIGdsb2JhbC5cclxuICpcclxuICogQGF1dGhvciBBbmRyZWEgTGluIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEFycm93Tm9kZSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvQXJyb3dOb2RlLmpzJztcclxuaW1wb3J0IHsgTnVtYmVyRGlzcGxheU9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTnVtYmVyRGlzcGxheS5qcyc7XHJcbmltcG9ydCBQaGV0Q29sb3JTY2hlbWUgZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRDb2xvclNjaGVtZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgeyBDaXJjbGUsIE5vZGUsIFBhdGgsIFRleHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgUGFuZWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IHByb2plY3RpbGVNb3Rpb24gZnJvbSAnLi4vcHJvamVjdGlsZU1vdGlvbi5qcyc7XHJcblxyXG5leHBvcnQgdHlwZSBQcm9qZWN0aWxlTW90aW9uVUlPcHRpb25zID0ge1xyXG4gIGNvbnRyb2xzVmVydGljYWxTcGFjZT86IG51bWJlcjtcclxuICB4U3BhY2luZz86IG51bWJlcjtcclxuICB0ZXh0RGlzcGxheVdpZHRoPzogbnVtYmVyO1xyXG4gIG51bWJlckRpc3BsYXlNYXhXaWR0aD86IG51bWJlcjtcclxuICB0ZXh0RGlzcGxheUhlaWdodD86IG51bWJlcjtcclxuICByZWFkb3V0WE1hcmdpbj86IG51bWJlcjtcclxuICBzbGlkZXJMYWJlbFNwYWNpbmc/OiBudW1iZXI7XHJcbn0gJiBQYW5lbE9wdGlvbnM7XHJcblxyXG4vLyBjb25zdGFudHNcclxuY29uc3QgQUlSX1JFU0lTVEFOQ0VfSUNPTl9QQVRIID0gbmV3IFBhdGgoIFNoYXBlLmFyYyggMCwgMCwgMTAsIE1hdGguUEkgKiAxLjE1LCBNYXRoLlBJICogMS44NSApLCB7XHJcbiAgICBsaW5lV2lkdGg6IDMsIHN0cm9rZTogJ3JnYiggMjUyLCA0MCwgMjUyICknXHJcbiAgfVxyXG4pO1xyXG5jb25zdCBTTUFMTF9ET1RfUkFESVVTID0gMS42NTsgLy8gaW4gZ2xvYmFsIHZpZXcgY29vcmRpbmF0ZXMsIGVtcGlyaWNhbGx5IGRldGVybWluZWRcclxuXHJcbmNvbnN0IFRFWFRfRElTUExBWV9XSURUSCA9IDUwO1xyXG5cclxuY29uc3QgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cyA9IHtcclxuICAvLyBzY3JlZW4gdmlldyBsYXlvdXRcclxuICBWSUVXX09SSUdJTjogbmV3IFZlY3RvcjIoIDcwLCA1MTAgKSxcclxuXHJcbiAgLy8gY2Fubm9uYmFsbCBkZWZhdWx0c1xyXG4gIENBTk5PTkJBTExfTUFTUzogMTcuNixcclxuICBDQU5OT05CQUxMX0RJQU1FVEVSOiAwLjE4LFxyXG4gIENBTk5PTkJBTExfRFJBR19DT0VGRklDSUVOVDogMC40NyxcclxuXHJcbiAgLy8gcHJvZHVjdGl2ZSBjb25zdHJhaW50c1xyXG4gIE1BWF9OVU1CRVJfT0ZfVFJBSkVDVE9SSUVTOiAxMCxcclxuICBNQVhfTlVNQkVSX09GX1RSQUpFQ1RPUklFU19TVEFUUzogMjAsXHJcbiAgUkFQSURfRklSRV9ERUxUQV9USU1FOiAwLjIsXHJcblxyXG4gIC8vZ3JvdXAgc2l6ZVxyXG4gIEdST1VQX1NJWkVfREVGQVVMVDogMTAsXHJcbiAgR1JPVVBfU0laRV9JTkNSRU1FTlQ6IDEsXHJcbiAgR1JPVVBfU0laRV9NQVg6IDIwLFxyXG5cclxuICBDQU5OT05fSEVJR0hUX1JBTkdFOiBuZXcgUmFuZ2UoIDAsIDE1ICksIC8vIGluIG1cclxuICBDQU5OT05fQU5HTEVfUkFOR0U6IG5ldyBSYW5nZSggLTkwLCA5MCApLCAvLyBpbiBkZWdyZWVzXHJcbiAgTEFVTkNIX1ZFTE9DSVRZX1JBTkdFOiBuZXcgUmFuZ2UoIDAsIDMwICksIC8vIG0vc1xyXG4gIFNQRUVEX1NUQU5EQVJEX0RFVklBVElPTl9SQU5HRTogbmV3IFJhbmdlKCAwLCA1ICksIC8vIG0vc1xyXG4gIEFOR0xFX1NUQU5EQVJEX0RFVklBVElPTl9SQU5HRTogbmV3IFJhbmdlKCAwLCAxMCApLCAvLyBpbiBkZWdyZWVzXHJcblxyXG4gIFBST0pFQ1RJTEVfTUFTU19SQU5HRTogbmV3IFJhbmdlKCAwLjAxLCA1MDAwICksIC8vIGluIG9yaWdpbmFsLCBoaWdoZXN0IGlzIDEwMDBcclxuICBQUk9KRUNUSUxFX0RJQU1FVEVSX1JBTkdFOiBuZXcgUmFuZ2UoIDAuMDEsIDMgKSwgLy8gaW4gb3JpZ2luYWwsIHNtYWxsZXN0IGlzIDAuMDQzXHJcbiAgUFJPSkVDVElMRV9EUkFHX0NPRUZGSUNJRU5UX1JBTkdFOiBuZXcgUmFuZ2UoIDAuMDQsIDEuMiApLCAvLyB0ZWFyZHJvcCB0byBhbG1vc3QgaGVtaXNwaGVyZSBzaGFwZVxyXG5cclxuICBBTFRJVFVERV9SQU5HRTogbmV3IFJhbmdlKCAwLCA1MDAwICksIC8vIG1ldGVycywgbWF4IGlzIGFyYml0cmFyeSBidXQgaW4gdXBwZXIgc3RyYXRvc3BoZXJlXHJcbiAgR1JBVklUWV9SQU5HRTogbmV3IFJhbmdlKCAxLCAyMCApLCAvLyBpbiBtL3Mvc1xyXG5cclxuICAvLyBwcm9qZWN0aWxlIGFuZCB0cmFqZWN0b3J5XHJcbiAgQUlSX1JFU0lTVEFOQ0VfT05fUEFUSF9DT0xPUjogJ3JnYiggMjUyLCA0MCwgMjUyICknLFxyXG4gIEFJUl9SRVNJU1RBTkNFX09GRl9QQVRIX0NPTE9SOiAnYmx1ZScsXHJcbiAgVkVMT0NJVFlfQVJST1dfRklMTDogUGhldENvbG9yU2NoZW1lLlZFTE9DSVRZLFxyXG4gIEFDQ0VMRVJBVElPTl9BUlJPV19GSUxMOiBQaGV0Q29sb3JTY2hlbWUuQUNDRUxFUkFUSU9OLFxyXG4gIFBBVEhfV0lEVEg6IDIsXHJcblxyXG4gIC8vIGRhdGEgcG9pbnQgY29sbGVjdGlvbiBhbG9uZyB0aGUgdHJhamVjdG9yeVxyXG4gIFNMT1dfTU9USU9OX0ZBQ1RPUjogMC4zMywgLy8gdGltZSBzbG93ZG93biBmYWN0b3JcclxuXHJcbiAgLy8gVGhpcyBudW1iZXIgc2hvdWxkIGJlIGFzIGxvdyBhcyBwb3NzaWJsZSBmb3Igc21vb3RoIHNsb3cgbW90aW9uLFxyXG4gIC8vIGJ1dCBkZWNyZWFzaW5nIGl0IGNhdXNlcyBtb3JlIGRhdGEgcG9pbnRzIHRvIGJlIGNyZWF0ZWQgLSBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3Byb2plY3RpbGUtbW90aW9uL2lzc3Vlcy8xMjRcclxuICBUSU1FX1BFUl9EQVRBX1BPSU5UOiAxMiwgLy8gbWlsbGlzZWNvbmRzXHJcblxyXG4gIFRJTUVfUEVSX01JTk9SX0RPVDogMTAwLCAvLyBtaWxsaXNlY29uZHNcclxuICBUSU1FX1BFUl9NQUpPUl9ET1Q6IDEwMDAsIC8vIG1pbGxpc2Vjb25kc1xyXG4gIFNNQUxMX0RPVF9SQURJVVM6IFNNQUxMX0RPVF9SQURJVVMsIC8vIGluIGdsb2JhbCB2aWV3IGNvb3JkaW5hdGVzXHJcbiAgTEFSR0VfRE9UX1JBRElVUzogU01BTExfRE9UX1JBRElVUyAqIDIsIC8vIGluIGdsb2JhbCB2aWV3IGNvb3JkaW5hdGVzXHJcblxyXG4gIC8vIGljb25zXHJcbiAgVkVMT0NJVFlfVkVDVE9SX0lDT046IG5ldyBBcnJvd05vZGUoIDAsIDAsIDIwLCAwLCB7XHJcbiAgICBmaWxsOiAncmdiKCA1MCwgMjU1LCA1MCApJyxcclxuICAgIGxpbmVXaWR0aDogMC41LFxyXG4gICAgdGFpbFdpZHRoOiA0LFxyXG4gICAgaGVhZFdpZHRoOiAxMCxcclxuICAgIGhlYWRIZWlnaHQ6IDhcclxuICB9ICksXHJcbiAgQUNDRUxFUkFUSU9OX1ZFQ1RPUl9JQ09OOiBuZXcgQXJyb3dOb2RlKCAwLCAwLCAyMCwgMCwge1xyXG4gICAgZmlsbDogJ3JnYiggMjU1LCAyNTUsIDUwICknLFxyXG4gICAgbGluZVdpZHRoOiAwLjUsXHJcbiAgICB0YWlsV2lkdGg6IDQsXHJcbiAgICBoZWFkV2lkdGg6IDEwLFxyXG4gICAgaGVhZEhlaWdodDogOFxyXG4gIH0gKSxcclxuICBGT1JDRV9WRUNUT1JfSUNPTjogbmV3IEFycm93Tm9kZSggMCwgMCwgMjAsIDAsIHtcclxuICAgIGZpbGw6ICdibGFjaycsXHJcbiAgICBzdHJva2U6IG51bGwsXHJcbiAgICB0YWlsV2lkdGg6IDQsXHJcbiAgICBoZWFkV2lkdGg6IDEwLFxyXG4gICAgaGVhZEhlaWdodDogOFxyXG4gIH0gKSxcclxuICBBSVJfUkVTSVNUQU5DRV9JQ09OOiBuZXcgTm9kZSgge1xyXG4gICAgY2VudGVyWTogMCwgbGVmdDogMCwgY2hpbGRyZW46IFtcclxuICAgICAgQUlSX1JFU0lTVEFOQ0VfSUNPTl9QQVRILFxyXG4gICAgICBuZXcgQ2lyY2xlKCAyLjIsIHtcclxuICAgICAgICB4OiBBSVJfUkVTSVNUQU5DRV9JQ09OX1BBVEgucmlnaHQgLSAwLjgsXHJcbiAgICAgICAgeTogQUlSX1JFU0lTVEFOQ0VfSUNPTl9QQVRILmJvdHRvbSAtIDAuMixcclxuICAgICAgICBmaWxsOiAnYmxhY2snXHJcbiAgICAgIH0gKSxcclxuICAgICAgbmV3IENpcmNsZSggMi4yLCB7XHJcbiAgICAgICAgeDogQUlSX1JFU0lTVEFOQ0VfSUNPTl9QQVRILmxlZnQgKyAwLjgsXHJcbiAgICAgICAgeTogQUlSX1JFU0lTVEFOQ0VfSUNPTl9QQVRILmJvdHRvbSAtIDAuMixcclxuICAgICAgICBmaWxsOiAnYmxhY2snXHJcbiAgICAgIH0gKSxcclxuICAgICAgbmV3IENpcmNsZSggMi4yLCB7XHJcbiAgICAgICAgeDogQUlSX1JFU0lTVEFOQ0VfSUNPTl9QQVRILmNlbnRlclgsXHJcbiAgICAgICAgeTogQUlSX1JFU0lTVEFOQ0VfSUNPTl9QQVRILnRvcCArIDEuNSxcclxuICAgICAgICBmaWxsOiAnYmxhY2snXHJcbiAgICAgIH0gKVxyXG4gICAgXVxyXG4gIH0gKSxcclxuXHJcbiAgLy8gdGFyZ2V0XHJcbiAgVEFSR0VUX1hfREVGQVVMVDogMTUsIC8vIG1ldGVyc1xyXG4gIFRBUkdFVF9YX1NUQVRTOiAyMCwgLy8gbWV0ZXJzXHJcbiAgVEFSR0VUX1dJRFRIOiAzLCAvLyBtZXRlcnNcclxuICBUQVJHRVRfSEVJR0hUOiAwLjYsIC8vIG1ldGVyc1xyXG5cclxuICAvLyBjb250cm9sIHBhbmVsc1xyXG4gIFJJR0hUU0lERV9QQU5FTF9PUFRJT05TOiB7XHJcbiAgICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgICBjb250cm9sc1ZlcnRpY2FsU3BhY2U6IDksXHJcbiAgICBtaW5XaWR0aDogMjYwLFxyXG4gICAgeE1hcmdpbjogMTAsXHJcbiAgICB4U3BhY2luZzogMTAsXHJcbiAgICB5TWFyZ2luOiAxMCxcclxuICAgIGZpbGw6ICdyZ2IoIDI1NSwgMjM4LCAyMTggKScsXHJcbiAgICBsaW5lV2lkdGg6IDEsXHJcbiAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICB0ZXh0RGlzcGxheVdpZHRoOiBURVhUX0RJU1BMQVlfV0lEVEgsXHJcbiAgICBudW1iZXJEaXNwbGF5TWF4V2lkdGg6IFRFWFRfRElTUExBWV9XSURUSCAqIDEuMixcclxuICAgIHRleHREaXNwbGF5SGVpZ2h0OiAyNCxcclxuICAgIHJlYWRvdXRYTWFyZ2luOiA3LFxyXG4gICAgc2xpZGVyTGFiZWxTcGFjaW5nOiA2XHJcbiAgfSBzYXRpc2ZpZXMgUHJvamVjdGlsZU1vdGlvblVJT3B0aW9ucyxcclxuXHJcbiAgSU5JVElBTF9WQUxVRV9QQU5FTF9PUFRJT05TOiB7XHJcbiAgICBmaWxsOiAncmdiKCAyMzUsIDIzNSwgMjM1ICknLFxyXG4gICAgbGluZVdpZHRoOiAxLFxyXG4gICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgeE1hcmdpbjogMTAsXHJcbiAgICB5TWFyZ2luOiA1XHJcbiAgfSBzYXRpc2ZpZXMgUGFuZWxPcHRpb25zLFxyXG5cclxuICBQQU5FTF9USVRMRV9PUFRJT05TOiB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggeyBzaXplOiAxNCwgd2VpZ2h0OiAnYm9sZCcgfSApLCBhbGlnbjogJ2NlbnRlcicgfSxcclxuICBQQU5FTF9MQUJFTF9PUFRJT05TOiB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMTQgKSB9IHNhdGlzZmllcyBUZXh0T3B0aW9ucyxcclxuICBQQU5FTF9CT0xEX0xBQkVMX09QVElPTlM6IHsgZm9udDogbmV3IFBoZXRGb250KCB7IHNpemU6IDE0LCB3ZWlnaHQ6ICdib2xkJyB9ICkgfSxcclxuXHJcbiAgTlVNQkVSX0RJU1BMQVlfT1BUSU9OUzoge1xyXG4gICAgdGV4dE9wdGlvbnM6IHsgZm9udDogbmV3IFBoZXRGb250KCAxNCApIH0sXHJcbiAgICBiYWNrZ3JvdW5kRmlsbDogJ3doaXRlJyxcclxuICAgIGJhY2tncm91bmRTdHJva2U6ICdsaWdodEdyYXknLFxyXG4gICAgYWxpZ246ICdyaWdodCcsXHJcbiAgICB5TWFyZ2luOiA0XHJcbiAgfSBzYXRpc2ZpZXMgTnVtYmVyRGlzcGxheU9wdGlvbnMsXHJcblxyXG4gIExBQkVMX1RFWFRfT1BUSU9OUzogeyBmb250OiBuZXcgUGhldEZvbnQoIDE0ICkgfSxcclxuXHJcbiAgLy8gTGlnaHQgZ3JheSwgdXNlZCBhcyB0aGUgJ2Rpc2FibGVkJyBjb2xvclxyXG4gIExJR0hUX0dSQVk6ICdyZ2IoIDIyMCwgMjIwLCAyMjAgKScsXHJcbiAgU0VQQVJBVE9SX0NPTE9SOiAnZ3JheScsIC8vIGhvcml6b250YWwgZGl2aWRpbmcgbGluZSBpbiB0aGUgY29udHJvbCBwYW5lbHNcclxuXHJcbiAgWUVMTE9XX0JVVFRPTl9PUFRJT05TOiB7XHJcbiAgICBmb250OiBuZXcgUGhldEZvbnQoIDE0ICksXHJcbiAgICBiYXNlQ29sb3I6IFBoZXRDb2xvclNjaGVtZS5CVVRUT05fWUVMTE9XLFxyXG4gICAgY29ybmVyUmFkaXVzOiA0LFxyXG4gICAgeE1hcmdpbjogMTIsXHJcbiAgICB5TWFyZ2luOiA3XHJcbiAgfSxcclxuXHJcbiAgLy8gem9vbWluZ1xyXG4gIE1JTl9aT09NOiAwLjI1LFxyXG4gIE1BWF9aT09NOiAyLFxyXG4gIERFRkFVTFRfWk9PTTogMSxcclxuXHJcbiAgLy8gbm9ybWFsL3Nsb3cvcGxheS9wYXVzZS9zdGVwXHJcbiAgUExBWV9DT05UUk9MU19IT1JJWk9OVEFMX0lOU0VUOiAxMCxcclxuICBQTEFZX0NPTlRST0xTX1RFWFRfTUFYX1dJRFRIOiA4MFxyXG59O1xyXG5cclxucHJvamVjdGlsZU1vdGlvbi5yZWdpc3RlcihcclxuICAnUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cycsXHJcbiAgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50c1xyXG4pO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50czsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDBCQUEwQjtBQUM1QyxPQUFPQyxPQUFPLE1BQU0sNEJBQTRCO0FBQ2hELFNBQVND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