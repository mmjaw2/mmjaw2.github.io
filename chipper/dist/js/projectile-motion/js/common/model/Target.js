// Copyright 2016-2024, University of Colorado Boulder

/**
 * The model for scoring algorithm.
 * Landed projectiles give their x position to this model.
 *
 * @author Andrea Lin (PhET Interactive Simulations)
 * @author Matt Blackman (PhET Interactive Simulations)
 */

import Emitter from '../../../../axon/js/Emitter.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Range from '../../../../dot/js/Range.js';
import NumberIO from '../../../../tandem/js/types/NumberIO.js';
import projectileMotion from '../../projectileMotion.js';
import ProjectileMotionConstants from '../ProjectileMotionConstants.js';
class Target {
  /**
   * @param initialXPosition - initial x position of the target
   * @param tandem
   */
  constructor(initialXPosition, tandem) {
    const targetXPropertyTandem = tandem.createTandem('positionProperty');
    this.positionProperty = new NumberProperty(initialXPosition, {
      tandem: targetXPropertyTandem,
      phetioDocumentation: 'The x position of the target, in model coordinates',
      phetioFeatured: true,
      units: 'm',
      range: new Range(-100, 100),
      rangePropertyOptions: {
        tandem: targetXPropertyTandem.createTandem('rangeProperty'),
        phetioDocumentation: 'The range for x position of the target. This changes based on the current zoom of the view. ' + 'The initial value is only temporary, and is overwritten in the view on startup.'
      }
    });
    this.scoredEmitter = new Emitter({
      tandem: tandem.createTandem('scoredEmitter'),
      phetioDocumentation: 'Emits when a projectile hits the target, indicating a "score." More stars are given ' + 'depending on how close to the bullseye the projectile lands.',
      parameters: [{
        name: 'numberOfStars',
        phetioType: NumberIO
      }]
    });
  }

  /**
   * Reset these properties
   */
  reset() {
    this.positionProperty.reset();
  }

  /**
   * @param projectileX - x coordinate of projectile in model coordinates
   */
  checkIfHitTarget(projectileX) {
    const distance = Math.abs(projectileX - this.positionProperty.get());
    const hasHitTarget = distance <= ProjectileMotionConstants.TARGET_WIDTH / 2;
    if (distance <= ProjectileMotionConstants.TARGET_WIDTH / 6) {
      // center circle
      this.scoredEmitter.emit(3);
    } else if (distance <= ProjectileMotionConstants.TARGET_WIDTH / 3) {
      // middle circle
      this.scoredEmitter.emit(2);
    } else if (distance <= ProjectileMotionConstants.TARGET_WIDTH / 2) {
      // just on the target
      this.scoredEmitter.emit(1);
    }
    return hasHitTarget;
  }
}
projectileMotion.register('Target', Target);
export default Target;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwiTnVtYmVyUHJvcGVydHkiLCJSYW5nZSIsIk51bWJlcklPIiwicHJvamVjdGlsZU1vdGlvbiIsIlByb2plY3RpbGVNb3Rpb25Db25zdGFudHMiLCJUYXJnZXQiLCJjb25zdHJ1Y3RvciIsImluaXRpYWxYUG9zaXRpb24iLCJ0YW5kZW0iLCJ0YXJnZXRYUHJvcGVydHlUYW5kZW0iLCJjcmVhdGVUYW5kZW0iLCJwb3NpdGlvblByb3BlcnR5IiwicGhldGlvRG9jdW1lbnRhdGlvbiIsInBoZXRpb0ZlYXR1cmVkIiwidW5pdHMiLCJyYW5nZSIsInJhbmdlUHJvcGVydHlPcHRpb25zIiwic2NvcmVkRW1pdHRlciIsInBhcmFtZXRlcnMiLCJuYW1lIiwicGhldGlvVHlwZSIsInJlc2V0IiwiY2hlY2tJZkhpdFRhcmdldCIsInByb2plY3RpbGVYIiwiZGlzdGFuY2UiLCJNYXRoIiwiYWJzIiwiZ2V0IiwiaGFzSGl0VGFyZ2V0IiwiVEFSR0VUX1dJRFRIIiwiZW1pdCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVGFyZ2V0LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE2LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSBtb2RlbCBmb3Igc2NvcmluZyBhbGdvcml0aG0uXHJcbiAqIExhbmRlZCBwcm9qZWN0aWxlcyBnaXZlIHRoZWlyIHggcG9zaXRpb24gdG8gdGhpcyBtb2RlbC5cclxuICpcclxuICogQGF1dGhvciBBbmRyZWEgTGluIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIE1hdHQgQmxhY2ttYW4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVtaXR0ZXIgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbWl0dGVyLmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IE51bWJlcklPIGZyb20gJy4uLy4uLy4uLy4uL3RhbmRlbS9qcy90eXBlcy9OdW1iZXJJTy5qcyc7XHJcbmltcG9ydCBwcm9qZWN0aWxlTW90aW9uIGZyb20gJy4uLy4uL3Byb2plY3RpbGVNb3Rpb24uanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cyBmcm9tICcuLi9Qcm9qZWN0aWxlTW90aW9uQ29uc3RhbnRzLmpzJztcclxuXHJcbmNsYXNzIFRhcmdldCB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBwb3NpdGlvblByb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eTtcclxuICBwdWJsaWMgcmVhZG9ubHkgc2NvcmVkRW1pdHRlcjogRW1pdHRlcjxbIG51bWJlciBdPjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGluaXRpYWxYUG9zaXRpb24gLSBpbml0aWFsIHggcG9zaXRpb24gb2YgdGhlIHRhcmdldFxyXG4gICAqIEBwYXJhbSB0YW5kZW1cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGluaXRpYWxYUG9zaXRpb246IG51bWJlciwgdGFuZGVtOiBUYW5kZW0gKSB7XHJcblxyXG4gICAgY29uc3QgdGFyZ2V0WFByb3BlcnR5VGFuZGVtID0gdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Bvc2l0aW9uUHJvcGVydHknICk7XHJcblxyXG4gICAgdGhpcy5wb3NpdGlvblByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCBpbml0aWFsWFBvc2l0aW9uLCB7XHJcbiAgICAgIHRhbmRlbTogdGFyZ2V0WFByb3BlcnR5VGFuZGVtLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVGhlIHggcG9zaXRpb24gb2YgdGhlIHRhcmdldCwgaW4gbW9kZWwgY29vcmRpbmF0ZXMnLFxyXG4gICAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZSxcclxuICAgICAgdW5pdHM6ICdtJyxcclxuICAgICAgcmFuZ2U6IG5ldyBSYW5nZSggLTEwMCwgMTAwICksXHJcbiAgICAgIHJhbmdlUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgdGFuZGVtOiB0YXJnZXRYUHJvcGVydHlUYW5kZW0uY3JlYXRlVGFuZGVtKCAncmFuZ2VQcm9wZXJ0eScgKSxcclxuICAgICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVGhlIHJhbmdlIGZvciB4IHBvc2l0aW9uIG9mIHRoZSB0YXJnZXQuIFRoaXMgY2hhbmdlcyBiYXNlZCBvbiB0aGUgY3VycmVudCB6b29tIG9mIHRoZSB2aWV3LiAnICtcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAnVGhlIGluaXRpYWwgdmFsdWUgaXMgb25seSB0ZW1wb3JhcnksIGFuZCBpcyBvdmVyd3JpdHRlbiBpbiB0aGUgdmlldyBvbiBzdGFydHVwLidcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuc2NvcmVkRW1pdHRlciA9IG5ldyBFbWl0dGVyKCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Njb3JlZEVtaXR0ZXInICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdFbWl0cyB3aGVuIGEgcHJvamVjdGlsZSBoaXRzIHRoZSB0YXJnZXQsIGluZGljYXRpbmcgYSBcInNjb3JlLlwiIE1vcmUgc3RhcnMgYXJlIGdpdmVuICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAnZGVwZW5kaW5nIG9uIGhvdyBjbG9zZSB0byB0aGUgYnVsbHNleWUgdGhlIHByb2plY3RpbGUgbGFuZHMuJyxcclxuICAgICAgcGFyYW1ldGVyczogWyB7XHJcbiAgICAgICAgbmFtZTogJ251bWJlck9mU3RhcnMnLFxyXG4gICAgICAgIHBoZXRpb1R5cGU6IE51bWJlcklPXHJcbiAgICAgIH0gXVxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcblxyXG4gIC8qKlxyXG4gICAqIFJlc2V0IHRoZXNlIHByb3BlcnRpZXNcclxuICAgKi9cclxuICBwdWJsaWMgcmVzZXQoKTogdm9pZCB7XHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBwcm9qZWN0aWxlWCAtIHggY29vcmRpbmF0ZSBvZiBwcm9qZWN0aWxlIGluIG1vZGVsIGNvb3JkaW5hdGVzXHJcbiAgICovXHJcbiAgcHVibGljIGNoZWNrSWZIaXRUYXJnZXQoIHByb2plY3RpbGVYOiBudW1iZXIgKTogYm9vbGVhbiB7XHJcbiAgICBjb25zdCBkaXN0YW5jZSA9IE1hdGguYWJzKCBwcm9qZWN0aWxlWCAtIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5nZXQoKSApO1xyXG4gICAgY29uc3QgaGFzSGl0VGFyZ2V0ID0gZGlzdGFuY2UgPD0gUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cy5UQVJHRVRfV0lEVEggLyAyO1xyXG5cclxuICAgIGlmICggZGlzdGFuY2UgPD0gUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cy5UQVJHRVRfV0lEVEggLyA2ICkgeyAvLyBjZW50ZXIgY2lyY2xlXHJcbiAgICAgIHRoaXMuc2NvcmVkRW1pdHRlci5lbWl0KCAzICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggZGlzdGFuY2UgPD0gUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cy5UQVJHRVRfV0lEVEggLyAzICkgeyAvLyBtaWRkbGUgY2lyY2xlXHJcbiAgICAgIHRoaXMuc2NvcmVkRW1pdHRlci5lbWl0KCAyICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggZGlzdGFuY2UgPD0gUHJvamVjdGlsZU1vdGlvbkNvbnN0YW50cy5UQVJHRVRfV0lEVEggLyAyICkgeyAvLyBqdXN0IG9uIHRoZSB0YXJnZXRcclxuICAgICAgdGhpcy5zY29yZWRFbWl0dGVyLmVtaXQoIDEgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBoYXNIaXRUYXJnZXQ7XHJcbiAgfVxyXG59XHJcblxyXG5wcm9qZWN0aWxlTW90aW9uLnJlZ2lzdGVyKCAnVGFyZ2V0JywgVGFyZ2V0ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBUYXJnZXQ7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sZ0NBQWdDO0FBQ3BELE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUUvQyxPQUFPQyxRQUFRLE1BQU0seUNBQXlDO0FBQzlELE9BQU9DLGdCQUFnQixNQUFNLDJCQUEyQjtBQUN4RCxPQUFPQyx5QkFBeUIsTUFBTSxpQ0FBaUM7QUFFdkUsTUFBTUMsTUFBTSxDQUFDO0VBS1g7QUFDRjtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsZ0JBQXdCLEVBQUVDLE1BQWMsRUFBRztJQUU3RCxNQUFNQyxxQkFBcUIsR0FBR0QsTUFBTSxDQUFDRSxZQUFZLENBQUUsa0JBQW1CLENBQUM7SUFFdkUsSUFBSSxDQUFDQyxnQkFBZ0IsR0FBRyxJQUFJWCxjQUFjLENBQUVPLGdCQUFnQixFQUFFO01BQzVEQyxNQUFNLEVBQUVDLHFCQUFxQjtNQUM3QkcsbUJBQW1CLEVBQUUsb0RBQW9EO01BQ3pFQyxjQUFjLEVBQUUsSUFBSTtNQUNwQkMsS0FBSyxFQUFFLEdBQUc7TUFDVkMsS0FBSyxFQUFFLElBQUlkLEtBQUssQ0FBRSxDQUFDLEdBQUcsRUFBRSxHQUFJLENBQUM7TUFDN0JlLG9CQUFvQixFQUFFO1FBQ3BCUixNQUFNLEVBQUVDLHFCQUFxQixDQUFDQyxZQUFZLENBQUUsZUFBZ0IsQ0FBQztRQUM3REUsbUJBQW1CLEVBQUUsOEZBQThGLEdBQzlGO01BQ3ZCO0lBQ0YsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDSyxhQUFhLEdBQUcsSUFBSWxCLE9BQU8sQ0FBRTtNQUNoQ1MsTUFBTSxFQUFFQSxNQUFNLENBQUNFLFlBQVksQ0FBRSxlQUFnQixDQUFDO01BQzlDRSxtQkFBbUIsRUFBRSxzRkFBc0YsR0FDdEYsOERBQThEO01BQ25GTSxVQUFVLEVBQUUsQ0FBRTtRQUNaQyxJQUFJLEVBQUUsZUFBZTtRQUNyQkMsVUFBVSxFQUFFbEI7TUFDZCxDQUFDO0lBQ0gsQ0FBRSxDQUFDO0VBQ0w7O0VBR0E7QUFDRjtBQUNBO0VBQ1NtQixLQUFLQSxDQUFBLEVBQVM7SUFDbkIsSUFBSSxDQUFDVixnQkFBZ0IsQ0FBQ1UsS0FBSyxDQUFDLENBQUM7RUFDL0I7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLGdCQUFnQkEsQ0FBRUMsV0FBbUIsRUFBWTtJQUN0RCxNQUFNQyxRQUFRLEdBQUdDLElBQUksQ0FBQ0MsR0FBRyxDQUFFSCxXQUFXLEdBQUcsSUFBSSxDQUFDWixnQkFBZ0IsQ0FBQ2dCLEdBQUcsQ0FBQyxDQUFFLENBQUM7SUFDdEUsTUFBTUMsWUFBWSxHQUFHSixRQUFRLElBQUlwQix5QkFBeUIsQ0FBQ3lCLFlBQVksR0FBRyxDQUFDO0lBRTNFLElBQUtMLFFBQVEsSUFBSXBCLHlCQUF5QixDQUFDeUIsWUFBWSxHQUFHLENBQUMsRUFBRztNQUFFO01BQzlELElBQUksQ0FBQ1osYUFBYSxDQUFDYSxJQUFJLENBQUUsQ0FBRSxDQUFDO0lBQzlCLENBQUMsTUFDSSxJQUFLTixRQUFRLElBQUlwQix5QkFBeUIsQ0FBQ3lCLFlBQVksR0FBRyxDQUFDLEVBQUc7TUFBRTtNQUNuRSxJQUFJLENBQUNaLGFBQWEsQ0FBQ2EsSUFBSSxDQUFFLENBQUUsQ0FBQztJQUM5QixDQUFDLE1BQ0ksSUFBS04sUUFBUSxJQUFJcEIseUJBQXlCLENBQUN5QixZQUFZLEdBQUcsQ0FBQyxFQUFHO01BQUU7TUFDbkUsSUFBSSxDQUFDWixhQUFhLENBQUNhLElBQUksQ0FBRSxDQUFFLENBQUM7SUFDOUI7SUFDQSxPQUFPRixZQUFZO0VBQ3JCO0FBQ0Y7QUFFQXpCLGdCQUFnQixDQUFDNEIsUUFBUSxDQUFFLFFBQVEsRUFBRTFCLE1BQU8sQ0FBQztBQUU3QyxlQUFlQSxNQUFNIiwiaWdub3JlTGlzdCI6W119