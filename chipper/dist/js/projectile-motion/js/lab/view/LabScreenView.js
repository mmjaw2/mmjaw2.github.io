// Copyright 2016-2024, University of Colorado Boulder

/**
 * ScreenView for the 'Lab' screen
 * @author Andrea Lin (PhET Interactive Simulations)
 */

import merge from '../../../../phet-core/js/merge.js';
import { Node } from '../../../../scenery/js/imports.js';
import ProjectileMotionScreenView from '../../common/view/ProjectileMotionScreenView.js';
import ProjectileMotionViewProperties from '../../common/view/ProjectileMotionViewProperties.js';
import projectileMotion from '../../projectileMotion.js';
import InitialValuesPanel from './InitialValuesPanel.js';
import KeypadLayer from './KeypadLayer.js';
import LabProjectileControlPanel from './LabProjectileControlPanel.js';

// constants
const X_MARGIN = 10;
class LabScreenView extends ProjectileMotionScreenView {
  /**
   * @param {LabModel} model
   * @param {Object} [options]
   */
  constructor(model, options) {
    options = merge({
      cannonNodeOptions: {
        preciseCannonDelta: true
      }
    }, options);

    // contains Properties about vector visibility, used in super class
    const visibilityProperties = new ProjectileMotionViewProperties();

    // acts as listParent for the projectile dropdown box
    const comboBoxListParent = new Node();
    const keypadLayer = new KeypadLayer({
      tandem: options.tandem.createTandem('keypadLayer'),
      phetioDocumentation: 'The container for the keypad, responsible displaying and laying out the keypad'
    });
    const projectileControlPanel = new LabProjectileControlPanel(comboBoxListParent, keypadLayer, model, {
      tandem: options.tandem.createTandem('projectileControlPanel')
    });
    super(model, new InitialValuesPanel(model.cannonHeightProperty, model.cannonAngleProperty, model.initialSpeedProperty, {
      tandem: options.tandem.createTandem('initialValuesPanel')
    }), projectileControlPanel, visibilityProperties, options);

    // insert dropdown right on top of the rightside panels
    this.insertChild(this.indexOfChild(this.bottomRightPanel) + 1, comboBoxListParent);

    // add the keypad layer on top of everything
    this.addChild(keypadLayer);

    // @private, for layout
    this.labProjectilePanel = projectileControlPanel;
    this.keypadLayer = keypadLayer;
  }

  /**
   * Layout according to screenview and layout the combo box
   * @public (joist internal)
   * @override
   *
   * @param {Bounds2} viewBounds
   */
  layout(viewBounds) {
    this.labProjectilePanel.hideComboBoxList();
    super.layout(viewBounds);
    this.keypadLayer.positionKeypad(this.setKeypadPosition.bind(this));
  }

  /**
   * Lays out keypad
   * @private
   *
   * @param {KeypadPanel} keypad
   */
  setKeypadPosition(keypadPanel) {
    keypadPanel.right = this.topRightPanel.left - X_MARGIN;
    keypadPanel.top = this.bottomRightPanel.top;
  }
}
projectileMotion.register('LabScreenView', LabScreenView);
export default LabScreenView;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk5vZGUiLCJQcm9qZWN0aWxlTW90aW9uU2NyZWVuVmlldyIsIlByb2plY3RpbGVNb3Rpb25WaWV3UHJvcGVydGllcyIsInByb2plY3RpbGVNb3Rpb24iLCJJbml0aWFsVmFsdWVzUGFuZWwiLCJLZXlwYWRMYXllciIsIkxhYlByb2plY3RpbGVDb250cm9sUGFuZWwiLCJYX01BUkdJTiIsIkxhYlNjcmVlblZpZXciLCJjb25zdHJ1Y3RvciIsIm1vZGVsIiwib3B0aW9ucyIsImNhbm5vbk5vZGVPcHRpb25zIiwicHJlY2lzZUNhbm5vbkRlbHRhIiwidmlzaWJpbGl0eVByb3BlcnRpZXMiLCJjb21ib0JveExpc3RQYXJlbnQiLCJrZXlwYWRMYXllciIsInRhbmRlbSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJwcm9qZWN0aWxlQ29udHJvbFBhbmVsIiwiY2Fubm9uSGVpZ2h0UHJvcGVydHkiLCJjYW5ub25BbmdsZVByb3BlcnR5IiwiaW5pdGlhbFNwZWVkUHJvcGVydHkiLCJpbnNlcnRDaGlsZCIsImluZGV4T2ZDaGlsZCIsImJvdHRvbVJpZ2h0UGFuZWwiLCJhZGRDaGlsZCIsImxhYlByb2plY3RpbGVQYW5lbCIsImxheW91dCIsInZpZXdCb3VuZHMiLCJoaWRlQ29tYm9Cb3hMaXN0IiwicG9zaXRpb25LZXlwYWQiLCJzZXRLZXlwYWRQb3NpdGlvbiIsImJpbmQiLCJrZXlwYWRQYW5lbCIsInJpZ2h0IiwidG9wUmlnaHRQYW5lbCIsImxlZnQiLCJ0b3AiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxhYlNjcmVlblZpZXcuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2NyZWVuVmlldyBmb3IgdGhlICdMYWInIHNjcmVlblxyXG4gKiBAYXV0aG9yIEFuZHJlYSBMaW4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG1lcmdlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZXJnZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvblNjcmVlblZpZXcgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvUHJvamVjdGlsZU1vdGlvblNjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgUHJvamVjdGlsZU1vdGlvblZpZXdQcm9wZXJ0aWVzIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1Byb2plY3RpbGVNb3Rpb25WaWV3UHJvcGVydGllcy5qcyc7XHJcbmltcG9ydCBwcm9qZWN0aWxlTW90aW9uIGZyb20gJy4uLy4uL3Byb2plY3RpbGVNb3Rpb24uanMnO1xyXG5pbXBvcnQgSW5pdGlhbFZhbHVlc1BhbmVsIGZyb20gJy4vSW5pdGlhbFZhbHVlc1BhbmVsLmpzJztcclxuaW1wb3J0IEtleXBhZExheWVyIGZyb20gJy4vS2V5cGFkTGF5ZXIuanMnO1xyXG5pbXBvcnQgTGFiUHJvamVjdGlsZUNvbnRyb2xQYW5lbCBmcm9tICcuL0xhYlByb2plY3RpbGVDb250cm9sUGFuZWwuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IFhfTUFSR0lOID0gMTA7XHJcblxyXG5jbGFzcyBMYWJTY3JlZW5WaWV3IGV4dGVuZHMgUHJvamVjdGlsZU1vdGlvblNjcmVlblZpZXcge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0ge0xhYk1vZGVsfSBtb2RlbFxyXG4gICAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICAgKi9cclxuICBjb25zdHJ1Y3RvciggbW9kZWwsIG9wdGlvbnMgKSB7XHJcblxyXG4gICAgb3B0aW9ucyA9IG1lcmdlKCB7IGNhbm5vbk5vZGVPcHRpb25zOiB7IHByZWNpc2VDYW5ub25EZWx0YTogdHJ1ZSB9IH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBjb250YWlucyBQcm9wZXJ0aWVzIGFib3V0IHZlY3RvciB2aXNpYmlsaXR5LCB1c2VkIGluIHN1cGVyIGNsYXNzXHJcbiAgICBjb25zdCB2aXNpYmlsaXR5UHJvcGVydGllcyA9IG5ldyBQcm9qZWN0aWxlTW90aW9uVmlld1Byb3BlcnRpZXMoKTtcclxuXHJcbiAgICAvLyBhY3RzIGFzIGxpc3RQYXJlbnQgZm9yIHRoZSBwcm9qZWN0aWxlIGRyb3Bkb3duIGJveFxyXG4gICAgY29uc3QgY29tYm9Cb3hMaXN0UGFyZW50ID0gbmV3IE5vZGUoKTtcclxuICAgIGNvbnN0IGtleXBhZExheWVyID0gbmV3IEtleXBhZExheWVyKCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAna2V5cGFkTGF5ZXInICksXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdUaGUgY29udGFpbmVyIGZvciB0aGUga2V5cGFkLCByZXNwb25zaWJsZSBkaXNwbGF5aW5nIGFuZCBsYXlpbmcgb3V0IHRoZSBrZXlwYWQnXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgcHJvamVjdGlsZUNvbnRyb2xQYW5lbCA9IG5ldyBMYWJQcm9qZWN0aWxlQ29udHJvbFBhbmVsKFxyXG4gICAgICBjb21ib0JveExpc3RQYXJlbnQsXHJcbiAgICAgIGtleXBhZExheWVyLFxyXG4gICAgICBtb2RlbCxcclxuICAgICAgeyB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ3Byb2plY3RpbGVDb250cm9sUGFuZWwnICkgfVxyXG4gICAgKTtcclxuXHJcbiAgICBzdXBlcihcclxuICAgICAgbW9kZWwsXHJcbiAgICAgIG5ldyBJbml0aWFsVmFsdWVzUGFuZWwoXHJcbiAgICAgICAgbW9kZWwuY2Fubm9uSGVpZ2h0UHJvcGVydHksXHJcbiAgICAgICAgbW9kZWwuY2Fubm9uQW5nbGVQcm9wZXJ0eSxcclxuICAgICAgICBtb2RlbC5pbml0aWFsU3BlZWRQcm9wZXJ0eSxcclxuICAgICAgICB7IHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnaW5pdGlhbFZhbHVlc1BhbmVsJyApIH1cclxuICAgICAgKSxcclxuICAgICAgcHJvamVjdGlsZUNvbnRyb2xQYW5lbCxcclxuICAgICAgdmlzaWJpbGl0eVByb3BlcnRpZXMsXHJcbiAgICAgIG9wdGlvbnNcclxuICAgICk7XHJcblxyXG4gICAgLy8gaW5zZXJ0IGRyb3Bkb3duIHJpZ2h0IG9uIHRvcCBvZiB0aGUgcmlnaHRzaWRlIHBhbmVsc1xyXG4gICAgdGhpcy5pbnNlcnRDaGlsZCggdGhpcy5pbmRleE9mQ2hpbGQoIHRoaXMuYm90dG9tUmlnaHRQYW5lbCApICsgMSwgY29tYm9Cb3hMaXN0UGFyZW50ICk7XHJcblxyXG4gICAgLy8gYWRkIHRoZSBrZXlwYWQgbGF5ZXIgb24gdG9wIG9mIGV2ZXJ5dGhpbmdcclxuICAgIHRoaXMuYWRkQ2hpbGQoIGtleXBhZExheWVyICk7XHJcblxyXG4gICAgLy8gQHByaXZhdGUsIGZvciBsYXlvdXRcclxuICAgIHRoaXMubGFiUHJvamVjdGlsZVBhbmVsID0gcHJvamVjdGlsZUNvbnRyb2xQYW5lbDtcclxuICAgIHRoaXMua2V5cGFkTGF5ZXIgPSBrZXlwYWRMYXllcjtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExheW91dCBhY2NvcmRpbmcgdG8gc2NyZWVudmlldyBhbmQgbGF5b3V0IHRoZSBjb21ibyBib3hcclxuICAgKiBAcHVibGljIChqb2lzdCBpbnRlcm5hbClcclxuICAgKiBAb3ZlcnJpZGVcclxuICAgKlxyXG4gICAqIEBwYXJhbSB7Qm91bmRzMn0gdmlld0JvdW5kc1xyXG4gICAqL1xyXG4gIGxheW91dCggdmlld0JvdW5kcyApIHtcclxuICAgIHRoaXMubGFiUHJvamVjdGlsZVBhbmVsLmhpZGVDb21ib0JveExpc3QoKTtcclxuICAgIHN1cGVyLmxheW91dCggdmlld0JvdW5kcyApO1xyXG4gICAgdGhpcy5rZXlwYWRMYXllci5wb3NpdGlvbktleXBhZCggdGhpcy5zZXRLZXlwYWRQb3NpdGlvbi5iaW5kKCB0aGlzICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIExheXMgb3V0IGtleXBhZFxyXG4gICAqIEBwcml2YXRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge0tleXBhZFBhbmVsfSBrZXlwYWRcclxuICAgKi9cclxuICBzZXRLZXlwYWRQb3NpdGlvbigga2V5cGFkUGFuZWwgKSB7XHJcbiAgICBrZXlwYWRQYW5lbC5yaWdodCA9IHRoaXMudG9wUmlnaHRQYW5lbC5sZWZ0IC0gWF9NQVJHSU47XHJcbiAgICBrZXlwYWRQYW5lbC50b3AgPSB0aGlzLmJvdHRvbVJpZ2h0UGFuZWwudG9wO1xyXG4gIH1cclxufVxyXG5cclxucHJvamVjdGlsZU1vdGlvbi5yZWdpc3RlciggJ0xhYlNjcmVlblZpZXcnLCBMYWJTY3JlZW5WaWV3ICk7XHJcbmV4cG9ydCBkZWZhdWx0IExhYlNjcmVlblZpZXc7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sbUNBQW1DO0FBQ3JELFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFDeEQsT0FBT0MsMEJBQTBCLE1BQU0saURBQWlEO0FBQ3hGLE9BQU9DLDhCQUE4QixNQUFNLHFEQUFxRDtBQUNoRyxPQUFPQyxnQkFBZ0IsTUFBTSwyQkFBMkI7QUFDeEQsT0FBT0Msa0JBQWtCLE1BQU0seUJBQXlCO0FBQ3hELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MseUJBQXlCLE1BQU0sZ0NBQWdDOztBQUV0RTtBQUNBLE1BQU1DLFFBQVEsR0FBRyxFQUFFO0FBRW5CLE1BQU1DLGFBQWEsU0FBU1AsMEJBQTBCLENBQUM7RUFFckQ7QUFDRjtBQUNBO0FBQ0E7RUFDRVEsV0FBV0EsQ0FBRUMsS0FBSyxFQUFFQyxPQUFPLEVBQUc7SUFFNUJBLE9BQU8sR0FBR1osS0FBSyxDQUFFO01BQUVhLGlCQUFpQixFQUFFO1FBQUVDLGtCQUFrQixFQUFFO01BQUs7SUFBRSxDQUFDLEVBQUVGLE9BQVEsQ0FBQzs7SUFFL0U7SUFDQSxNQUFNRyxvQkFBb0IsR0FBRyxJQUFJWiw4QkFBOEIsQ0FBQyxDQUFDOztJQUVqRTtJQUNBLE1BQU1hLGtCQUFrQixHQUFHLElBQUlmLElBQUksQ0FBQyxDQUFDO0lBQ3JDLE1BQU1nQixXQUFXLEdBQUcsSUFBSVgsV0FBVyxDQUFFO01BQ25DWSxNQUFNLEVBQUVOLE9BQU8sQ0FBQ00sTUFBTSxDQUFDQyxZQUFZLENBQUUsYUFBYyxDQUFDO01BQ3BEQyxtQkFBbUIsRUFBRTtJQUN2QixDQUFFLENBQUM7SUFFSCxNQUFNQyxzQkFBc0IsR0FBRyxJQUFJZCx5QkFBeUIsQ0FDMURTLGtCQUFrQixFQUNsQkMsV0FBVyxFQUNYTixLQUFLLEVBQ0w7TUFBRU8sTUFBTSxFQUFFTixPQUFPLENBQUNNLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLHdCQUF5QjtJQUFFLENBQ3BFLENBQUM7SUFFRCxLQUFLLENBQ0hSLEtBQUssRUFDTCxJQUFJTixrQkFBa0IsQ0FDcEJNLEtBQUssQ0FBQ1csb0JBQW9CLEVBQzFCWCxLQUFLLENBQUNZLG1CQUFtQixFQUN6QlosS0FBSyxDQUFDYSxvQkFBb0IsRUFDMUI7TUFBRU4sTUFBTSxFQUFFTixPQUFPLENBQUNNLE1BQU0sQ0FBQ0MsWUFBWSxDQUFFLG9CQUFxQjtJQUFFLENBQ2hFLENBQUMsRUFDREUsc0JBQXNCLEVBQ3RCTixvQkFBb0IsRUFDcEJILE9BQ0YsQ0FBQzs7SUFFRDtJQUNBLElBQUksQ0FBQ2EsV0FBVyxDQUFFLElBQUksQ0FBQ0MsWUFBWSxDQUFFLElBQUksQ0FBQ0MsZ0JBQWlCLENBQUMsR0FBRyxDQUFDLEVBQUVYLGtCQUFtQixDQUFDOztJQUV0RjtJQUNBLElBQUksQ0FBQ1ksUUFBUSxDQUFFWCxXQUFZLENBQUM7O0lBRTVCO0lBQ0EsSUFBSSxDQUFDWSxrQkFBa0IsR0FBR1Isc0JBQXNCO0lBQ2hELElBQUksQ0FBQ0osV0FBVyxHQUFHQSxXQUFXO0VBQ2hDOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0VhLE1BQU1BLENBQUVDLFVBQVUsRUFBRztJQUNuQixJQUFJLENBQUNGLGtCQUFrQixDQUFDRyxnQkFBZ0IsQ0FBQyxDQUFDO0lBQzFDLEtBQUssQ0FBQ0YsTUFBTSxDQUFFQyxVQUFXLENBQUM7SUFDMUIsSUFBSSxDQUFDZCxXQUFXLENBQUNnQixjQUFjLENBQUUsSUFBSSxDQUFDQyxpQkFBaUIsQ0FBQ0MsSUFBSSxDQUFFLElBQUssQ0FBRSxDQUFDO0VBQ3hFOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNFRCxpQkFBaUJBLENBQUVFLFdBQVcsRUFBRztJQUMvQkEsV0FBVyxDQUFDQyxLQUFLLEdBQUcsSUFBSSxDQUFDQyxhQUFhLENBQUNDLElBQUksR0FBRy9CLFFBQVE7SUFDdEQ0QixXQUFXLENBQUNJLEdBQUcsR0FBRyxJQUFJLENBQUNiLGdCQUFnQixDQUFDYSxHQUFHO0VBQzdDO0FBQ0Y7QUFFQXBDLGdCQUFnQixDQUFDcUMsUUFBUSxDQUFFLGVBQWUsRUFBRWhDLGFBQWMsQ0FBQztBQUMzRCxlQUFlQSxhQUFhIiwiaWdub3JlTGlzdCI6W119