// Copyright 2015-2024, University of Colorado Boulder

/**
 * RectangularMomentaryButton is a rectangular momentary button that toggles a Property between 2 values.
 * The 'off value' is the value when the button is not pressed.
 * The 'on value' is the value when the button is pressed.
 *
 * TODO: Not supported with alternative input, see https://github.com/phetsims/scenery/issues/1117
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import InstanceRegistry from '../../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import MomentaryButtonInteractionStateProperty from './MomentaryButtonInteractionStateProperty.js';
import MomentaryButtonModel from './MomentaryButtonModel.js';
import RectangularButton from './RectangularButton.js';
export default class RectangularMomentaryButton extends RectangularButton {
  /**
   * @param property
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param [providedOptions?]
   */
  constructor(property, valueOff, valueOn, providedOptions) {
    const options = optionize()({
      tandem: Tandem.REQUIRED
    }, providedOptions);

    // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
    const buttonModel = new MomentaryButtonModel(valueOff, valueOn, property, options);
    super(buttonModel, new MomentaryButtonInteractionStateProperty(buttonModel), options);
    this.disposeRectangularMomentaryButton = () => {
      buttonModel.dispose();
    };

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet?.chipper?.queryParameters?.binder && InstanceRegistry.registerDataURL('sun', 'RectangularMomentaryButton', this);
  }
  dispose() {
    this.disposeRectangularMomentaryButton();
    super.dispose();
  }
}
sun.register('RectangularMomentaryButton', RectangularMomentaryButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiVGFuZGVtIiwic3VuIiwiTW9tZW50YXJ5QnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5IiwiTW9tZW50YXJ5QnV0dG9uTW9kZWwiLCJSZWN0YW5ndWxhckJ1dHRvbiIsIlJlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uIiwiY29uc3RydWN0b3IiLCJwcm9wZXJ0eSIsInZhbHVlT2ZmIiwidmFsdWVPbiIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ0YW5kZW0iLCJSRVFVSVJFRCIsImJ1dHRvbk1vZGVsIiwiZGlzcG9zZVJlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uIiwiZGlzcG9zZSIsImFzc2VydCIsInBoZXQiLCJjaGlwcGVyIiwicXVlcnlQYXJhbWV0ZXJzIiwiYmluZGVyIiwicmVnaXN0ZXJEYXRhVVJMIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbiBpcyBhIHJlY3Rhbmd1bGFyIG1vbWVudGFyeSBidXR0b24gdGhhdCB0b2dnbGVzIGEgUHJvcGVydHkgYmV0d2VlbiAyIHZhbHVlcy5cclxuICogVGhlICdvZmYgdmFsdWUnIGlzIHRoZSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgbm90IHByZXNzZWQuXHJcbiAqIFRoZSAnb24gdmFsdWUnIGlzIHRoZSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgcHJlc3NlZC5cclxuICpcclxuICogVE9ETzogTm90IHN1cHBvcnRlZCB3aXRoIGFsdGVybmF0aXZlIGlucHV0LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3NjZW5lcnkvaXNzdWVzLzExMTdcclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvVFByb3BlcnR5LmpzJztcclxuaW1wb3J0IEluc3RhbmNlUmVnaXN0cnkgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL2RvY3VtZW50YXRpb24vSW5zdGFuY2VSZWdpc3RyeS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgc3VuIGZyb20gJy4uL3N1bi5qcyc7XHJcbmltcG9ydCBNb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkgZnJvbSAnLi9Nb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTW9tZW50YXJ5QnV0dG9uTW9kZWwgZnJvbSAnLi9Nb21lbnRhcnlCdXR0b25Nb2RlbC5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhckJ1dHRvbiwgeyBSZWN0YW5ndWxhckJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuL1JlY3Rhbmd1bGFyQnV0dG9uLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IHR5cGUgUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b25PcHRpb25zID0gU2VsZk9wdGlvbnMgJiBSZWN0YW5ndWxhckJ1dHRvbk9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbjxUPiBleHRlbmRzIFJlY3Rhbmd1bGFyQnV0dG9uIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b246ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBwcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSB2YWx1ZU9mZiAtIHZhbHVlIHdoZW4gdGhlIGJ1dHRvbiBpcyBpbiB0aGUgb2ZmIHN0YXRlXHJcbiAgICogQHBhcmFtIHZhbHVlT24gLSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgaW4gdGhlIG9uIHN0YXRlXHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnM/XVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvcGVydHk6IFRQcm9wZXJ0eTxUPiwgdmFsdWVPZmY6IFQsIHZhbHVlT246IFQsIHByb3ZpZGVkT3B0aW9ucz86IFJlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFJlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uT3B0aW9ucywgU2VsZk9wdGlvbnMsIFJlY3Rhbmd1bGFyQnV0dG9uT3B0aW9ucz4oKSgge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gTm90ZSBpdCBzaGFyZXMgYSB0YW5kZW0gd2l0aCB0aGlzLCBzbyB0aGUgZW1pdHRlciB3aWxsIGJlIGluc3RydW1lbnRlZCBhcyBhIGNoaWxkIG9mIHRoZSBidXR0b25cclxuICAgIGNvbnN0IGJ1dHRvbk1vZGVsID0gbmV3IE1vbWVudGFyeUJ1dHRvbk1vZGVsKCB2YWx1ZU9mZiwgdmFsdWVPbiwgcHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggYnV0dG9uTW9kZWwsIG5ldyBNb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkoIGJ1dHRvbk1vZGVsICksIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbiA9ICgpID0+IHtcclxuICAgICAgYnV0dG9uTW9kZWwuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuXHJcbiAgICAvLyBzdXBwb3J0IGZvciBiaW5kZXIgZG9jdW1lbnRhdGlvbiwgc3RyaXBwZWQgb3V0IGluIGJ1aWxkcyBhbmQgb25seSBydW5zIHdoZW4gP2JpbmRlciBpcyBzcGVjaWZpZWRcclxuICAgIGFzc2VydCAmJiBwaGV0Py5jaGlwcGVyPy5xdWVyeVBhcmFtZXRlcnM/LmJpbmRlciAmJiBJbnN0YW5jZVJlZ2lzdHJ5LnJlZ2lzdGVyRGF0YVVSTCggJ3N1bicsICdSZWN0YW5ndWxhck1vbWVudGFyeUJ1dHRvbicsIHRoaXMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b24oKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnN1bi5yZWdpc3RlciggJ1JlY3Rhbmd1bGFyTW9tZW50YXJ5QnV0dG9uJywgUmVjdGFuZ3VsYXJNb21lbnRhcnlCdXR0b24gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxnQkFBZ0IsTUFBTSx5REFBeUQ7QUFDdEYsT0FBT0MsU0FBUyxNQUE0QixvQ0FBb0M7QUFDaEYsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxHQUFHLE1BQU0sV0FBVztBQUMzQixPQUFPQyx1Q0FBdUMsTUFBTSw4Q0FBOEM7QUFDbEcsT0FBT0Msb0JBQW9CLE1BQU0sMkJBQTJCO0FBQzVELE9BQU9DLGlCQUFpQixNQUFvQyx3QkFBd0I7QUFNcEYsZUFBZSxNQUFNQywwQkFBMEIsU0FBWUQsaUJBQWlCLENBQUM7RUFJM0U7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NFLFdBQVdBLENBQUVDLFFBQXNCLEVBQUVDLFFBQVcsRUFBRUMsT0FBVSxFQUFFQyxlQUFtRCxFQUFHO0lBRXpILE1BQU1DLE9BQU8sR0FBR1osU0FBUyxDQUEyRSxDQUFDLENBQUU7TUFDckdhLE1BQU0sRUFBRVosTUFBTSxDQUFDYTtJQUNqQixDQUFDLEVBQUVILGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTUksV0FBVyxHQUFHLElBQUlYLG9CQUFvQixDQUFFSyxRQUFRLEVBQUVDLE9BQU8sRUFBRUYsUUFBUSxFQUFFSSxPQUFRLENBQUM7SUFFcEYsS0FBSyxDQUFFRyxXQUFXLEVBQUUsSUFBSVosdUNBQXVDLENBQUVZLFdBQVksQ0FBQyxFQUFFSCxPQUFRLENBQUM7SUFFekYsSUFBSSxDQUFDSSxpQ0FBaUMsR0FBRyxNQUFNO01BQzdDRCxXQUFXLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7O0lBRUQ7SUFDQUMsTUFBTSxJQUFJQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsZUFBZSxFQUFFQyxNQUFNLElBQUl2QixnQkFBZ0IsQ0FBQ3dCLGVBQWUsQ0FBRSxLQUFLLEVBQUUsNEJBQTRCLEVBQUUsSUFBSyxDQUFDO0VBQ25JO0VBRWdCTixPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDRCxpQ0FBaUMsQ0FBQyxDQUFDO0lBQ3hDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBZixHQUFHLENBQUNzQixRQUFRLENBQUUsNEJBQTRCLEVBQUVsQiwwQkFBMkIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==