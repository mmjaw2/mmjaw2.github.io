// Copyright 2014-2024, University of Colorado Boulder

/**
 * RectangularToggleButton is a rectangular toggle button that toggles the value of a Property between 2 values.
 * It has the same look for both values.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import toggleOffSoundPlayer from '../../../tambo/js/shared-sound-players/toggleOffSoundPlayer.js';
import toggleOnSoundPlayer from '../../../tambo/js/shared-sound-players/toggleOnSoundPlayer.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import RectangularButton from './RectangularButton.js';
import ToggleButtonInteractionStateProperty from './ToggleButtonInteractionStateProperty.js';
import ToggleButtonModel from './ToggleButtonModel.js';
export default class RectangularToggleButton extends RectangularButton {
  /**
   * @param property - axon Property that can be either valueOff or valueOn
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param [providedOptions]
   */
  constructor(property, valueOff, valueOn, providedOptions) {
    assert && assert(property.valueComparisonStrategy === 'reference', 'RectangularToggleButton depends on "===" equality for value comparison');
    const options = optionize()({
      // {TSoundPlayer} - sounds to be played on toggle transitions
      valueOffSoundPlayer: toggleOffSoundPlayer,
      valueOnSoundPlayer: toggleOnSoundPlayer,
      // phet-io support
      tandem: Tandem.REQUIRED,
      phetioFeatured: true
    }, providedOptions);

    // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
    const toggleButtonModel = new ToggleButtonModel(valueOff, valueOn, property, options);
    const toggleButtonInteractionStateProperty = new ToggleButtonInteractionStateProperty(toggleButtonModel);
    super(toggleButtonModel, toggleButtonInteractionStateProperty, options);
    this.addLinkedElement(property, {
      tandemName: 'property'
    });

    // sound generation
    const playSounds = () => {
      if (property.value === valueOff) {
        options.valueOffSoundPlayer.play();
      } else if (property.value === valueOn) {
        options.valueOnSoundPlayer.play();
      }
    };
    this.buttonModel.produceSoundEmitter.addListener(playSounds);
    this.disposeRectangularToggleButton = () => {
      this.buttonModel.produceSoundEmitter.removeListener(playSounds);
      toggleButtonModel.dispose();
    };
  }
  dispose() {
    this.disposeRectangularToggleButton();
    super.dispose();
  }
}
sun.register('RectangularToggleButton', RectangularToggleButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJ0b2dnbGVPZmZTb3VuZFBsYXllciIsInRvZ2dsZU9uU291bmRQbGF5ZXIiLCJUYW5kZW0iLCJzdW4iLCJSZWN0YW5ndWxhckJ1dHRvbiIsIlRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsIlRvZ2dsZUJ1dHRvbk1vZGVsIiwiUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b24iLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwidmFsdWVPZmYiLCJ2YWx1ZU9uIiwicHJvdmlkZWRPcHRpb25zIiwiYXNzZXJ0IiwidmFsdWVDb21wYXJpc29uU3RyYXRlZ3kiLCJvcHRpb25zIiwidmFsdWVPZmZTb3VuZFBsYXllciIsInZhbHVlT25Tb3VuZFBsYXllciIsInRhbmRlbSIsIlJFUVVJUkVEIiwicGhldGlvRmVhdHVyZWQiLCJ0b2dnbGVCdXR0b25Nb2RlbCIsInRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsImFkZExpbmtlZEVsZW1lbnQiLCJ0YW5kZW1OYW1lIiwicGxheVNvdW5kcyIsInZhbHVlIiwicGxheSIsImJ1dHRvbk1vZGVsIiwicHJvZHVjZVNvdW5kRW1pdHRlciIsImFkZExpc3RlbmVyIiwiZGlzcG9zZVJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uIiwicmVtb3ZlTGlzdGVuZXIiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbiBpcyBhIHJlY3Rhbmd1bGFyIHRvZ2dsZSBidXR0b24gdGhhdCB0b2dnbGVzIHRoZSB2YWx1ZSBvZiBhIFByb3BlcnR5IGJldHdlZW4gMiB2YWx1ZXMuXHJcbiAqIEl0IGhhcyB0aGUgc2FtZSBsb29rIGZvciBib3RoIHZhbHVlcy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgdG9nZ2xlT2ZmU291bmRQbGF5ZXIgZnJvbSAnLi4vLi4vLi4vdGFtYm8vanMvc2hhcmVkLXNvdW5kLXBsYXllcnMvdG9nZ2xlT2ZmU291bmRQbGF5ZXIuanMnO1xyXG5pbXBvcnQgdG9nZ2xlT25Tb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9zaGFyZWQtc291bmQtcGxheWVycy90b2dnbGVPblNvdW5kUGxheWVyLmpzJztcclxuaW1wb3J0IFRTb3VuZFBsYXllciBmcm9tICcuLi8uLi8uLi90YW1iby9qcy9UU291bmRQbGF5ZXIuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgc3VuIGZyb20gJy4uL3N1bi5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhckJ1dHRvbiwgeyBSZWN0YW5ndWxhckJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuL1JlY3Rhbmd1bGFyQnV0dG9uLmpzJztcclxuaW1wb3J0IFRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSBmcm9tICcuL1RvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUb2dnbGVCdXR0b25Nb2RlbCBmcm9tICcuL1RvZ2dsZUJ1dHRvbk1vZGVsLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gc291bmRzIHRvIGJlIHBsYXllZCBvbiB0b2dnbGUgdHJhbnNpdGlvbnNcclxuICB2YWx1ZU9mZlNvdW5kUGxheWVyPzogVFNvdW5kUGxheWVyO1xyXG4gIHZhbHVlT25Tb3VuZFBsYXllcj86IFRTb3VuZFBsYXllcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUmVjdGFuZ3VsYXJCdXR0b25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmVjdGFuZ3VsYXJUb2dnbGVCdXR0b248VD4gZXh0ZW5kcyBSZWN0YW5ndWxhckJ1dHRvbiB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBheG9uIFByb3BlcnR5IHRoYXQgY2FuIGJlIGVpdGhlciB2YWx1ZU9mZiBvciB2YWx1ZU9uXHJcbiAgICogQHBhcmFtIHZhbHVlT2ZmIC0gdmFsdWUgd2hlbiB0aGUgYnV0dG9uIGlzIGluIHRoZSBvZmYgc3RhdGVcclxuICAgKiBAcGFyYW0gdmFsdWVPbiAtIHZhbHVlIHdoZW4gdGhlIGJ1dHRvbiBpcyBpbiB0aGUgb24gc3RhdGVcclxuICAgKiBAcGFyYW0gW3Byb3ZpZGVkT3B0aW9uc11cclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3BlcnR5OiBQcm9wZXJ0eTxUPiwgdmFsdWVPZmY6IFQsIHZhbHVlT246IFQsIHByb3ZpZGVkT3B0aW9ucz86IFJlY3Rhbmd1bGFyQnV0dG9uT3B0aW9ucyApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHByb3BlcnR5LnZhbHVlQ29tcGFyaXNvblN0cmF0ZWd5ID09PSAncmVmZXJlbmNlJyxcclxuICAgICAgJ1JlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uIGRlcGVuZHMgb24gXCI9PT1cIiBlcXVhbGl0eSBmb3IgdmFsdWUgY29tcGFyaXNvbicgKTtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uT3B0aW9ucywgU2VsZk9wdGlvbnMsIFJlY3Rhbmd1bGFyQnV0dG9uT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8ge1RTb3VuZFBsYXllcn0gLSBzb3VuZHMgdG8gYmUgcGxheWVkIG9uIHRvZ2dsZSB0cmFuc2l0aW9uc1xyXG4gICAgICB2YWx1ZU9mZlNvdW5kUGxheWVyOiB0b2dnbGVPZmZTb3VuZFBsYXllcixcclxuICAgICAgdmFsdWVPblNvdW5kUGxheWVyOiB0b2dnbGVPblNvdW5kUGxheWVyLFxyXG5cclxuICAgICAgLy8gcGhldC1pbyBzdXBwb3J0XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELFxyXG4gICAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gTm90ZSBpdCBzaGFyZXMgYSB0YW5kZW0gd2l0aCB0aGlzLCBzbyB0aGUgZW1pdHRlciB3aWxsIGJlIGluc3RydW1lbnRlZCBhcyBhIGNoaWxkIG9mIHRoZSBidXR0b25cclxuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbk1vZGVsID0gbmV3IFRvZ2dsZUJ1dHRvbk1vZGVsKCB2YWx1ZU9mZiwgdmFsdWVPbiwgcHJvcGVydHksIG9wdGlvbnMgKTtcclxuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSA9IG5ldyBUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkoIHRvZ2dsZUJ1dHRvbk1vZGVsICk7XHJcblxyXG4gICAgc3VwZXIoIHRvZ2dsZUJ1dHRvbk1vZGVsLCB0b2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIHByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbU5hbWU6ICdwcm9wZXJ0eSdcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBzb3VuZCBnZW5lcmF0aW9uXHJcbiAgICBjb25zdCBwbGF5U291bmRzID0gKCkgPT4ge1xyXG4gICAgICBpZiAoIHByb3BlcnR5LnZhbHVlID09PSB2YWx1ZU9mZiApIHtcclxuICAgICAgICBvcHRpb25zLnZhbHVlT2ZmU291bmRQbGF5ZXIucGxheSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBwcm9wZXJ0eS52YWx1ZSA9PT0gdmFsdWVPbiApIHtcclxuICAgICAgICBvcHRpb25zLnZhbHVlT25Tb3VuZFBsYXllci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLmJ1dHRvbk1vZGVsLnByb2R1Y2VTb3VuZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIHBsYXlTb3VuZHMgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbiA9ICgpID0+IHtcclxuICAgICAgdGhpcy5idXR0b25Nb2RlbC5wcm9kdWNlU291bmRFbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCBwbGF5U291bmRzICk7XHJcbiAgICAgIHRvZ2dsZUJ1dHRvbk1vZGVsLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zdW4ucmVnaXN0ZXIoICdSZWN0YW5ndWxhclRvZ2dsZUJ1dHRvbicsIFJlY3Rhbmd1bGFyVG9nZ2xlQnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sb0NBQW9DO0FBQzFELE9BQU9DLG9CQUFvQixNQUFNLGdFQUFnRTtBQUNqRyxPQUFPQyxtQkFBbUIsTUFBTSwrREFBK0Q7QUFFL0YsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxHQUFHLE1BQU0sV0FBVztBQUMzQixPQUFPQyxpQkFBaUIsTUFBb0Msd0JBQXdCO0FBQ3BGLE9BQU9DLG9DQUFvQyxNQUFNLDJDQUEyQztBQUM1RixPQUFPQyxpQkFBaUIsTUFBTSx3QkFBd0I7QUFZdEQsZUFBZSxNQUFNQyx1QkFBdUIsU0FBWUgsaUJBQWlCLENBQUM7RUFJeEU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NJLFdBQVdBLENBQUVDLFFBQXFCLEVBQUVDLFFBQVcsRUFBRUMsT0FBVSxFQUFFQyxlQUEwQyxFQUFHO0lBQy9HQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUosUUFBUSxDQUFDSyx1QkFBdUIsS0FBSyxXQUFXLEVBQ2hFLHdFQUF5RSxDQUFDO0lBRTVFLE1BQU1DLE9BQU8sR0FBR2hCLFNBQVMsQ0FBd0UsQ0FBQyxDQUFFO01BRWxHO01BQ0FpQixtQkFBbUIsRUFBRWhCLG9CQUFvQjtNQUN6Q2lCLGtCQUFrQixFQUFFaEIsbUJBQW1CO01BRXZDO01BQ0FpQixNQUFNLEVBQUVoQixNQUFNLENBQUNpQixRQUFRO01BQ3ZCQyxjQUFjLEVBQUU7SUFDbEIsQ0FBQyxFQUFFUixlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1TLGlCQUFpQixHQUFHLElBQUlmLGlCQUFpQixDQUFFSSxRQUFRLEVBQUVDLE9BQU8sRUFBRUYsUUFBUSxFQUFFTSxPQUFRLENBQUM7SUFDdkYsTUFBTU8sb0NBQW9DLEdBQUcsSUFBSWpCLG9DQUFvQyxDQUFFZ0IsaUJBQWtCLENBQUM7SUFFMUcsS0FBSyxDQUFFQSxpQkFBaUIsRUFBRUMsb0NBQW9DLEVBQUVQLE9BQVEsQ0FBQztJQUV6RSxJQUFJLENBQUNRLGdCQUFnQixDQUFFZCxRQUFRLEVBQUU7TUFDL0JlLFVBQVUsRUFBRTtJQUNkLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLFVBQVUsR0FBR0EsQ0FBQSxLQUFNO01BQ3ZCLElBQUtoQixRQUFRLENBQUNpQixLQUFLLEtBQUtoQixRQUFRLEVBQUc7UUFDakNLLE9BQU8sQ0FBQ0MsbUJBQW1CLENBQUNXLElBQUksQ0FBQyxDQUFDO01BQ3BDLENBQUMsTUFDSSxJQUFLbEIsUUFBUSxDQUFDaUIsS0FBSyxLQUFLZixPQUFPLEVBQUc7UUFDckNJLE9BQU8sQ0FBQ0Usa0JBQWtCLENBQUNVLElBQUksQ0FBQyxDQUFDO01BQ25DO0lBQ0YsQ0FBQztJQUNELElBQUksQ0FBQ0MsV0FBVyxDQUFDQyxtQkFBbUIsQ0FBQ0MsV0FBVyxDQUFFTCxVQUFXLENBQUM7SUFFOUQsSUFBSSxDQUFDTSw4QkFBOEIsR0FBRyxNQUFNO01BQzFDLElBQUksQ0FBQ0gsV0FBVyxDQUFDQyxtQkFBbUIsQ0FBQ0csY0FBYyxDQUFFUCxVQUFXLENBQUM7TUFDakVKLGlCQUFpQixDQUFDWSxPQUFPLENBQUMsQ0FBQztJQUM3QixDQUFDO0VBQ0g7RUFFZ0JBLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNGLDhCQUE4QixDQUFDLENBQUM7SUFDckMsS0FBSyxDQUFDRSxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUE5QixHQUFHLENBQUMrQixRQUFRLENBQUUseUJBQXlCLEVBQUUzQix1QkFBd0IsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==