// Copyright 2015-2024, University of Colorado Boulder

/**
 * RoundMomentaryButton is a round momentary button that toggles a Property between 2 values.
 * The 'off value' is the value when the button is not pressed.
 * The 'on value' is the value when the button is pressed.
 *
 * TODO: Not supported with alternative input, see https://github.com/phetsims/scenery/issues/1117
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import MomentaryButtonInteractionStateProperty from './MomentaryButtonInteractionStateProperty.js';
import MomentaryButtonModel from './MomentaryButtonModel.js';
import RoundButton from './RoundButton.js';
export default class RoundMomentaryButton extends RoundButton {
  /**
   * @param property
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param providedOptions?
   */
  constructor(property, valueOff, valueOn, providedOptions) {
    const options = optionize()({
      tandem: Tandem.REQUIRED
    }, providedOptions);

    // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
    const buttonModel = new MomentaryButtonModel(valueOff, valueOn, property, options);
    super(buttonModel, new MomentaryButtonInteractionStateProperty(buttonModel), options);
    this.disposeRoundMomentaryButton = () => {
      buttonModel.dispose();
    };
  }
  dispose() {
    this.disposeRoundMomentaryButton();
    super.dispose();
  }
}
sun.register('RoundMomentaryButton', RoundMomentaryButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJUYW5kZW0iLCJzdW4iLCJNb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkiLCJNb21lbnRhcnlCdXR0b25Nb2RlbCIsIlJvdW5kQnV0dG9uIiwiUm91bmRNb21lbnRhcnlCdXR0b24iLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwidmFsdWVPZmYiLCJ2YWx1ZU9uIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInRhbmRlbSIsIlJFUVVJUkVEIiwiYnV0dG9uTW9kZWwiLCJkaXNwb3NlUm91bmRNb21lbnRhcnlCdXR0b24iLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSb3VuZE1vbWVudGFyeUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSb3VuZE1vbWVudGFyeUJ1dHRvbiBpcyBhIHJvdW5kIG1vbWVudGFyeSBidXR0b24gdGhhdCB0b2dnbGVzIGEgUHJvcGVydHkgYmV0d2VlbiAyIHZhbHVlcy5cclxuICogVGhlICdvZmYgdmFsdWUnIGlzIHRoZSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgbm90IHByZXNzZWQuXHJcbiAqIFRoZSAnb24gdmFsdWUnIGlzIHRoZSB2YWx1ZSB3aGVuIHRoZSBidXR0b24gaXMgcHJlc3NlZC5cclxuICpcclxuICogVE9ETzogTm90IHN1cHBvcnRlZCB3aXRoIGFsdGVybmF0aXZlIGlucHV0LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3NjZW5lcnkvaXNzdWVzLzExMTdcclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvVFByb3BlcnR5LmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBzdW4gZnJvbSAnLi4vc3VuLmpzJztcclxuaW1wb3J0IE1vbWVudGFyeUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSBmcm9tICcuL01vbWVudGFyeUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNb21lbnRhcnlCdXR0b25Nb2RlbCBmcm9tICcuL01vbWVudGFyeUJ1dHRvbk1vZGVsLmpzJztcclxuaW1wb3J0IFJvdW5kQnV0dG9uLCB7IFJvdW5kQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4vUm91bmRCdXR0b24uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBSb3VuZE1vbWVudGFyeUJ1dHRvbk9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFJvdW5kQnV0dG9uT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJvdW5kTW9tZW50YXJ5QnV0dG9uPFQ+IGV4dGVuZHMgUm91bmRCdXR0b24ge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VSb3VuZE1vbWVudGFyeUJ1dHRvbjogKCkgPT4gdm9pZDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHByb3BlcnR5XHJcbiAgICogQHBhcmFtIHZhbHVlT2ZmIC0gdmFsdWUgd2hlbiB0aGUgYnV0dG9uIGlzIGluIHRoZSBvZmYgc3RhdGVcclxuICAgKiBAcGFyYW0gdmFsdWVPbiAtIHZhbHVlIHdoZW4gdGhlIGJ1dHRvbiBpcyBpbiB0aGUgb24gc3RhdGVcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zP1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvcGVydHk6IFRQcm9wZXJ0eTxUPiwgdmFsdWVPZmY6IFQsIHZhbHVlT246IFQsIHByb3ZpZGVkT3B0aW9ucz86IFJvdW5kTW9tZW50YXJ5QnV0dG9uT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFJvdW5kTW9tZW50YXJ5QnV0dG9uT3B0aW9ucywgU2VsZk9wdGlvbnMsIFJvdW5kQnV0dG9uT3B0aW9ucz4oKSgge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gTm90ZSBpdCBzaGFyZXMgYSB0YW5kZW0gd2l0aCB0aGlzLCBzbyB0aGUgZW1pdHRlciB3aWxsIGJlIGluc3RydW1lbnRlZCBhcyBhIGNoaWxkIG9mIHRoZSBidXR0b25cclxuICAgIGNvbnN0IGJ1dHRvbk1vZGVsID0gbmV3IE1vbWVudGFyeUJ1dHRvbk1vZGVsKCB2YWx1ZU9mZiwgdmFsdWVPbiwgcHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICBzdXBlciggYnV0dG9uTW9kZWwsIG5ldyBNb21lbnRhcnlCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkoIGJ1dHRvbk1vZGVsICksIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VSb3VuZE1vbWVudGFyeUJ1dHRvbiA9ICgpID0+IHtcclxuICAgICAgYnV0dG9uTW9kZWwuZGlzcG9zZSgpO1xyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlUm91bmRNb21lbnRhcnlCdXR0b24oKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnN1bi5yZWdpc3RlciggJ1JvdW5kTW9tZW50YXJ5QnV0dG9uJywgUm91bmRNb21lbnRhcnlCdXR0b24gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQTRCLG9DQUFvQztBQUNoRixPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBQ2pELE9BQU9DLEdBQUcsTUFBTSxXQUFXO0FBQzNCLE9BQU9DLHVDQUF1QyxNQUFNLDhDQUE4QztBQUNsRyxPQUFPQyxvQkFBb0IsTUFBTSwyQkFBMkI7QUFDNUQsT0FBT0MsV0FBVyxNQUE4QixrQkFBa0I7QUFNbEUsZUFBZSxNQUFNQyxvQkFBb0IsU0FBWUQsV0FBVyxDQUFDO0VBSS9EO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTRSxXQUFXQSxDQUFFQyxRQUFzQixFQUFFQyxRQUFXLEVBQUVDLE9BQVUsRUFBRUMsZUFBNkMsRUFBRztJQUVuSCxNQUFNQyxPQUFPLEdBQUdaLFNBQVMsQ0FBK0QsQ0FBQyxDQUFFO01BQ3pGYSxNQUFNLEVBQUVaLE1BQU0sQ0FBQ2E7SUFDakIsQ0FBQyxFQUFFSCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1JLFdBQVcsR0FBRyxJQUFJWCxvQkFBb0IsQ0FBRUssUUFBUSxFQUFFQyxPQUFPLEVBQUVGLFFBQVEsRUFBRUksT0FBUSxDQUFDO0lBRXBGLEtBQUssQ0FBRUcsV0FBVyxFQUFFLElBQUlaLHVDQUF1QyxDQUFFWSxXQUFZLENBQUMsRUFBRUgsT0FBUSxDQUFDO0lBRXpGLElBQUksQ0FBQ0ksMkJBQTJCLEdBQUcsTUFBTTtNQUN2Q0QsV0FBVyxDQUFDRSxPQUFPLENBQUMsQ0FBQztJQUN2QixDQUFDO0VBQ0g7RUFFZ0JBLE9BQU9BLENBQUEsRUFBUztJQUM5QixJQUFJLENBQUNELDJCQUEyQixDQUFDLENBQUM7SUFDbEMsS0FBSyxDQUFDQyxPQUFPLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBRUFmLEdBQUcsQ0FBQ2dCLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRVosb0JBQXFCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=