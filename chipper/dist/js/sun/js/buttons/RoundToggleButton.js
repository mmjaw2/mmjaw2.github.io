// Copyright 2014-2024, University of Colorado Boulder

/**
 * RoundToggleButton is a round toggle button that toggles the value of a Property between 2 values.
 * It has the same look for both values.
 *
 * @author John Blanco (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import toggleOffSoundPlayer from '../../../tambo/js/shared-sound-players/toggleOffSoundPlayer.js';
import toggleOnSoundPlayer from '../../../tambo/js/shared-sound-players/toggleOnSoundPlayer.js';
import Tandem from '../../../tandem/js/Tandem.js';
import sun from '../sun.js';
import RoundButton from './RoundButton.js';
import ToggleButtonInteractionStateProperty from './ToggleButtonInteractionStateProperty.js';
import ToggleButtonModel from './ToggleButtonModel.js';
export default class RoundToggleButton extends RoundButton {
  /**
   * @param property - axon Property that can be either valueOff or valueOn
   * @param valueOff - value when the button is in the off state
   * @param valueOn - value when the button is in the on state
   * @param providedOptions?
   */
  constructor(property, valueOff, valueOn, providedOptions) {
    assert && assert(property.valueComparisonStrategy === 'reference', 'RoundToggleButton depends on "===" equality for value comparison');
    const options = optionize()({
      // SelfOptions
      valueOffSoundPlayer: toggleOffSoundPlayer,
      valueOnSoundPlayer: toggleOnSoundPlayer,
      // phet-io support
      tandem: Tandem.REQUIRED,
      phetioFeatured: true
    }, providedOptions);

    // Note it shares a tandem with this, so the emitter will be instrumented as a child of the button
    const toggleButtonModel = new ToggleButtonModel(valueOff, valueOn, property, options);
    const toggleButtonInteractionStateProperty = new ToggleButtonInteractionStateProperty(toggleButtonModel);
    super(toggleButtonModel, toggleButtonInteractionStateProperty, options);
    this.addLinkedElement(property, {
      tandemName: 'property'
    });

    // sound generation
    const playSounds = () => {
      if (property.value === valueOff) {
        options.valueOffSoundPlayer.play();
      } else if (property.value === valueOn) {
        options.valueOnSoundPlayer.play();
      }
    };
    this.buttonModel.produceSoundEmitter.addListener(playSounds);
    this.disposeRoundToggleButton = () => {
      this.buttonModel.produceSoundEmitter.removeListener(playSounds);
      toggleButtonModel.dispose();
    };
  }
  dispose() {
    this.disposeRoundToggleButton();
    super.dispose();
  }
}
sun.register('RoundToggleButton', RoundToggleButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJ0b2dnbGVPZmZTb3VuZFBsYXllciIsInRvZ2dsZU9uU291bmRQbGF5ZXIiLCJUYW5kZW0iLCJzdW4iLCJSb3VuZEJ1dHRvbiIsIlRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsIlRvZ2dsZUJ1dHRvbk1vZGVsIiwiUm91bmRUb2dnbGVCdXR0b24iLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwidmFsdWVPZmYiLCJ2YWx1ZU9uIiwicHJvdmlkZWRPcHRpb25zIiwiYXNzZXJ0IiwidmFsdWVDb21wYXJpc29uU3RyYXRlZ3kiLCJvcHRpb25zIiwidmFsdWVPZmZTb3VuZFBsYXllciIsInZhbHVlT25Tb3VuZFBsYXllciIsInRhbmRlbSIsIlJFUVVJUkVEIiwicGhldGlvRmVhdHVyZWQiLCJ0b2dnbGVCdXR0b25Nb2RlbCIsInRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSIsImFkZExpbmtlZEVsZW1lbnQiLCJ0YW5kZW1OYW1lIiwicGxheVNvdW5kcyIsInZhbHVlIiwicGxheSIsImJ1dHRvbk1vZGVsIiwicHJvZHVjZVNvdW5kRW1pdHRlciIsImFkZExpc3RlbmVyIiwiZGlzcG9zZVJvdW5kVG9nZ2xlQnV0dG9uIiwicmVtb3ZlTGlzdGVuZXIiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJSb3VuZFRvZ2dsZUJ1dHRvbi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBSb3VuZFRvZ2dsZUJ1dHRvbiBpcyBhIHJvdW5kIHRvZ2dsZSBidXR0b24gdGhhdCB0b2dnbGVzIHRoZSB2YWx1ZSBvZiBhIFByb3BlcnR5IGJldHdlZW4gMiB2YWx1ZXMuXHJcbiAqIEl0IGhhcyB0aGUgc2FtZSBsb29rIGZvciBib3RoIHZhbHVlcy5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBUU291bmRQbGF5ZXIgZnJvbSAnLi4vLi4vLi4vdGFtYm8vanMvVFNvdW5kUGxheWVyLmpzJztcclxuaW1wb3J0IHRvZ2dsZU9mZlNvdW5kUGxheWVyIGZyb20gJy4uLy4uLy4uL3RhbWJvL2pzL3NoYXJlZC1zb3VuZC1wbGF5ZXJzL3RvZ2dsZU9mZlNvdW5kUGxheWVyLmpzJztcclxuaW1wb3J0IHRvZ2dsZU9uU291bmRQbGF5ZXIgZnJvbSAnLi4vLi4vLi4vdGFtYm8vanMvc2hhcmVkLXNvdW5kLXBsYXllcnMvdG9nZ2xlT25Tb3VuZFBsYXllci5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBzdW4gZnJvbSAnLi4vc3VuLmpzJztcclxuaW1wb3J0IFJvdW5kQnV0dG9uLCB7IFJvdW5kQnV0dG9uT3B0aW9ucyB9IGZyb20gJy4vUm91bmRCdXR0b24uanMnO1xyXG5pbXBvcnQgVG9nZ2xlQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5IGZyb20gJy4vVG9nZ2xlQnV0dG9uSW50ZXJhY3Rpb25TdGF0ZVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRvZ2dsZUJ1dHRvbk1vZGVsIGZyb20gJy4vVG9nZ2xlQnV0dG9uTW9kZWwuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gc291bmRzIHRvIGJlIHBsYXllZCBvbiB0b2dnbGUgdHJhbnNpdGlvbnNcclxuICB2YWx1ZU9mZlNvdW5kUGxheWVyPzogVFNvdW5kUGxheWVyO1xyXG4gIHZhbHVlT25Tb3VuZFBsYXllcj86IFRTb3VuZFBsYXllcjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFJvdW5kVG9nZ2xlQnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUm91bmRCdXR0b25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUm91bmRUb2dnbGVCdXR0b248VD4gZXh0ZW5kcyBSb3VuZEJ1dHRvbiB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVJvdW5kVG9nZ2xlQnV0dG9uOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcHJvcGVydHkgLSBheG9uIFByb3BlcnR5IHRoYXQgY2FuIGJlIGVpdGhlciB2YWx1ZU9mZiBvciB2YWx1ZU9uXHJcbiAgICogQHBhcmFtIHZhbHVlT2ZmIC0gdmFsdWUgd2hlbiB0aGUgYnV0dG9uIGlzIGluIHRoZSBvZmYgc3RhdGVcclxuICAgKiBAcGFyYW0gdmFsdWVPbiAtIHZhbHVlIHdoZW4gdGhlIGJ1dHRvbiBpcyBpbiB0aGUgb24gc3RhdGVcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zP1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvcGVydHk6IFByb3BlcnR5PFQ+LCB2YWx1ZU9mZjogVCwgdmFsdWVPbjogVCwgcHJvdmlkZWRPcHRpb25zPzogUm91bmRUb2dnbGVCdXR0b25PcHRpb25zICkge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggcHJvcGVydHkudmFsdWVDb21wYXJpc29uU3RyYXRlZ3kgPT09ICdyZWZlcmVuY2UnLFxyXG4gICAgICAnUm91bmRUb2dnbGVCdXR0b24gZGVwZW5kcyBvbiBcIj09PVwiIGVxdWFsaXR5IGZvciB2YWx1ZSBjb21wYXJpc29uJyApO1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Um91bmRUb2dnbGVCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUm91bmRCdXR0b25PcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICB2YWx1ZU9mZlNvdW5kUGxheWVyOiB0b2dnbGVPZmZTb3VuZFBsYXllcixcclxuICAgICAgdmFsdWVPblNvdW5kUGxheWVyOiB0b2dnbGVPblNvdW5kUGxheWVyLFxyXG5cclxuICAgICAgLy8gcGhldC1pbyBzdXBwb3J0XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELFxyXG4gICAgICBwaGV0aW9GZWF0dXJlZDogdHJ1ZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gTm90ZSBpdCBzaGFyZXMgYSB0YW5kZW0gd2l0aCB0aGlzLCBzbyB0aGUgZW1pdHRlciB3aWxsIGJlIGluc3RydW1lbnRlZCBhcyBhIGNoaWxkIG9mIHRoZSBidXR0b25cclxuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbk1vZGVsID0gbmV3IFRvZ2dsZUJ1dHRvbk1vZGVsKCB2YWx1ZU9mZiwgdmFsdWVPbiwgcHJvcGVydHksIG9wdGlvbnMgKTtcclxuICAgIGNvbnN0IHRvZ2dsZUJ1dHRvbkludGVyYWN0aW9uU3RhdGVQcm9wZXJ0eSA9IG5ldyBUb2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHkoIHRvZ2dsZUJ1dHRvbk1vZGVsICk7XHJcblxyXG4gICAgc3VwZXIoIHRvZ2dsZUJ1dHRvbk1vZGVsLCB0b2dnbGVCdXR0b25JbnRlcmFjdGlvblN0YXRlUHJvcGVydHksIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmFkZExpbmtlZEVsZW1lbnQoIHByb3BlcnR5LCB7XHJcbiAgICAgIHRhbmRlbU5hbWU6ICdwcm9wZXJ0eSdcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBzb3VuZCBnZW5lcmF0aW9uXHJcbiAgICBjb25zdCBwbGF5U291bmRzID0gKCkgPT4ge1xyXG4gICAgICBpZiAoIHByb3BlcnR5LnZhbHVlID09PSB2YWx1ZU9mZiApIHtcclxuICAgICAgICBvcHRpb25zLnZhbHVlT2ZmU291bmRQbGF5ZXIucGxheSgpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCBwcm9wZXJ0eS52YWx1ZSA9PT0gdmFsdWVPbiApIHtcclxuICAgICAgICBvcHRpb25zLnZhbHVlT25Tb3VuZFBsYXllci5wbGF5KCk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB0aGlzLmJ1dHRvbk1vZGVsLnByb2R1Y2VTb3VuZEVtaXR0ZXIuYWRkTGlzdGVuZXIoIHBsYXlTb3VuZHMgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VSb3VuZFRvZ2dsZUJ1dHRvbiA9ICgpID0+IHtcclxuICAgICAgdGhpcy5idXR0b25Nb2RlbC5wcm9kdWNlU291bmRFbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCBwbGF5U291bmRzICk7XHJcbiAgICAgIHRvZ2dsZUJ1dHRvbk1vZGVsLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVJvdW5kVG9nZ2xlQnV0dG9uKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zdW4ucmVnaXN0ZXIoICdSb3VuZFRvZ2dsZUJ1dHRvbicsIFJvdW5kVG9nZ2xlQnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQU0sb0NBQW9DO0FBRTFELE9BQU9DLG9CQUFvQixNQUFNLGdFQUFnRTtBQUNqRyxPQUFPQyxtQkFBbUIsTUFBTSwrREFBK0Q7QUFDL0YsT0FBT0MsTUFBTSxNQUFNLDhCQUE4QjtBQUNqRCxPQUFPQyxHQUFHLE1BQU0sV0FBVztBQUMzQixPQUFPQyxXQUFXLE1BQThCLGtCQUFrQjtBQUNsRSxPQUFPQyxvQ0FBb0MsTUFBTSwyQ0FBMkM7QUFDNUYsT0FBT0MsaUJBQWlCLE1BQU0sd0JBQXdCO0FBV3RELGVBQWUsTUFBTUMsaUJBQWlCLFNBQVlILFdBQVcsQ0FBQztFQUk1RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsUUFBcUIsRUFBRUMsUUFBVyxFQUFFQyxPQUFVLEVBQUVDLGVBQTBDLEVBQUc7SUFDL0dDLE1BQU0sSUFBSUEsTUFBTSxDQUFFSixRQUFRLENBQUNLLHVCQUF1QixLQUFLLFdBQVcsRUFDaEUsa0VBQW1FLENBQUM7SUFFdEUsTUFBTUMsT0FBTyxHQUFHaEIsU0FBUyxDQUE0RCxDQUFDLENBQUU7TUFFdEY7TUFDQWlCLG1CQUFtQixFQUFFaEIsb0JBQW9CO01BQ3pDaUIsa0JBQWtCLEVBQUVoQixtQkFBbUI7TUFFdkM7TUFDQWlCLE1BQU0sRUFBRWhCLE1BQU0sQ0FBQ2lCLFFBQVE7TUFDdkJDLGNBQWMsRUFBRTtJQUNsQixDQUFDLEVBQUVSLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0EsTUFBTVMsaUJBQWlCLEdBQUcsSUFBSWYsaUJBQWlCLENBQUVJLFFBQVEsRUFBRUMsT0FBTyxFQUFFRixRQUFRLEVBQUVNLE9BQVEsQ0FBQztJQUN2RixNQUFNTyxvQ0FBb0MsR0FBRyxJQUFJakIsb0NBQW9DLENBQUVnQixpQkFBa0IsQ0FBQztJQUUxRyxLQUFLLENBQUVBLGlCQUFpQixFQUFFQyxvQ0FBb0MsRUFBRVAsT0FBUSxDQUFDO0lBRXpFLElBQUksQ0FBQ1EsZ0JBQWdCLENBQUVkLFFBQVEsRUFBRTtNQUMvQmUsVUFBVSxFQUFFO0lBQ2QsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsTUFBTUMsVUFBVSxHQUFHQSxDQUFBLEtBQU07TUFDdkIsSUFBS2hCLFFBQVEsQ0FBQ2lCLEtBQUssS0FBS2hCLFFBQVEsRUFBRztRQUNqQ0ssT0FBTyxDQUFDQyxtQkFBbUIsQ0FBQ1csSUFBSSxDQUFDLENBQUM7TUFDcEMsQ0FBQyxNQUNJLElBQUtsQixRQUFRLENBQUNpQixLQUFLLEtBQUtmLE9BQU8sRUFBRztRQUNyQ0ksT0FBTyxDQUFDRSxrQkFBa0IsQ0FBQ1UsSUFBSSxDQUFDLENBQUM7TUFDbkM7SUFDRixDQUFDO0lBQ0QsSUFBSSxDQUFDQyxXQUFXLENBQUNDLG1CQUFtQixDQUFDQyxXQUFXLENBQUVMLFVBQVcsQ0FBQztJQUU5RCxJQUFJLENBQUNNLHdCQUF3QixHQUFHLE1BQU07TUFDcEMsSUFBSSxDQUFDSCxXQUFXLENBQUNDLG1CQUFtQixDQUFDRyxjQUFjLENBQUVQLFVBQVcsQ0FBQztNQUNqRUosaUJBQWlCLENBQUNZLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7RUFDSDtFQUVnQkEsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0Ysd0JBQXdCLENBQUMsQ0FBQztJQUMvQixLQUFLLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQTlCLEdBQUcsQ0FBQytCLFFBQVEsQ0FBRSxtQkFBbUIsRUFBRTNCLGlCQUFrQixDQUFDIiwiaWdub3JlTGlzdCI6W119