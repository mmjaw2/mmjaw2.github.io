// Copyright 2016-2024, University of Colorado Boulder

/**
 * A default slider thumb, currently intended for use only in HSlider. It's a rectangle with a vertical white line down
 * the center.  The origin is at the top left (HSlider uses the thumb center for positioning).
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Dimension2 from '../../dot/js/Dimension2.js';
import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import { Path, PressListener, Rectangle } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import sun from './sun.js';
export const DEFAULT_FILL = 'rgb( 50, 145, 184 )';
export const DEFAULT_FILL_HIGHLIGHTED = 'rgb( 71, 207, 255 )';
export default class SliderThumb extends Rectangle {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      size: new Dimension2(22, 45),
      fillHighlighted: DEFAULT_FILL_HIGHLIGHTED,
      centerLineStroke: 'white',
      // RectangleOptions
      fill: DEFAULT_FILL,
      stroke: 'black',
      lineWidth: 1,
      tandem: Tandem.REQUIRED,
      // Slider.js adds to this tandem to nest its dragListener under the thumb.
      tandemNameSuffix: 'ThumbNode'
    }, providedOptions);

    // Set a default corner radius
    if (options.cornerRadius === undefined) {
      options.cornerRadius = 0.25 * options.size.width;
    }
    options.cachedPaints = [options.fill, options.fillHighlighted];
    super(0, 0, options.size.width, options.size.height, options);

    // Paint area that is slightly larger than the slider thumb so SVG updates a large enough paintable region.
    // Related to https://github.com/phetsims/masses-and-springs/issues/334
    const paintLayer = Rectangle.bounds(this.bounds.dilated(5), {
      fill: 'transparent',
      localBounds: this.bounds,
      pickable: false
    });
    this.addChild(paintLayer);

    // vertical line down the center
    const centerLineYMargin = 3;
    this.addChild(new Path(Shape.lineSegment(options.size.width / 2, centerLineYMargin, options.size.width / 2, options.size.height - centerLineYMargin), {
      stroke: options.centerLineStroke
    }));

    // highlight thumb on pointer over
    const pressListener = new PressListener({
      attach: false,
      tandem: Tandem.OPT_OUT // Highlighting doesn't need instrumentation
    });
    pressListener.isHighlightedProperty.link(isHighlighted => {
      this.fill = isHighlighted ? options.fillHighlighted : options.fill;
    });
    this.addInputListener(pressListener);
  }
}
sun.register('SliderThumb', SliderThumb);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaW1lbnNpb24yIiwiU2hhcGUiLCJvcHRpb25pemUiLCJQYXRoIiwiUHJlc3NMaXN0ZW5lciIsIlJlY3RhbmdsZSIsIlRhbmRlbSIsInN1biIsIkRFRkFVTFRfRklMTCIsIkRFRkFVTFRfRklMTF9ISUdITElHSFRFRCIsIlNsaWRlclRodW1iIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwic2l6ZSIsImZpbGxIaWdobGlnaHRlZCIsImNlbnRlckxpbmVTdHJva2UiLCJmaWxsIiwic3Ryb2tlIiwibGluZVdpZHRoIiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4IiwiY29ybmVyUmFkaXVzIiwidW5kZWZpbmVkIiwid2lkdGgiLCJjYWNoZWRQYWludHMiLCJoZWlnaHQiLCJwYWludExheWVyIiwiYm91bmRzIiwiZGlsYXRlZCIsImxvY2FsQm91bmRzIiwicGlja2FibGUiLCJhZGRDaGlsZCIsImNlbnRlckxpbmVZTWFyZ2luIiwibGluZVNlZ21lbnQiLCJwcmVzc0xpc3RlbmVyIiwiYXR0YWNoIiwiT1BUX09VVCIsImlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eSIsImxpbmsiLCJpc0hpZ2hsaWdodGVkIiwiYWRkSW5wdXRMaXN0ZW5lciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2xpZGVyVGh1bWIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTYtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBkZWZhdWx0IHNsaWRlciB0aHVtYiwgY3VycmVudGx5IGludGVuZGVkIGZvciB1c2Ugb25seSBpbiBIU2xpZGVyLiBJdCdzIGEgcmVjdGFuZ2xlIHdpdGggYSB2ZXJ0aWNhbCB3aGl0ZSBsaW5lIGRvd25cclxuICogdGhlIGNlbnRlci4gIFRoZSBvcmlnaW4gaXMgYXQgdGhlIHRvcCBsZWZ0IChIU2xpZGVyIHVzZXMgdGhlIHRodW1iIGNlbnRlciBmb3IgcG9zaXRpb25pbmcpLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IFRQYWludCwgUGF0aCwgUHJlc3NMaXN0ZW5lciwgUmVjdGFuZ2xlLCBSZWN0YW5nbGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuL3N1bi5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHNpemU/OiBEaW1lbnNpb24yO1xyXG4gIGZpbGxIaWdobGlnaHRlZD86IFRQYWludDtcclxuICBjZW50ZXJMaW5lU3Ryb2tlPzogVFBhaW50O1xyXG59O1xyXG5cclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRklMTCA9ICdyZ2IoIDUwLCAxNDUsIDE4NCApJztcclxuZXhwb3J0IGNvbnN0IERFRkFVTFRfRklMTF9ISUdITElHSFRFRCA9ICdyZ2IoIDcxLCAyMDcsIDI1NSApJztcclxuXHJcbnR5cGUgU2xpZGVyVGh1bWJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFJlY3RhbmdsZU9wdGlvbnMsICdjYWNoZWRQYWludHMnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsaWRlclRodW1iIGV4dGVuZHMgUmVjdGFuZ2xlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM6IFNsaWRlclRodW1iT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFNsaWRlclRodW1iT3B0aW9ucywgU2VsZk9wdGlvbnMsIFJlY3RhbmdsZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHNpemU6IG5ldyBEaW1lbnNpb24yKCAyMiwgNDUgKSxcclxuICAgICAgZmlsbEhpZ2hsaWdodGVkOiBERUZBVUxUX0ZJTExfSElHSExJR0hURUQsXHJcbiAgICAgIGNlbnRlckxpbmVTdHJva2U6ICd3aGl0ZScsXHJcblxyXG4gICAgICAvLyBSZWN0YW5nbGVPcHRpb25zXHJcbiAgICAgIGZpbGw6IERFRkFVTFRfRklMTCxcclxuICAgICAgc3Ryb2tlOiAnYmxhY2snLFxyXG4gICAgICBsaW5lV2lkdGg6IDEsXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELCAvLyBTbGlkZXIuanMgYWRkcyB0byB0aGlzIHRhbmRlbSB0byBuZXN0IGl0cyBkcmFnTGlzdGVuZXIgdW5kZXIgdGhlIHRodW1iLlxyXG4gICAgICB0YW5kZW1OYW1lU3VmZml4OiAnVGh1bWJOb2RlJ1xyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gU2V0IGEgZGVmYXVsdCBjb3JuZXIgcmFkaXVzXHJcbiAgICBpZiAoIG9wdGlvbnMuY29ybmVyUmFkaXVzID09PSB1bmRlZmluZWQgKSB7XHJcbiAgICAgIG9wdGlvbnMuY29ybmVyUmFkaXVzID0gMC4yNSAqIG9wdGlvbnMuc2l6ZS53aWR0aDtcclxuICAgIH1cclxuXHJcbiAgICBvcHRpb25zLmNhY2hlZFBhaW50cyA9IFsgb3B0aW9ucy5maWxsLCBvcHRpb25zLmZpbGxIaWdobGlnaHRlZCBdO1xyXG5cclxuICAgIHN1cGVyKCAwLCAwLCBvcHRpb25zLnNpemUud2lkdGgsIG9wdGlvbnMuc2l6ZS5oZWlnaHQsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBQYWludCBhcmVhIHRoYXQgaXMgc2xpZ2h0bHkgbGFyZ2VyIHRoYW4gdGhlIHNsaWRlciB0aHVtYiBzbyBTVkcgdXBkYXRlcyBhIGxhcmdlIGVub3VnaCBwYWludGFibGUgcmVnaW9uLlxyXG4gICAgLy8gUmVsYXRlZCB0byBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvbWFzc2VzLWFuZC1zcHJpbmdzL2lzc3Vlcy8zMzRcclxuICAgIGNvbnN0IHBhaW50TGF5ZXIgPSBSZWN0YW5nbGUuYm91bmRzKCB0aGlzLmJvdW5kcy5kaWxhdGVkKCA1ICksIHtcclxuICAgICAgZmlsbDogJ3RyYW5zcGFyZW50JyxcclxuICAgICAgbG9jYWxCb3VuZHM6IHRoaXMuYm91bmRzLFxyXG4gICAgICBwaWNrYWJsZTogZmFsc2VcclxuICAgIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHBhaW50TGF5ZXIgKTtcclxuXHJcbiAgICAvLyB2ZXJ0aWNhbCBsaW5lIGRvd24gdGhlIGNlbnRlclxyXG4gICAgY29uc3QgY2VudGVyTGluZVlNYXJnaW4gPSAzO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IFBhdGgoIFNoYXBlLmxpbmVTZWdtZW50KFxyXG4gICAgICBvcHRpb25zLnNpemUud2lkdGggLyAyLCBjZW50ZXJMaW5lWU1hcmdpbixcclxuICAgICAgb3B0aW9ucy5zaXplLndpZHRoIC8gMiwgb3B0aW9ucy5zaXplLmhlaWdodCAtIGNlbnRlckxpbmVZTWFyZ2luICksIHtcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLmNlbnRlckxpbmVTdHJva2VcclxuICAgIH0gKSApO1xyXG5cclxuICAgIC8vIGhpZ2hsaWdodCB0aHVtYiBvbiBwb2ludGVyIG92ZXJcclxuICAgIGNvbnN0IHByZXNzTGlzdGVuZXIgPSBuZXcgUHJlc3NMaXN0ZW5lcigge1xyXG4gICAgICBhdHRhY2g6IGZhbHNlLFxyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUIC8vIEhpZ2hsaWdodGluZyBkb2Vzbid0IG5lZWQgaW5zdHJ1bWVudGF0aW9uXHJcbiAgICB9ICk7XHJcbiAgICBwcmVzc0xpc3RlbmVyLmlzSGlnaGxpZ2h0ZWRQcm9wZXJ0eS5saW5rKCBpc0hpZ2hsaWdodGVkID0+IHtcclxuICAgICAgdGhpcy5maWxsID0gaXNIaWdobGlnaHRlZCA/IG9wdGlvbnMuZmlsbEhpZ2hsaWdodGVkIDogb3B0aW9ucy5maWxsO1xyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRJbnB1dExpc3RlbmVyKCBwcmVzc0xpc3RlbmVyICk7XHJcbiAgfVxyXG59XHJcblxyXG5zdW4ucmVnaXN0ZXIoICdTbGlkZXJUaHVtYicsIFNsaWRlclRodW1iICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLDRCQUE0QjtBQUVuRCxTQUFTQyxLQUFLLFFBQVEsMEJBQTBCO0FBQ2hELE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsU0FBaUJDLElBQUksRUFBRUMsYUFBYSxFQUFFQyxTQUFTLFFBQTBCLDZCQUE2QjtBQUN0RyxPQUFPQyxNQUFNLE1BQU0sMkJBQTJCO0FBQzlDLE9BQU9DLEdBQUcsTUFBTSxVQUFVO0FBUTFCLE9BQU8sTUFBTUMsWUFBWSxHQUFHLHFCQUFxQjtBQUNqRCxPQUFPLE1BQU1DLHdCQUF3QixHQUFHLHFCQUFxQjtBQUk3RCxlQUFlLE1BQU1DLFdBQVcsU0FBU0wsU0FBUyxDQUFDO0VBRTFDTSxXQUFXQSxDQUFFQyxlQUFtQyxFQUFHO0lBRXhELE1BQU1DLE9BQU8sR0FBR1gsU0FBUyxDQUFvRCxDQUFDLENBQUU7TUFFOUU7TUFDQVksSUFBSSxFQUFFLElBQUlkLFVBQVUsQ0FBRSxFQUFFLEVBQUUsRUFBRyxDQUFDO01BQzlCZSxlQUFlLEVBQUVOLHdCQUF3QjtNQUN6Q08sZ0JBQWdCLEVBQUUsT0FBTztNQUV6QjtNQUNBQyxJQUFJLEVBQUVULFlBQVk7TUFDbEJVLE1BQU0sRUFBRSxPQUFPO01BQ2ZDLFNBQVMsRUFBRSxDQUFDO01BQ1pDLE1BQU0sRUFBRWQsTUFBTSxDQUFDZSxRQUFRO01BQUU7TUFDekJDLGdCQUFnQixFQUFFO0lBQ3BCLENBQUMsRUFBRVYsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQSxJQUFLQyxPQUFPLENBQUNVLFlBQVksS0FBS0MsU0FBUyxFQUFHO01BQ3hDWCxPQUFPLENBQUNVLFlBQVksR0FBRyxJQUFJLEdBQUdWLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDVyxLQUFLO0lBQ2xEO0lBRUFaLE9BQU8sQ0FBQ2EsWUFBWSxHQUFHLENBQUViLE9BQU8sQ0FBQ0ksSUFBSSxFQUFFSixPQUFPLENBQUNFLGVBQWUsQ0FBRTtJQUVoRSxLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRUYsT0FBTyxDQUFDQyxJQUFJLENBQUNXLEtBQUssRUFBRVosT0FBTyxDQUFDQyxJQUFJLENBQUNhLE1BQU0sRUFBRWQsT0FBUSxDQUFDOztJQUUvRDtJQUNBO0lBQ0EsTUFBTWUsVUFBVSxHQUFHdkIsU0FBUyxDQUFDd0IsTUFBTSxDQUFFLElBQUksQ0FBQ0EsTUFBTSxDQUFDQyxPQUFPLENBQUUsQ0FBRSxDQUFDLEVBQUU7TUFDN0RiLElBQUksRUFBRSxhQUFhO01BQ25CYyxXQUFXLEVBQUUsSUFBSSxDQUFDRixNQUFNO01BQ3hCRyxRQUFRLEVBQUU7SUFDWixDQUFFLENBQUM7SUFDSCxJQUFJLENBQUNDLFFBQVEsQ0FBRUwsVUFBVyxDQUFDOztJQUUzQjtJQUNBLE1BQU1NLGlCQUFpQixHQUFHLENBQUM7SUFDM0IsSUFBSSxDQUFDRCxRQUFRLENBQUUsSUFBSTlCLElBQUksQ0FBRUYsS0FBSyxDQUFDa0MsV0FBVyxDQUN4Q3RCLE9BQU8sQ0FBQ0MsSUFBSSxDQUFDVyxLQUFLLEdBQUcsQ0FBQyxFQUFFUyxpQkFBaUIsRUFDekNyQixPQUFPLENBQUNDLElBQUksQ0FBQ1csS0FBSyxHQUFHLENBQUMsRUFBRVosT0FBTyxDQUFDQyxJQUFJLENBQUNhLE1BQU0sR0FBR08saUJBQWtCLENBQUMsRUFBRTtNQUNuRWhCLE1BQU0sRUFBRUwsT0FBTyxDQUFDRztJQUNsQixDQUFFLENBQUUsQ0FBQzs7SUFFTDtJQUNBLE1BQU1vQixhQUFhLEdBQUcsSUFBSWhDLGFBQWEsQ0FBRTtNQUN2Q2lDLE1BQU0sRUFBRSxLQUFLO01BQ2JqQixNQUFNLEVBQUVkLE1BQU0sQ0FBQ2dDLE9BQU8sQ0FBQztJQUN6QixDQUFFLENBQUM7SUFDSEYsYUFBYSxDQUFDRyxxQkFBcUIsQ0FBQ0MsSUFBSSxDQUFFQyxhQUFhLElBQUk7TUFDekQsSUFBSSxDQUFDeEIsSUFBSSxHQUFHd0IsYUFBYSxHQUFHNUIsT0FBTyxDQUFDRSxlQUFlLEdBQUdGLE9BQU8sQ0FBQ0ksSUFBSTtJQUNwRSxDQUFFLENBQUM7SUFDSCxJQUFJLENBQUN5QixnQkFBZ0IsQ0FBRU4sYUFBYyxDQUFDO0VBQ3hDO0FBQ0Y7QUFFQTdCLEdBQUcsQ0FBQ29DLFFBQVEsQ0FBRSxhQUFhLEVBQUVqQyxXQUFZLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=