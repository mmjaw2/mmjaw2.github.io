// Copyright 2022-2023, University of Colorado Boulder

/**
 * Ticks for a slider.
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 *
 */

import DerivedProperty from '../../axon/js/DerivedProperty.js';
import { Shape } from '../../kite/js/imports.js';
import Orientation from '../../phet-core/js/Orientation.js';
import { ManualConstraint, Node, Path } from '../../scenery/js/imports.js';
import sun from './sun.js';
import SunConstants from './SunConstants.js';
export default class SliderTick {
  // NOTE: This could be cleaned up, so we could remove ticks or do other nice things
  constructor(parent, value, label, length, stroke, lineWidth, tickOptions, orientation, track) {
    this.parent = parent;
    this.value = value;
    this.label = label;
    this.labelXProperty = new DerivedProperty([track.valueToPositionProperty], valueToPosition => valueToPosition.evaluate(value));

    // ticks
    this.tickNode = new Node();
    parent.addChild(this.tickNode);
    const tickPath = new Path(new Shape().moveTo(0, track.top).lineTo(0, track.top - length), {
      stroke: stroke,
      lineWidth: lineWidth
    });
    this.labelXProperty.link(x => {
      tickPath.x = x;
    });
    this.tickNode.addChild(tickPath);

    // label
    if (label) {
      this.labelContainer = new Node({
        pickable: false
      });
      this.tickNode.addChild(this.labelContainer);
      this.labelContainer.addChild(label);

      // For a vertical slider, rotate labels opposite the rotation of the slider, so that they appear as expected.
      if (orientation === Orientation.VERTICAL) {
        this.labelContainer.rotation = -SunConstants.SLIDER_VERTICAL_ROTATION;
      }
      this.labelManualConstraint = ManualConstraint.create(this.tickNode, [tickPath, this.labelContainer], (tickProxy, labelProxy) => {
        labelProxy.centerX = tickProxy.centerX;
        labelProxy.bottom = tickProxy.top - tickOptions.tickLabelSpacing;
      });
    }
  }
  dispose() {
    this.parent.removeChild(this.tickNode);
    this.labelContainer && this.labelContainer.dispose();
    this.labelXProperty.dispose();
    this.labelManualConstraint && this.labelManualConstraint.dispose();
  }
}
sun.register('SliderTick', SliderTick);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJTaGFwZSIsIk9yaWVudGF0aW9uIiwiTWFudWFsQ29uc3RyYWludCIsIk5vZGUiLCJQYXRoIiwic3VuIiwiU3VuQ29uc3RhbnRzIiwiU2xpZGVyVGljayIsImNvbnN0cnVjdG9yIiwicGFyZW50IiwidmFsdWUiLCJsYWJlbCIsImxlbmd0aCIsInN0cm9rZSIsImxpbmVXaWR0aCIsInRpY2tPcHRpb25zIiwib3JpZW50YXRpb24iLCJ0cmFjayIsImxhYmVsWFByb3BlcnR5IiwidmFsdWVUb1Bvc2l0aW9uUHJvcGVydHkiLCJ2YWx1ZVRvUG9zaXRpb24iLCJldmFsdWF0ZSIsInRpY2tOb2RlIiwiYWRkQ2hpbGQiLCJ0aWNrUGF0aCIsIm1vdmVUbyIsInRvcCIsImxpbmVUbyIsImxpbmsiLCJ4IiwibGFiZWxDb250YWluZXIiLCJwaWNrYWJsZSIsIlZFUlRJQ0FMIiwicm90YXRpb24iLCJTTElERVJfVkVSVElDQUxfUk9UQVRJT04iLCJsYWJlbE1hbnVhbENvbnN0cmFpbnQiLCJjcmVhdGUiLCJ0aWNrUHJveHkiLCJsYWJlbFByb3h5IiwiY2VudGVyWCIsImJvdHRvbSIsInRpY2tMYWJlbFNwYWNpbmciLCJkaXNwb3NlIiwicmVtb3ZlQ2hpbGQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNsaWRlclRpY2sudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGlja3MgZm9yIGEgc2xpZGVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKlxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IFNoYXBlIH0gZnJvbSAnLi4vLi4va2l0ZS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IE9yaWVudGF0aW9uIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9PcmllbnRhdGlvbi5qcyc7XHJcbmltcG9ydCB7IE1hbnVhbENvbnN0cmFpbnQsIE5vZGUsIFBhdGgsIFRQYWludCB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBTbGlkZXJUcmFjayBmcm9tICcuL1NsaWRlclRyYWNrLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuL3N1bi5qcyc7XHJcbmltcG9ydCBTdW5Db25zdGFudHMgZnJvbSAnLi9TdW5Db25zdGFudHMuanMnO1xyXG5cclxuZXhwb3J0IHR5cGUgU2xpZGVyVGlja09wdGlvbnMgPSB7XHJcbiAgdGlja0xhYmVsU3BhY2luZz86IG51bWJlcjtcclxuICBtYWpvclRpY2tMZW5ndGg/OiBudW1iZXI7XHJcbiAgbWFqb3JUaWNrU3Ryb2tlPzogVFBhaW50O1xyXG4gIG1ham9yVGlja0xpbmVXaWR0aD86IG51bWJlcjtcclxuICBtaW5vclRpY2tMZW5ndGg/OiBudW1iZXI7XHJcbiAgbWlub3JUaWNrU3Ryb2tlPzogVFBhaW50O1xyXG4gIG1pbm9yVGlja0xpbmVXaWR0aD86IG51bWJlcjtcclxufTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFNsaWRlclRpY2sge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGxhYmVsWFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+O1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgdGlja05vZGU6IE5vZGU7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGFiZWxNYW51YWxDb25zdHJhaW50PzogTWFudWFsQ29uc3RyYWludDxOb2RlW10+O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgbGFiZWxDb250YWluZXI/OiBOb2RlO1xyXG5cclxuICAvLyBOT1RFOiBUaGlzIGNvdWxkIGJlIGNsZWFuZWQgdXAsIHNvIHdlIGNvdWxkIHJlbW92ZSB0aWNrcyBvciBkbyBvdGhlciBuaWNlIHRoaW5nc1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgcGFyZW50OiBOb2RlLFxyXG4gICAgcHVibGljIHJlYWRvbmx5IHZhbHVlOiBudW1iZXIsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IGxhYmVsOiBOb2RlIHwgdW5kZWZpbmVkLFxyXG4gICAgbGVuZ3RoOiBudW1iZXIsXHJcbiAgICBzdHJva2U6IFRQYWludCxcclxuICAgIGxpbmVXaWR0aDogbnVtYmVyLFxyXG4gICAgdGlja09wdGlvbnM6IFJlcXVpcmVkPFNsaWRlclRpY2tPcHRpb25zPixcclxuICAgIG9yaWVudGF0aW9uOiBPcmllbnRhdGlvbixcclxuICAgIHRyYWNrOiBTbGlkZXJUcmFja1xyXG4gICkge1xyXG5cclxuICAgIHRoaXMubGFiZWxYUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIHRyYWNrLnZhbHVlVG9Qb3NpdGlvblByb3BlcnR5IF0sIHZhbHVlVG9Qb3NpdGlvbiA9PiB2YWx1ZVRvUG9zaXRpb24uZXZhbHVhdGUoIHZhbHVlICkgKTtcclxuXHJcbiAgICAvLyB0aWNrc1xyXG4gICAgdGhpcy50aWNrTm9kZSA9IG5ldyBOb2RlKCk7XHJcbiAgICBwYXJlbnQuYWRkQ2hpbGQoIHRoaXMudGlja05vZGUgKTtcclxuXHJcbiAgICBjb25zdCB0aWNrUGF0aCA9IG5ldyBQYXRoKCBuZXcgU2hhcGUoKVxyXG4gICAgICAgIC5tb3ZlVG8oIDAsIHRyYWNrLnRvcCApXHJcbiAgICAgICAgLmxpbmVUbyggMCwgdHJhY2sudG9wIC0gbGVuZ3RoICksXHJcbiAgICAgIHsgc3Ryb2tlOiBzdHJva2UsIGxpbmVXaWR0aDogbGluZVdpZHRoIH0gKTtcclxuXHJcbiAgICB0aGlzLmxhYmVsWFByb3BlcnR5LmxpbmsoIHggPT4ge1xyXG4gICAgICB0aWNrUGF0aC54ID0geDtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnRpY2tOb2RlLmFkZENoaWxkKCB0aWNrUGF0aCApO1xyXG5cclxuICAgIC8vIGxhYmVsXHJcbiAgICBpZiAoIGxhYmVsICkge1xyXG5cclxuICAgICAgdGhpcy5sYWJlbENvbnRhaW5lciA9IG5ldyBOb2RlKCB7XHJcbiAgICAgICAgcGlja2FibGU6IGZhbHNlXHJcbiAgICAgIH0gKTtcclxuICAgICAgdGhpcy50aWNrTm9kZS5hZGRDaGlsZCggdGhpcy5sYWJlbENvbnRhaW5lciApO1xyXG4gICAgICB0aGlzLmxhYmVsQ29udGFpbmVyLmFkZENoaWxkKCBsYWJlbCApO1xyXG5cclxuICAgICAgLy8gRm9yIGEgdmVydGljYWwgc2xpZGVyLCByb3RhdGUgbGFiZWxzIG9wcG9zaXRlIHRoZSByb3RhdGlvbiBvZiB0aGUgc2xpZGVyLCBzbyB0aGF0IHRoZXkgYXBwZWFyIGFzIGV4cGVjdGVkLlxyXG4gICAgICBpZiAoIG9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5WRVJUSUNBTCApIHtcclxuICAgICAgICB0aGlzLmxhYmVsQ29udGFpbmVyLnJvdGF0aW9uID0gLVN1bkNvbnN0YW50cy5TTElERVJfVkVSVElDQUxfUk9UQVRJT047XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMubGFiZWxNYW51YWxDb25zdHJhaW50ID0gTWFudWFsQ29uc3RyYWludC5jcmVhdGUoIHRoaXMudGlja05vZGUsIFsgdGlja1BhdGgsIHRoaXMubGFiZWxDb250YWluZXIgXSwgKCB0aWNrUHJveHksIGxhYmVsUHJveHkgKSA9PiB7XHJcbiAgICAgICAgbGFiZWxQcm94eS5jZW50ZXJYID0gdGlja1Byb3h5LmNlbnRlclg7XHJcbiAgICAgICAgbGFiZWxQcm94eS5ib3R0b20gPSB0aWNrUHJveHkudG9wIC0gdGlja09wdGlvbnMudGlja0xhYmVsU3BhY2luZztcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnBhcmVudC5yZW1vdmVDaGlsZCggdGhpcy50aWNrTm9kZSApO1xyXG4gICAgdGhpcy5sYWJlbENvbnRhaW5lciAmJiB0aGlzLmxhYmVsQ29udGFpbmVyLmRpc3Bvc2UoKTtcclxuXHJcbiAgICB0aGlzLmxhYmVsWFByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgIHRoaXMubGFiZWxNYW51YWxDb25zdHJhaW50ICYmIHRoaXMubGFiZWxNYW51YWxDb25zdHJhaW50LmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnN1bi5yZWdpc3RlciggJ1NsaWRlclRpY2snLCBTbGlkZXJUaWNrICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLGtDQUFrQztBQUU5RCxTQUFTQyxLQUFLLFFBQVEsMEJBQTBCO0FBQ2hELE9BQU9DLFdBQVcsTUFBTSxtQ0FBbUM7QUFDM0QsU0FBU0MsZ0JBQWdCLEVBQUVDLElBQUksRUFBRUMsSUFBSSxRQUFnQiw2QkFBNkI7QUFFbEYsT0FBT0MsR0FBRyxNQUFNLFVBQVU7QUFDMUIsT0FBT0MsWUFBWSxNQUFNLG1CQUFtQjtBQVk1QyxlQUFlLE1BQU1DLFVBQVUsQ0FBQztFQVM5QjtFQUNPQyxXQUFXQSxDQUNDQyxNQUFZLEVBQ2JDLEtBQWEsRUFDWkMsS0FBdUIsRUFDeENDLE1BQWMsRUFDZEMsTUFBYyxFQUNkQyxTQUFpQixFQUNqQkMsV0FBd0MsRUFDeENDLFdBQXdCLEVBQ3hCQyxLQUFrQixFQUNsQjtJQUFBLEtBVGlCUixNQUFZLEdBQVpBLE1BQVk7SUFBQSxLQUNiQyxLQUFhLEdBQWJBLEtBQWE7SUFBQSxLQUNaQyxLQUF1QixHQUF2QkEsS0FBdUI7SUFTeEMsSUFBSSxDQUFDTyxjQUFjLEdBQUcsSUFBSW5CLGVBQWUsQ0FBRSxDQUFFa0IsS0FBSyxDQUFDRSx1QkFBdUIsQ0FBRSxFQUFFQyxlQUFlLElBQUlBLGVBQWUsQ0FBQ0MsUUFBUSxDQUFFWCxLQUFNLENBQUUsQ0FBQzs7SUFFcEk7SUFDQSxJQUFJLENBQUNZLFFBQVEsR0FBRyxJQUFJbkIsSUFBSSxDQUFDLENBQUM7SUFDMUJNLE1BQU0sQ0FBQ2MsUUFBUSxDQUFFLElBQUksQ0FBQ0QsUUFBUyxDQUFDO0lBRWhDLE1BQU1FLFFBQVEsR0FBRyxJQUFJcEIsSUFBSSxDQUFFLElBQUlKLEtBQUssQ0FBQyxDQUFDLENBQ2pDeUIsTUFBTSxDQUFFLENBQUMsRUFBRVIsS0FBSyxDQUFDUyxHQUFJLENBQUMsQ0FDdEJDLE1BQU0sQ0FBRSxDQUFDLEVBQUVWLEtBQUssQ0FBQ1MsR0FBRyxHQUFHZCxNQUFPLENBQUMsRUFDbEM7TUFBRUMsTUFBTSxFQUFFQSxNQUFNO01BQUVDLFNBQVMsRUFBRUE7SUFBVSxDQUFFLENBQUM7SUFFNUMsSUFBSSxDQUFDSSxjQUFjLENBQUNVLElBQUksQ0FBRUMsQ0FBQyxJQUFJO01BQzdCTCxRQUFRLENBQUNLLENBQUMsR0FBR0EsQ0FBQztJQUNoQixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNQLFFBQVEsQ0FBQ0MsUUFBUSxDQUFFQyxRQUFTLENBQUM7O0lBRWxDO0lBQ0EsSUFBS2IsS0FBSyxFQUFHO01BRVgsSUFBSSxDQUFDbUIsY0FBYyxHQUFHLElBQUkzQixJQUFJLENBQUU7UUFDOUI0QixRQUFRLEVBQUU7TUFDWixDQUFFLENBQUM7TUFDSCxJQUFJLENBQUNULFFBQVEsQ0FBQ0MsUUFBUSxDQUFFLElBQUksQ0FBQ08sY0FBZSxDQUFDO01BQzdDLElBQUksQ0FBQ0EsY0FBYyxDQUFDUCxRQUFRLENBQUVaLEtBQU0sQ0FBQzs7TUFFckM7TUFDQSxJQUFLSyxXQUFXLEtBQUtmLFdBQVcsQ0FBQytCLFFBQVEsRUFBRztRQUMxQyxJQUFJLENBQUNGLGNBQWMsQ0FBQ0csUUFBUSxHQUFHLENBQUMzQixZQUFZLENBQUM0Qix3QkFBd0I7TUFDdkU7TUFFQSxJQUFJLENBQUNDLHFCQUFxQixHQUFHakMsZ0JBQWdCLENBQUNrQyxNQUFNLENBQUUsSUFBSSxDQUFDZCxRQUFRLEVBQUUsQ0FBRUUsUUFBUSxFQUFFLElBQUksQ0FBQ00sY0FBYyxDQUFFLEVBQUUsQ0FBRU8sU0FBUyxFQUFFQyxVQUFVLEtBQU07UUFDbklBLFVBQVUsQ0FBQ0MsT0FBTyxHQUFHRixTQUFTLENBQUNFLE9BQU87UUFDdENELFVBQVUsQ0FBQ0UsTUFBTSxHQUFHSCxTQUFTLENBQUNYLEdBQUcsR0FBR1gsV0FBVyxDQUFDMEIsZ0JBQWdCO01BQ2xFLENBQUUsQ0FBQztJQUNMO0VBQ0Y7RUFFT0MsT0FBT0EsQ0FBQSxFQUFTO0lBQ3JCLElBQUksQ0FBQ2pDLE1BQU0sQ0FBQ2tDLFdBQVcsQ0FBRSxJQUFJLENBQUNyQixRQUFTLENBQUM7SUFDeEMsSUFBSSxDQUFDUSxjQUFjLElBQUksSUFBSSxDQUFDQSxjQUFjLENBQUNZLE9BQU8sQ0FBQyxDQUFDO0lBRXBELElBQUksQ0FBQ3hCLGNBQWMsQ0FBQ3dCLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLElBQUksQ0FBQ1AscUJBQXFCLElBQUksSUFBSSxDQUFDQSxxQkFBcUIsQ0FBQ08sT0FBTyxDQUFDLENBQUM7RUFDcEU7QUFDRjtBQUVBckMsR0FBRyxDQUFDdUMsUUFBUSxDQUFFLFlBQVksRUFBRXJDLFVBQVcsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==