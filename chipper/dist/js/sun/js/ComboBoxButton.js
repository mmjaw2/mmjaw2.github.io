// Copyright 2019-2024, University of Colorado Boulder

/**
 * The button on a combo box box.  Displays the current selection on the button.
 * Typically instantiated by ComboBox, not by client code.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Shape } from '../../kite/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import { AriaHasPopUpMutator, GridBox, Line, Node, Path, PDOMPeer } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import ButtonNode from './buttons/ButtonNode.js';
import RectangularPushButton from './buttons/RectangularPushButton.js';
import sun from './sun.js';
import SunConstants from './SunConstants.js';
import nullSoundPlayer from '../../tambo/js/shared-sound-players/nullSoundPlayer.js';
import TinyProperty from '../../axon/js/TinyProperty.js';
import ComboBox from './ComboBox.js';
import Multilink from '../../axon/js/Multilink.js';
import PatternStringProperty from '../../axon/js/PatternStringProperty.js';
import Property from '../../axon/js/Property.js';
import DerivedProperty from '../../axon/js/DerivedProperty.js';
import DynamicProperty from '../../axon/js/DynamicProperty.js';

// constants
const ALIGN_VALUES = ['left', 'center', 'right'];
const ARROW_DIRECTION_VALUES = ['up', 'down'];
// The definition for how ComboBoxButton sets its accessibleName in the PDOM. See ComboBox.md for further style guide
// and documentation on the pattern.
const ACCESSIBLE_NAME_BEHAVIOR = (node, options, accessibleName) => {
  options.labelContent = accessibleName;
  return options;
};
export default class ComboBoxButton extends RectangularPushButton {
  // set to true to block voicing to occur upon this button's next focus event.

  // needed by methods

  constructor(property, items, nodes, a11yNamePropertyMap, providedOptions) {
    const options = optionize()({
      align: 'left',
      arrowDirection: 'down',
      arrowFill: 'black',
      comboBoxVoicingNameResponsePattern: SunConstants.VALUE_NAMED_PLACEHOLDER,
      // RectangularPushButton options
      cursor: 'pointer',
      baseColor: 'white',
      buttonAppearanceStrategy: ButtonNode.FlatAppearanceStrategy,
      xMargin: 12,
      yMargin: 8,
      stroke: 'black',
      lineWidth: 1,
      soundPlayer: nullSoundPlayer,
      // disable default sound generation

      // PushButtonModel options
      enabledPropertyOptions: {
        phetioFeatured: false
      },
      visiblePropertyOptions: {
        phetioFeatured: false
      },
      localPreferredWidthProperty: new TinyProperty(null),
      localMinimumWidthProperty: new TinyProperty(null),
      // pdom
      containerTagName: 'div',
      labelTagName: 'p',
      // NOTE: A `span` causes duplicate name-speaking with VO+safari in https://github.com/phetsims/ratio-and-proportion/issues/532
      accessibleNameBehavior: ACCESSIBLE_NAME_BEHAVIOR
    }, providedOptions);
    assert && assert(_.includes(ALIGN_VALUES, options.align), `invalid align: ${options.align}`);
    assert && assert(_.includes(ARROW_DIRECTION_VALUES, options.arrowDirection), `invalid arrowDirection: ${options.arrowDirection}`);

    // To improve readability
    const itemXMargin = options.xMargin;
    const itemYMargin = options.yMargin;

    // Compute max item size
    const maxItemWidthProperty = ComboBox.getMaxItemWidthProperty(nodes);
    const maxItemHeightProperty = ComboBox.getMaxItemHeightProperty(nodes);
    const arrow = new Path(null, {
      fill: options.arrowFill
    });

    // Wrapper for the selected item's Node.
    // Do not transform ComboBoxItem.node because it is shared with ComboBoxListItemNode.

    const matchingItem = _.find(items, item => item.value === property.value);
    const index = items.indexOf(matchingItem);
    const itemNodeWrapper = new Node({
      layoutOptions: {
        yMargin: itemYMargin,
        grow: 1,
        xAlign: options.align
      },
      children: [nodes[index]]
    });

    // Line separator between the item and arrow that is the full height of the button.
    // We cannot use VSeparator here, because it is incompatible with GridConstraints.
    // y2 is set during a multilink according to the item height property.
    const separatorLine = new Line(0, 0, 0, 0, {
      stroke: 'black',
      lineWidth: options.lineWidth
    });
    options.content = new GridBox({
      rows: [[itemNodeWrapper, separatorLine, arrow]]
    });

    // Update the drop-down arrow.  No dispose is needed since the dependencies are locally owned.
    Multilink.multilink([maxItemWidthProperty, maxItemHeightProperty], (maxItemWidth, maxItemHeight) => {
      const fullHeight = maxItemHeight + 2 * itemYMargin;

      // We want the arrow area to be square, see https://github.com/phetsims/sun/issues/453
      const arrowAreaSize = fullHeight;

      // The arrow is sized to fit in the arrow area, empirically determined to be visually pleasing.
      const arrowHeight = 0.35 * arrowAreaSize; // height of equilateral triangle
      const arrowWidth = 2 * arrowHeight * Math.sqrt(3) / 3; // side of equilateral triangle

      const leftMargin = itemXMargin;
      const middleMargin = itemXMargin - options.lineWidth / 2; // Compensation for the separator having width
      const rightMargin = -options.lineWidth / 2; // Compensation for the separator having width

      // arrow that points up or down, to indicate which way the list pops up
      const createArrowShape = (direction, width, height) => {
        if (direction === 'up') {
          return new Shape().moveTo(0, height).lineTo(width / 2, 0).lineTo(width, height).close();
        } else {
          return new Shape().moveTo(0, 0).lineTo(width, 0).lineTo(width / 2, height).close();
        }
      };
      arrow.shape = createArrowShape(options.arrowDirection, arrowWidth, arrowHeight);
      arrow.mutateLayoutOptions({
        minContentWidth: arrowAreaSize,
        minContentHeight: arrowAreaSize
      });
      itemNodeWrapper.mutateLayoutOptions({
        minContentWidth: maxItemWidth,
        minContentHeight: maxItemHeight,
        leftMargin: leftMargin,
        rightMargin: middleMargin
      });
      separatorLine.y2 = fullHeight;
      separatorLine.mutateLayoutOptions({
        rightMargin: rightMargin
      });
    });

    // Margins are different in the item and button areas. And we want the vertical separator to extend
    // beyond the margin.  We've handled those margins above, so the actual margins propagated to the button
    // need to be zero.
    options.xMargin = 0;
    options.yMargin = 0;
    super(options);

    // Provide our minimum width back up to the ComboBox (or creator)
    this.minimumWidthProperty.link(minimumWidth => {
      options.localMinimumWidthProperty.value = minimumWidth;
    });

    // Hook our ComboBox's preferredWidth up to ours
    const preferredWidthListener = preferredWidth => {
      this.preferredWidth = preferredWidth;
    };
    options.localPreferredWidthProperty.link(preferredWidthListener);
    this._blockNextVoicingFocusListener = false;
    this.voicingFocusListener = () => {
      // fire the listener only if we are not blocking the focus listener
      !this._blockNextVoicingFocusListener && this.defaultFocusListener();
      this._blockNextVoicingFocusListener = false;
    };

    // Keep track for disposal
    let voicingPatternstringProperty = null;
    const itemProperty = new DerivedProperty([property], value => {
      const item = _.find(items, item => item.value === value);
      assert && assert(item, `no item found for value: ${value}`);
      return item;
    });
    const nodeProperty = new DerivedProperty([itemProperty], item => {
      return nodes[items.indexOf(item)];
    });
    const a11yNameProperty = new DynamicProperty(itemProperty, {
      derive: item => a11yNamePropertyMap.get(item.value)
    });

    // Show the corresponding item's Node on the button.
    nodeProperty.link(node => {
      // remove the node for the previous item
      itemNodeWrapper.removeAllChildren();

      // add the associated node
      itemNodeWrapper.addChild(node);
    });

    // Update the button's accessible name when the item changes.
    a11yNameProperty.link(a11yName => {
      // pdom
      this.innerContent = a11yName;

      // TODO: We should support this changing, see https://github.com/phetsims/sun/issues/865
      const patternProperty = typeof options.comboBoxVoicingNameResponsePattern === 'string' ? new Property(options.comboBoxVoicingNameResponsePattern) : options.comboBoxVoicingNameResponsePattern;
      voicingPatternstringProperty && voicingPatternstringProperty.dispose();
      // TODO: DO NOT have this getting recreated, we can simply create one up front, see https://github.com/phetsims/sun/issues/865
      this.voicingNameResponse = voicingPatternstringProperty = new PatternStringProperty(patternProperty, {
        value: a11yName || ''
      }, {
        tandem: Tandem.OPT_OUT
      });
    });

    // Add aria-labelledby attribute to the button.
    // The button is aria-labelledby its own label sibling, and then (second) its primary sibling in the PDOM.
    // Order matters!
    this.ariaLabelledbyAssociations = [{
      otherNode: this,
      otherElementName: PDOMPeer.LABEL_SIBLING,
      thisElementName: PDOMPeer.PRIMARY_SIBLING
    }, {
      otherNode: this,
      otherElementName: PDOMPeer.PRIMARY_SIBLING,
      thisElementName: PDOMPeer.PRIMARY_SIBLING
    }];

    // signify to AT that this button opens a menu
    AriaHasPopUpMutator.mutateNode(this, 'listbox');
    this.disposeComboBoxButton = () => {
      maxItemWidthProperty.dispose();
      maxItemHeightProperty.dispose();
      itemProperty.dispose();
      options.localPreferredWidthProperty.unlink(preferredWidthListener);
      voicingPatternstringProperty && voicingPatternstringProperty.dispose();
    };
    this.arrow = arrow;
    this.separatorLine = separatorLine;
  }

  /**
   * Sets the button to look like a value display instead of a combo box button.
   * See https://github.com/phetsims/sun/issues/451
   */
  setDisplayOnly(displayOnly) {
    this.arrow.visible = !displayOnly;
    this.separatorLine.visible = !displayOnly;
  }

  /**
   * Call to block voicing from occurring upon this button's next focus event.
   * For use by ComboBox.
   */
  blockNextVoicingFocusListener() {
    this._blockNextVoicingFocusListener = true;
  }
  dispose() {
    this.disposeComboBoxButton();
    super.dispose();
  }
}
sun.register('ComboBoxButton', ComboBoxButton);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaGFwZSIsIm9wdGlvbml6ZSIsIkFyaWFIYXNQb3BVcE11dGF0b3IiLCJHcmlkQm94IiwiTGluZSIsIk5vZGUiLCJQYXRoIiwiUERPTVBlZXIiLCJUYW5kZW0iLCJCdXR0b25Ob2RlIiwiUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIiwic3VuIiwiU3VuQ29uc3RhbnRzIiwibnVsbFNvdW5kUGxheWVyIiwiVGlueVByb3BlcnR5IiwiQ29tYm9Cb3giLCJNdWx0aWxpbmsiLCJQYXR0ZXJuU3RyaW5nUHJvcGVydHkiLCJQcm9wZXJ0eSIsIkRlcml2ZWRQcm9wZXJ0eSIsIkR5bmFtaWNQcm9wZXJ0eSIsIkFMSUdOX1ZBTFVFUyIsIkFSUk9XX0RJUkVDVElPTl9WQUxVRVMiLCJBQ0NFU1NJQkxFX05BTUVfQkVIQVZJT1IiLCJub2RlIiwib3B0aW9ucyIsImFjY2Vzc2libGVOYW1lIiwibGFiZWxDb250ZW50IiwiQ29tYm9Cb3hCdXR0b24iLCJjb25zdHJ1Y3RvciIsInByb3BlcnR5IiwiaXRlbXMiLCJub2RlcyIsImExMXlOYW1lUHJvcGVydHlNYXAiLCJwcm92aWRlZE9wdGlvbnMiLCJhbGlnbiIsImFycm93RGlyZWN0aW9uIiwiYXJyb3dGaWxsIiwiY29tYm9Cb3hWb2ljaW5nTmFtZVJlc3BvbnNlUGF0dGVybiIsIlZBTFVFX05BTUVEX1BMQUNFSE9MREVSIiwiY3Vyc29yIiwiYmFzZUNvbG9yIiwiYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5IiwiRmxhdEFwcGVhcmFuY2VTdHJhdGVneSIsInhNYXJnaW4iLCJ5TWFyZ2luIiwic3Ryb2tlIiwibGluZVdpZHRoIiwic291bmRQbGF5ZXIiLCJlbmFibGVkUHJvcGVydHlPcHRpb25zIiwicGhldGlvRmVhdHVyZWQiLCJ2aXNpYmxlUHJvcGVydHlPcHRpb25zIiwibG9jYWxQcmVmZXJyZWRXaWR0aFByb3BlcnR5IiwibG9jYWxNaW5pbXVtV2lkdGhQcm9wZXJ0eSIsImNvbnRhaW5lclRhZ05hbWUiLCJsYWJlbFRhZ05hbWUiLCJhY2Nlc3NpYmxlTmFtZUJlaGF2aW9yIiwiYXNzZXJ0IiwiXyIsImluY2x1ZGVzIiwiaXRlbVhNYXJnaW4iLCJpdGVtWU1hcmdpbiIsIm1heEl0ZW1XaWR0aFByb3BlcnR5IiwiZ2V0TWF4SXRlbVdpZHRoUHJvcGVydHkiLCJtYXhJdGVtSGVpZ2h0UHJvcGVydHkiLCJnZXRNYXhJdGVtSGVpZ2h0UHJvcGVydHkiLCJhcnJvdyIsImZpbGwiLCJtYXRjaGluZ0l0ZW0iLCJmaW5kIiwiaXRlbSIsInZhbHVlIiwiaW5kZXgiLCJpbmRleE9mIiwiaXRlbU5vZGVXcmFwcGVyIiwibGF5b3V0T3B0aW9ucyIsImdyb3ciLCJ4QWxpZ24iLCJjaGlsZHJlbiIsInNlcGFyYXRvckxpbmUiLCJjb250ZW50Iiwicm93cyIsIm11bHRpbGluayIsIm1heEl0ZW1XaWR0aCIsIm1heEl0ZW1IZWlnaHQiLCJmdWxsSGVpZ2h0IiwiYXJyb3dBcmVhU2l6ZSIsImFycm93SGVpZ2h0IiwiYXJyb3dXaWR0aCIsIk1hdGgiLCJzcXJ0IiwibGVmdE1hcmdpbiIsIm1pZGRsZU1hcmdpbiIsInJpZ2h0TWFyZ2luIiwiY3JlYXRlQXJyb3dTaGFwZSIsImRpcmVjdGlvbiIsIndpZHRoIiwiaGVpZ2h0IiwibW92ZVRvIiwibGluZVRvIiwiY2xvc2UiLCJzaGFwZSIsIm11dGF0ZUxheW91dE9wdGlvbnMiLCJtaW5Db250ZW50V2lkdGgiLCJtaW5Db250ZW50SGVpZ2h0IiwieTIiLCJtaW5pbXVtV2lkdGhQcm9wZXJ0eSIsImxpbmsiLCJtaW5pbXVtV2lkdGgiLCJwcmVmZXJyZWRXaWR0aExpc3RlbmVyIiwicHJlZmVycmVkV2lkdGgiLCJfYmxvY2tOZXh0Vm9pY2luZ0ZvY3VzTGlzdGVuZXIiLCJ2b2ljaW5nRm9jdXNMaXN0ZW5lciIsImRlZmF1bHRGb2N1c0xpc3RlbmVyIiwidm9pY2luZ1BhdHRlcm5zdHJpbmdQcm9wZXJ0eSIsIml0ZW1Qcm9wZXJ0eSIsIm5vZGVQcm9wZXJ0eSIsImExMXlOYW1lUHJvcGVydHkiLCJkZXJpdmUiLCJnZXQiLCJyZW1vdmVBbGxDaGlsZHJlbiIsImFkZENoaWxkIiwiYTExeU5hbWUiLCJpbm5lckNvbnRlbnQiLCJwYXR0ZXJuUHJvcGVydHkiLCJkaXNwb3NlIiwidm9pY2luZ05hbWVSZXNwb25zZSIsInRhbmRlbSIsIk9QVF9PVVQiLCJhcmlhTGFiZWxsZWRieUFzc29jaWF0aW9ucyIsIm90aGVyTm9kZSIsIm90aGVyRWxlbWVudE5hbWUiLCJMQUJFTF9TSUJMSU5HIiwidGhpc0VsZW1lbnROYW1lIiwiUFJJTUFSWV9TSUJMSU5HIiwibXV0YXRlTm9kZSIsImRpc3Bvc2VDb21ib0JveEJ1dHRvbiIsInVubGluayIsInNldERpc3BsYXlPbmx5IiwiZGlzcGxheU9ubHkiLCJ2aXNpYmxlIiwiYmxvY2tOZXh0Vm9pY2luZ0ZvY3VzTGlzdGVuZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkNvbWJvQm94QnV0dG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoZSBidXR0b24gb24gYSBjb21ibyBib3ggYm94LiAgRGlzcGxheXMgdGhlIGN1cnJlbnQgc2VsZWN0aW9uIG9uIHRoZSBidXR0b24uXHJcbiAqIFR5cGljYWxseSBpbnN0YW50aWF0ZWQgYnkgQ29tYm9Cb3gsIG5vdCBieSBjbGllbnQgY29kZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IEFyaWFIYXNQb3BVcE11dGF0b3IsIEdyaWRCb3gsIExpbmUsIE5vZGUsIFBhdGgsIFBET01CZWhhdmlvckZ1bmN0aW9uLCBQRE9NUGVlciwgVFBhaW50IH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IEJ1dHRvbk5vZGUgZnJvbSAnLi9idXR0b25zL0J1dHRvbk5vZGUuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLCB7IFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbk9wdGlvbnMgfSBmcm9tICcuL2J1dHRvbnMvUmVjdGFuZ3VsYXJQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IHN1biBmcm9tICcuL3N1bi5qcyc7XHJcbmltcG9ydCBTdW5Db25zdGFudHMgZnJvbSAnLi9TdW5Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgVFByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvVFByb3BlcnR5LmpzJztcclxuaW1wb3J0IG51bGxTb3VuZFBsYXllciBmcm9tICcuLi8uLi90YW1iby9qcy9zaGFyZWQtc291bmQtcGxheWVycy9udWxsU291bmRQbGF5ZXIuanMnO1xyXG5pbXBvcnQgVGlueVByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvVGlueVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgQ29tYm9Cb3gsIHsgQ29tYm9Cb3hBMTF5TmFtZVByb3BlcnR5TWFwLCBDb21ib0JveEl0ZW1Ob05vZGUgfSBmcm9tICcuL0NvbWJvQm94LmpzJztcclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IFBhdHRlcm5TdHJpbmdQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1BhdHRlcm5TdHJpbmdQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEeW5hbWljUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9EeW5hbWljUHJvcGVydHkuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEFMSUdOX1ZBTFVFUyA9IFsgJ2xlZnQnLCAnY2VudGVyJywgJ3JpZ2h0JyBdIGFzIGNvbnN0O1xyXG5jb25zdCBBUlJPV19ESVJFQ1RJT05fVkFMVUVTID0gWyAndXAnLCAnZG93bicgXSBhcyBjb25zdDtcclxuXHJcbmV4cG9ydCB0eXBlIENvbWJvQm94QnV0dG9uQWxpZ24gPSB0eXBlb2YgQUxJR05fVkFMVUVTW251bWJlcl07XHJcbmV4cG9ydCB0eXBlIENvbWJvQm94QnV0dG9uQXJyb3dEaXJlY3Rpb24gPSB0eXBlb2YgQVJST1dfRElSRUNUSU9OX1ZBTFVFU1tudW1iZXJdO1xyXG5cclxuLy8gVGhlIGRlZmluaXRpb24gZm9yIGhvdyBDb21ib0JveEJ1dHRvbiBzZXRzIGl0cyBhY2Nlc3NpYmxlTmFtZSBpbiB0aGUgUERPTS4gU2VlIENvbWJvQm94Lm1kIGZvciBmdXJ0aGVyIHN0eWxlIGd1aWRlXHJcbi8vIGFuZCBkb2N1bWVudGF0aW9uIG9uIHRoZSBwYXR0ZXJuLlxyXG5jb25zdCBBQ0NFU1NJQkxFX05BTUVfQkVIQVZJT1I6IFBET01CZWhhdmlvckZ1bmN0aW9uID0gKCBub2RlLCBvcHRpb25zLCBhY2Nlc3NpYmxlTmFtZSApID0+IHtcclxuICBvcHRpb25zLmxhYmVsQ29udGVudCA9IGFjY2Vzc2libGVOYW1lO1xyXG4gIHJldHVybiBvcHRpb25zO1xyXG59O1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBhbGlnbj86IENvbWJvQm94QnV0dG9uQWxpZ247XHJcbiAgYXJyb3dEaXJlY3Rpb24/OiBDb21ib0JveEJ1dHRvbkFycm93RGlyZWN0aW9uO1xyXG4gIGFycm93RmlsbD86IFRQYWludDtcclxuXHJcbiAgLy8gVGhlIHBhdHRlcm4gZm9yIHRoZSB2b2ljaW5nTmFtZVJlc3BvbnNlLCB3aXRoIFwie3t2YWx1ZX19XCIgcHJvdmlkZWQgdG8gYmUgZmlsbGVkIGluIHdpdGhcclxuICAvLyBDb21ib0JveEl0ZW0uYTExeU5hbWUuXHJcbiAgY29tYm9Cb3hWb2ljaW5nTmFtZVJlc3BvbnNlUGF0dGVybj86IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4gfCBzdHJpbmc7XHJcblxyXG4gIGxvY2FsUHJlZmVycmVkV2lkdGhQcm9wZXJ0eT86IFRSZWFkT25seVByb3BlcnR5PG51bWJlciB8IG51bGw+O1xyXG4gIGxvY2FsTWluaW11bVdpZHRoUHJvcGVydHk/OiBUUHJvcGVydHk8bnVtYmVyIHwgbnVsbD47IC8vIFdpbGwgb25seSBiZSBzZXRcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIENvbWJvQm94QnV0dG9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxSZWN0YW5ndWxhclB1c2hCdXR0b25PcHRpb25zLCAnY2hpbGRyZW4nIHwgJ2FyaWFMYWJlbGxlZGJ5QXNzb2NpYXRpb25zJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDb21ib0JveEJ1dHRvbjxUPiBleHRlbmRzIFJlY3Rhbmd1bGFyUHVzaEJ1dHRvbiB7XHJcblxyXG4gIC8vIHNldCB0byB0cnVlIHRvIGJsb2NrIHZvaWNpbmcgdG8gb2NjdXIgdXBvbiB0aGlzIGJ1dHRvbidzIG5leHQgZm9jdXMgZXZlbnQuXHJcbiAgcHJpdmF0ZSBfYmxvY2tOZXh0Vm9pY2luZ0ZvY3VzTGlzdGVuZXI6IGJvb2xlYW47XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUNvbWJvQm94QnV0dG9uOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvLyBuZWVkZWQgYnkgbWV0aG9kc1xyXG4gIHByaXZhdGUgYXJyb3c6IFBhdGg7XHJcbiAgcHJpdmF0ZSBzZXBhcmF0b3JMaW5lOiBMaW5lO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICBwcm9wZXJ0eTogVFByb3BlcnR5PFQ+LFxyXG4gICAgaXRlbXM6IENvbWJvQm94SXRlbU5vTm9kZTxUPltdLFxyXG4gICAgbm9kZXM6IE5vZGVbXSxcclxuICAgIGExMXlOYW1lUHJvcGVydHlNYXA6IENvbWJvQm94QTExeU5hbWVQcm9wZXJ0eU1hcDxUPixcclxuICAgIHByb3ZpZGVkT3B0aW9ucz86IENvbWJvQm94QnV0dG9uT3B0aW9uc1xyXG4gICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Q29tYm9Cb3hCdXR0b25PcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgYWxpZ246ICdsZWZ0JyxcclxuICAgICAgYXJyb3dEaXJlY3Rpb246ICdkb3duJyxcclxuICAgICAgYXJyb3dGaWxsOiAnYmxhY2snLFxyXG5cclxuICAgICAgY29tYm9Cb3hWb2ljaW5nTmFtZVJlc3BvbnNlUGF0dGVybjogU3VuQ29uc3RhbnRzLlZBTFVFX05BTUVEX1BMQUNFSE9MREVSLFxyXG5cclxuICAgICAgLy8gUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIG9wdGlvbnNcclxuICAgICAgY3Vyc29yOiAncG9pbnRlcicsXHJcbiAgICAgIGJhc2VDb2xvcjogJ3doaXRlJyxcclxuICAgICAgYnV0dG9uQXBwZWFyYW5jZVN0cmF0ZWd5OiBCdXR0b25Ob2RlLkZsYXRBcHBlYXJhbmNlU3RyYXRlZ3ksXHJcbiAgICAgIHhNYXJnaW46IDEyLFxyXG4gICAgICB5TWFyZ2luOiA4LFxyXG4gICAgICBzdHJva2U6ICdibGFjaycsXHJcbiAgICAgIGxpbmVXaWR0aDogMSxcclxuICAgICAgc291bmRQbGF5ZXI6IG51bGxTb3VuZFBsYXllciwgLy8gZGlzYWJsZSBkZWZhdWx0IHNvdW5kIGdlbmVyYXRpb25cclxuXHJcbiAgICAgIC8vIFB1c2hCdXR0b25Nb2RlbCBvcHRpb25zXHJcbiAgICAgIGVuYWJsZWRQcm9wZXJ0eU9wdGlvbnM6IHtcclxuICAgICAgICBwaGV0aW9GZWF0dXJlZDogZmFsc2VcclxuICAgICAgfSxcclxuICAgICAgdmlzaWJsZVByb3BlcnR5T3B0aW9uczogeyBwaGV0aW9GZWF0dXJlZDogZmFsc2UgfSxcclxuXHJcbiAgICAgIGxvY2FsUHJlZmVycmVkV2lkdGhQcm9wZXJ0eTogbmV3IFRpbnlQcm9wZXJ0eSggbnVsbCApLFxyXG4gICAgICBsb2NhbE1pbmltdW1XaWR0aFByb3BlcnR5OiBuZXcgVGlueVByb3BlcnR5KCBudWxsICksXHJcblxyXG4gICAgICAvLyBwZG9tXHJcbiAgICAgIGNvbnRhaW5lclRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICBsYWJlbFRhZ05hbWU6ICdwJywgLy8gTk9URTogQSBgc3BhbmAgY2F1c2VzIGR1cGxpY2F0ZSBuYW1lLXNwZWFraW5nIHdpdGggVk8rc2FmYXJpIGluIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9yYXRpby1hbmQtcHJvcG9ydGlvbi9pc3N1ZXMvNTMyXHJcbiAgICAgIGFjY2Vzc2libGVOYW1lQmVoYXZpb3I6IEFDQ0VTU0lCTEVfTkFNRV9CRUhBVklPUlxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggXy5pbmNsdWRlcyggQUxJR05fVkFMVUVTLCBvcHRpb25zLmFsaWduICksXHJcbiAgICAgIGBpbnZhbGlkIGFsaWduOiAke29wdGlvbnMuYWxpZ259YCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggXy5pbmNsdWRlcyggQVJST1dfRElSRUNUSU9OX1ZBTFVFUywgb3B0aW9ucy5hcnJvd0RpcmVjdGlvbiApLFxyXG4gICAgICBgaW52YWxpZCBhcnJvd0RpcmVjdGlvbjogJHtvcHRpb25zLmFycm93RGlyZWN0aW9ufWAgKTtcclxuXHJcbiAgICAvLyBUbyBpbXByb3ZlIHJlYWRhYmlsaXR5XHJcbiAgICBjb25zdCBpdGVtWE1hcmdpbiA9IG9wdGlvbnMueE1hcmdpbjtcclxuICAgIGNvbnN0IGl0ZW1ZTWFyZ2luID0gb3B0aW9ucy55TWFyZ2luO1xyXG5cclxuICAgIC8vIENvbXB1dGUgbWF4IGl0ZW0gc2l6ZVxyXG4gICAgY29uc3QgbWF4SXRlbVdpZHRoUHJvcGVydHkgPSBDb21ib0JveC5nZXRNYXhJdGVtV2lkdGhQcm9wZXJ0eSggbm9kZXMgKTtcclxuICAgIGNvbnN0IG1heEl0ZW1IZWlnaHRQcm9wZXJ0eSA9IENvbWJvQm94LmdldE1heEl0ZW1IZWlnaHRQcm9wZXJ0eSggbm9kZXMgKTtcclxuXHJcbiAgICBjb25zdCBhcnJvdyA9IG5ldyBQYXRoKCBudWxsLCB7XHJcbiAgICAgIGZpbGw6IG9wdGlvbnMuYXJyb3dGaWxsXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gV3JhcHBlciBmb3IgdGhlIHNlbGVjdGVkIGl0ZW0ncyBOb2RlLlxyXG4gICAgLy8gRG8gbm90IHRyYW5zZm9ybSBDb21ib0JveEl0ZW0ubm9kZSBiZWNhdXNlIGl0IGlzIHNoYXJlZCB3aXRoIENvbWJvQm94TGlzdEl0ZW1Ob2RlLlxyXG5cclxuXHJcbiAgICBjb25zdCBtYXRjaGluZ0l0ZW0gPSBfLmZpbmQoIGl0ZW1zLCBpdGVtID0+IGl0ZW0udmFsdWUgPT09IHByb3BlcnR5LnZhbHVlICkhO1xyXG4gICAgY29uc3QgaW5kZXggPSBpdGVtcy5pbmRleE9mKCBtYXRjaGluZ0l0ZW0gKTtcclxuICAgIGNvbnN0IGl0ZW1Ob2RlV3JhcHBlciA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIGxheW91dE9wdGlvbnM6IHtcclxuICAgICAgICB5TWFyZ2luOiBpdGVtWU1hcmdpbixcclxuICAgICAgICBncm93OiAxLFxyXG4gICAgICAgIHhBbGlnbjogb3B0aW9ucy5hbGlnblxyXG4gICAgICB9LFxyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIG5vZGVzWyBpbmRleCBdXHJcbiAgICAgIF1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBMaW5lIHNlcGFyYXRvciBiZXR3ZWVuIHRoZSBpdGVtIGFuZCBhcnJvdyB0aGF0IGlzIHRoZSBmdWxsIGhlaWdodCBvZiB0aGUgYnV0dG9uLlxyXG4gICAgLy8gV2UgY2Fubm90IHVzZSBWU2VwYXJhdG9yIGhlcmUsIGJlY2F1c2UgaXQgaXMgaW5jb21wYXRpYmxlIHdpdGggR3JpZENvbnN0cmFpbnRzLlxyXG4gICAgLy8geTIgaXMgc2V0IGR1cmluZyBhIG11bHRpbGluayBhY2NvcmRpbmcgdG8gdGhlIGl0ZW0gaGVpZ2h0IHByb3BlcnR5LlxyXG4gICAgY29uc3Qgc2VwYXJhdG9yTGluZSA9IG5ldyBMaW5lKCAwLCAwLCAwLCAwLCB7XHJcbiAgICAgIHN0cm9rZTogJ2JsYWNrJyxcclxuICAgICAgbGluZVdpZHRoOiBvcHRpb25zLmxpbmVXaWR0aFxyXG4gICAgfSApO1xyXG5cclxuICAgIG9wdGlvbnMuY29udGVudCA9IG5ldyBHcmlkQm94KCB7XHJcbiAgICAgIHJvd3M6IFsgW1xyXG4gICAgICAgIGl0ZW1Ob2RlV3JhcHBlcixcclxuICAgICAgICBzZXBhcmF0b3JMaW5lLFxyXG4gICAgICAgIGFycm93XHJcbiAgICAgIF0gXVxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIFVwZGF0ZSB0aGUgZHJvcC1kb3duIGFycm93LiAgTm8gZGlzcG9zZSBpcyBuZWVkZWQgc2luY2UgdGhlIGRlcGVuZGVuY2llcyBhcmUgbG9jYWxseSBvd25lZC5cclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoIFsgbWF4SXRlbVdpZHRoUHJvcGVydHksIG1heEl0ZW1IZWlnaHRQcm9wZXJ0eSBdLCAoIG1heEl0ZW1XaWR0aCwgbWF4SXRlbUhlaWdodCApID0+IHtcclxuXHJcbiAgICAgIGNvbnN0IGZ1bGxIZWlnaHQgPSBtYXhJdGVtSGVpZ2h0ICsgMiAqIGl0ZW1ZTWFyZ2luO1xyXG5cclxuICAgICAgLy8gV2Ugd2FudCB0aGUgYXJyb3cgYXJlYSB0byBiZSBzcXVhcmUsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3VuL2lzc3Vlcy80NTNcclxuICAgICAgY29uc3QgYXJyb3dBcmVhU2l6ZSA9IGZ1bGxIZWlnaHQ7XHJcblxyXG4gICAgICAvLyBUaGUgYXJyb3cgaXMgc2l6ZWQgdG8gZml0IGluIHRoZSBhcnJvdyBhcmVhLCBlbXBpcmljYWxseSBkZXRlcm1pbmVkIHRvIGJlIHZpc3VhbGx5IHBsZWFzaW5nLlxyXG4gICAgICBjb25zdCBhcnJvd0hlaWdodCA9IDAuMzUgKiBhcnJvd0FyZWFTaXplOyAvLyBoZWlnaHQgb2YgZXF1aWxhdGVyYWwgdHJpYW5nbGVcclxuICAgICAgY29uc3QgYXJyb3dXaWR0aCA9IDIgKiBhcnJvd0hlaWdodCAqIE1hdGguc3FydCggMyApIC8gMzsgLy8gc2lkZSBvZiBlcXVpbGF0ZXJhbCB0cmlhbmdsZVxyXG5cclxuICAgICAgY29uc3QgbGVmdE1hcmdpbiA9IGl0ZW1YTWFyZ2luO1xyXG4gICAgICBjb25zdCBtaWRkbGVNYXJnaW4gPSBpdGVtWE1hcmdpbiAtIG9wdGlvbnMubGluZVdpZHRoIC8gMjsgLy8gQ29tcGVuc2F0aW9uIGZvciB0aGUgc2VwYXJhdG9yIGhhdmluZyB3aWR0aFxyXG4gICAgICBjb25zdCByaWdodE1hcmdpbiA9IC1vcHRpb25zLmxpbmVXaWR0aCAvIDI7IC8vIENvbXBlbnNhdGlvbiBmb3IgdGhlIHNlcGFyYXRvciBoYXZpbmcgd2lkdGhcclxuXHJcbiAgICAgIC8vIGFycm93IHRoYXQgcG9pbnRzIHVwIG9yIGRvd24sIHRvIGluZGljYXRlIHdoaWNoIHdheSB0aGUgbGlzdCBwb3BzIHVwXHJcbiAgICAgIGNvbnN0IGNyZWF0ZUFycm93U2hhcGUgPSAoIGRpcmVjdGlvbjogJ3VwJyB8ICdkb3duJywgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgKSA9PiB7XHJcbiAgICAgICAgaWYgKCBkaXJlY3Rpb24gPT09ICd1cCcgKSB7XHJcbiAgICAgICAgICByZXR1cm4gbmV3IFNoYXBlKClcclxuICAgICAgICAgICAgLm1vdmVUbyggMCwgaGVpZ2h0IClcclxuICAgICAgICAgICAgLmxpbmVUbyggd2lkdGggLyAyLCAwIClcclxuICAgICAgICAgICAgLmxpbmVUbyggd2lkdGgsIGhlaWdodCApXHJcbiAgICAgICAgICAgIC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIHJldHVybiBuZXcgU2hhcGUoKVxyXG4gICAgICAgICAgICAubW92ZVRvKCAwLCAwIClcclxuICAgICAgICAgICAgLmxpbmVUbyggd2lkdGgsIDAgKVxyXG4gICAgICAgICAgICAubGluZVRvKCB3aWR0aCAvIDIsIGhlaWdodCApXHJcbiAgICAgICAgICAgIC5jbG9zZSgpO1xyXG4gICAgICAgIH1cclxuICAgICAgfTtcclxuXHJcbiAgICAgIGFycm93LnNoYXBlID0gY3JlYXRlQXJyb3dTaGFwZSggb3B0aW9ucy5hcnJvd0RpcmVjdGlvbiwgYXJyb3dXaWR0aCwgYXJyb3dIZWlnaHQgKTtcclxuICAgICAgYXJyb3cubXV0YXRlTGF5b3V0T3B0aW9ucygge1xyXG4gICAgICAgIG1pbkNvbnRlbnRXaWR0aDogYXJyb3dBcmVhU2l6ZSxcclxuICAgICAgICBtaW5Db250ZW50SGVpZ2h0OiBhcnJvd0FyZWFTaXplXHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAgIGl0ZW1Ob2RlV3JhcHBlci5tdXRhdGVMYXlvdXRPcHRpb25zKCB7XHJcbiAgICAgICAgbWluQ29udGVudFdpZHRoOiBtYXhJdGVtV2lkdGgsXHJcbiAgICAgICAgbWluQ29udGVudEhlaWdodDogbWF4SXRlbUhlaWdodCxcclxuICAgICAgICBsZWZ0TWFyZ2luOiBsZWZ0TWFyZ2luLFxyXG4gICAgICAgIHJpZ2h0TWFyZ2luOiBtaWRkbGVNYXJnaW5cclxuICAgICAgfSApO1xyXG5cclxuICAgICAgc2VwYXJhdG9yTGluZS55MiA9IGZ1bGxIZWlnaHQ7XHJcbiAgICAgIHNlcGFyYXRvckxpbmUubXV0YXRlTGF5b3V0T3B0aW9ucygge1xyXG4gICAgICAgIHJpZ2h0TWFyZ2luOiByaWdodE1hcmdpblxyXG4gICAgICB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gTWFyZ2lucyBhcmUgZGlmZmVyZW50IGluIHRoZSBpdGVtIGFuZCBidXR0b24gYXJlYXMuIEFuZCB3ZSB3YW50IHRoZSB2ZXJ0aWNhbCBzZXBhcmF0b3IgdG8gZXh0ZW5kXHJcbiAgICAvLyBiZXlvbmQgdGhlIG1hcmdpbi4gIFdlJ3ZlIGhhbmRsZWQgdGhvc2UgbWFyZ2lucyBhYm92ZSwgc28gdGhlIGFjdHVhbCBtYXJnaW5zIHByb3BhZ2F0ZWQgdG8gdGhlIGJ1dHRvblxyXG4gICAgLy8gbmVlZCB0byBiZSB6ZXJvLlxyXG4gICAgb3B0aW9ucy54TWFyZ2luID0gMDtcclxuICAgIG9wdGlvbnMueU1hcmdpbiA9IDA7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBQcm92aWRlIG91ciBtaW5pbXVtIHdpZHRoIGJhY2sgdXAgdG8gdGhlIENvbWJvQm94IChvciBjcmVhdG9yKVxyXG4gICAgdGhpcy5taW5pbXVtV2lkdGhQcm9wZXJ0eS5saW5rKCBtaW5pbXVtV2lkdGggPT4ge1xyXG4gICAgICBvcHRpb25zLmxvY2FsTWluaW11bVdpZHRoUHJvcGVydHkudmFsdWUgPSBtaW5pbXVtV2lkdGg7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gSG9vayBvdXIgQ29tYm9Cb3gncyBwcmVmZXJyZWRXaWR0aCB1cCB0byBvdXJzXHJcbiAgICBjb25zdCBwcmVmZXJyZWRXaWR0aExpc3RlbmVyID0gKCBwcmVmZXJyZWRXaWR0aDogbnVtYmVyIHwgbnVsbCApID0+IHtcclxuICAgICAgdGhpcy5wcmVmZXJyZWRXaWR0aCA9IHByZWZlcnJlZFdpZHRoO1xyXG4gICAgfTtcclxuICAgIG9wdGlvbnMubG9jYWxQcmVmZXJyZWRXaWR0aFByb3BlcnR5LmxpbmsoIHByZWZlcnJlZFdpZHRoTGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLl9ibG9ja05leHRWb2ljaW5nRm9jdXNMaXN0ZW5lciA9IGZhbHNlO1xyXG5cclxuICAgIHRoaXMudm9pY2luZ0ZvY3VzTGlzdGVuZXIgPSAoKSA9PiB7XHJcblxyXG4gICAgICAvLyBmaXJlIHRoZSBsaXN0ZW5lciBvbmx5IGlmIHdlIGFyZSBub3QgYmxvY2tpbmcgdGhlIGZvY3VzIGxpc3RlbmVyXHJcbiAgICAgICF0aGlzLl9ibG9ja05leHRWb2ljaW5nRm9jdXNMaXN0ZW5lciAmJiB0aGlzLmRlZmF1bHRGb2N1c0xpc3RlbmVyKCk7XHJcbiAgICAgIHRoaXMuX2Jsb2NrTmV4dFZvaWNpbmdGb2N1c0xpc3RlbmVyID0gZmFsc2U7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIEtlZXAgdHJhY2sgZm9yIGRpc3Bvc2FsXHJcbiAgICBsZXQgdm9pY2luZ1BhdHRlcm5zdHJpbmdQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPiB8IG51bGwgPSBudWxsO1xyXG5cclxuICAgIGNvbnN0IGl0ZW1Qcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgcHJvcGVydHkgXSwgdmFsdWUgPT4ge1xyXG4gICAgICBjb25zdCBpdGVtID0gXy5maW5kKCBpdGVtcywgaXRlbSA9PiBpdGVtLnZhbHVlID09PSB2YWx1ZSApITtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggaXRlbSwgYG5vIGl0ZW0gZm91bmQgZm9yIHZhbHVlOiAke3ZhbHVlfWAgKTtcclxuICAgICAgcmV0dXJuIGl0ZW07XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3Qgbm9kZVByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBpdGVtUHJvcGVydHkgXSwgaXRlbSA9PiB7XHJcbiAgICAgIHJldHVybiBub2Rlc1sgaXRlbXMuaW5kZXhPZiggaXRlbSApIF07XHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgYTExeU5hbWVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nIHwgbnVsbD4gPSBuZXcgRHluYW1pY1Byb3BlcnR5KCBpdGVtUHJvcGVydHksIHtcclxuICAgICAgZGVyaXZlOiBpdGVtID0+IGExMXlOYW1lUHJvcGVydHlNYXAuZ2V0KCBpdGVtLnZhbHVlICkhXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gU2hvdyB0aGUgY29ycmVzcG9uZGluZyBpdGVtJ3MgTm9kZSBvbiB0aGUgYnV0dG9uLlxyXG4gICAgbm9kZVByb3BlcnR5LmxpbmsoIG5vZGUgPT4ge1xyXG4gICAgICAvLyByZW1vdmUgdGhlIG5vZGUgZm9yIHRoZSBwcmV2aW91cyBpdGVtXHJcbiAgICAgIGl0ZW1Ob2RlV3JhcHBlci5yZW1vdmVBbGxDaGlsZHJlbigpO1xyXG5cclxuICAgICAgLy8gYWRkIHRoZSBhc3NvY2lhdGVkIG5vZGVcclxuICAgICAgaXRlbU5vZGVXcmFwcGVyLmFkZENoaWxkKCBub2RlICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBidXR0b24ncyBhY2Nlc3NpYmxlIG5hbWUgd2hlbiB0aGUgaXRlbSBjaGFuZ2VzLlxyXG4gICAgYTExeU5hbWVQcm9wZXJ0eS5saW5rKCBhMTF5TmFtZSA9PiB7XHJcbiAgICAgIC8vIHBkb21cclxuICAgICAgdGhpcy5pbm5lckNvbnRlbnQgPSBhMTF5TmFtZTtcclxuXHJcbiAgICAgIC8vIFRPRE86IFdlIHNob3VsZCBzdXBwb3J0IHRoaXMgY2hhbmdpbmcsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3VuL2lzc3Vlcy84NjVcclxuICAgICAgY29uc3QgcGF0dGVyblByb3BlcnR5ID0gdHlwZW9mIG9wdGlvbnMuY29tYm9Cb3hWb2ljaW5nTmFtZVJlc3BvbnNlUGF0dGVybiA9PT0gJ3N0cmluZycgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICBuZXcgUHJvcGVydHkoIG9wdGlvbnMuY29tYm9Cb3hWb2ljaW5nTmFtZVJlc3BvbnNlUGF0dGVybiApIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgb3B0aW9ucy5jb21ib0JveFZvaWNpbmdOYW1lUmVzcG9uc2VQYXR0ZXJuO1xyXG5cclxuICAgICAgdm9pY2luZ1BhdHRlcm5zdHJpbmdQcm9wZXJ0eSAmJiB2b2ljaW5nUGF0dGVybnN0cmluZ1Byb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgLy8gVE9ETzogRE8gTk9UIGhhdmUgdGhpcyBnZXR0aW5nIHJlY3JlYXRlZCwgd2UgY2FuIHNpbXBseSBjcmVhdGUgb25lIHVwIGZyb250LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3N1bi9pc3N1ZXMvODY1XHJcbiAgICAgIHRoaXMudm9pY2luZ05hbWVSZXNwb25zZSA9IHZvaWNpbmdQYXR0ZXJuc3RyaW5nUHJvcGVydHkgPSBuZXcgUGF0dGVyblN0cmluZ1Byb3BlcnR5KCBwYXR0ZXJuUHJvcGVydHksIHtcclxuICAgICAgICB2YWx1ZTogYTExeU5hbWUgfHwgJydcclxuICAgICAgfSwgeyB0YW5kZW06IFRhbmRlbS5PUFRfT1VUIH0gKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBBZGQgYXJpYS1sYWJlbGxlZGJ5IGF0dHJpYnV0ZSB0byB0aGUgYnV0dG9uLlxyXG4gICAgLy8gVGhlIGJ1dHRvbiBpcyBhcmlhLWxhYmVsbGVkYnkgaXRzIG93biBsYWJlbCBzaWJsaW5nLCBhbmQgdGhlbiAoc2Vjb25kKSBpdHMgcHJpbWFyeSBzaWJsaW5nIGluIHRoZSBQRE9NLlxyXG4gICAgLy8gT3JkZXIgbWF0dGVycyFcclxuICAgIHRoaXMuYXJpYUxhYmVsbGVkYnlBc3NvY2lhdGlvbnMgPSBbXHJcbiAgICAgIHtcclxuICAgICAgICBvdGhlck5vZGU6IHRoaXMsXHJcbiAgICAgICAgb3RoZXJFbGVtZW50TmFtZTogUERPTVBlZXIuTEFCRUxfU0lCTElORyxcclxuICAgICAgICB0aGlzRWxlbWVudE5hbWU6IFBET01QZWVyLlBSSU1BUllfU0lCTElOR1xyXG4gICAgICB9LFxyXG4gICAgICB7XHJcbiAgICAgICAgb3RoZXJOb2RlOiB0aGlzLFxyXG4gICAgICAgIG90aGVyRWxlbWVudE5hbWU6IFBET01QZWVyLlBSSU1BUllfU0lCTElORyxcclxuICAgICAgICB0aGlzRWxlbWVudE5hbWU6IFBET01QZWVyLlBSSU1BUllfU0lCTElOR1xyXG4gICAgICB9XHJcbiAgICBdO1xyXG5cclxuICAgIC8vIHNpZ25pZnkgdG8gQVQgdGhhdCB0aGlzIGJ1dHRvbiBvcGVucyBhIG1lbnVcclxuICAgIEFyaWFIYXNQb3BVcE11dGF0b3IubXV0YXRlTm9kZSggdGhpcywgJ2xpc3Rib3gnICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlQ29tYm9Cb3hCdXR0b24gPSAoKSA9PiB7XHJcbiAgICAgIG1heEl0ZW1XaWR0aFByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgbWF4SXRlbUhlaWdodFByb3BlcnR5LmRpc3Bvc2UoKTtcclxuXHJcbiAgICAgIGl0ZW1Qcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICAgIG9wdGlvbnMubG9jYWxQcmVmZXJyZWRXaWR0aFByb3BlcnR5LnVubGluayggcHJlZmVycmVkV2lkdGhMaXN0ZW5lciApO1xyXG5cclxuICAgICAgdm9pY2luZ1BhdHRlcm5zdHJpbmdQcm9wZXJ0eSAmJiB2b2ljaW5nUGF0dGVybnN0cmluZ1Byb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgdGhpcy5hcnJvdyA9IGFycm93O1xyXG4gICAgdGhpcy5zZXBhcmF0b3JMaW5lID0gc2VwYXJhdG9yTGluZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFNldHMgdGhlIGJ1dHRvbiB0byBsb29rIGxpa2UgYSB2YWx1ZSBkaXNwbGF5IGluc3RlYWQgb2YgYSBjb21ibyBib3ggYnV0dG9uLlxyXG4gICAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3VuL2lzc3Vlcy80NTFcclxuICAgKi9cclxuICBwdWJsaWMgc2V0RGlzcGxheU9ubHkoIGRpc3BsYXlPbmx5OiBib29sZWFuICk6IHZvaWQge1xyXG4gICAgdGhpcy5hcnJvdy52aXNpYmxlID0gIWRpc3BsYXlPbmx5O1xyXG4gICAgdGhpcy5zZXBhcmF0b3JMaW5lLnZpc2libGUgPSAhZGlzcGxheU9ubHk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDYWxsIHRvIGJsb2NrIHZvaWNpbmcgZnJvbSBvY2N1cnJpbmcgdXBvbiB0aGlzIGJ1dHRvbidzIG5leHQgZm9jdXMgZXZlbnQuXHJcbiAgICogRm9yIHVzZSBieSBDb21ib0JveC5cclxuICAgKi9cclxuICBwdWJsaWMgYmxvY2tOZXh0Vm9pY2luZ0ZvY3VzTGlzdGVuZXIoKTogdm9pZCB7XHJcbiAgICB0aGlzLl9ibG9ja05leHRWb2ljaW5nRm9jdXNMaXN0ZW5lciA9IHRydWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUNvbWJvQm94QnV0dG9uKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zdW4ucmVnaXN0ZXIoICdDb21ib0JveEJ1dHRvbicsIENvbWJvQm94QnV0dG9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBU0EsS0FBSyxRQUFRLDBCQUEwQjtBQUNoRCxPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELFNBQVNDLG1CQUFtQixFQUFFQyxPQUFPLEVBQUVDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEVBQXdCQyxRQUFRLFFBQWdCLDZCQUE2QjtBQUNwSSxPQUFPQyxNQUFNLE1BQU0sMkJBQTJCO0FBQzlDLE9BQU9DLFVBQVUsTUFBTSx5QkFBeUI7QUFDaEQsT0FBT0MscUJBQXFCLE1BQXdDLG9DQUFvQztBQUN4RyxPQUFPQyxHQUFHLE1BQU0sVUFBVTtBQUMxQixPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBRTVDLE9BQU9DLGVBQWUsTUFBTSx3REFBd0Q7QUFDcEYsT0FB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