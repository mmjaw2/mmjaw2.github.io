// Copyright 2020-2023, University of Colorado Boulder

/**
 * OscillatorSoundGenerator is a Web Audio oscillator node wrapped in a sound generator so that it can be easily be used
 * in PhET sims.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import phetAudioContext from '../phetAudioContext.js';
import tambo from '../tambo.js';
import SoundGenerator from './SoundGenerator.js';
class OscillatorSoundGenerator extends SoundGenerator {
  // The Web Audio oscillator node that will be created when play is called, and set to null when stopped (Web Audio
  // oscillators are meant to be single use only).

  // other parameters of the oscillator

  constructor(providedOptions) {
    const options = optionize()({
      initialFrequency: 440,
      initialWaveformType: 'sine'
    }, providedOptions);
    super(options);

    // state initialization
    this.oscillatorNode = null;
    this.frequency = options.initialFrequency;
    this.waveformType = options.initialWaveformType;
  }

  /**
   * Starts the oscillator. The name 'play' is used because this is commonly used in the tambo library for sound
   * generators. If the oscillator is already playing, this has no effect.
   */
  play() {
    if (!this.oscillatorNode) {
      this.oscillatorNode = phetAudioContext.createOscillator();
      this.oscillatorNode.type = this.waveformType;
      this.oscillatorNode.frequency.setValueAtTime(this.frequency, phetAudioContext.currentTime);
      this.oscillatorNode.connect(this.mainGainNode);
      this.oscillatorNode.start();
    }
  }

  /**
   * Stops the oscillator. If the oscillator isn't playing, this has no effect.
   */
  stop() {
    if (this.oscillatorNode) {
      this.oscillatorNode.stop();
      this.oscillatorNode = null;
    }
  }

  /**
   * Sets the waveform type.
   */
  setWaveformType(waveformType) {
    this.waveformType = waveformType;
    if (this.oscillatorNode) {
      this.oscillatorNode.type = waveformType;
    }
  }
}
tambo.register('OscillatorSoundGenerator', OscillatorSoundGenerator);
export default OscillatorSoundGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJwaGV0QXVkaW9Db250ZXh0IiwidGFtYm8iLCJTb3VuZEdlbmVyYXRvciIsIk9zY2lsbGF0b3JTb3VuZEdlbmVyYXRvciIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImluaXRpYWxGcmVxdWVuY3kiLCJpbml0aWFsV2F2ZWZvcm1UeXBlIiwib3NjaWxsYXRvck5vZGUiLCJmcmVxdWVuY3kiLCJ3YXZlZm9ybVR5cGUiLCJwbGF5IiwiY3JlYXRlT3NjaWxsYXRvciIsInR5cGUiLCJzZXRWYWx1ZUF0VGltZSIsImN1cnJlbnRUaW1lIiwiY29ubmVjdCIsIm1haW5HYWluTm9kZSIsInN0YXJ0Iiwic3RvcCIsInNldFdhdmVmb3JtVHlwZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiT3NjaWxsYXRvclNvdW5kR2VuZXJhdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE9zY2lsbGF0b3JTb3VuZEdlbmVyYXRvciBpcyBhIFdlYiBBdWRpbyBvc2NpbGxhdG9yIG5vZGUgd3JhcHBlZCBpbiBhIHNvdW5kIGdlbmVyYXRvciBzbyB0aGF0IGl0IGNhbiBiZSBlYXNpbHkgYmUgdXNlZFxyXG4gKiBpbiBQaEVUIHNpbXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHBoZXRBdWRpb0NvbnRleHQgZnJvbSAnLi4vcGhldEF1ZGlvQ29udGV4dC5qcyc7XHJcbmltcG9ydCB0YW1ibyBmcm9tICcuLi90YW1iby5qcyc7XHJcbmltcG9ydCBTb3VuZEdlbmVyYXRvciwgeyBTb3VuZEdlbmVyYXRvck9wdGlvbnMgfSBmcm9tICcuL1NvdW5kR2VuZXJhdG9yLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIGluaXRpYWwgZnJlcXVlbmN5IGluIEh6LCBjYW4gYmUgY2hhbmdlZCBsYXRlclxyXG4gIGluaXRpYWxGcmVxdWVuY3k/OiBudW1iZXI7XHJcblxyXG4gIC8vIGluaXRpYWwgd2F2ZWZvcm0gdHlwZSwgY2FuIGJlIGNoYW5nZWQgbGF0ZXJcclxuICBpbml0aWFsV2F2ZWZvcm1UeXBlPzogT3NjaWxsYXRvclR5cGU7XHJcbn07XHJcbmV4cG9ydCB0eXBlIE9zY2lsbGF0b3JTb3VuZEdlbmVyYXRvck9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFNvdW5kR2VuZXJhdG9yT3B0aW9ucztcclxuXHJcbmNsYXNzIE9zY2lsbGF0b3JTb3VuZEdlbmVyYXRvciBleHRlbmRzIFNvdW5kR2VuZXJhdG9yIHtcclxuXHJcbiAgLy8gVGhlIFdlYiBBdWRpbyBvc2NpbGxhdG9yIG5vZGUgdGhhdCB3aWxsIGJlIGNyZWF0ZWQgd2hlbiBwbGF5IGlzIGNhbGxlZCwgYW5kIHNldCB0byBudWxsIHdoZW4gc3RvcHBlZCAoV2ViIEF1ZGlvXHJcbiAgLy8gb3NjaWxsYXRvcnMgYXJlIG1lYW50IHRvIGJlIHNpbmdsZSB1c2Ugb25seSkuXHJcbiAgcHJpdmF0ZSBvc2NpbGxhdG9yTm9kZTogT3NjaWxsYXRvck5vZGUgfCBudWxsO1xyXG5cclxuICAvLyBvdGhlciBwYXJhbWV0ZXJzIG9mIHRoZSBvc2NpbGxhdG9yXHJcbiAgcHJpdmF0ZSByZWFkb25seSBmcmVxdWVuY3k6IG51bWJlcjtcclxuICBwcml2YXRlIHdhdmVmb3JtVHlwZTogT3NjaWxsYXRvclR5cGU7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogT3NjaWxsYXRvclNvdW5kR2VuZXJhdG9yT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE9zY2lsbGF0b3JTb3VuZEdlbmVyYXRvck9wdGlvbnMsIFNlbGZPcHRpb25zLCBTb3VuZEdlbmVyYXRvck9wdGlvbnM+KCkoIHtcclxuICAgICAgaW5pdGlhbEZyZXF1ZW5jeTogNDQwLFxyXG4gICAgICBpbml0aWFsV2F2ZWZvcm1UeXBlOiAnc2luZSdcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgLy8gc3RhdGUgaW5pdGlhbGl6YXRpb25cclxuICAgIHRoaXMub3NjaWxsYXRvck5vZGUgPSBudWxsO1xyXG4gICAgdGhpcy5mcmVxdWVuY3kgPSBvcHRpb25zLmluaXRpYWxGcmVxdWVuY3k7XHJcbiAgICB0aGlzLndhdmVmb3JtVHlwZSA9IG9wdGlvbnMuaW5pdGlhbFdhdmVmb3JtVHlwZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0YXJ0cyB0aGUgb3NjaWxsYXRvci4gVGhlIG5hbWUgJ3BsYXknIGlzIHVzZWQgYmVjYXVzZSB0aGlzIGlzIGNvbW1vbmx5IHVzZWQgaW4gdGhlIHRhbWJvIGxpYnJhcnkgZm9yIHNvdW5kXHJcbiAgICogZ2VuZXJhdG9ycy4gSWYgdGhlIG9zY2lsbGF0b3IgaXMgYWxyZWFkeSBwbGF5aW5nLCB0aGlzIGhhcyBubyBlZmZlY3QuXHJcbiAgICovXHJcbiAgcHVibGljIHBsYXkoKTogdm9pZCB7XHJcbiAgICBpZiAoICF0aGlzLm9zY2lsbGF0b3JOb2RlICkge1xyXG4gICAgICB0aGlzLm9zY2lsbGF0b3JOb2RlID0gcGhldEF1ZGlvQ29udGV4dC5jcmVhdGVPc2NpbGxhdG9yKCk7XHJcbiAgICAgIHRoaXMub3NjaWxsYXRvck5vZGUudHlwZSA9IHRoaXMud2F2ZWZvcm1UeXBlO1xyXG4gICAgICB0aGlzLm9zY2lsbGF0b3JOb2RlLmZyZXF1ZW5jeS5zZXRWYWx1ZUF0VGltZSggdGhpcy5mcmVxdWVuY3ksIHBoZXRBdWRpb0NvbnRleHQuY3VycmVudFRpbWUgKTtcclxuICAgICAgdGhpcy5vc2NpbGxhdG9yTm9kZS5jb25uZWN0KCB0aGlzLm1haW5HYWluTm9kZSApO1xyXG4gICAgICB0aGlzLm9zY2lsbGF0b3JOb2RlLnN0YXJ0KCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTdG9wcyB0aGUgb3NjaWxsYXRvci4gSWYgdGhlIG9zY2lsbGF0b3IgaXNuJ3QgcGxheWluZywgdGhpcyBoYXMgbm8gZWZmZWN0LlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzdG9wKCk6IHZvaWQge1xyXG4gICAgaWYgKCB0aGlzLm9zY2lsbGF0b3JOb2RlICkge1xyXG4gICAgICB0aGlzLm9zY2lsbGF0b3JOb2RlLnN0b3AoKTtcclxuICAgICAgdGhpcy5vc2NpbGxhdG9yTm9kZSA9IG51bGw7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZXRzIHRoZSB3YXZlZm9ybSB0eXBlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRXYXZlZm9ybVR5cGUoIHdhdmVmb3JtVHlwZTogT3NjaWxsYXRvclR5cGUgKTogdm9pZCB7XHJcbiAgICB0aGlzLndhdmVmb3JtVHlwZSA9IHdhdmVmb3JtVHlwZTtcclxuICAgIGlmICggdGhpcy5vc2NpbGxhdG9yTm9kZSApIHtcclxuICAgICAgdGhpcy5vc2NpbGxhdG9yTm9kZS50eXBlID0gd2F2ZWZvcm1UeXBlO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxudGFtYm8ucmVnaXN0ZXIoICdPc2NpbGxhdG9yU291bmRHZW5lcmF0b3InLCBPc2NpbGxhdG9yU291bmRHZW5lcmF0b3IgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IE9zY2lsbGF0b3JTb3VuZEdlbmVyYXRvcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sb0NBQW9DO0FBQzFELE9BQU9DLGdCQUFnQixNQUFNLHdCQUF3QjtBQUNyRCxPQUFPQyxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyxjQUFjLE1BQWlDLHFCQUFxQjtBQVkzRSxNQUFNQyx3QkFBd0IsU0FBU0QsY0FBYyxDQUFDO0VBRXBEO0VBQ0E7O0VBR0E7O0VBSU9FLFdBQVdBLENBQUVDLGVBQWlELEVBQUc7SUFFdEUsTUFBTUMsT0FBTyxHQUFHUCxTQUFTLENBQXNFLENBQUMsQ0FBRTtNQUNoR1EsZ0JBQWdCLEVBQUUsR0FBRztNQUNyQkMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUMsT0FBUSxDQUFDOztJQUVoQjtJQUNBLElBQUksQ0FBQ0csY0FBYyxHQUFHLElBQUk7SUFDMUIsSUFBSSxDQUFDQyxTQUFTLEdBQUdKLE9BQU8sQ0FBQ0MsZ0JBQWdCO0lBQ3pDLElBQUksQ0FBQ0ksWUFBWSxHQUFHTCxPQUFPLENBQUNFLG1CQUFtQjtFQUNqRDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTSSxJQUFJQSxDQUFBLEVBQVM7SUFDbEIsSUFBSyxDQUFDLElBQUksQ0FBQ0gsY0FBYyxFQUFHO01BQzFCLElBQUksQ0FBQ0EsY0FBYyxHQUFHVCxnQkFBZ0IsQ0FBQ2EsZ0JBQWdCLENBQUMsQ0FBQztNQUN6RCxJQUFJLENBQUNKLGNBQWMsQ0FBQ0ssSUFBSSxHQUFHLElBQUksQ0FBQ0gsWUFBWTtNQUM1QyxJQUFJLENBQUNGLGNBQWMsQ0FBQ0MsU0FBUyxDQUFDSyxjQUFjLENBQUUsSUFBSSxDQUFDTCxTQUFTLEVBQUVWLGdCQUFnQixDQUFDZ0IsV0FBWSxDQUFDO01BQzVGLElBQUksQ0FBQ1AsY0FBYyxDQUFDUSxPQUFPLENBQUUsSUFBSSxDQUFDQyxZQUFhLENBQUM7TUFDaEQsSUFBSSxDQUFDVCxjQUFjLENBQUNVLEtBQUssQ0FBQyxDQUFDO0lBQzdCO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLElBQUlBLENBQUEsRUFBUztJQUNsQixJQUFLLElBQUksQ0FBQ1gsY0FBYyxFQUFHO01BQ3pCLElBQUksQ0FBQ0EsY0FBYyxDQUFDVyxJQUFJLENBQUMsQ0FBQztNQUMxQixJQUFJLENBQUNYLGNBQWMsR0FBRyxJQUFJO0lBQzVCO0VBQ0Y7O0VBRUE7QUFDRjtBQUNBO0VBQ1NZLGVBQWVBLENBQUVWLFlBQTRCLEVBQVM7SUFDM0QsSUFBSSxDQUFDQSxZQUFZLEdBQUdBLFlBQVk7SUFDaEMsSUFBSyxJQUFJLENBQUNGLGNBQWMsRUFBRztNQUN6QixJQUFJLENBQUNBLGNBQWMsQ0FBQ0ssSUFBSSxHQUFHSCxZQUFZO0lBQ3pDO0VBQ0Y7QUFDRjtBQUVBVixLQUFLLENBQUNxQixRQUFRLENBQUUsMEJBQTBCLEVBQUVuQix3QkFBeUIsQ0FBQztBQUV0RSxlQUFlQSx3QkFBd0IiLCJpZ25vcmVMaXN0IjpbXX0=