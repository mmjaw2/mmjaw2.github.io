// Copyright 2022-2024, University of Colorado Boulder

import ValueChangeSoundPlayer from '../../../sound-generators/ValueChangeSoundPlayer.js';
import tambo from '../../../tambo.js';
import SoundClip from '../../../sound-generators/SoundClip.js';
import brightMarimbaShort_mp3 from '../../../../sounds/brightMarimbaShort_mp3.js';
import soundManager from '../../../soundManager.js';
/**
 * SliderPitchChangeSoundGenerator is intended as a demonstration of a ValueChangeSoundPlayer that changes the pitch
 * (aka the playback rate) of its produced sounds as the slider values change.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

class SliderPitchChangeSoundGenerator extends ValueChangeSoundPlayer {
  /**
   * @param valueRange - the range of values expected and over which sounds will be played
   */
  constructor(valueRange) {
    // sound clip to be used in both the up and down directions for the middle sounds
    const marimbaSoundClip = new SoundClip(brightMarimbaShort_mp3, {
      initialOutputLevel: 0.2,
      rateChangesAffectPlayingSounds: false
    });
    soundManager.addSoundGenerator(marimbaSoundClip);

    // playback rate mapping function
    const middleMovingUpPlaybackRateMapper = value => 0.5 + (value - valueRange.min) / valueRange.getLength();
    const middleMovingDownPlaybackRateMapper = value => 0.4 + (value - valueRange.min) / valueRange.getLength();
    super(valueRange, {
      middleMovingUpSoundPlayer: marimbaSoundClip,
      middleMovingDownSoundPlayer: marimbaSoundClip,
      middleMovingUpPlaybackRateMapper: middleMovingUpPlaybackRateMapper,
      middleMovingDownPlaybackRateMapper: middleMovingDownPlaybackRateMapper,
      numberOfMiddleThresholds: 7
    });
  }
}
tambo.register('SliderPitchChangeSoundGenerator', SliderPitchChangeSoundGenerator);
export default SliderPitchChangeSoundGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWx1ZUNoYW5nZVNvdW5kUGxheWVyIiwidGFtYm8iLCJTb3VuZENsaXAiLCJicmlnaHRNYXJpbWJhU2hvcnRfbXAzIiwic291bmRNYW5hZ2VyIiwiU2xpZGVyUGl0Y2hDaGFuZ2VTb3VuZEdlbmVyYXRvciIsImNvbnN0cnVjdG9yIiwidmFsdWVSYW5nZSIsIm1hcmltYmFTb3VuZENsaXAiLCJpbml0aWFsT3V0cHV0TGV2ZWwiLCJyYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHMiLCJhZGRTb3VuZEdlbmVyYXRvciIsIm1pZGRsZU1vdmluZ1VwUGxheWJhY2tSYXRlTWFwcGVyIiwidmFsdWUiLCJtaW4iLCJnZXRMZW5ndGgiLCJtaWRkbGVNb3ZpbmdEb3duUGxheWJhY2tSYXRlTWFwcGVyIiwibWlkZGxlTW92aW5nVXBTb3VuZFBsYXllciIsIm1pZGRsZU1vdmluZ0Rvd25Tb3VuZFBsYXllciIsIm51bWJlck9mTWlkZGxlVGhyZXNob2xkcyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU2xpZGVyUGl0Y2hDaGFuZ2VTb3VuZEdlbmVyYXRvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbmltcG9ydCBWYWx1ZUNoYW5nZVNvdW5kUGxheWVyIGZyb20gJy4uLy4uLy4uL3NvdW5kLWdlbmVyYXRvcnMvVmFsdWVDaGFuZ2VTb3VuZFBsYXllci5qcyc7XHJcbmltcG9ydCB0YW1ibyBmcm9tICcuLi8uLi8uLi90YW1iby5qcyc7XHJcbmltcG9ydCBTb3VuZENsaXAgZnJvbSAnLi4vLi4vLi4vc291bmQtZ2VuZXJhdG9ycy9Tb3VuZENsaXAuanMnO1xyXG5pbXBvcnQgYnJpZ2h0TWFyaW1iYVNob3J0X21wMyBmcm9tICcuLi8uLi8uLi8uLi9zb3VuZHMvYnJpZ2h0TWFyaW1iYVNob3J0X21wMy5qcyc7XHJcbmltcG9ydCBzb3VuZE1hbmFnZXIgZnJvbSAnLi4vLi4vLi4vc291bmRNYW5hZ2VyLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcblxyXG4vKipcclxuICogU2xpZGVyUGl0Y2hDaGFuZ2VTb3VuZEdlbmVyYXRvciBpcyBpbnRlbmRlZCBhcyBhIGRlbW9uc3RyYXRpb24gb2YgYSBWYWx1ZUNoYW5nZVNvdW5kUGxheWVyIHRoYXQgY2hhbmdlcyB0aGUgcGl0Y2hcclxuICogKGFrYSB0aGUgcGxheWJhY2sgcmF0ZSkgb2YgaXRzIHByb2R1Y2VkIHNvdW5kcyBhcyB0aGUgc2xpZGVyIHZhbHVlcyBjaGFuZ2UuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuY2xhc3MgU2xpZGVyUGl0Y2hDaGFuZ2VTb3VuZEdlbmVyYXRvciBleHRlbmRzIFZhbHVlQ2hhbmdlU291bmRQbGF5ZXIge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gdmFsdWVSYW5nZSAtIHRoZSByYW5nZSBvZiB2YWx1ZXMgZXhwZWN0ZWQgYW5kIG92ZXIgd2hpY2ggc291bmRzIHdpbGwgYmUgcGxheWVkXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZVJhbmdlOiBSYW5nZSApIHtcclxuXHJcbiAgICAvLyBzb3VuZCBjbGlwIHRvIGJlIHVzZWQgaW4gYm90aCB0aGUgdXAgYW5kIGRvd24gZGlyZWN0aW9ucyBmb3IgdGhlIG1pZGRsZSBzb3VuZHNcclxuICAgIGNvbnN0IG1hcmltYmFTb3VuZENsaXAgPSBuZXcgU291bmRDbGlwKCBicmlnaHRNYXJpbWJhU2hvcnRfbXAzLCB7XHJcbiAgICAgIGluaXRpYWxPdXRwdXRMZXZlbDogMC4yLFxyXG4gICAgICByYXRlQ2hhbmdlc0FmZmVjdFBsYXlpbmdTb3VuZHM6IGZhbHNlXHJcbiAgICB9ICk7XHJcbiAgICBzb3VuZE1hbmFnZXIuYWRkU291bmRHZW5lcmF0b3IoIG1hcmltYmFTb3VuZENsaXAgKTtcclxuXHJcbiAgICAvLyBwbGF5YmFjayByYXRlIG1hcHBpbmcgZnVuY3Rpb25cclxuICAgIGNvbnN0IG1pZGRsZU1vdmluZ1VwUGxheWJhY2tSYXRlTWFwcGVyID0gKCB2YWx1ZTogbnVtYmVyICkgPT4gMC41ICsgKCB2YWx1ZSAtIHZhbHVlUmFuZ2UubWluICkgLyB2YWx1ZVJhbmdlLmdldExlbmd0aCgpO1xyXG4gICAgY29uc3QgbWlkZGxlTW92aW5nRG93blBsYXliYWNrUmF0ZU1hcHBlciA9ICggdmFsdWU6IG51bWJlciApID0+IDAuNCArICggdmFsdWUgLSB2YWx1ZVJhbmdlLm1pbiApIC8gdmFsdWVSYW5nZS5nZXRMZW5ndGgoKTtcclxuXHJcbiAgICBzdXBlciggdmFsdWVSYW5nZSwge1xyXG4gICAgICBtaWRkbGVNb3ZpbmdVcFNvdW5kUGxheWVyOiBtYXJpbWJhU291bmRDbGlwLFxyXG4gICAgICBtaWRkbGVNb3ZpbmdEb3duU291bmRQbGF5ZXI6IG1hcmltYmFTb3VuZENsaXAsXHJcbiAgICAgIG1pZGRsZU1vdmluZ1VwUGxheWJhY2tSYXRlTWFwcGVyOiBtaWRkbGVNb3ZpbmdVcFBsYXliYWNrUmF0ZU1hcHBlcixcclxuICAgICAgbWlkZGxlTW92aW5nRG93blBsYXliYWNrUmF0ZU1hcHBlcjogbWlkZGxlTW92aW5nRG93blBsYXliYWNrUmF0ZU1hcHBlcixcclxuICAgICAgbnVtYmVyT2ZNaWRkbGVUaHJlc2hvbGRzOiA3XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG50YW1iby5yZWdpc3RlciggJ1NsaWRlclBpdGNoQ2hhbmdlU291bmRHZW5lcmF0b3InLCBTbGlkZXJQaXRjaENoYW5nZVNvdW5kR2VuZXJhdG9yICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBTbGlkZXJQaXRjaENoYW5nZVNvdW5kR2VuZXJhdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsT0FBT0Esc0JBQXNCLE1BQU0scURBQXFEO0FBQ3hGLE9BQU9DLEtBQUssTUFBTSxtQkFBbUI7QUFDckMsT0FBT0MsU0FBUyxNQUFNLHdDQUF3QztBQUM5RCxPQUFPQyxzQkFBc0IsTUFBTSw4Q0FBOEM7QUFDakYsT0FBT0MsWUFBWSxNQUFNLDBCQUEwQjtBQUduRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUMsK0JBQStCLFNBQVNMLHNCQUFzQixDQUFDO0VBRW5FO0FBQ0Y7QUFDQTtFQUNTTSxXQUFXQSxDQUFFQyxVQUFpQixFQUFHO0lBRXRDO0lBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsSUFBSU4sU0FBUyxDQUFFQyxzQkFBc0IsRUFBRTtNQUM5RE0sa0JBQWtCLEVBQUUsR0FBRztNQUN2QkMsOEJBQThCLEVBQUU7SUFDbEMsQ0FBRSxDQUFDO0lBQ0hOLFlBQVksQ0FBQ08saUJBQWlCLENBQUVILGdCQUFpQixDQUFDOztJQUVsRDtJQUNBLE1BQU1JLGdDQUFnQyxHQUFLQyxLQUFhLElBQU0sR0FBRyxHQUFHLENBQUVBLEtBQUssR0FBR04sVUFBVSxDQUFDTyxHQUFHLElBQUtQLFVBQVUsQ0FBQ1EsU0FBUyxDQUFDLENBQUM7SUFDdkgsTUFBTUMsa0NBQWtDLEdBQUtILEtBQWEsSUFBTSxHQUFHLEdBQUcsQ0FBRUEsS0FBSyxHQUFHTixVQUFVLENBQUNPLEdBQUcsSUFBS1AsVUFBVSxDQUFDUSxTQUFTLENBQUMsQ0FBQztJQUV6SCxLQUFLLENBQUVSLFVBQVUsRUFBRTtNQUNqQlUseUJBQXlCLEVBQUVULGdCQUFnQjtNQUMzQ1UsMkJBQTJCLEVBQUVWLGdCQUFnQjtNQUM3Q0ksZ0NBQWdDLEVBQUVBLGdDQUFnQztNQUNsRUksa0NBQWtDLEVBQUVBLGtDQUFrQztNQUN0RUcsd0JBQXdCLEVBQUU7SUFDNUIsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBbEIsS0FBSyxDQUFDbUIsUUFBUSxDQUFFLGlDQUFpQyxFQUFFZiwrQkFBZ0MsQ0FBQztBQUVwRixlQUFlQSwrQkFBK0IiLCJpZ25vcmVMaXN0IjpbXX0=