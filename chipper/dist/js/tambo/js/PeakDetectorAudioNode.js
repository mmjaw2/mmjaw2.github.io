// Copyright 2021-2023, University of Colorado Boulder

/**
 * PeakDetectorAudioNode is a Web Audio node that can be used to detect peak audio output values in an audio signal
 * chain.  The detected peak audio values are output to the console.  This file contains the portion that runs in the
 * main JavaScript thread, which is referred to as the "AudioWorklet Node" in the online documentation.  There is a
 * counterpart portion that runs in the Web Audio rendering thread that is referred to as the "AudioWorklet Processor".
 *
 * This is intended for diagnostic purposes only, and should not be included in production code.  It likely won't work
 * in built code anyway, since it makes a direct file reference for including the worklet processor code.
 *
 * Also note that as of this writing (Apr 2021), audio worklets are not supported in Safari.
 *
 * To use, create an instance and connect the node whose output you want to measure.  Example:
 *
 *    const peakDetector = new PeakDetectorAudioNode();
 *    this.mainGainNode.connect( peakDetector );
 *
 * TODO: !!! This does not work on all of PhET's supported platforms, so it should not be incorporated into any
 *       production code.  It should be used for debugging only.  See https://github.com/phetsims/tambo/issues/133#issuecomment-861042659.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import optionize from '../../phet-core/js/optionize.js';
import phetAudioContext from './phetAudioContext.js';
import tambo from './tambo.js';
class PeakDetectorAudioNode extends AudioWorkletNode {
  constructor(providedOptions) {
    const options = optionize()({
      logZeroValues: false
    }, providedOptions);
    super(phetAudioContext, 'peak-detector');

    // Listen for messages from the audio worklet processor and log peak values to the console.
    this.port.onmessage = event => {
      if (event.data.peak !== undefined) {
        const peak = event.data.peak;
        if (peak > 0 || options.logZeroValues) {
          console.log(`peak = ${peak}`);
        }
      }
    };
  }
}

// Load the worklet code that will run on the audio rendering thread.
console.log('loading peak-detector module on audio rendering thread...');
phetAudioContext.audioWorklet.addModule('../../tambo/js/peak-detector.js').then(() => {
  console.log('peak detector worklet loaded successfully');
}).catch(err => {
  console.warn(`error while loading peak detector worklet, peak detector probably won't work, error: ${err}`);
});
tambo.register('PeakDetectorAudioNode', PeakDetectorAudioNode);
export default PeakDetectorAudioNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJwaGV0QXVkaW9Db250ZXh0IiwidGFtYm8iLCJQZWFrRGV0ZWN0b3JBdWRpb05vZGUiLCJBdWRpb1dvcmtsZXROb2RlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwibG9nWmVyb1ZhbHVlcyIsInBvcnQiLCJvbm1lc3NhZ2UiLCJldmVudCIsImRhdGEiLCJwZWFrIiwidW5kZWZpbmVkIiwiY29uc29sZSIsImxvZyIsImF1ZGlvV29ya2xldCIsImFkZE1vZHVsZSIsInRoZW4iLCJjYXRjaCIsImVyciIsIndhcm4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlBlYWtEZXRlY3RvckF1ZGlvTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQZWFrRGV0ZWN0b3JBdWRpb05vZGUgaXMgYSBXZWIgQXVkaW8gbm9kZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGRldGVjdCBwZWFrIGF1ZGlvIG91dHB1dCB2YWx1ZXMgaW4gYW4gYXVkaW8gc2lnbmFsXHJcbiAqIGNoYWluLiAgVGhlIGRldGVjdGVkIHBlYWsgYXVkaW8gdmFsdWVzIGFyZSBvdXRwdXQgdG8gdGhlIGNvbnNvbGUuICBUaGlzIGZpbGUgY29udGFpbnMgdGhlIHBvcnRpb24gdGhhdCBydW5zIGluIHRoZVxyXG4gKiBtYWluIEphdmFTY3JpcHQgdGhyZWFkLCB3aGljaCBpcyByZWZlcnJlZCB0byBhcyB0aGUgXCJBdWRpb1dvcmtsZXQgTm9kZVwiIGluIHRoZSBvbmxpbmUgZG9jdW1lbnRhdGlvbi4gIFRoZXJlIGlzIGFcclxuICogY291bnRlcnBhcnQgcG9ydGlvbiB0aGF0IHJ1bnMgaW4gdGhlIFdlYiBBdWRpbyByZW5kZXJpbmcgdGhyZWFkIHRoYXQgaXMgcmVmZXJyZWQgdG8gYXMgdGhlIFwiQXVkaW9Xb3JrbGV0IFByb2Nlc3NvclwiLlxyXG4gKlxyXG4gKiBUaGlzIGlzIGludGVuZGVkIGZvciBkaWFnbm9zdGljIHB1cnBvc2VzIG9ubHksIGFuZCBzaG91bGQgbm90IGJlIGluY2x1ZGVkIGluIHByb2R1Y3Rpb24gY29kZS4gIEl0IGxpa2VseSB3b24ndCB3b3JrXHJcbiAqIGluIGJ1aWx0IGNvZGUgYW55d2F5LCBzaW5jZSBpdCBtYWtlcyBhIGRpcmVjdCBmaWxlIHJlZmVyZW5jZSBmb3IgaW5jbHVkaW5nIHRoZSB3b3JrbGV0IHByb2Nlc3NvciBjb2RlLlxyXG4gKlxyXG4gKiBBbHNvIG5vdGUgdGhhdCBhcyBvZiB0aGlzIHdyaXRpbmcgKEFwciAyMDIxKSwgYXVkaW8gd29ya2xldHMgYXJlIG5vdCBzdXBwb3J0ZWQgaW4gU2FmYXJpLlxyXG4gKlxyXG4gKiBUbyB1c2UsIGNyZWF0ZSBhbiBpbnN0YW5jZSBhbmQgY29ubmVjdCB0aGUgbm9kZSB3aG9zZSBvdXRwdXQgeW91IHdhbnQgdG8gbWVhc3VyZS4gIEV4YW1wbGU6XHJcbiAqXHJcbiAqICAgIGNvbnN0IHBlYWtEZXRlY3RvciA9IG5ldyBQZWFrRGV0ZWN0b3JBdWRpb05vZGUoKTtcclxuICogICAgdGhpcy5tYWluR2Fpbk5vZGUuY29ubmVjdCggcGVha0RldGVjdG9yICk7XHJcbiAqXHJcbiAqIFRPRE86ICEhISBUaGlzIGRvZXMgbm90IHdvcmsgb24gYWxsIG9mIFBoRVQncyBzdXBwb3J0ZWQgcGxhdGZvcm1zLCBzbyBpdCBzaG91bGQgbm90IGJlIGluY29ycG9yYXRlZCBpbnRvIGFueVxyXG4gKiAgICAgICBwcm9kdWN0aW9uIGNvZGUuICBJdCBzaG91bGQgYmUgdXNlZCBmb3IgZGVidWdnaW5nIG9ubHkuICBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3RhbWJvL2lzc3Vlcy8xMzMjaXNzdWVjb21tZW50LTg2MTA0MjY1OS5cclxuICpcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgcGhldEF1ZGlvQ29udGV4dCBmcm9tICcuL3BoZXRBdWRpb0NvbnRleHQuanMnO1xyXG5pbXBvcnQgdGFtYm8gZnJvbSAnLi90YW1iby5qcyc7XHJcblxyXG5leHBvcnQgdHlwZSBQZWFrRGV0ZWN0b3JBdWRpb05vZGVPcHRpb25zID0ge1xyXG5cclxuICAvLyBJZiB0cnVlLCB6ZXJvIHZhbHVlcyB3aWxsIGJlIG91dHB1dCwgb3RoZXJ3aXNlIG5vIG91dHB1dCB3aWxsIG9jY3VyIGlmIHRoZSBwZWFrIHZhbHVlIGRldGVjdGVkIGZvciBhIGdpdmVuIHRpbWVcclxuICAvLyBpbnRlcnZhbCBpcyB6ZXJvLlxyXG4gIGxvZ1plcm9WYWx1ZXM/OiBib29sZWFuO1xyXG59O1xyXG5cclxuY2xhc3MgUGVha0RldGVjdG9yQXVkaW9Ob2RlIGV4dGVuZHMgQXVkaW9Xb3JrbGV0Tm9kZSB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogUGVha0RldGVjdG9yQXVkaW9Ob2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFBlYWtEZXRlY3RvckF1ZGlvTm9kZU9wdGlvbnMsIFBlYWtEZXRlY3RvckF1ZGlvTm9kZU9wdGlvbnM+KCkoIHtcclxuICAgICAgbG9nWmVyb1ZhbHVlczogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBwaGV0QXVkaW9Db250ZXh0LCAncGVhay1kZXRlY3RvcicgKTtcclxuXHJcbiAgICAvLyBMaXN0ZW4gZm9yIG1lc3NhZ2VzIGZyb20gdGhlIGF1ZGlvIHdvcmtsZXQgcHJvY2Vzc29yIGFuZCBsb2cgcGVhayB2YWx1ZXMgdG8gdGhlIGNvbnNvbGUuXHJcbiAgICB0aGlzLnBvcnQub25tZXNzYWdlID0gZXZlbnQgPT4ge1xyXG4gICAgICBpZiAoIGV2ZW50LmRhdGEucGVhayAhPT0gdW5kZWZpbmVkICkge1xyXG4gICAgICAgIGNvbnN0IHBlYWsgPSBldmVudC5kYXRhLnBlYWs7XHJcbiAgICAgICAgaWYgKCBwZWFrID4gMCB8fCBvcHRpb25zLmxvZ1plcm9WYWx1ZXMgKSB7XHJcbiAgICAgICAgICBjb25zb2xlLmxvZyggYHBlYWsgPSAke3BlYWt9YCApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfTtcclxuICB9XHJcbn1cclxuXHJcbi8vIExvYWQgdGhlIHdvcmtsZXQgY29kZSB0aGF0IHdpbGwgcnVuIG9uIHRoZSBhdWRpbyByZW5kZXJpbmcgdGhyZWFkLlxyXG5jb25zb2xlLmxvZyggJ2xvYWRpbmcgcGVhay1kZXRlY3RvciBtb2R1bGUgb24gYXVkaW8gcmVuZGVyaW5nIHRocmVhZC4uLicgKTtcclxucGhldEF1ZGlvQ29udGV4dC5hdWRpb1dvcmtsZXQuYWRkTW9kdWxlKCAnLi4vLi4vdGFtYm8vanMvcGVhay1kZXRlY3Rvci5qcycgKVxyXG4gIC50aGVuKCAoKSA9PiB7XHJcbiAgICBjb25zb2xlLmxvZyggJ3BlYWsgZGV0ZWN0b3Igd29ya2xldCBsb2FkZWQgc3VjY2Vzc2Z1bGx5JyApO1xyXG4gIH0gKVxyXG4gIC5jYXRjaCggZXJyID0+IHtcclxuICAgIGNvbnNvbGUud2FybiggYGVycm9yIHdoaWxlIGxvYWRpbmcgcGVhayBkZXRlY3RvciB3b3JrbGV0LCBwZWFrIGRldGVjdG9yIHByb2JhYmx5IHdvbid0IHdvcmssIGVycm9yOiAke2Vycn1gICk7XHJcbiAgfSApO1xyXG5cclxudGFtYm8ucmVnaXN0ZXIoICdQZWFrRGV0ZWN0b3JBdWRpb05vZGUnLCBQZWFrRGV0ZWN0b3JBdWRpb05vZGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgUGVha0RldGVjdG9yQXVkaW9Ob2RlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsT0FBT0MsZ0JBQWdCLE1BQU0sdUJBQXVCO0FBQ3BELE9BQU9DLEtBQUssTUFBTSxZQUFZO0FBUzlCLE1BQU1DLHFCQUFxQixTQUFTQyxnQkFBZ0IsQ0FBQztFQUU1Q0MsV0FBV0EsQ0FBRUMsZUFBOEMsRUFBRztJQUVuRSxNQUFNQyxPQUFPLEdBQUdQLFNBQVMsQ0FBNkQsQ0FBQyxDQUFFO01BQ3ZGUSxhQUFhLEVBQUU7SUFDakIsQ0FBQyxFQUFFRixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUwsZ0JBQWdCLEVBQUUsZUFBZ0IsQ0FBQzs7SUFFMUM7SUFDQSxJQUFJLENBQUNRLElBQUksQ0FBQ0MsU0FBUyxHQUFHQyxLQUFLLElBQUk7TUFDN0IsSUFBS0EsS0FBSyxDQUFDQyxJQUFJLENBQUNDLElBQUksS0FBS0MsU0FBUyxFQUFHO1FBQ25DLE1BQU1ELElBQUksR0FBR0YsS0FBSyxDQUFDQyxJQUFJLENBQUNDLElBQUk7UUFDNUIsSUFBS0EsSUFBSSxHQUFHLENBQUMsSUFBSU4sT0FBTyxDQUFDQyxhQUFhLEVBQUc7VUFDdkNPLE9BQU8sQ0FBQ0MsR0FBRyxDQUFHLFVBQVNILElBQUssRUFBRSxDQUFDO1FBQ2pDO01BQ0Y7SUFDRixDQUFDO0VBQ0g7QUFDRjs7QUFFQTtBQUNBRSxPQUFPLENBQUNDLEdBQUcsQ0FBRSwyREFBNEQsQ0FBQztBQUMxRWYsZ0JBQWdCLENBQUNnQixZQUFZLENBQUNDLFNBQVMsQ0FBRSxpQ0FBa0MsQ0FBQyxDQUN6RUMsSUFBSSxDQUFFLE1BQU07RUFDWEosT0FBTyxDQUFDQyxHQUFHLENBQUUsMkNBQTRDLENBQUM7QUFDNUQsQ0FBRSxDQUFDLENBQ0ZJLEtBQUssQ0FBRUMsR0FBRyxJQUFJO0VBQ2JOLE9BQU8sQ0FBQ08sSUFBSSxDQUFHLHdGQUF1RkQsR0FBSSxFQUFFLENBQUM7QUFDL0csQ0FBRSxDQUFDO0FBRUxuQixLQUFLLENBQUNxQixRQUFRLENBQUUsdUJBQXVCLEVBQUVwQixxQkFBc0IsQ0FBQztBQUNoRSxlQUFlQSxxQkFBcUIiLCJpZ25vcmVMaXN0IjpbXX0=