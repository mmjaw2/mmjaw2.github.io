// Copyright 2016 BrainPOP
// Released under MIT License,
// see https://raw.githubusercontent.com/phetsims/sherpa/main/licenses/game-up-camera-1.0.0.js.txt

/**
 * Responds to requests from BrainPOP/Game Up/SnapThought for return images from a PhET simulation.
 * @author BrainPOP
 * @author Vin Rowe
 * @author Sam Reid (PhET Interactive Simulations)
 */

const logging = window.phet.chipper.queryParameters.gameUpLogging;
const isGameUp = window.phet.chipper.queryParameters.gameUp;
const isGameUpTestHarness = window.phet.chipper.queryParameters.gameUpTestHarness;
const log = text => logging && console.log(text);

// Only enable if a query parameter is set
if (isGameUp) {
  log('Enabled Game Up Camera');
  const suffix = '.brainpop.com';

  // haven't received word from the parent that captureReady succeeded
  let gameUpCaptureReady = false;

  // Stop checking after 10 times in case we somehow missed the GameUpCaptureReady message
  let numberOfChecks = 0;
  const checkInitialization = () => {
    // haven't received word from the parent that captureReady succeeded
    if (!gameUpCaptureReady && numberOfChecks < 10) {
      parent.postMessage('captureReady', '*');
      numberOfChecks++;
      log('Posted captureReady, number of checks: ' + numberOfChecks);
      setTimeout(checkInitialization, 1000); //try again in a second
    }
  };
  const receiver = event => {
    if (event.origin.indexOf(suffix, event.origin.length - suffix.length) !== -1 || isGameUpTestHarness) {
      if (event.data === 'captureImage') {
        const dataURL = window.phet.joist.ScreenshotGenerator.generateScreenshot(window.phet.joist.sim, 'image/jpeg');
        sendImage(dataURL, event.origin, event.source);
        log('Sent image');
      } else if (event.data === 'GameUpCaptureReady') {
        log('GameUpCaptureReady');

        // TODO: post captureReady from here

        //captureReady succeeded
        gameUpCaptureReady = true;
      }
    }
  };
  const sendImage = (imageString, origin, source) => {
    //capture.js already appends this, so we end up with two
    imageString = imageString.replace('data:image/jpeg;base64,', '');

    //send it back
    source.postMessage(imageString, origin);
  };
  if (window.addEventListener) {
    window.addEventListener('message', receiver, false);
  } else if (window.attachEvent) {
    window.attachEvent('onmessage', receiver);
  }

  // Call captureReady, function will recall itself until gameUpCaptureReady
  checkInitialization();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2dnaW5nIiwid2luZG93IiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJnYW1lVXBMb2dnaW5nIiwiaXNHYW1lVXAiLCJnYW1lVXAiLCJpc0dhbWVVcFRlc3RIYXJuZXNzIiwiZ2FtZVVwVGVzdEhhcm5lc3MiLCJsb2ciLCJ0ZXh0IiwiY29uc29sZSIsInN1ZmZpeCIsImdhbWVVcENhcHR1cmVSZWFkeSIsIm51bWJlck9mQ2hlY2tzIiwiY2hlY2tJbml0aWFsaXphdGlvbiIsInBhcmVudCIsInBvc3RNZXNzYWdlIiwic2V0VGltZW91dCIsInJlY2VpdmVyIiwiZXZlbnQiLCJvcmlnaW4iLCJpbmRleE9mIiwibGVuZ3RoIiwiZGF0YSIsImRhdGFVUkwiLCJqb2lzdCIsIlNjcmVlbnNob3RHZW5lcmF0b3IiLCJnZW5lcmF0ZVNjcmVlbnNob3QiLCJzaW0iLCJzZW5kSW1hZ2UiLCJzb3VyY2UiLCJpbWFnZVN0cmluZyIsInJlcGxhY2UiLCJhZGRFdmVudExpc3RlbmVyIiwiYXR0YWNoRXZlbnQiXSwic291cmNlcyI6WyJnYW1lLXVwLWNhbWVyYS0xLjAuMC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNiBCcmFpblBPUFxyXG4vLyBSZWxlYXNlZCB1bmRlciBNSVQgTGljZW5zZSxcclxuLy8gc2VlIGh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9waGV0c2ltcy9zaGVycGEvbWFpbi9saWNlbnNlcy9nYW1lLXVwLWNhbWVyYS0xLjAuMC5qcy50eHRcclxuXHJcbi8qKlxyXG4gKiBSZXNwb25kcyB0byByZXF1ZXN0cyBmcm9tIEJyYWluUE9QL0dhbWUgVXAvU25hcFRob3VnaHQgZm9yIHJldHVybiBpbWFnZXMgZnJvbSBhIFBoRVQgc2ltdWxhdGlvbi5cclxuICogQGF1dGhvciBCcmFpblBPUFxyXG4gKiBAYXV0aG9yIFZpbiBSb3dlXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuY29uc3QgbG9nZ2luZyA9IHdpbmRvdy5waGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLmdhbWVVcExvZ2dpbmc7XHJcbmNvbnN0IGlzR2FtZVVwID0gd2luZG93LnBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuZ2FtZVVwO1xyXG5jb25zdCBpc0dhbWVVcFRlc3RIYXJuZXNzID0gd2luZG93LnBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMuZ2FtZVVwVGVzdEhhcm5lc3M7XHJcblxyXG5jb25zdCBsb2cgPSB0ZXh0ID0+IGxvZ2dpbmcgJiYgY29uc29sZS5sb2coIHRleHQgKTtcclxuXHJcbi8vIE9ubHkgZW5hYmxlIGlmIGEgcXVlcnkgcGFyYW1ldGVyIGlzIHNldFxyXG5pZiAoIGlzR2FtZVVwICkge1xyXG5cclxuICBsb2coICdFbmFibGVkIEdhbWUgVXAgQ2FtZXJhJyApO1xyXG5cclxuICBjb25zdCBzdWZmaXggPSAnLmJyYWlucG9wLmNvbSc7XHJcblxyXG4gIC8vIGhhdmVuJ3QgcmVjZWl2ZWQgd29yZCBmcm9tIHRoZSBwYXJlbnQgdGhhdCBjYXB0dXJlUmVhZHkgc3VjY2VlZGVkXHJcbiAgbGV0IGdhbWVVcENhcHR1cmVSZWFkeSA9IGZhbHNlO1xyXG5cclxuICAvLyBTdG9wIGNoZWNraW5nIGFmdGVyIDEwIHRpbWVzIGluIGNhc2Ugd2Ugc29tZWhvdyBtaXNzZWQgdGhlIEdhbWVVcENhcHR1cmVSZWFkeSBtZXNzYWdlXHJcbiAgbGV0IG51bWJlck9mQ2hlY2tzID0gMDtcclxuXHJcbiAgY29uc3QgY2hlY2tJbml0aWFsaXphdGlvbiA9ICgpID0+IHtcclxuXHJcbiAgICAvLyBoYXZlbid0IHJlY2VpdmVkIHdvcmQgZnJvbSB0aGUgcGFyZW50IHRoYXQgY2FwdHVyZVJlYWR5IHN1Y2NlZWRlZFxyXG4gICAgaWYgKCAhZ2FtZVVwQ2FwdHVyZVJlYWR5ICYmIG51bWJlck9mQ2hlY2tzIDwgMTAgKSB7XHJcbiAgICAgIHBhcmVudC5wb3N0TWVzc2FnZSggJ2NhcHR1cmVSZWFkeScsICcqJyApO1xyXG4gICAgICBudW1iZXJPZkNoZWNrcysrO1xyXG5cclxuICAgICAgbG9nKCAnUG9zdGVkIGNhcHR1cmVSZWFkeSwgbnVtYmVyIG9mIGNoZWNrczogJyArIG51bWJlck9mQ2hlY2tzICk7XHJcbiAgICAgIHNldFRpbWVvdXQoIGNoZWNrSW5pdGlhbGl6YXRpb24sIDEwMDAgKTsvL3RyeSBhZ2FpbiBpbiBhIHNlY29uZFxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIGNvbnN0IHJlY2VpdmVyID0gZXZlbnQgPT4ge1xyXG4gICAgaWYgKCBldmVudC5vcmlnaW4uaW5kZXhPZiggc3VmZml4LCBldmVudC5vcmlnaW4ubGVuZ3RoIC0gc3VmZml4Lmxlbmd0aCApICE9PSAtMSB8fCBpc0dhbWVVcFRlc3RIYXJuZXNzICkge1xyXG4gICAgICBpZiAoIGV2ZW50LmRhdGEgPT09ICdjYXB0dXJlSW1hZ2UnICkge1xyXG4gICAgICAgIGNvbnN0IGRhdGFVUkwgPSB3aW5kb3cucGhldC5qb2lzdC5TY3JlZW5zaG90R2VuZXJhdG9yLmdlbmVyYXRlU2NyZWVuc2hvdCggd2luZG93LnBoZXQuam9pc3Quc2ltLCAnaW1hZ2UvanBlZycgKTtcclxuICAgICAgICBzZW5kSW1hZ2UoIGRhdGFVUkwsIGV2ZW50Lm9yaWdpbiwgZXZlbnQuc291cmNlICk7XHJcblxyXG4gICAgICAgIGxvZyggJ1NlbnQgaW1hZ2UnICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSBpZiAoIGV2ZW50LmRhdGEgPT09ICdHYW1lVXBDYXB0dXJlUmVhZHknICkge1xyXG5cclxuICAgICAgICBsb2coICdHYW1lVXBDYXB0dXJlUmVhZHknICk7XHJcblxyXG4gICAgICAgIC8vIFRPRE86IHBvc3QgY2FwdHVyZVJlYWR5IGZyb20gaGVyZVxyXG5cclxuICAgICAgICAvL2NhcHR1cmVSZWFkeSBzdWNjZWVkZWRcclxuICAgICAgICBnYW1lVXBDYXB0dXJlUmVhZHkgPSB0cnVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2VuZEltYWdlID0gKCBpbWFnZVN0cmluZywgb3JpZ2luLCBzb3VyY2UgKSA9PiB7XHJcblxyXG4gICAgLy9jYXB0dXJlLmpzIGFscmVhZHkgYXBwZW5kcyB0aGlzLCBzbyB3ZSBlbmQgdXAgd2l0aCB0d29cclxuICAgIGltYWdlU3RyaW5nID0gaW1hZ2VTdHJpbmcucmVwbGFjZSggJ2RhdGE6aW1hZ2UvanBlZztiYXNlNjQsJywgJycgKTtcclxuXHJcbiAgICAvL3NlbmQgaXQgYmFja1xyXG4gICAgc291cmNlLnBvc3RNZXNzYWdlKCBpbWFnZVN0cmluZywgb3JpZ2luICk7XHJcbiAgfTtcclxuXHJcbiAgaWYgKCB3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcclxuICAgIHdpbmRvdy5hZGRFdmVudExpc3RlbmVyKCAnbWVzc2FnZScsIHJlY2VpdmVyLCBmYWxzZSApO1xyXG4gIH1cclxuICBlbHNlIGlmICggd2luZG93LmF0dGFjaEV2ZW50ICkge1xyXG4gICAgd2luZG93LmF0dGFjaEV2ZW50KCAnb25tZXNzYWdlJywgcmVjZWl2ZXIgKTtcclxuICB9XHJcblxyXG4gIC8vIENhbGwgY2FwdHVyZVJlYWR5LCBmdW5jdGlvbiB3aWxsIHJlY2FsbCBpdHNlbGYgdW50aWwgZ2FtZVVwQ2FwdHVyZVJlYWR5XHJcbiAgY2hlY2tJbml0aWFsaXphdGlvbigpO1xyXG59Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLE9BQU8sR0FBR0MsTUFBTSxDQUFDQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsZUFBZSxDQUFDQyxhQUFhO0FBQ2pFLE1BQU1DLFFBQVEsR0FBR0wsTUFBTSxDQUFDQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsZUFBZSxDQUFDRyxNQUFNO0FBQzNELE1BQU1DLG1CQUFtQixHQUFHUCxNQUFNLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxD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