// peggy 3.0.2
//
// https://peggyjs.org/
//
// Copyright (c) 2023- the Peggy authors
// Licensed under the MIT License.

!function (e, u) {
  "object" == typeof exports && "undefined" != typeof module ? module.exports = u() : "function" == typeof define && define.amd ? define(u) : (e = "undefined" != typeof globalThis ? globalThis : e || self).peggy = u();
}(this, function () {
  "use strict";

  var commonjsGlobal = "undefined" != typeof globalThis ? globalThis : "undefined" != typeof window ? window : "undefined" != typeof global ? global : "undefined" != typeof self ? self : {},
    GrammarLocation$4 = function () {
      function GrammarLocation(e, u) {
        this.source = e, this.start = u;
      }
      return GrammarLocation.prototype.toString = function () {
        return String(this.source);
      }, GrammarLocation.prototype.offset = function (e) {
        return {
          line: e.line + this.start.line - 1,
          column: 1 === e.line ? e.column + this.start.column - 1 : e.column,
          offset: e.offset + this.start.offset
        };
      }, GrammarLocation.offsetStart = function (e) {
        return e.source && "function" == typeof e.source.offset ? e.source.offset(e.start) : e.start;
      }, GrammarLocation.offsetEnd = function (e) {
        return e.source && "function" == typeof e.source.offset ? e.source.offset(e.end) : e.end;
      }, GrammarLocation;
    }(),
    grammarLocation = GrammarLocation$4,
    __extends = commonjsGlobal && commonjsGlobal.__extends || (extendStatics = function (e, u) {
      return extendStatics = Object.setPrototypeOf || {
        __proto__: []
      } instanceof Array && function (e, u) {
        e.__proto__ = u;
      } || function (e, u) {
        for (var t in u) Object.prototype.hasOwnProperty.call(u, t) && (e[t] = u[t]);
      }, extendStatics(e, u);
    }, function (e, u) {
      if ("function" != typeof u && null !== u) throw new TypeError("Class extends value " + String(u) + " is not a constructor or null");
      function t() {
        this.constructor = e;
      }
      extendStatics(e, u), e.prototype = null === u ? Object.create(u) : (t.prototype = u.prototype, new t());
    }),
    extendStatics,
    GrammarLocation$3 = grammarLocation,
    setProtoOf = Object.setPrototypeOf || {
      __proto__: []
    } instanceof Array && function (e, u) {
      e.__proto__ = u;
    } || function (e, u) {
      for (var t in u) Object.prototype.hasOwnProperty.call(u, t) && (e[t] = u[t]);
    },
    GrammarError$3 = function (e) {
      function u(t, r, n) {
        var o = e.call(this, t) || this;
        return setProtoOf(o, u.prototype), o.name = "GrammarError", o.location = r, void 0 === n && (n = []), o.diagnostics = n, o.stage = null, o.problems = [["error", t, r, n]], o;
      }
      return __extends(u, e), u.prototype.toString = function () {
        var u = e.prototype.toString.call(this);
        this.location && (u += "\n at ", void 0 !== this.location.source && null !== this.location.source && (u += "".concat(this.location.source, ":")), u += "".concat(this.location.start.line, ":").concat(this.location.start.column));
        for (var t = 0, r = this.diagnostics; t < r.length; t++) {
          var n = r[t];
          u += "\n from ", void 0 !== n.location.source && null !== n.location.source && (u += "".concat(n.location.source, ":")), u += "".concat(n.location.start.line, ":").concat(n.location.start.column, ": ").concat(n.message);
        }
        return u;
      }, u.prototype.format = function (e) {
        var u = e.map(function (e) {
          var u = e.source,
            t = e.text;
          return {
            source: u,
            text: null != t ? String(t).split(/\r\n|\n|\r/g) : []
          };
        });
        function t(e, t, r) {
          void 0 === r && (r = "");
          var n = "",
            o = u.find(function (u) {
              return u.source === e.source;
            }),
            a = e.start,
            i = GrammarLocation$3.offsetStart(e);
          if (o) {
            var s = e.end,
              c = o.text[a.line - 1],
              l = (a.line === s.line ? s.column : c.length + 1) - a.column || 1;
            r && (n += "\nnote: ".concat(r)), n += "\n --\x3e ".concat(e.source, ":").concat(i.line, ":").concat(i.column, "\n").concat("".padEnd(t), " |\n").concat(i.line.toString().padStart(t), " | ").concat(c, "\n").concat("".padEnd(t), " | ").concat("".padEnd(a.column - 1)).concat("".padEnd(l, "^"));
          } else n += "\n at ".concat(e.source, ":").concat(i.line, ":").concat(i.column), r && (n += ": ".concat(r));
          return n;
        }
        function r(e, u, r, n) {
          void 0 === n && (n = []);
          var o = -1 / 0;
          o = r ? n.reduce(function (e, u) {
            var t = u.location;
            return Math.max(e, GrammarLocation$3.offsetStart(t).line);
          }, r.start.line) : Math.max.apply(null, n.map(function (e) {
            return e.location.start.line;
          })), o = o.toString().length;
          var a = "".concat(e, ": ").concat(u);
          r && (a += t(r, o));
          for (var i = 0, s = n; i < s.length; i++) {
            var c = s[i];
            a += t(c.location, o, c.message);
          }
          return a;
        }
        return this.problems.filter(function (e) {
          return "info" !== e[0];
        }).map(function (e) {
          return r.apply(void 0, e);
        }).join("\n\n");
      }, u;
    }(Error),
    grammarError = GrammarError$3,
    __spreadArray$3 = commonjsGlobal && commonjsGlobal.__spreadArray || function (e, u, t) {
      if (t || 2 === arguments.length) for (var r, n = 0, o = u.length; n < o; n++) !r && n in u || (r || (r = Array.prototype.slice.call(u, 0, n)), r[n] = u[n]);
      return e.concat(r || Array.prototype.slice.call(u));
    },
    visitor$b = {
      build: function (e) {
        function u(u) {
          for (var t = [], r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
          return e[u.type].apply(e, __spreadArray$3([u], t, !1));
        }
        function t() {}
        function r(e) {
          for (var t = [], r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
          return u.apply(void 0, __spreadArray$3([e.expression], t, !1));
        }
        function n(e) {
          return function (t) {
            for (var r = [], n = 1; n < arguments.length; n++) r[n - 1] = arguments[n];
            t[e].forEach(function (e) {
              return u.apply(void 0, __spreadArray$3([e], r, !1));
            });
          };
        }
        var o = {
          grammar: function (e) {
            for (var t = [], r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
            e.topLevelInitializer && u.apply(void 0, __spreadArray$3([e.topLevelInitializer], t, !1)), e.initializer && u.apply(void 0, __spreadArray$3([e.initializer], t, !1)), e.rules.forEach(function (e) {
              return u.apply(void 0, __spreadArray$3([e], t, !1));
            });
          },
          top_level_initializer: t,
          initializer: t,
          rule: r,
          named: r,
          choice: n("alternatives"),
          action: r,
          sequence: n("elements"),
          labeled: r,
          text: r,
          simple_and: r,
          simple_not: r,
          optional: r,
          zero_or_more: r,
          one_or_more: r,
          repeated: function (e) {
            for (var t = [], r = 1; r < arguments.length; r++) t[r - 1] = arguments[r];
            return e.delimiter && u.apply(void 0, __spreadArray$3([e.delimiter], t, !1)), u.apply(void 0, __spreadArray$3([e.expression], t, !1));
          },
          group: r,
          semantic_and: t,
          semantic_not: t,
          rule_ref: t,
          literal: t,
          class: t,
          any: t
        };
        return Object.keys(o).forEach(function (u) {
          Object.prototype.hasOwnProperty.call(e, u) || (e[u] = o[u]);
        }), u;
      }
    },
    visitor_1 = visitor$b,
    visitor$a = visitor_1,
    asts$7 = {
      findRule: function (e, u) {
        for (var t = 0; t < e.rules.length; t++) if (e.rules[t].name === u) return e.rules[t];
      },
      indexOfRule: function (e, u) {
        for (var t = 0; t < e.rules.length; t++) if (e.rules[t].name === u) return t;
        return -1;
      },
      alwaysConsumesOnSuccess: function (e, u) {
        function t() {
          return !0;
        }
        function r() {
          return !1;
        }
        var n = visitor$a.build({
          choice: function (e) {
            return e.alternatives.every(n);
          },
          sequence: function (e) {
            return e.elements.some(n);
          },
          simple_and: r,
          simple_not: r,
          optional: r,
          zero_or_more: r,
          repeated: function (e) {
            var u = e.min ? e.min : e.max;
            return !("constant" !== u.type || 0 === u.value || !n(e.expression) && !(u.value > 1 && e.delimiter && n(e.delimiter)));
          },
          semantic_and: r,
          semantic_not: r,
          rule_ref: function (u) {
            var t = asts$7.findRule(e, u.name);
            return t ? n(t) : void 0;
          },
          literal: function (e) {
            return "" !== e.value;
          },
          class: t,
          any: t
        });
        return n(u);
      }
    },
    asts_1 = asts$7,
    opcodes = {
      PUSH: 0,
      PUSH_EMPTY_STRING: 35,
      PUSH_UNDEFINED: 1,
      PUSH_NULL: 2,
      PUSH_FAILED: 3,
      PUSH_EMPTY_ARRAY: 4,
      PUSH_CURR_POS: 5,
      POP: 6,
      POP_CURR_POS: 7,
      POP_N: 8,
      NIP: 9,
      APPEND: 10,
      WRAP: 11,
      TEXT: 12,
      PLUCK: 36,
      IF: 13,
      IF_ERROR: 14,
      IF_NOT_ERROR: 15,
      IF_LT: 30,
      IF_GE: 31,
      IF_LT_DYNAMIC: 32,
      IF_GE_DYNAMIC: 33,
      WHILE_NOT_ERROR: 16,
      MATCH_ANY: 17,
      MATCH_STRING: 18,
      MATCH_STRING_IC: 19,
      MATCH_CHAR_CLASS: 20,
      MATCH_REGEXP: 20,
      ACCEPT_N: 21,
      ACCEPT_STRING: 22,
      FAIL: 23,
      LOAD_SAVED_POS: 24,
      UPDATE_SAVED_POS: 25,
      CALL: 26,
      RULE: 27,
      SILENT_FAILS_ON: 28,
      SILENT_FAILS_OFF: 29,
      SOURCE_MAP_PUSH: 37,
      SOURCE_MAP_POP: 38,
      SOURCE_MAP_LABEL_PUSH: 39,
      SOURCE_MAP_LABEL_POP: 40
    },
    opcodes_1 = opcodes,
    visitor$9 = visitor_1,
    asts$6 = asts_1,
    GrammarError$2 = grammarError,
    ALWAYS_MATCH$1 = 1,
    SOMETIMES_MATCH$1 = 0,
    NEVER_MATCH$1 = -1;
  function inferenceMatchResult$1(e) {
    function u(e) {
      return e.match = SOMETIMES_MATCH$1;
    }
    function t(e) {
      return o(e.expression), e.match = ALWAYS_MATCH$1;
    }
    function r(e) {
      return e.match = o(e.expression);
    }
    function n(e, u) {
      for (var t = e.length, r = 0, n = 0, a = 0; a < t; ++a) {
        var i = o(e[a]);
        i === ALWAYS_MATCH$1 && ++r, i === NEVER_MATCH$1 && ++n;
      }
      return r === t ? ALWAYS_MATCH$1 : u ? n === t ? NEVER_MATCH$1 : SOMETIMES_MATCH$1 : n > 0 ? NEVER_MATCH$1 : SOMETIMES_MATCH$1;
    }
    var o = visitor$9.build({
      rule: function (e) {
        var u = void 0,
          t = 0;
        if (void 0 === e.match) {
          e.match = SOMETIMES_MATCH$1;
          do {
            if (u = e.match, e.match = o(e.expression), ++t > 6) throw new GrammarError$2("Infinity cycle detected when trying to evaluate node match result", e.location);
          } while (u !== e.match);
        }
        return e.match;
      },
      named: r,
      choice: function (e) {
        return e.match = n(e.alternatives, !0);
      },
      action: r,
      sequence: function (e) {
        return e.match = n(e.elements, !1);
      },
      labeled: r,
      text: r,
      simple_and: r,
      simple_not: function (e) {
        return e.match = -o(e.expression);
      },
      optional: t,
      zero_or_more: t,
      one_or_more: r,
      repeated: function (e) {
        var u = o(e.expression),
          t = e.delimiter ? o(e.delimiter) : NEVER_MATCH$1,
          r = e.min ? e.min : e.max;
        return "constant" !== r.type || "constant" !== e.max.type ? e.match = SOMETIMES_MATCH$1 : 0 === e.max.value || null !== e.max.value && r.value > e.max.value ? e.match = NEVER_MATCH$1 : u === NEVER_MATCH$1 ? e.match = 0 === r.value ? ALWAYS_MATCH$1 : NEVER_MATCH$1 : u === ALWAYS_MATCH$1 ? e.delimiter && r.value >= 2 ? e.match = t : e.match = ALWAYS_MATCH$1 : e.delimiter && r.value >= 2 ? e.match = t === NEVER_MATCH$1 ? NEVER_MATCH$1 : SOMETIMES_MATCH$1 : e.match = 0 === r.value ? ALWAYS_MATCH$1 : SOMETIMES_MATCH$1;
      },
      group: r,
      semantic_and: u,
      semantic_not: u,
      rule_ref: function (u) {
        var t = asts$6.findRule(e, u.name);
        return u.match = o(t);
      },
      literal: function (e) {
        var u = 0 === e.value.length ? ALWAYS_MATCH$1 : SOMETIMES_MATCH$1;
        return e.match = u;
      },
      class: function (e) {
        var u = 0 === e.parts.length ? NEVER_MATCH$1 : SOMETIMES_MATCH$1;
        return e.match = u;
      },
      any: u
    });
    o(e);
  }
  inferenceMatchResult$1.ALWAYS_MATCH = ALWAYS_MATCH$1, inferenceMatchResult$1.SOMETIMES_MATCH = SOMETIMES_MATCH$1, inferenceMatchResult$1.NEVER_MATCH = NEVER_MATCH$1;
  var inferenceMatchResult_1 = inferenceMatchResult$1,
    __spreadArray$2 = commonjsGlobal && commonjsGlobal.__spreadArray || function (e, u, t) {
      if (t || 2 === arguments.length) for (var r, n = 0, o = u.length; n < o; n++) !r && n in u || (r || (r = Array.prototype.slice.call(u, 0, n)), r[n] = u[n]);
      return e.concat(r || Array.prototype.slice.call(u));
    },
    asts$5 = asts_1,
    op$1 = opcodes_1,
    visitor$8 = visitor_1,
    _a$1 = inferenceMatchResult_1,
    ALWAYS_MATCH = _a$1.ALWAYS_MATCH,
    SOMETIMES_MATCH = _a$1.SOMETIMES_MATCH,
    NEVER_MATCH = _a$1.NEVER_MATCH;
  function generateBytecode$1(e, u) {
    var t = [],
      r = [],
      n = [],
      o = [],
      a = [];
    function i(e) {
      var u = t.indexOf(e);
      return -1 === u ? t.push(e) - 1 : u;
    }
    function s(e) {
      var u = JSON.stringify(e),
        t = n.findIndex(function (e) {
          return JSON.stringify(e) === u;
        });
      return -1 === t ? n.push(e) - 1 : t;
    }
    function c(e, u, t) {
      var r = {
          predicate: e,
          params: u,
          body: t.code,
          location: t.codeLocation
        },
        n = JSON.stringify(r),
        a = o.findIndex(function (e) {
          return JSON.stringify(e) === n;
        });
      return -1 === a ? o.push(r) - 1 : a;
    }
    function l(e) {
      return a.push(e) - 1;
    }
    function p(e) {
      var u = {};
      return Object.keys(e).forEach(function (t) {
        u[t] = e[t];
      }), u;
    }
    function A(e) {
      for (var u = [], t = 1; t < arguments.length; t++) u[t - 1] = arguments[t];
      return e.concat.apply(e, u);
    }
    function f(e, u, t, r) {
      return e === ALWAYS_MATCH ? t : e === NEVER_MATCH ? r : u.concat([t.length, r.length], t, r);
    }
    function E(e, u, t, r) {
      var n = Object.keys(t).map(function (e) {
        return r - t[e];
      });
      return [op$1.CALL, e, u, n.length].concat(n);
    }
    function h(e, u, t) {
      var r = 0 | e.match;
      return A([op$1.PUSH_CURR_POS], [op$1.SILENT_FAILS_ON], _(e, {
        sp: t.sp + 1,
        env: p(t.env),
        action: null
      }), [op$1.SILENT_FAILS_OFF], f(u ? -r : r, [u ? op$1.IF_ERROR : op$1.IF_NOT_ERROR], A([op$1.POP], [u ? op$1.POP : op$1.POP_CURR_POS], [op$1.PUSH_UNDEFINED]), A([op$1.POP], [u ? op$1.POP_CURR_POS : op$1.POP], [op$1.PUSH_FAILED])));
    }
    function d(e, u, t) {
      var r = c(!0, Object.keys(t.env), e);
      return A([op$1.UPDATE_SAVED_POS], E(r, 0, t.env, t.sp), f(0 | e.match, [op$1.IF], A([op$1.POP], u ? [op$1.PUSH_FAILED] : [op$1.PUSH_UNDEFINED]), A([op$1.POP], u ? [op$1.PUSH_UNDEFINED] : [op$1.PUSH_FAILED])));
    }
    function C(e) {
      return u = [op$1.WHILE_NOT_ERROR], t = A([op$1.APPEND], e), u.concat([t.length], t);
      var u, t;
    }
    function g(e, u, t, r) {
      switch (e.type) {
        case "constant":
          return {
            pre: [],
            post: [],
            sp: t
          };
        case "variable":
          return e.sp = r + t - u[e.value], {
            pre: [],
            post: [],
            sp: t
          };
        case "function":
          return e.sp = r, {
            pre: E(c(!0, Object.keys(u), {
              code: e.value,
              codeLocation: e.codeLocation
            }), 0, u, t),
            post: [op$1.NIP],
            sp: t + 1
          };
        default:
          throw new Error('Unknown boundary type "'.concat(e.type, '" for the "repeated" node'));
      }
    }
    function m(e, u) {
      if (null !== u.value) {
        var t = "constant" === u.type ? [op$1.IF_GE, u.value] : [op$1.IF_GE_DYNAMIC, u.sp];
        return f(SOMETIMES_MATCH, t, [op$1.PUSH_FAILED], e);
      }
      return e;
    }
    var F,
      _ = (F = {
        grammar: function (e) {
          e.rules.forEach(_), e.literals = t, e.classes = r, e.expectations = n, e.functions = o, e.locations = a;
        },
        rule: function (e) {
          e.bytecode = _(e.expression, {
            sp: -1,
            env: {},
            pluck: [],
            action: null
          });
        },
        named: function (e, u) {
          var t = 0 | e.match,
            r = t === NEVER_MATCH ? null : s({
              type: "rule",
              value: e.name
            });
          return A([op$1.SILENT_FAILS_ON], _(e.expression, u), [op$1.SILENT_FAILS_OFF], f(t, [op$1.IF_ERROR], [op$1.FAIL, r], []));
        },
        choice: function (e, u) {
          return function e(u, t) {
            var r = 0 | u[0].match,
              n = _(u[0], {
                sp: t.sp,
                env: p(t.env),
                action: null
              });
            return r === ALWAYS_MATCH ? n : A(n, u.length > 1 ? f(SOMETIMES_MATCH, [op$1.IF_ERROR], A([op$1.POP], e(u.slice(1), t)), []) : []);
          }(e.alternatives, u);
        },
        action: function (e, u) {
          var t = p(u.env),
            r = "sequence" !== e.expression.type || 0 === e.expression.elements.length,
            n = _(e.expression, {
              sp: u.sp + (r ? 1 : 0),
              env: t,
              action: e
            }),
            o = 0 | e.expression.match,
            a = r && o !== NEVER_MATCH ? c(!1, Object.keys(t), e) : null;
          return r ? A([op$1.PUSH_CURR_POS], n, f(o, [op$1.IF_NOT_ERROR], A([op$1.LOAD_SAVED_POS, 1], E(a, 1, t, u.sp + 2)), []), [op$1.NIP]) : n;
        },
        sequence: function (e, u) {
          return A([op$1.PUSH_CURR_POS], function u(t, r) {
            if (t.length > 0) {
              var n = e.elements.length - t.length + 1;
              return A(_(t[0], {
                sp: r.sp,
                env: r.env,
                pluck: r.pluck,
                action: null
              }), f(0 | t[0].match, [op$1.IF_NOT_ERROR], u(t.slice(1), {
                sp: r.sp + 1,
                env: r.env,
                pluck: r.pluck,
                action: r.action
              }), A(n > 1 ? [op$1.POP_N, n] : [op$1.POP], [op$1.POP_CURR_POS], [op$1.PUSH_FAILED])));
            }
            if (r.pluck.length > 0) return A([op$1.PLUCK, e.elements.length + 1, r.pluck.length], r.pluck.map(function (e) {
              return r.sp - e;
            }));
            if (r.action) {
              var o = c(!1, Object.keys(r.env), r.action);
              return A([op$1.LOAD_SAVED_POS, e.elements.length], E(o, e.elements.length + 1, r.env, r.sp));
            }
            return A([op$1.WRAP, e.elements.length], [op$1.NIP]);
          }(e.elements, {
            sp: u.sp + 1,
            env: u.env,
            pluck: [],
            action: u.action
          }));
        },
        labeled: function (e, t) {
          var r = t.env,
            n = e.label,
            o = t.sp + 1;
          n && (r = p(t.env), t.env[e.label] = o), e.pick && t.pluck.push(o);
          var a = _(e.expression, {
            sp: t.sp,
            env: r,
            action: null
          });
          return n && e.labelLocation && u && "source-and-map" === u.output ? A([op$1.SOURCE_MAP_LABEL_PUSH, o, i(n), l(e.labelLocation)], a, [op$1.SOURCE_MAP_LABEL_POP, o]) : a;
        },
        text: function (e, u) {
          return A([op$1.PUSH_CURR_POS], _(e.expression, {
            sp: u.sp + 1,
            env: p(u.env),
            action: null
          }), f(0 | e.match, [op$1.IF_NOT_ERROR], A([op$1.POP], [op$1.TEXT]), [op$1.NIP]));
        },
        simple_and: function (e, u) {
          return h(e.expression, !1, u);
        },
        simple_not: function (e, u) {
          return h(e.expression, !0, u);
        },
        optional: function (e, u) {
          return A(_(e.expression, {
            sp: u.sp,
            env: p(u.env),
            action: null
          }), f(-(0 | e.expression.match), [op$1.IF_ERROR], A([op$1.POP], [op$1.PUSH_NULL]), []));
        },
        zero_or_more: function (e, u) {
          var t = _(e.expression, {
            sp: u.sp + 1,
            env: p(u.env),
            action: null
          });
          return A([op$1.PUSH_EMPTY_ARRAY], t, C(t), [op$1.POP]);
        },
        one_or_more: function (e, u) {
          var t = _(e.expression, {
            sp: u.sp + 1,
            env: p(u.env),
            action: null
          });
          return A([op$1.PUSH_EMPTY_ARRAY], t, f(0 | e.expression.match, [op$1.IF_NOT_ERROR], A(C(t), [op$1.POP]), A([op$1.POP], [op$1.POP], [op$1.PUSH_FAILED])));
        },
        repeated: function (e, u) {
          var t = e.min ? e.min : e.max,
            r = "constant" !== t.type || t.value > 0,
            n = "constant" !== e.max.type && null !== e.max.value,
            o = r ? 2 : 1,
            a = e.min ? g(e.min, u.env, u.sp, 2 + ("function" === e.max.type ? 1 : 0)) : {
              pre: [],
              post: [],
              sp: u.sp
            },
            i = g(e.max, u.env, a.sp, o),
            s = _(e.expression, {
              sp: i.sp + o,
              env: p(u.env),
              action: null
            }),
            c = null !== e.delimiter ? _(e.expression, {
              sp: i.sp + o + 1,
              env: p(u.env),
              action: null
            }) : s,
            l = function (e, u, t, r, n) {
              return e ? A([op$1.PUSH_CURR_POS], _(e, {
                sp: r.sp + n + 1,
                env: p(r.env),
                action: null
              }), f(0 | e.match, [op$1.IF_NOT_ERROR], A([op$1.POP], t, f(-u, [op$1.IF_ERROR], [op$1.POP, op$1.POP_CURR_POS, op$1.PUSH_FAILED], [op$1.NIP])), [op$1.NIP])) : t;
            }(e.delimiter, 0 | e.expression.match, c, u, o),
            E = m(l, e.max),
            h = n ? m(s, e.max) : s,
            d = A(r ? [op$1.PUSH_CURR_POS] : [], [op$1.PUSH_EMPTY_ARRAY], h, C(E), [op$1.POP]);
          return A(a.pre, i.pre, r ? function (e, u) {
            var t = "constant" === u.type ? [op$1.IF_LT, u.value] : [op$1.IF_LT_DYNAMIC, u.sp];
            return A(e, f(SOMETIMES_MATCH, t, [op$1.POP, op$1.POP_CURR_POS, op$1.PUSH_FAILED], [op$1.NIP]));
          }(d, t) : d, i.post, a.post);
        },
        group: function (e, u) {
          return _(e.expression, {
            sp: u.sp,
            env: p(u.env),
            action: null
          });
        },
        semantic_and: function (e, u) {
          return d(e, !1, u);
        },
        semantic_not: function (e, u) {
          return d(e, !0, u);
        },
        rule_ref: function (u) {
          return [op$1.RULE, asts$5.indexOfRule(e, u.name)];
        },
        literal: function (e) {
          if (e.value.length > 0) {
            var u = 0 | e.match,
              t = u === SOMETIMES_MATCH || u === ALWAYS_MATCH && !e.ignoreCase ? i(e.ignoreCase ? e.value.toLowerCase() : e.value) : null,
              r = u !== ALWAYS_MATCH ? s({
                type: "literal",
                value: e.value,
                ignoreCase: e.ignoreCase
              }) : null;
            return f(u, e.ignoreCase ? [op$1.MATCH_STRING_IC, t] : [op$1.MATCH_STRING, t], e.ignoreCase ? [op$1.ACCEPT_N, e.value.length] : [op$1.ACCEPT_STRING, t], [op$1.FAIL, r]);
          }
          return [op$1.PUSH_EMPTY_STRING];
        },
        class: function (e) {
          var u = 0 | e.match,
            t = u === SOMETIMES_MATCH ? function (e) {
              var u = {
                  value: e.parts,
                  inverted: e.inverted,
                  ignoreCase: e.ignoreCase
                },
                t = JSON.stringify(u),
                n = r.findIndex(function (e) {
                  return JSON.stringify(e) === t;
                });
              return -1 === n ? r.push(u) - 1 : n;
            }(e) : null,
            n = u !== ALWAYS_MATCH ? s({
              type: "class",
              value: e.parts,
              inverted: e.inverted,
              ignoreCase: e.ignoreCase
            }) : null;
          return f(u, [op$1.MATCH_CHAR_CLASS, t], [op$1.ACCEPT_N, 1], [op$1.FAIL, n]);
        },
        any: function (e) {
          var u = 0 | e.match,
            t = u !== ALWAYS_MATCH ? s({
              type: "any"
            }) : null;
          return f(u, [op$1.MATCH_ANY], [op$1.ACCEPT_N, 1], [op$1.FAIL, t]);
        }
      }, u && "source-and-map" === u.output && Object.entries(F).forEach(function (e) {
        var u = e[0],
          t = e[1];
        F[u] = function (e) {
          for (var u = [], r = 1; r < arguments.length; r++) u[r - 1] = arguments[r];
          var n = t.apply(void 0, __spreadArray$2([e], u, !1));
          return void 0 !== n && e.location ? A([op$1.SOURCE_MAP_PUSH, l(e.location)], n, [op$1.SOURCE_MAP_POP]) : n;
        };
      }), visitor$8.build(F));
    _(e);
  }
  var generateBytecode_1 = generateBytecode$1,
    sourceMap = {},
    sourceMapGenerator = {},
    base64Vlq = {},
    base64$3 = {};
  const intToCharMap = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/".split("");
  base64$3.encode = function (e) {
    if (0 <= e && e < intToCharMap.length) return intToCharMap[e];
    throw new TypeError("Must be between 0 and 63: " + e);
  };
  const base64$2 = base64$3,
    VLQ_BASE_SHIFT = 5,
    VLQ_BASE = 1 << VLQ_BASE_SHIFT,
    VLQ_BASE_MASK = VLQ_BASE - 1,
    VLQ_CONTINUATION_BIT = VLQ_BASE;
  function toVLQSigned(e) {
    return e < 0 ? 1 + (-e << 1) : 0 + (e << 1);
  }
  base64Vlq.encode = function (e) {
    let u,
      t = "",
      r = toVLQSigned(e);
    do {
      u = r & VLQ_BASE_MASK, r >>>= VLQ_BASE_SHIFT, r > 0 && (u |= VLQ_CONTINUATION_BIT), t += base64$2.encode(u);
    } while (r > 0);
    return t;
  };
  var util$3 = {};
  function getArg(e, u, t) {
    if (u in e) return e[u];
    if (3 === arguments.length) return t;
    throw new Error('"' + u + '" is a required argument.');
  }
  util$3.getArg = getArg;
  const supportsNullProto = !("__proto__" in Object.create(null));
  function identity(e) {
    return e;
  }
  function toSetString(e) {
    return isProtoString(e) ? "$" + e : e;
  }
  function fromSetString(e) {
    return isProtoString(e) ? e.slice(1) : e;
  }
  function isProtoString(e) {
    if (!e) return !1;
    const u = e.length;
    if (u < 9) return !1;
    if (95 !== e.charCodeAt(u - 1) || 95 !== e.charCodeAt(u - 2) || 111 !== e.charCodeAt(u - 3) || 116 !== e.charCodeAt(u - 4) || 111 !== e.charCodeAt(u - 5) || 114 !== e.charCodeAt(u - 6) || 112 !== e.charCodeAt(u - 7) || 95 !== e.charCodeAt(u - 8) || 95 !== e.charCodeAt(u - 9)) return !1;
    for (let t = u - 10; t >= 0; t--) if (36 !== e.charCodeAt(t)) return !1;
    return !0;
  }
  function strcmp(e, u) {
    return e === u ? 0 : null === e ? 1 : null === u ? -1 : e > u ? 1 : -1;
  }
  function compareByGeneratedPositionsInflated(e, u) {
    let t = e.generatedLine - u.generatedLine;
    return 0 !== t ? t : (t = e.generatedColumn - u.generatedColumn, 0 !== t ? t : (t = strcmp(e.source, u.source), 0 !== t ? t : (t = e.originalLine - u.originalLine, 0 !== t ? t : (t = e.originalColumn - u.originalColumn, 0 !== t ? t : strcmp(e.name, u.name)))));
  }
  util$3.toSetString = supportsNullProto ? identity : toSetString, util$3.fromSetString = supportsNullProto ? identity : fromSetString, util$3.compareByGeneratedPositionsInflated = compareByGeneratedPositionsInflated;
  const PROTOCOL = "http:",
    PROTOCOL_AND_HOST = `${PROTOCOL}//host`;
  function createSafeHandler(e) {
    return u => {
      const t = getURLType(u),
        r = buildSafeBase(u),
        n = new URL(u, r);
      e(n);
      const o = n.toString();
      return "absolute" === t ? o : "scheme-relative" === t ? o.slice(PROTOCOL.length) : "path-absolute" === t ? o.slice(PROTOCOL_AND_HOST.length) : computeRelativeURL(r, o);
    };
  }
  function withBase(e, u) {
    return new URL(e, u).toString();
  }
  function buildUniqueSegment(e, u) {
    let t = 0;
    for (;;) {
      const r = e + t++;
      if (-1 === u.indexOf(r)) return r;
    }
  }
  function buildSafeBase(e) {
    const u = e.split("..").length - 1,
      t = buildUniqueSegment("p", e);
    let r = `${PROTOCOL_AND_HOST}/`;
    for (let e = 0; e < u; e++) r += `${t}/`;
    return r;
  }
  const ABSOLUTE_SCHEME = /^[A-Za-z0-9\+\-\.]+:/;
  function getURLType(e) {
    return "/" === e[0] ? "/" === e[1] ? "scheme-relative" : "path-absolute" : ABSOLUTE_SCHEME.test(e) ? "absolute" : "path-relative";
  }
  function computeRelativeURL(e, u) {
    "string" == typeof e && (e = new URL(e)), "string" == typeof u && (u = new URL(u));
    const t = u.pathname.split("/"),
      r = e.pathname.split("/");
    for (r.length > 0 && !r[r.length - 1] && r.pop(); t.length > 0 && r.length > 0 && t[0] === r[0];) t.shift(), r.shift();
    return r.map(() => "..").concat(t).join("/") + u.search + u.hash;
  }
  const ensureDirectory = createSafeHandler(e => {
      e.pathname = e.pathname.replace(/\/?$/, "/");
    }),
    normalize = createSafeHandler(e => {});
  function join(e, u) {
    const t = getURLType(u),
      r = getURLType(e);
    if (e = ensureDirectory(e), "absolute" === t) return withBase(u, void 0);
    if ("absolute" === r) return withBase(u, e);
    if ("scheme-relative" === t) return normalize(u);
    if ("scheme-relative" === r) return withBase(u, withBase(e, PROTOCOL_AND_HOST)).slice(PROTOCOL.length);
    if ("path-absolute" === t) return normalize(u);
    if ("path-absolute" === r) return withBase(u, withBase(e, PROTOCOL_AND_HOST)).slice(PROTOCOL_AND_HOST.length);
    const n = buildSafeBase(u + e);
    return computeRelativeURL(n, withBase(u, withBase(e, n)));
  }
  function relative(e, u) {
    const t = relativeIfPossible(e, u);
    return "string" == typeof t ? t : normalize(u);
  }
  function relativeIfPossible(e, u) {
    if (getURLType(e) !== getURLType(u)) return null;
    const t = buildSafeBase(e + u),
      r = new URL(e, t),
      n = new URL(u, t);
    try {
      new URL("", n.toString());
    } catch (e) {
      return null;
    }
    return n.protocol !== r.protocol || n.user !== r.user || n.password !== r.password || n.hostname !== r.hostname || n.port !== r.port ? null : computeRelativeURL(r, n);
  }
  util$3.normalize = normalize, util$3.join = join, util$3.relative = relative;
  var arraySet = {};
  let ArraySet$1 = class e {
    constructor() {
      this._array = [], this._set = new Map();
    }
    static fromArray(u, t) {
      const r = new e();
      for (let e = 0, n = u.length; e < n; e++) r.add(u[e], t);
      return r;
    }
    size() {
      return this._set.size;
    }
    add(e, u) {
      const t = this.has(e),
        r = this._array.length;
      t && !u || this._array.push(e), t || this._set.set(e, r);
    }
    has(e) {
      return this._set.has(e);
    }
    indexOf(e) {
      const u = this._set.get(e);
      if (u >= 0) return u;
      throw new Error('"' + e + '" is not in the set.');
    }
    at(e) {
      if (e >= 0 && e < this._array.length) return this._array[e];
      throw new Error("No element indexed by " + e);
    }
    toArray() {
      return this._array.slice();
    }
  };
  arraySet.ArraySet = ArraySet$1;
  var mappingList = {};
  const util$2 = util$3;
  function generatedPositionAfter(e, u) {
    const t = e.generatedLine,
      r = u.generatedLine,
      n = e.generatedColumn,
      o = u.generatedColumn;
    return r > t || r == t && o >= n || util$2.compareByGeneratedPositionsInflated(e, u) <= 0;
  }
  let MappingList$1 = class {
    constructor() {
      this._array = [], this._sorted = !0, this._last = {
        generatedLine: -1,
        generatedColumn: 0
      };
    }
    unsortedForEach(e, u) {
      this._array.forEach(e, u);
    }
    add(e) {
      generatedPositionAfter(this._last, e) ? (this._last = e, this._array.push(e)) : (this._sorted = !1, this._array.push(e));
    }
    toArray() {
      return this._sorted || (this._array.sort(util$2.compareByGeneratedPositionsInflated), this._sorted = !0), this._array;
    }
  };
  mappingList.MappingList = MappingList$1;
  const base64VLQ = base64Vlq,
    util$1 = util$3,
    ArraySet = arraySet.ArraySet,
    MappingList = mappingList.MappingList;
  let SourceMapGenerator$1 = class e {
    constructor(e) {
      e || (e = {}), this._file = util$1.getArg(e, "file", null), this._sourceRoot = util$1.getArg(e, "sourceRoot", null), this._skipValidation = util$1.getArg(e, "skipValidation", !1), this._sources = new ArraySet(), this._names = new ArraySet(), this._mappings = new MappingList(), this._sourcesContents = null;
    }
    static fromSourceMap(u) {
      const t = u.sourceRoot,
        r = new e({
          file: u.file,
          sourceRoot: t
        });
      return u.eachMapping(function (e) {
        const u = {
          generated: {
            line: e.generatedLine,
            column: e.generatedColumn
          }
        };
        null != e.source && (u.source = e.source, null != t && (u.source = util$1.relative(t, u.source)), u.original = {
          line: e.originalLine,
          column: e.originalColumn
        }, null != e.name && (u.name = e.name)), r.addMapping(u);
      }), u.sources.forEach(function (e) {
        let n = e;
        null != t && (n = util$1.relative(t, e)), r._sources.has(n) || r._sources.add(n);
        const o = u.sourceContentFor(e);
        null != o && r.setSourceContent(e, o);
      }), r;
    }
    addMapping(e) {
      const u = util$1.getArg(e, "generated"),
        t = util$1.getArg(e, "original", null);
      let r = util$1.getArg(e, "source", null),
        n = util$1.getArg(e, "name", null);
      this._skipValidation || this._validateMapping(u, t, r, n), null != r && (r = String(r), this._sources.has(r) || this._sources.add(r)), null != n && (n = String(n), this._names.has(n) || this._names.add(n)), this._mappings.add({
        generatedLine: u.line,
        generatedColumn: u.column,
        originalLine: t && t.line,
        originalColumn: t && t.column,
        source: r,
        name: n
      });
    }
    setSourceContent(e, u) {
      let t = e;
      null != this._sourceRoot && (t = util$1.relative(this._sourceRoot, t)), null != u ? (this._sourcesContents || (this._sourcesContents = Object.create(null)), this._sourcesContents[util$1.toSetString(t)] = u) : this._sourcesContents && (delete this._sourcesContents[util$1.toSetString(t)], 0 === Object.keys(this._sourcesContents).length && (this._sourcesContents = null));
    }
    applySourceMap(e, u, t) {
      let r = u;
      if (null == u) {
        if (null == e.file) throw new Error('SourceMapGenerator.prototype.applySourceMap requires either an explicit source file, or the source map\'s "file" property. Both were omitted.');
        r = e.file;
      }
      const n = this._sourceRoot;
      null != n && (r = util$1.relative(n, r));
      const o = this._mappings.toArray().length > 0 ? new ArraySet() : this._sources,
        a = new ArraySet();
      this._mappings.unsortedForEach(function (u) {
        if (u.source === r && null != u.originalLine) {
          const r = e.originalPositionFor({
            line: u.originalLine,
            column: u.originalColumn
          });
          null != r.source && (u.source = r.source, null != t && (u.source = util$1.join(t, u.source)), null != n && (u.source = util$1.relative(n, u.source)), u.originalLine = r.line, u.originalColumn = r.column, null != r.name && (u.name = r.name));
        }
        const i = u.source;
        null == i || o.has(i) || o.add(i);
        const s = u.name;
        null == s || a.has(s) || a.add(s);
      }, this), this._sources = o, this._names = a, e.sources.forEach(function (u) {
        const r = e.sourceContentFor(u);
        null != r && (null != t && (u = util$1.join(t, u)), null != n && (u = util$1.relative(n, u)), this.setSourceContent(u, r));
      }, this);
    }
    _validateMapping(e, u, t, r) {
      if (u && "number" != typeof u.line && "number" != typeof u.column) throw new Error("original.line and original.column are not numbers -- you probably meant to omit the original mapping entirely and only map the generated position. If so, pass null for the original mapping instead of an object with empty or null values.");
      if (e && "line" in e && "column" in e && e.line > 0 && e.column >= 0 && !u && !t && !r) ;else if (!(e && "line" in e && "column" in e && u && "line" in u && "column" in u && e.line > 0 && e.column >= 0 && u.line > 0 && u.column >= 0 && t)) throw new Error("Invalid mapping: " + JSON.stringify({
        generated: e,
        source: t,
        original: u,
        name: r
      }));
    }
    _serializeMappings() {
      let e,
        u,
        t,
        r,
        n = 0,
        o = 1,
        a = 0,
        i = 0,
        s = 0,
        c = 0,
        l = "";
      const p = this._mappings.toArray();
      for (let A = 0, f = p.length; A < f; A++) {
        if (u = p[A], e = "", u.generatedLine !== o) for (n = 0; u.generatedLine !== o;) e += ";", o++;else if (A > 0) {
          if (!util$1.compareByGeneratedPositionsInflated(u, p[A - 1])) continue;
          e += ",";
        }
        e += base64VLQ.encode(u.generatedColumn - n), n = u.generatedColumn, null != u.source && (r = this._sources.indexOf(u.source), e += base64VLQ.encode(r - c), c = r, e += base64VLQ.encode(u.originalLine - 1 - i), i = u.originalLine - 1, e += base64VLQ.encode(u.originalColumn - a), a = u.originalColumn, null != u.name && (t = this._names.indexOf(u.name), e += base64VLQ.encode(t - s), s = t)), l += e;
      }
      return l;
    }
    _generateSourcesContent(e, u) {
      return e.map(function (e) {
        if (!this._sourcesContents) return null;
        null != u && (e = util$1.relative(u, e));
        const t = util$1.toSetString(e);
        return Object.prototype.hasOwnProperty.call(this._sourcesContents, t) ? this._sourcesContents[t] : null;
      }, this);
    }
    toJSON() {
      const e = {
        version: this._version,
        sources: this._sources.toArray(),
        names: this._names.toArray(),
        mappings: this._serializeMappings()
      };
      return null != this._file && (e.file = this._file), null != this._sourceRoot && (e.sourceRoot = this._sourceRoot), this._sourcesContents && (e.sourcesContent = this._generateSourcesContent(e.sources, e.sourceRoot)), e;
    }
    toString() {
      return JSON.stringify(this.toJSON());
    }
  };
  SourceMapGenerator$1.prototype._version = 3, sourceMapGenerator.SourceMapGenerator = SourceMapGenerator$1;
  var sourceNode = {};
  const SourceMapGenerator = sourceMapGenerator.SourceMapGenerator,
    util = util$3,
    REGEX_NEWLINE = /(\r?\n)/,
    NEWLINE_CODE = 10,
    isSourceNode = "$$$isSourceNode$$$";
  let SourceNode$2 = class e {
    constructor(e, u, t, r, n) {
      this.children = [], this.sourceContents = {}, this.line = null == e ? null : e, this.column = null == u ? null : u, this.source = null == t ? null : t, this.name = null == n ? null : n, this[isSourceNode] = !0, null != r && this.add(r);
    }
    static fromStringWithSourceMap(u, t, r) {
      const n = new e(),
        o = u.split(REGEX_NEWLINE);
      let a = 0;
      const i = function () {
        return e() + (e() || "");
        function e() {
          return a < o.length ? o[a++] : void 0;
        }
      };
      let s,
        c = 1,
        l = 0,
        p = null;
      return t.eachMapping(function (e) {
        if (null !== p) {
          if (!(c < e.generatedLine)) {
            s = o[a] || "";
            const u = s.substr(0, e.generatedColumn - l);
            return o[a] = s.substr(e.generatedColumn - l), l = e.generatedColumn, A(p, u), void (p = e);
          }
          A(p, i()), c++, l = 0;
        }
        for (; c < e.generatedLine;) n.add(i()), c++;
        l < e.generatedColumn && (s = o[a] || "", n.add(s.substr(0, e.generatedColumn)), o[a] = s.substr(e.generatedColumn), l = e.generatedColumn), p = e;
      }, this), a < o.length && (p && A(p, i()), n.add(o.splice(a).join(""))), t.sources.forEach(function (e) {
        const u = t.sourceContentFor(e);
        null != u && (null != r && (e = util.join(r, e)), n.setSourceContent(e, u));
      }), n;
      function A(u, t) {
        if (null === u || void 0 === u.source) n.add(t);else {
          const o = r ? util.join(r, u.source) : u.source;
          n.add(new e(u.originalLine, u.originalColumn, o, t, u.name));
        }
      }
    }
    add(e) {
      if (Array.isArray(e)) e.forEach(function (e) {
        this.add(e);
      }, this);else {
        if (!e[isSourceNode] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
        e && this.children.push(e);
      }
      return this;
    }
    prepend(e) {
      if (Array.isArray(e)) for (let u = e.length - 1; u >= 0; u--) this.prepend(e[u]);else {
        if (!e[isSourceNode] && "string" != typeof e) throw new TypeError("Expected a SourceNode, string, or an array of SourceNodes and strings. Got " + e);
        this.children.unshift(e);
      }
      return this;
    }
    walk(e) {
      let u;
      for (let t = 0, r = this.children.length; t < r; t++) u = this.children[t], u[isSourceNode] ? u.walk(e) : "" !== u && e(u, {
        source: this.source,
        line: this.line,
        column: this.column,
        name: this.name
      });
    }
    join(e) {
      let u, t;
      const r = this.children.length;
      if (r > 0) {
        for (u = [], t = 0; t < r - 1; t++) u.push(this.children[t]), u.push(e);
        u.push(this.children[t]), this.children = u;
      }
      return this;
    }
    replaceRight(e, u) {
      const t = this.children[this.children.length - 1];
      return t[isSourceNode] ? t.replaceRight(e, u) : "string" == typeof t ? this.children[this.children.length - 1] = t.replace(e, u) : this.children.push("".replace(e, u)), this;
    }
    setSourceContent(e, u) {
      this.sourceContents[util.toSetString(e)] = u;
    }
    walkSourceContents(e) {
      for (let u = 0, t = this.children.length; u < t; u++) this.children[u][isSourceNode] && this.children[u].walkSourceContents(e);
      const u = Object.keys(this.sourceContents);
      for (let t = 0, r = u.length; t < r; t++) e(util.fromSetString(u[t]), this.sourceContents[u[t]]);
    }
    toString() {
      let e = "";
      return this.walk(function (u) {
        e += u;
      }), e;
    }
    toStringWithSourceMap(e) {
      const u = {
          code: "",
          line: 1,
          column: 0
        },
        t = new SourceMapGenerator(e);
      let r = !1,
        n = null,
        o = null,
        a = null,
        i = null;
      return this.walk(function (e, s) {
        u.code += e, null !== s.source && null !== s.line && null !== s.column ? (n === s.source && o === s.line && a === s.column && i === s.name || t.addMapping({
          source: s.source,
          original: {
            line: s.line,
            column: s.column
          },
          generated: {
            line: u.line,
            column: u.column
          },
          name: s.name
        }), n = s.source, o = s.line, a = s.column, i = s.name, r = !0) : r && (t.addMapping({
          generated: {
            line: u.line,
            column: u.column
          }
        }), n = null, r = !1);
        for (let o = 0, a = e.length; o < a; o++) e.charCodeAt(o) === NEWLINE_CODE ? (u.line++, u.column = 0, o + 1 === a ? (n = null, r = !1) : r && t.addMapping({
          source: s.source,
          original: {
            line: s.line,
            column: s.column
          },
          generated: {
            line: u.line,
            column: u.column
          },
          name: s.name
        })) : u.column++;
      }), this.walkSourceContents(function (e, u) {
        t.setSourceContent(e, u);
      }), {
        code: u.code,
        map: t
      };
    }
  };
  sourceNode.SourceNode = SourceNode$2, sourceMap.SourceMapGenerator = sourceMapGenerator.SourceMapGenerator, sourceMap.SourceNode = sourceNode.SourceNode;
  var SourceNode$1 = sourceMap.SourceNode,
    GrammarLocation$2 = grammarLocation,
    Stack$1 = function () {
      function e(e, u, t, r) {
        this.sp = -1, this.maxSp = -1, this.varName = u, this.ruleName = e, this.type = t, this.bytecode = r, this.labels = {}, this.sourceMapStack = [];
      }
      return e.prototype.name = function (e) {
        if (e < 0) throw new RangeError("Rule '".concat(this.ruleName, "': The variable stack underflow: attempt to use a variable '").concat(this.varName, "<x>' at an index ").concat(e, ".\nBytecode: ").concat(this.bytecode));
        return this.varName + e;
      }, e.sourceNode = function (e, u, t) {
        var r = GrammarLocation$2.offsetStart(e);
        return new SourceNode$1(r.line, r.column ? r.column - 1 : null, String(e.source), u, t);
      }, e.prototype.push = function (u) {
        ++this.sp > this.maxSp && (this.maxSp = this.sp);
        var t = this.labels[this.sp],
          r = [this.name(this.sp), " = ", u, ";"];
        if (t) {
          if (this.sourceMapStack.length) {
            var n = e.sourceNode(t.location, r.splice(0, 2), t.label),
              o = this.sourceMapPopInternal(),
              a = o.parts,
              i = o.location,
              s = i.start.offset < t.location.end.offset ? {
                start: t.location.end,
                end: i.end,
                source: i.source
              } : i,
              c = e.sourceNode(s, r.concat("\n"));
            return this.sourceMapStack.push([a, a.length + 1, i]), new SourceNode$1(null, null, t.location.source, [n, c]);
          }
          return e.sourceNode(t.location, r.concat("\n"));
        }
        return r.join("");
      }, e.prototype.pop = function (e) {
        var u = this;
        return void 0 !== e ? (this.sp -= e, Array.from({
          length: e
        }, function (e, t) {
          return u.name(u.sp + 1 + t);
        })) : this.name(this.sp--);
      }, e.prototype.top = function () {
        return this.name(this.sp);
      }, e.prototype.index = function (e) {
        if (e < 0) throw new RangeError("Rule '".concat(this.ruleName, "': The variable stack overflow: attempt to get a variable at a negative index ").concat(e, ".\nBytecode: ").concat(this.bytecode));
        return this.name(this.sp - e);
      }, e.prototype.result = function () {
        if (this.maxSp < 0) throw new RangeError("Rule '".concat(this.ruleName, "': The variable stack is empty, can't get the result.\nBytecode: ").concat(this.bytecode));
        return this.name(0);
      }, e.prototype.defines = function () {
        var e = this;
        return this.maxSp < 0 ? "" : this.type + " " + Array.from({
          length: this.maxSp + 1
        }, function (u, t) {
          return e.name(t);
        }).join(", ") + ";";
      }, e.prototype.checkedIf = function (e, u, t) {
        var r = this.sp;
        if (u(), t) {
          var n = this.sp;
          if (this.sp = r, t(), n !== this.sp) throw new Error("Rule '" + this.ruleName + "', position " + e + ": Branches of a condition can't move the stack pointer differently (before: " + r + ", after then: " + n + ", after else: " + this.sp + "). Bytecode: " + this.bytecode);
        }
      }, e.prototype.checkedLoop = function (e, u) {
        var t = this.sp;
        if (u(), t !== this.sp) throw new Error("Rule '" + this.ruleName + "', position " + e + ": Body of a loop can't move the stack pointer (before: " + t + ", after: " + this.sp + "). Bytecode: " + this.bytecode);
      }, e.prototype.sourceMapPush = function (e, u) {
        if (this.sourceMapStack.length) {
          var t = this.sourceMapStack[this.sourceMapStack.length - 1];
          t[2].start.offset === u.start.offset && t[2].end.offset > u.end.offset && (t[2] = {
            start: u.end,
            end: t[2].end,
            source: t[2].source
          });
        }
        this.sourceMapStack.push([e, e.length, u]);
      }, e.prototype.sourceMapPopInternal = function () {
        var e = this.sourceMapStack.pop(),
          u = e[0],
          t = e[1],
          r = e[2],
          n = u.splice(t).map(function (e) {
            return e instanceof SourceNode$1 ? e : e + "\n";
          });
        if (n.length) {
          var o = GrammarLocation$2.offsetStart(r);
          u.push(new SourceNode$1(o.line, o.column - 1, String(r.source), n));
        }
        return {
          parts: u,
          location: r
        };
      }, e.prototype.sourceMapPop = function (e) {
        var u = this.sourceMapPopInternal().location;
        if (this.sourceMapStack.length && u.end.offset < this.sourceMapStack[this.sourceMapStack.length - 1][2].end.offset) {
          var t = this.sourceMapPopInternal(),
            r = t.parts,
            n = t.location,
            o = n.start.offset < u.end.offset ? {
              start: u.end,
              end: n.end,
              source: n.source
            } : n;
          this.sourceMapStack.push([r, r.length + (e || 0), o]);
        }
      }, e;
    }(),
    stack = Stack$1,
    version = "3.0.2",
    utils = {};
  function hex(e) {
    return e.charCodeAt(0).toString(16).toUpperCase();
  }
  function stringEscape$1(e) {
    return e.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\x08/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\v/g, "\\v").replace(/\f/g, "\\f").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (e) {
      return "\\x0" + hex(e);
    }).replace(/[\x10-\x1F\x7F-\xFF]/g, function (e) {
      return "\\x" + hex(e);
    }).replace(/[\u0100-\u0FFF]/g, function (e) {
      return "\\u0" + hex(e);
    }).replace(/[\u1000-\uFFFF]/g, function (e) {
      return "\\u" + hex(e);
    });
  }
  function regexpClassEscape$1(e) {
    return e.replace(/\\/g, "\\\\").replace(/\//g, "\\/").replace(/]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\x08/g, "\\b").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\v/g, "\\v").replace(/\f/g, "\\f").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (e) {
      return "\\x0" + hex(e);
    }).replace(/[\x10-\x1F\x7F-\xFF]/g, function (e) {
      return "\\x" + hex(e);
    }).replace(/[\u0100-\u0FFF]/g, function (e) {
      return "\\u0" + hex(e);
    }).replace(/[\u1000-\uFFFF]/g, function (e) {
      return "\\u" + hex(e);
    });
  }
  function base64$1(e) {
    for (var u = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/", t = e.length % 3, r = e.length - t, n = "", o = 0; o < r; o += 3) n += u[e[o] >> 2], n += u[(3 & e[o]) << 4 | e[o + 1] >> 4], n += u[(15 & e[o + 1]) << 2 | e[o + 2] >> 6], n += u[63 & e[o + 2]];
    return 1 === t ? (n += u[e[r] >> 2], n += u[(3 & e[r]) << 4], n += "==") : 2 === t && (n += u[e[r] >> 2], n += u[(3 & e[r]) << 4 | e[r + 1] >> 4], n += u[(15 & e[r + 1]) << 2], n += "="), n;
  }
  utils.hex = hex, utils.stringEscape = stringEscape$1, utils.regexpClassEscape = regexpClassEscape$1, utils.base64 = base64$1;
  var __spreadArray$1 = commonjsGlobal && commonjsGlobal.__spreadArray || function (e, u, t) {
      if (t || 2 === arguments.length) for (var r, n = 0, o = u.length; n < o; n++) !r && n in u || (r || (r = Array.prototype.slice.call(u, 0, n)), r[n] = u[n]);
      return e.concat(r || Array.prototype.slice.call(u));
    },
    asts$4 = asts_1,
    op = opcodes_1,
    Stack = stack,
    VERSION$1 = version,
    _a = utils,
    stringEscape = _a.stringEscape,
    regexpClassEscape = _a.regexpClassEscape,
    SourceNode = sourceMap.SourceNode,
    GrammarLocation$1 = grammarLocation;
  function toSourceNode(e, u, t) {
    var r = GrammarLocation$1.offsetStart(u),
      n = r.line,
      o = r.column - 1,
      a = e.split("\n");
    return 1 === a.length ? new SourceNode(n, o, String(u.source), e, t) : new SourceNode(null, null, String(u.source), a.map(function (e, r) {
      return new SourceNode(n + r, 0 === r ? o : 0, String(u.source), r === a.length - 1 ? e : [e, "\n"], t);
    }));
  }
  function wrapInSourceNode(e, u, t, r, n) {
    if (t) {
      var o = GrammarLocation$1.offsetEnd(t);
      return new SourceNode(null, null, String(t.source), [e, toSourceNode(u, t, n), new SourceNode(o.line, o.column - 1, String(t.source), r)]);
    }
    return new SourceNode(null, null, null, [e, u, r]);
  }
  function generateJS$1(e, u) {
    function t(e) {
      var u = !0,
        t = 0;
      return function e(r) {
        return Array.isArray(r) ? r.map(e) : r instanceof SourceNode ? (t++, r.children = e(r.children), t--, r) : (r = u ? r.replace(/^(.+)$/gm, "  $1") : r.replace(/\n(\s*\S)/g, "\n  $1"), u = !t || r.endsWith("\n"), r);
      }(e);
    }
    function r(e) {
      return "peg$c" + e;
    }
    function n(e) {
      return "peg$r" + e;
    }
    function o(e) {
      return "peg$e" + e;
    }
    function a(e) {
      return "peg$f" + e;
    }
    function i(e) {
      return "peg$parse" + e;
    }
    function s(e) {
      return e.codeLocation ? toSourceNode(e.code, e.codeLocation, "$" + e.type) : e.code;
    }
    e.code = function (e) {
      function r() {
        return ["// Generated by Peggy ".concat(VERSION$1, "."), "//", "// https://peggyjs.org/"];
      }
      function n() {
        return u.trace ? ["{", "  SyntaxError: peg$SyntaxError,", "  DefaultTracer: peg$DefaultTracer,", "  parse: peg$parse", "}"].join("\n") : ["{", "  SyntaxError: peg$SyntaxError,", "  parse: peg$parse", "}"].join("\n");
      }
      var o = {
        bare: function () {
          return __spreadArray$1(__spreadArray$1([], r(), !0), ["(function() {", '  "use strict";', "", e, "", t("return " + n() + ";"), "})()"], !1);
        },
        commonjs: function () {
          var t = Object.keys(u.dependencies),
            o = r();
          return o.push("", '"use strict";', ""), t.length > 0 && (t.forEach(function (e) {
            o.push("var " + e + ' = require("' + stringEscape(u.dependencies[e]) + '");');
          }), o.push("")), o.push(e, "", "module.exports = " + n() + ";"), o;
        },
        es: function () {
          var t = Object.keys(u.dependencies),
            n = r();
          return n.push(""), t.length > 0 && (t.forEach(function (e) {
            n.push("import " + e + ' from "' + stringEscape(u.dependencies[e]) + '";');
          }), n.push("")), n.push(e, "", "export {", "  peg$SyntaxError as SyntaxError,", u.trace ? "  peg$DefaultTracer as DefaultTracer," : "", "  peg$parse as parse", "};"), n;
        },
        amd: function () {
          var o = Object.keys(u.dependencies),
            a = "[" + o.map(function (e) {
              return u.dependencies[e];
            }).map(function (e) {
              return '"' + stringEscape(e) + '"';
            }).join(", ") + "]",
            i = o.join(", ");
          return __spreadArray$1(__spreadArray$1([], r(), !0), ["define(" + a + ", function(" + i + ") {", '  "use strict";', "", e, "", t("return " + n() + ";"), "});"], !1);
        },
        globals: function () {
          return __spreadArray$1(__spreadArray$1([], r(), !0), ["(function(root) {", '  "use strict";', "", e, "", t("root." + u.exportVar + " = " + n() + ";"), "})(this);"], !1);
        },
        umd: function () {
          var o = Object.keys(u.dependencies),
            a = o.map(function (e) {
              return u.dependencies[e];
            }),
            i = "[" + a.map(function (e) {
              return '"' + stringEscape(e) + '"';
            }).join(", ") + "]",
            s = a.map(function (e) {
              return 'require("' + stringEscape(e) + '")';
            }).join(", "),
            c = o.join(", "),
            l = r();
          return l.push("(function(root, factory) {", '  if (typeof define === "function" && define.amd) {', "    define(" + i + ", factory);", '  } else if (typeof module === "object" && module.exports) {', "    module.exports = factory(" + s + ");"), null !== u.exportVar && l.push("  } else {", "    root." + u.exportVar + " = factory();"), l.push("  }", "})(this, function(" + c + ") {", '  "use strict";', "", e, "", t("return " + n() + ";"), "});"), l;
        }
      }[u.format]();
      return new SourceNode(null, null, u.grammarSource, o.map(function (e) {
        return e instanceof SourceNode ? e : e + "\n";
      }));
    }(function () {
      var c = [];
      e.topLevelInitializer && (c.push(s(e.topLevelInitializer)), c.push("")), c.push("function peg$subclass(child, parent) {", "  function C() { this.constructor = child; }", "  C.prototype = parent.prototype;", "  child.prototype = new C();", "}", "", "function peg$SyntaxError(message, expected, found, location) {", "  var self = Error.call(this, message);", "  // istanbul ignore next Check is a necessary evil to support older environments", "  if (Object.setPrototypeOf) {", "    Object.setPrototypeOf(self, peg$SyntaxError.prototype);", "  }", "  self.expected = expected;", "  self.found = found;", "  self.location = location;", '  self.name = "SyntaxError";', "  return self;", "}", "", "peg$subclass(peg$SyntaxError, Error);", "", "function peg$padEnd(str, targetLength, padString) {", '  padString = padString || " ";', "  if (str.length > targetLength) { return str; }", "  targetLength -= str.length;", "  padString += padString.repeat(targetLength);", "  return str + padString.slice(0, targetLength);", "}", "", "peg$SyntaxError.prototype.format = function(sources) {", '  var str = "Error: " + this.message;', "  if (this.location) {", "    var src = null;", "    var k;", "    for (k = 0; k < sources.length; k++) {", "      if (sources[k].source === this.location.source) {", "        src = sources[k].text.split(/\\r\\n|\\n|\\r/g);", "        break;", "      }", "    }", "    var s = this.location.start;", '    var offset_s = (this.location.source && (typeof this.location.source.offset === "function"))', "      ? this.location.source.offset(s)", "      : s;", '    var loc = this.location.source + ":" + offset_s.line + ":" + offset_s.column;', "    if (src) {", "      var e = this.location.end;", "      var filler = peg$padEnd(\"\", offset_s.line.toString().length, ' ');", "      var line = src[s.line - 1];", "      var last = s.line === e.line ? e.column : line.length + 1;", "      var hatLen = (last - s.column) || 1;", '      str += "\\n --\x3e " + loc + "\\n"', '          + filler + " |\\n"', '          + offset_s.line + " | " + line + "\\n"', '          + filler + " | " + peg$padEnd("", s.column - 1, \' \')', '          + peg$padEnd("", hatLen, "^");', "    } else {", '      str += "\\n at " + loc;', "    }", "  }", "  return str;", "};", "", "peg$SyntaxError.buildMessage = function(expected, found) {", "  var DESCRIBE_EXPECTATION_FNS = {", "    literal: function(expectation) {", '      return "\\"" + literalEscape(expectation.text) + "\\"";', "    },", "", "    class: function(expectation) {", "      var escapedParts = expectation.parts.map(function(part) {", "        return Array.isArray(part)", '          ? classEscape(part[0]) + "-" + classEscape(part[1])', "          : classEscape(part);", "      });", "", '      return "[" + (expectation.inverted ? "^" : "") + escapedParts.join("") + "]";', "    },", "", "    any: function() {", '      return "any character";', "    },", "", "    end: function() {", '      return "end of input";', "    },", "", "    other: function(expectation) {", "      return expectation.description;", "    }", "  };", "", "  function hex(ch) {", "    return ch.charCodeAt(0).toString(16).toUpperCase();", "  }", "", "  function literalEscape(s) {", "    return s", '      .replace(/\\\\/g, "\\\\\\\\")', '      .replace(/"/g,  "\\\\\\"")', '      .replace(/\\0/g, "\\\\0")', '      .replace(/\\t/g, "\\\\t")', '      .replace(/\\n/g, "\\\\n")', '      .replace(/\\r/g, "\\\\r")', '      .replace(/[\\x00-\\x0F]/g,          function(ch) { return "\\\\x0" + hex(ch); })', '      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return "\\\\x"  + hex(ch); });', "  }", "", "  function classEscape(s) {", "    return s", '      .replace(/\\\\/g, "\\\\\\\\")', '      .replace(/\\]/g, "\\\\]")', '      .replace(/\\^/g, "\\\\^")', '      .replace(/-/g,  "\\\\-")', '      .replace(/\\0/g, "\\\\0")', '      .replace(/\\t/g, "\\\\t")', '      .replace(/\\n/g, "\\\\n")', '      .replace(/\\r/g, "\\\\r")', '      .replace(/[\\x00-\\x0F]/g,          function(ch) { return "\\\\x0" + hex(ch); })', '      .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, function(ch) { return "\\\\x"  + hex(ch); });', "  }", "", "  function describeExpectation(expectation) {", "    return DESCRIBE_EXPECTATION_FNS[expectation.type](expectation);", "  }", "", "  function describeExpected(expected) {", "    var descriptions = expected.map(describeExpectation);", "    var i, j;", "", "    descriptions.sort();", "", "    if (descriptions.length > 0) {", "      for (i = 1, j = 1; i < descriptions.length; i++) {", "        if (descriptions[i - 1] !== descriptions[i]) {", "          descriptions[j] = descriptions[i];", "          j++;", "        }", "      }", "      descriptions.length = j;", "    }", "", "    switch (descriptions.length) {", "      case 1:", "        return descriptions[0];", "", "      case 2:", '        return descriptions[0] + " or " + descriptions[1];', "", "      default:", '        return descriptions.slice(0, -1).join(", ")', '          + ", or "', "          + descriptions[descriptions.length - 1];", "    }", "  }", "", "  function describeFound(found) {", '    return found ? "\\"" + literalEscape(found) + "\\"" : "end of input";', "  }", "", '  return "Expected " + describeExpected(expected) + " but " + describeFound(found) + " found.";', "};", ""), u.trace && c.push("function peg$DefaultTracer() {", "  this.indentLevel = 0;", "}", "", "peg$DefaultTracer.prototype.trace = function(event) {", "  var that = this;", "", "  function log(event) {", "    function repeat(string, n) {", '       var result = "", i;', "", "       for (i = 0; i < n; i++) {", "         result += string;", "       }", "", "       return result;", "    }", "", "    function pad(string, length) {", '      return string + repeat(" ", length - string.length);', "    }", "", '    if (typeof console === "object") {', "      console.log(", '        event.location.start.line + ":" + event.location.start.column + "-"', '          + event.location.end.line + ":" + event.location.end.column + " "', '          + pad(event.type, 10) + " "', '          + repeat("  ", that.indentLevel) + event.rule', "      );", "    }", "  }", "", "  switch (event.type) {", '    case "rule.enter":', "      log(event);", "      this.indentLevel++;", "      break;", "", '    case "rule.match":', "      this.indentLevel--;", "      log(event);", "      break;", "", '    case "rule.fail":', "      this.indentLevel--;", "      log(event);", "      break;", "", "    default:", '      throw new Error("Invalid event type: " + event.type + ".");', "  }", "};", "");
      var l = "{ " + u.allowedStartRules.map(function (e) {
          return e + ": " + i(e);
        }).join(", ") + " }",
        p = i(u.allowedStartRules[0]);
      return c.push("function peg$parse(input, options) {", "  options = options !== undefined ? options : {};", "", "  var peg$FAILED = {};", "  var peg$source = options.grammarSource;", "", "  var peg$startRuleFunctions = " + l + ";", "  var peg$startRuleFunction = " + p + ";", "", new SourceNode(null, null, u.grammarSource, [e.literals.map(function (e, u) {
        return "  var " + r(u) + ' = "' + stringEscape(e) + '";';
      }).concat("", e.classes.map(function (e, u) {
        return "  var " + n(u) + " = /^[" + ((t = e).inverted ? "^" : "") + t.value.map(function (e) {
          return Array.isArray(e) ? regexpClassEscape(e[0]) + "-" + regexpClassEscape(e[1]) : regexpClassEscape(e);
        }).join("") + "]/" + (t.ignoreCase ? "i" : "") + ";";
        var t;
      })).concat("", e.expectations.map(function (e, u) {
        return "  var " + o(u) + " = " + function (e) {
          switch (e.type) {
            case "rule":
              return 'peg$otherExpectation("' + stringEscape(e.value) + '")';
            case "literal":
              return 'peg$literalExpectation("' + stringEscape(e.value) + '", ' + e.ignoreCase + ")";
            case "class":
              return "peg$classExpectation([" + e.value.map(function (e) {
                return Array.isArray(e) ? '["' + stringEscape(e[0]) + '", "' + stringEscape(e[1]) + '"]' : '"' + stringEscape(e) + '"';
              }).join(", ") + "], " + e.inverted + ", " + e.ignoreCase + ")";
            case "any":
              return "peg$anyExpectation()";
            default:
              throw new Error("Unknown expectation type (" + JSON.stringify(e) + ")");
          }
        }(e) + ";";
      })).concat("").join("\n"), e.functions.map(function (e, u) {
        return wrapInSourceNode("\n  var ".concat(a(u), " = function(").concat(e.params.join(", "), ") {"), e.body, e.location, "};");
      })]), "", "  var peg$currPos = 0;", "  var peg$savedPos = 0;", "  var peg$posDetailsCache = [{ line: 1, column: 1 }];", "  var peg$maxFailPos = 0;", "  var peg$maxFailExpected = [];", "  var peg$silentFails = 0;", ""), u.cache && c.push("  var peg$resultsCache = {};", ""), u.trace && c.push('  var peg$tracer = "tracer" in options ? options.tracer : new peg$DefaultTracer();', ""), c.push("  var peg$result;", "", '  if ("startRule" in options) {', "    if (!(options.startRule in peg$startRuleFunctions)) {", '      throw new Error("Can\'t start parsing from rule \\"" + options.startRule + "\\".");', "    }", "", "    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];", "  }", "", "  function text() {", "    return input.substring(peg$savedPos, peg$currPos);", "  }", "", "  function offset() {", "    return peg$savedPos;", "  }", "", "  function range() {", "    return {", "      source: peg$source,", "      start: peg$savedPos,", "      end: peg$currPos", "    };", "  }", "", "  function location() {", "    return peg$computeLocation(peg$savedPos, peg$currPos);", "  }", "", "  function expected(description, location) {", "    location = location !== undefined", "      ? location", "      : peg$computeLocation(peg$savedPos, peg$currPos);", "", "    throw peg$buildStructuredError(", "      [peg$otherExpectation(description)],", "      input.substring(peg$savedPos, peg$currPos),", "      location", "    );", "  }", "", "  function error(message, location) {", "    location = location !== undefined", "      ? location", "      : peg$computeLocation(peg$savedPos, peg$currPos);", "", "    throw peg$buildSimpleError(message, location);", "  }", "", "  function peg$literalExpectation(text, ignoreCase) {", '    return { type: "literal", text: text, ignoreCase: ignoreCase };', "  }", "", "  function peg$classExpectation(parts, inverted, ignoreCase) {", '    return { type: "class", parts: parts, inverted: inverted, ignoreCase: ignoreCase };', "  }", "", "  function peg$anyExpectation() {", '    return { type: "any" };', "  }", "", "  function peg$endExpectation() {", '    return { type: "end" };', "  }", "", "  function peg$otherExpectation(description) {", '    return { type: "other", description: description };', "  }", "", "  function peg$computePosDetails(pos) {", "    var details = peg$posDetailsCache[pos];", "    var p;", "", "    if (details) {", "      return details;", "    } else {", "      p = pos - 1;", "      while (!peg$posDetailsCache[p]) {", "        p--;", "      }", "", "      details = peg$posDetailsCache[p];", "      details = {", "        line: details.line,", "        column: details.column", "      };", "", "      while (p < pos) {", "        if (input.charCodeAt(p) === 10) {", "          details.line++;", "          details.column = 1;", "        } else {", "          details.column++;", "        }", "", "        p++;", "      }", "", "      peg$posDetailsCache[pos] = details;", "", "      return details;", "    }", "  }", "", "  function peg$computeLocation(startPos, endPos, offset) {", "    var startPosDetails = peg$computePosDetails(startPos);", "    var endPosDetails = peg$computePosDetails(endPos);", "", "    var res = {", "      source: peg$source,", "      start: {", "        offset: startPos,", "        line: startPosDetails.line,", "        column: startPosDetails.column", "      },", "      end: {", "        offset: endPos,", "        line: endPosDetails.line,", "        column: endPosDetails.column", "      }", "    };", '    if (offset && peg$source && (typeof peg$source.offset === "function")) {', "      res.start = peg$source.offset(res.start);", "      res.end = peg$source.offset(res.end);", "    }", "    return res;", "  }", "", "  function peg$fail(expected) {", "    if (peg$currPos < peg$maxFailPos) { return; }", "", "    if (peg$currPos > peg$maxFailPos) {", "      peg$maxFailPos = peg$currPos;", "      peg$maxFailExpected = [];", "    }", "", "    peg$maxFailExpected.push(expected);", "  }", "", "  function peg$buildSimpleError(message, location) {", "    return new peg$SyntaxError(message, null, null, location);", "  }", "", "  function peg$buildStructuredError(expected, found, location) {", "    return new peg$SyntaxError(", "      peg$SyntaxError.buildMessage(expected, found),", "      expected,", "      found,", "      location", "    );", "  }", ""), e.rules.forEach(function (s) {
        c.push.apply(c, t(function (s) {
          var c = [],
            l = new Stack(s.name, "s", "var", s.bytecode),
            p = function u(c) {
              var p = 0,
                A = c.length,
                f = [],
                E = void 0;
              function h(e, r) {
                var n = r + 3,
                  o = c[p + n - 2],
                  a = c[p + n - 1],
                  i = void 0,
                  s = void 0;
                l.checkedIf(p, function () {
                  p += n, i = u(c.slice(p, p + o)), p += o;
                }, a > 0 ? function () {
                  s = u(c.slice(p, p + a)), p += a;
                } : null), f.push("if (" + e + ") {"), f.push.apply(f, t(i)), a > 0 && (f.push("} else {"), f.push.apply(f, t(s))), f.push("}");
              }
              function d(e) {
                var r = c[p + 2 - 1],
                  n = void 0;
                l.checkedLoop(p, function () {
                  p += 2, n = u(c.slice(p, p + r)), p += r;
                }), f.push("while (" + e + ") {"), f.push.apply(f, t(n)), f.push("}");
              }
              function C(e) {
                var u = c[p + e - 1];
                return a(c[p + 1]) + "(" + c.slice(p + e, p + e + u).map(function (e) {
                  return l.index(e);
                }).join(", ") + ")";
              }
              for (; p < A;) switch (c[p]) {
                case op.PUSH_EMPTY_STRING:
                  f.push(l.push("''")), p++;
                  break;
                case op.PUSH_CURR_POS:
                  f.push(l.push("peg$currPos")), p++;
                  break;
                case op.PUSH_UNDEFINED:
                  f.push(l.push("undefined")), p++;
                  break;
                case op.PUSH_NULL:
                  f.push(l.push("null")), p++;
                  break;
                case op.PUSH_FAILED:
                  f.push(l.push("peg$FAILED")), p++;
                  break;
                case op.PUSH_EMPTY_ARRAY:
                  f.push(l.push("[]")), p++;
                  break;
                case op.POP:
                  l.pop(), p++;
                  break;
                case op.POP_CURR_POS:
                  f.push("peg$currPos = " + l.pop() + ";"), p++;
                  break;
                case op.POP_N:
                  l.pop(c[p + 1]), p += 2;
                  break;
                case op.NIP:
                  E = l.pop(), l.pop(), f.push(l.push(E)), p++;
                  break;
                case op.APPEND:
                  E = l.pop(), f.push(l.top() + ".push(" + E + ");"), p++;
                  break;
                case op.WRAP:
                  f.push(l.push("[" + l.pop(c[p + 1]).join(", ") + "]")), p += 2;
                  break;
                case op.TEXT:
                  f.push(l.push("input.substring(" + l.pop() + ", peg$currPos)")), p++;
                  break;
                case op.PLUCK:
                  var g = c[p + 3 - 1],
                    m = 3 + g;
                  E = c.slice(p + 3, p + m), E = 1 === g ? l.index(E[0]) : "[ ".concat(E.map(function (e) {
                    return l.index(e);
                  }).join(", "), " ]"), l.pop(c[p + 1]), f.push(l.push(E)), p += m;
                  break;
                case op.IF:
                  h(l.top(), 0);
                  break;
                case op.IF_ERROR:
                  h(l.top() + " === peg$FAILED", 0);
                  break;
                case op.IF_NOT_ERROR:
                  h(l.top() + " !== peg$FAILED", 0);
                  break;
                case op.IF_LT:
                  h(l.top() + ".length < " + c[p + 1], 1);
                  break;
                case op.IF_GE:
                  h(l.top() + ".length >= " + c[p + 1], 1);
                  break;
                case op.IF_LT_DYNAMIC:
                  h(l.top() + ".length < (" + l.index(c[p + 1]) + "|0)", 1);
                  break;
                case op.IF_GE_DYNAMIC:
                  h(l.top() + ".length >= (" + l.index(c[p + 1]) + "|0)", 1);
                  break;
                case op.WHILE_NOT_ERROR:
                  d(l.top() + " !== peg$FAILED");
                  break;
                case op.MATCH_ANY:
                  h("input.length > peg$currPos", 0);
                  break;
                case op.MATCH_STRING:
                  h(e.literals[c[p + 1]].length > 1 ? "input.substr(peg$currPos, " + e.literals[c[p + 1]].length + ") === " + r(c[p + 1]) : "input.charCodeAt(peg$currPos) === " + e.literals[c[p + 1]].charCodeAt(0), 1);
                  break;
                case op.MATCH_STRING_IC:
                  h("input.substr(peg$currPos, " + e.literals[c[p + 1]].length + ").toLowerCase() === " + r(c[p + 1]), 1);
                  break;
                case op.MATCH_CHAR_CLASS:
                  h(n(c[p + 1]) + ".test(input.charAt(peg$currPos))", 1);
                  break;
                case op.ACCEPT_N:
                  f.push(l.push(c[p + 1] > 1 ? "input.substr(peg$currPos, " + c[p + 1] + ")" : "input.charAt(peg$currPos)")), f.push(c[p + 1] > 1 ? "peg$currPos += " + c[p + 1] + ";" : "peg$currPos++;"), p += 2;
                  break;
                case op.ACCEPT_STRING:
                  f.push(l.push(r(c[p + 1]))), f.push(e.literals[c[p + 1]].length > 1 ? "peg$currPos += " + e.literals[c[p + 1]].length + ";" : "peg$currPos++;"), p += 2;
                  break;
                case op.FAIL:
                  f.push(l.push("peg$FAILED")), f.push("if (peg$silentFails === 0) { peg$fail(" + o(c[p + 1]) + "); }"), p += 2;
                  break;
                case op.LOAD_SAVED_POS:
                  f.push("peg$savedPos = " + l.index(c[p + 1]) + ";"), p += 2;
                  break;
                case op.UPDATE_SAVED_POS:
                  f.push("peg$savedPos = peg$currPos;"), p++;
                  break;
                case op.CALL:
                  E = C(4), l.pop(c[p + 2]), f.push(l.push(E)), p += 4 + c[p + 3];
                  break;
                case op.RULE:
                  f.push(l.push(i(e.rules[c[p + 1]].name) + "()")), p += 2;
                  break;
                case op.SILENT_FAILS_ON:
                  f.push("peg$silentFails++;"), p++;
                  break;
                case op.SILENT_FAILS_OFF:
                  f.push("peg$silentFails--;"), p++;
                  break;
                case op.SOURCE_MAP_PUSH:
                  l.sourceMapPush(f, e.locations[c[p + 1]]), p += 2;
                  break;
                case op.SOURCE_MAP_POP:
                  l.sourceMapPop(), p++;
                  break;
                case op.SOURCE_MAP_LABEL_PUSH:
                  l.labels[c[p + 1]] = {
                    label: e.literals[c[p + 2]],
                    location: e.locations[c[p + 3]]
                  }, p += 4;
                  break;
                case op.SOURCE_MAP_LABEL_POP:
                  delete l.labels[c[p + 1]], p += 2;
                  break;
                default:
                  throw new Error("Invalid opcode: " + c[p] + ".", {
                    rule: s.name,
                    bytecode: c
                  });
              }
              return f;
            }(s.bytecode);
          return c.push(wrapInSourceNode("function ", i(s.name), s.nameLocation, "() {\n", s.name)), u.trace && c.push("  var startPos = peg$currPos;"), c.push(t(l.defines())), c.push.apply(c, t(function (t, r) {
            var n = [];
            return n.push(""), u.trace && n.push("peg$tracer.trace({", '  type: "rule.enter",', "  rule: " + t + ",", "  location: peg$computeLocation(startPos, startPos, true)", "});", ""), u.cache && (n.push("var key = peg$currPos * " + e.rules.length + " + " + r + ";", "var cached = peg$resultsCache[key];", "", "if (cached) {", "  peg$currPos = cached.nextPos;", ""), u.trace && n.push("if (cached.result !== peg$FAILED) {", "  peg$tracer.trace({", '    type: "rule.match",', "    rule: " + t + ",", "    result: cached.result,", "    location: peg$computeLocation(startPos, peg$currPos, true)", "  });", "} else {", "  peg$tracer.trace({", '    type: "rule.fail",', "    rule: " + t + ",", "    location: peg$computeLocation(startPos, startPos, true)", "  });", "}", ""), n.push("  return cached.result;", "}", "")), n;
          }('"' + stringEscape(s.name) + '"', asts$4.indexOfRule(e, s.name)))), c.push.apply(c, t(p)), c.push.apply(c, t(function (e, t) {
            var r = [];
            return u.cache && r.push("", "peg$resultsCache[key] = { nextPos: peg$currPos, result: " + t + " };"), u.trace && r.push("", "if (" + t + " !== peg$FAILED) {", "  peg$tracer.trace({", '    type: "rule.match",', "    rule: " + e + ",", "    result: " + t + ",", "    location: peg$computeLocation(startPos, peg$currPos, true)", "  });", "} else {", "  peg$tracer.trace({", '    type: "rule.fail",', "    rule: " + e + ",", "    location: peg$computeLocation(startPos, startPos, true)", "  });", "}"), r.push("", "return " + t + ";"), r;
          }('"' + stringEscape(s.name) + '"', l.result()))), c.push("}"), c;
        }(s))), c.push("");
      }), e.initializer && (c.push(s(e.initializer)), c.push("")), c.push("  peg$result = peg$startRuleFunction();", "", "  if (peg$result !== peg$FAILED && peg$currPos === input.length) {", "    return peg$result;", "  } else {", "    if (peg$result !== peg$FAILED && peg$currPos < input.length) {", "      peg$fail(peg$endExpectation());", "    }", "", "    throw peg$buildStructuredError(", "      peg$maxFailExpected,", "      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,", "      peg$maxFailPos < input.length", "        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)", "        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)", "    );", "  }", "}"), new SourceNode(null, null, u.grammarSource, c.map(function (e) {
        return e instanceof SourceNode ? e : e + "\n";
      }));
    }());
  }
  var generateJs = generateJS$1,
    asts$3 = asts_1,
    visitor$7 = visitor_1;
  function removeProxyRules$1(e, u, t) {
    var r = [];
    e.rules.forEach(function (n, o) {
      var a;
      "rule" === (a = n).type && "rule_ref" === a.expression.type && (function (e, u, r) {
        visitor$7.build({
          rule_ref: function (n) {
            n.name === u && (n.name = r, t.info('Proxy rule "'.concat(u, '" replaced by the rule "').concat(r, '"'), n.location, [{
              message: "This rule will be used",
              location: asts$3.findRule(e, r).nameLocation
            }]));
          }
        })(e);
      }(e, n.name, n.expression.name), -1 === u.allowedStartRules.indexOf(n.name) && r.push(o));
    }), r.reverse(), r.forEach(function (u) {
      e.rules.splice(u, 1);
    });
  }
  var removeProxyRules_1 = removeProxyRules$1,
    visitor$6 = visitor_1;
  function reportDuplicateLabels$1(e, u, t) {
    function r(e) {
      var u = {};
      return Object.keys(e).forEach(function (t) {
        u[t] = e[t];
      }), u;
    }
    function n(e, u) {
      o(e.expression, r(u));
    }
    var o = visitor$6.build({
      rule: function (e) {
        o(e.expression, {});
      },
      choice: function (e, u) {
        e.alternatives.forEach(function (e) {
          o(e, r(u));
        });
      },
      action: n,
      labeled: function (e, u) {
        var r = e.label;
        r && Object.prototype.hasOwnProperty.call(u, r) && t.error('Label "'.concat(e.label, '" is already defined'), e.labelLocation, [{
          message: "Original label location",
          location: u[r]
        }]), o(e.expression, u), u[e.label] = e.labelLocation;
      },
      text: n,
      simple_and: n,
      simple_not: n,
      optional: n,
      zero_or_more: n,
      one_or_more: n,
      repeated: function (e, u) {
        e.delimiter && o(e.delimiter, r(u)), o(e.expression, r(u));
      },
      group: n
    });
    o(e);
  }
  var reportDuplicateLabels_1 = reportDuplicateLabels$1,
    visitor$5 = visitor_1;
  function reportDuplicateRules$1(e, u, t) {
    var r = {};
    visitor$5.build({
      rule: function (e) {
        Object.prototype.hasOwnProperty.call(r, e.name) ? t.error('Rule "'.concat(e.name, '" is already defined'), e.nameLocation, [{
          message: "Original rule location",
          location: r[e.name]
        }]) : r[e.name] = e.nameLocation;
      }
    })(e);
  }
  var reportDuplicateRules_1 = reportDuplicateRules$1,
    asts$2 = asts_1,
    visitor$4 = visitor_1;
  function reportInfiniteRecursion$1(e, u, t) {
    var r = [],
      n = [],
      o = visitor$4.build({
        rule: function (e) {
          r.push(e.name), o(e.expression), r.pop();
        },
        sequence: function (u) {
          u.elements.every(function (u) {
            return o(u), !asts$2.alwaysConsumesOnSuccess(e, u);
          });
        },
        repeated: function (u) {
          o(u.expression), u.delimiter && !asts$2.alwaysConsumesOnSuccess(e, u.expression) && o(u.delimiter);
        },
        rule_ref: function (u) {
          n.push(u);
          var a = asts$2.findRule(e, u.name);
          if (-1 !== r.indexOf(u.name)) return r.push(u.name), void t.error("Possible infinite loop when parsing (left recursion: " + r.join(" -> ") + ")", a.nameLocation, n.map(function (e, u, t) {
            return {
              message: u + 1 !== t.length ? "Step ".concat(u + 1, ': call of the rule "').concat(e.name, '" without input consumption') : "Step ".concat(u + 1, ": call itself without input consumption - left recursion"),
              location: e.location
            };
          }));
          a && o(a), n.pop();
        }
      });
    o(e);
  }
  var reportInfiniteRecursion_1 = reportInfiniteRecursion$1,
    asts$1 = asts_1,
    visitor$3 = visitor_1;
  function reportInfiniteRepetition$1(e, u, t) {
    var r = visitor$3.build({
      zero_or_more: function (u) {
        asts$1.alwaysConsumesOnSuccess(e, u.expression) || t.error("Possible infinite loop when parsing (repetition used with an expression that may not consume any input)", u.location);
      },
      one_or_more: function (u) {
        asts$1.alwaysConsumesOnSuccess(e, u.expression) || t.error("Possible infinite loop when parsing (repetition used with an expression that may not consume any input)", u.location);
      },
      repeated: function (u) {
        if (u.delimiter && r(u.delimiter), !(asts$1.alwaysConsumesOnSuccess(e, u.expression) || u.delimiter && asts$1.alwaysConsumesOnSuccess(e, u.delimiter))) if (null === u.max.value) t.error("Possible infinite loop when parsing (unbounded range repetition used with an expression that may not consume any input)", u.location);else {
          var n = u.min ? u.min : u.max;
          t.warning("constant" === n.type && "constant" === u.max.type ? "An expression may not consume any input and may always match ".concat(u.max.value, " times") : "An expression may not consume any input and may always match with a maximum repetition count", u.location);
        }
      }
    });
    r(e);
  }
  var reportInfiniteRepetition_1 = reportInfiniteRepetition$1,
    asts = asts_1,
    visitor$2 = visitor_1;
  function reportUndefinedRules$1(e, u, t) {
    visitor$2.build({
      rule_ref: function (u) {
        asts.findRule(e, u.name) || t.error('Rule "'.concat(u.name, '" is not defined'), u.location);
      }
    })(e);
  }
  var reportUndefinedRules_1 = reportUndefinedRules$1,
    visitor$1 = visitor_1;
  function reportIncorrectPlucking$1(e, u, t) {
    var r = visitor$1.build({
      action: function (e) {
        r(e.expression, e);
      },
      labeled: function (e, u) {
        e.pick && u && t.error('"@" cannot be used with an action block', e.labelLocation, [{
          message: "Action block location",
          location: u.codeLocation
        }]), r(e.expression);
      }
    });
    r(e);
  }
  var reportIncorrectPlucking_1 = reportIncorrectPlucking$1,
    __spreadArray = commonjsGlobal && commonjsGlobal.__spreadArray || function (e, u, t) {
      if (t || 2 === arguments.length) for (var r, n = 0, o = u.length; n < o; n++) !r && n in u || (r || (r = Array.prototype.slice.call(u, 0, n)), r[n] = u[n]);
      return e.concat(r || Array.prototype.slice.call(u));
    },
    GrammarError$1 = grammarError,
    Defaults = function () {
      function e(e) {
        "function" == typeof (e = void 0 !== e ? e : {}).error && (this.error = e.error), "function" == typeof e.warning && (this.warning = e.warning), "function" == typeof e.info && (this.info = e.info);
      }
      return e.prototype.error = function () {}, e.prototype.warning = function () {}, e.prototype.info = function () {}, e;
    }(),
    Session$1 = function () {
      function e(e) {
        this._callbacks = new Defaults(e), this._firstError = null, this.errors = 0, this.problems = [], this.stage = null;
      }
      return e.prototype.error = function () {
        for (var e, u = [], t = 0; t < arguments.length; t++) u[t] = arguments[t];
        ++this.errors, null === this._firstError && (this._firstError = new (GrammarError$1.bind.apply(GrammarError$1, __spreadArray([void 0], u, !1)))(), this._firstError.stage = this.stage, this._firstError.problems = this.problems), this.problems.push(__spreadArray(["error"], u, !0)), (e = this._callbacks).error.apply(e, __spreadArray([this.stage], u, !1));
      }, e.prototype.warning = function () {
        for (var e, u = [], t = 0; t < arguments.length; t++) u[t] = arguments[t];
        this.problems.push(__spreadArray(["warning"], u, !0)), (e = this._callbacks).warning.apply(e, __spreadArray([this.stage], u, !1));
      }, e.prototype.info = function () {
        for (var e, u = [], t = 0; t < arguments.length; t++) u[t] = arguments[t];
        this.problems.push(__spreadArray(["info"], u, !0)), (e = this._callbacks).info.apply(e, __spreadArray([this.stage], u, !1));
      }, e.prototype.checkErrors = function () {
        if (0 !== this.errors) throw this._firstError;
      }, e;
    }(),
    session = Session$1,
    generateBytecode = generateBytecode_1,
    generateJS = generateJs,
    inferenceMatchResult = inferenceMatchResult_1,
    removeProxyRules = removeProxyRules_1,
    reportDuplicateLabels = reportDuplicateLabels_1,
    reportDuplicateRules = reportDuplicateRules_1,
    reportInfiniteRecursion = reportInfiniteRecursion_1,
    reportInfiniteRepetition = reportInfiniteRepetition_1,
    reportUndefinedRules = reportUndefinedRules_1,
    reportIncorrectPlucking = reportIncorrectPlucking_1,
    Session = session,
    visitor = visitor_1,
    base64 = utils.base64;
  function processOptions(e, u) {
    var t = {};
    return Object.keys(e).forEach(function (u) {
      t[u] = e[u];
    }), Object.keys(u).forEach(function (e) {
      Object.prototype.hasOwnProperty.call(t, e) || (t[e] = u[e]);
    }), t;
  }
  function isSourceMapCapable(e) {
    return "string" == typeof e ? e.length > 0 : e && "function" == typeof e.offset;
  }
  var compiler$1 = {
      visitor: visitor,
      passes: {
        check: [reportUndefinedRules, reportDuplicateRules, reportDuplicateLabels, reportInfiniteRecursion, reportInfiniteRepetition, reportIncorrectPlucking],
        transform: [removeProxyRules, inferenceMatchResult],
        generate: [generateBytecode, generateJS]
      },
      compile: function (ast, passes, options) {
        if (options = void 0 !== options ? options : {}, options = processOptions(options, {
          allowedStartRules: [ast.rules[0].name],
          cache: !1,
          dependencies: {},
          exportVar: null,
          format: "bare",
          output: "parser",
          trace: !1
        }), !Array.isArray(options.allowedStartRules)) throw new Error("allowedStartRules must be an array");
        if (0 === options.allowedStartRules.length) throw new Error("Must have at least one start rule");
        var allRules = ast.rules.map(function (e) {
          return e.name;
        });
        if (options.allowedStartRules.some(function (e) {
          return "*" === e;
        })) options.allowedStartRules = allRules;else for (var _i = 0, _a = options.allowedStartRules; _i < _a.length; _i++) {
          var rule = _a[_i];
          if (-1 === allRules.indexOf(rule)) throw new Error('Unknown start rule "'.concat(rule, '"'));
        }
        if (("source-and-map" === options.output || "source-with-inline-map" === options.output) && !isSourceMapCapable(options.grammarSource)) throw new Error("Must provide grammarSource (as a string or GrammarLocation) in order to generate source maps");
        var session = new Session(options);
        switch (Object.keys(passes).forEach(function (e) {
          session.stage = e, session.info("Process stage ".concat(e)), passes[e].forEach(function (u) {
            session.info("Process pass ".concat(e, ".").concat(u.name)), u(ast, options, session);
          }), session.checkErrors();
        }), options.output) {
          case "parser":
            return eval(ast.code.toString());
          case "source":
            return ast.code.toString();
          case "source-and-map":
            return ast.code;
          case "source-with-inline-map":
            if ("undefined" == typeof TextEncoder) throw new Error("TextEncoder is not supported by this platform");
            var sourceMap = ast.code.toStringWithSourceMap(),
              encoder = new TextEncoder(),
              b64 = base64(encoder.encode(JSON.stringify(sourceMap.map.toJSON())));
            return sourceMap.code + "//# sourceMappingURL=data:application/json;charset=utf-8;base64,".concat(b64, "\n");
          case "ast":
            return ast;
          default:
            throw new Error("Invalid output format: " + options.output + ".");
        }
      }
    },
    compiler_1 = compiler$1,
    OPS_TO_PREFIXED_TYPES = {
      $: "text",
      "&": "simple_and",
      "!": "simple_not"
    },
    OPS_TO_SUFFIXED_TYPES = {
      "?": "optional",
      "*": "zero_or_more",
      "+": "one_or_more"
    },
    OPS_TO_SEMANTIC_PREDICATE_TYPES = {
      "&": "semantic_and",
      "!": "semantic_not"
    };
  function peg$subclass(e, u) {
    function t() {
      this.constructor = e;
    }
    t.prototype = u.prototype, e.prototype = new t();
  }
  function peg$SyntaxError(e, u, t, r) {
    var n = Error.call(this, e);
    return Object.setPrototypeOf && Object.setPrototypeOf(n, peg$SyntaxError.prototype), n.expected = u, n.found = t, n.location = r, n.name = "SyntaxError", n;
  }
  function peg$padEnd(e, u, t) {
    return t = t || " ", e.length > u ? e : (u -= e.length, e + (t += t.repeat(u)).slice(0, u));
  }
  function peg$parse(e, u) {
    var t,
      r = {},
      n = (u = void 0 !== u ? u : {}).grammarSource,
      o = {
        Grammar: Yt
      },
      a = Yt,
      i = "{",
      s = "}",
      c = "=",
      l = "/",
      p = "@",
      A = ":",
      f = "$",
      E = "&",
      h = "!",
      d = "?",
      C = "*",
      g = "+",
      m = "|",
      F = ",",
      _ = "..",
      v = "(",
      B = ")",
      D = "\t",
      $ = "\v",
      S = "\f",
      y = " ",
      P = " ",
      x = "\ufeff",
      b = "\n",
      R = "\r\n",
      O = "\r",
      L = "\u2028",
      M = "\u2029",
      T = "/*",
      I = "*/",
      w = "//",
      N = "_",
      k = "\\",
      H = "‌",
      U = "‍",
      j = "i",
      G = '"',
      V = "'",
      Y = "[",
      W = "^",
      z = "]",
      J = "-",
      Q = "0",
      q = "b",
      X = "f",
      K = "n",
      Z = "r",
      ee = "t",
      ue = "v",
      te = "x",
      re = "u",
      ne = ".",
      oe = ";",
      ae = /^[\n\r\u2028\u2029]/,
      ie = /^[0-9]/,
      se = /^[0-9a-f]/i,
      ce = /^[{}]/,
      le = /^[a-z\xB5\xDF-\xF6\xF8-\xFF\u0101\u0103\u0105\u0107\u0109\u010B\u010D\u010F\u0111\u0113\u0115\u0117\u0119\u011B\u011D\u011F\u0121\u0123\u0125\u0127\u0129\u012B\u012D\u012F\u0131\u0133\u0135\u0137-\u0138\u013A\u013C\u013E\u0140\u0142\u0144\u0146\u0148-\u0149\u014B\u014D\u014F\u0151\u0153\u0155\u0157\u0159\u015B\u015D\u015F\u0161\u0163\u0165\u0167\u0169\u016B\u016D\u016F\u0171\u0173\u0175\u0177\u017A\u017C\u017E-\u0180\u0183\u0185\u0188\u018C-\u018D\u0192\u0195\u0199-\u019B\u019E\u01A1\u01A3\u01A5\u01A8\u01AA-\u01AB\u01AD\u01B0\u01B4\u01B6\u01B9-\u01BA\u01BD-\u01BF\u01C6\u01C9\u01CC\u01CE\u01D0\u01D2\u01D4\u01D6\u01D8\u01DA\u01DC-\u01DD\u01DF\u01E1\u01E3\u01E5\u01E7\u01E9\u01EB\u01ED\u01EF-\u01F0\u01F3\u01F5\u01F9\u01FB\u01FD\u01FF\u0201\u0203\u0205\u0207\u0209\u020B\u020D\u020F\u0211\u0213\u0215\u0217\u0219\u021B\u021D\u021F\u0221\u0223\u0225\u0227\u0229\u022B\u022D\u022F\u0231\u0233-\u0239\u023C\u023F-\u0240\u0242\u0247\u0249\u024B\u024D\u024F-\u0293\u0295-\u02AF\u0371\u0373\u0377\u037B-\u037D\u0390\u03AC-\u03CE\u03D0-\u03D1\u03D5-\u03D7\u03D9\u03DB\u03DD\u03DF\u03E1\u03E3\u03E5\u03E7\u03E9\u03EB\u03ED\u03EF-\u03F3\u03F5\u03F8\u03FB-\u03FC\u0430-\u045F\u0461\u0463\u0465\u0467\u0469\u046B\u046D\u046F\u0471\u0473\u0475\u0477\u0479\u047B\u047D\u047F\u0481\u048B\u048D\u048F\u0491\u0493\u0495\u0497\u0499\u049B\u049D\u049F\u04A1\u04A3\u04A5\u04A7\u04A9\u04AB\u04AD\u04AF\u04B1\u04B3\u04B5\u04B7\u04B9\u04BB\u04BD\u04BF\u04C2\u04C4\u04C6\u04C8\u04CA\u04CC\u04CE-\u04CF\u04D1\u04D3\u04D5\u04D7\u04D9\u04DB\u04DD\u04DF\u04E1\u04E3\u04E5\u04E7\u04E9\u04EB\u04ED\u04EF\u04F1\u04F3\u04F5\u04F7\u04F9\u04FB\u04FD\u04FF\u0501\u0503\u0505\u0507\u0509\u050B\u050D\u050F\u0511\u0513\u0515\u0517\u0519\u051B\u051D\u051F\u0521\u0523\u0525\u0527\u0529\u052B\u052D\u052F\u0561-\u0587\u13F8-\u13FD\u1D00-\u1D2B\u1D6B-\u1D77\u1D79-\u1D9A\u1E01\u1E03\u1E05\u1E07\u1E09\u1E0B\u1E0D\u1E0F\u1E11\u1E13\u1E15\u1E17\u1E19\u1E1B\u1E1D\u1E1F\u1E21\u1E23\u1E25\u1E27\u1E29\u1E2B\u1E2D\u1E2F\u1E31\u1E33\u1E35\u1E37\u1E39\u1E3B\u1E3D\u1E3F\u1E41\u1E43\u1E45\u1E47\u1E49\u1E4B\u1E4D\u1E4F\u1E51\u1E53\u1E55\u1E57\u1E59\u1E5B\u1E5D\u1E5F\u1E61\u1E63\u1E65\u1E67\u1E69\u1E6B\u1E6D\u1E6F\u1E71\u1E73\u1E75\u1E77\u1E79\u1E7B\u1E7D\u1E7F\u1E81\u1E83\u1E85\u1E87\u1E89\u1E8B\u1E8D\u1E8F\u1E91\u1E93\u1E95-\u1E9D\u1E9F\u1EA1\u1EA3\u1EA5\u1EA7\u1EA9\u1EAB\u1EAD\u1EAF\u1EB1\u1EB3\u1EB5\u1EB7\u1EB9\u1EBB\u1EBD\u1EBF\u1EC1\u1EC3\u1EC5\u1EC7\u1EC9\u1ECB\u1ECD\u1ECF\u1ED1\u1ED3\u1ED5\u1ED7\u1ED9\u1EDB\u1EDD\u1EDF\u1EE1\u1EE3\u1EE5\u1EE7\u1EE9\u1EEB\u1EED\u1EEF\u1EF1\u1EF3\u1EF5\u1EF7\u1EF9\u1EFB\u1EFD\u1EFF-\u1F07\u1F10-\u1F15\u1F20-\u1F27\u1F30-\u1F37\u1F40-\u1F45\u1F50-\u1F57\u1F60-\u1F67\u1F70-\u1F7D\u1F80-\u1F87\u1F90-\u1F97\u1FA0-\u1FA7\u1FB0-\u1FB4\u1FB6-\u1FB7\u1FBE\u1FC2-\u1FC4\u1FC6-\u1FC7\u1FD0-\u1FD3\u1FD6-\u1FD7\u1FE0-\u1FE7\u1FF2-\u1FF4\u1FF6-\u1FF7\u210A\u210E-\u210F\u2113\u212F\u2134\u2139\u213C-\u213D\u2146-\u2149\u214E\u2184\u2C30-\u2C5E\u2C61\u2C65-\u2C66\u2C68\u2C6A\u2C6C\u2C71\u2C73-\u2C74\u2C76-\u2C7B\u2C81\u2C83\u2C85\u2C87\u2C89\u2C8B\u2C8D\u2C8F\u2C91\u2C93\u2C95\u2C97\u2C99\u2C9B\u2C9D\u2C9F\u2CA1\u2CA3\u2CA5\u2CA7\u2CA9\u2CAB\u2CAD\u2CAF\u2CB1\u2CB3\u2CB5\u2CB7\u2CB9\u2CBB\u2CBD\u2CBF\u2CC1\u2CC3\u2CC5\u2CC7\u2CC9\u2CCB\u2CCD\u2CCF\u2CD1\u2CD3\u2CD5\u2CD7\u2CD9\u2CDB\u2CDD\u2CDF\u2CE1\u2CE3-\u2CE4\u2CEC\u2CEE\u2CF3\u2D00-\u2D25\u2D27\u2D2D\uA641\uA643\uA645\uA647\uA649\uA64B\uA64D\uA64F\uA651\uA653\uA655\uA657\uA659\uA65B\uA65D\uA65F\uA661\uA663\uA665\uA667\uA669\uA66B\uA66D\uA681\uA683\uA685\uA687\uA689\uA68B\uA68D\uA68F\uA691\uA693\uA695\uA697\uA699\uA69B\uA723\uA725\uA727\uA729\uA72B\uA72D\uA72F-\uA731\uA733\uA735\uA737\uA739\uA73B\uA73D\uA73F\uA741\uA743\uA745\uA747\uA749\uA74B\uA74D\uA74F\uA751\uA753\uA755\uA757\uA759\uA75B\uA75D\uA75F\uA761\uA763\uA765\uA767\uA769\uA76B\uA76D\uA76F\uA771-\uA778\uA77A\uA77C\uA77F\uA781\uA783\uA785\uA787\uA78C\uA78E\uA791\uA793-\uA795\uA797\uA799\uA79B\uA79D\uA79F\uA7A1\uA7A3\uA7A5\uA7A7\uA7A9\uA7B5\uA7B7\uA7FA\uAB30-\uAB5A\uAB60-\uAB65\uAB70-\uABBF\uFB00-\uFB06\uFB13-\uFB17\uFF41-\uFF5A]/,
      pe = /^[\u02B0-\u02C1\u02C6-\u02D1\u02E0-\u02E4\u02EC\u02EE\u0374\u037A\u0559\u0640\u06E5-\u06E6\u07F4-\u07F5\u07FA\u081A\u0824\u0828\u0971\u0E46\u0EC6\u10FC\u17D7\u1843\u1AA7\u1C78-\u1C7D\u1D2C-\u1D6A\u1D78\u1D9B-\u1DBF\u2071\u207F\u2090-\u209C\u2C7C-\u2C7D\u2D6F\u2E2F\u3005\u3031-\u3035\u303B\u309D-\u309E\u30FC-\u30FE\uA015\uA4F8-\uA4FD\uA60C\uA67F\uA69C-\uA69D\uA717-\uA71F\uA770\uA788\uA7F8-\uA7F9\uA9CF\uA9E6\uAA70\uAADD\uAAF3-\uAAF4\uAB5C-\uAB5F\uFF70\uFF9E-\uFF9F]/,
      Ae = /^[\xAA\xBA\u01BB\u01C0-\u01C3\u0294\u05D0-\u05EA\u05F0-\u05F2\u0620-\u063F\u0641-\u064A\u066E-\u066F\u0671-\u06D3\u06D5\u06EE-\u06EF\u06FA-\u06FC\u06FF\u0710\u0712-\u072F\u074D-\u07A5\u07B1\u07CA-\u07EA\u0800-\u0815\u0840-\u0858\u08A0-\u08B4\u0904-\u0939\u093D\u0950\u0958-\u0961\u0972-\u0980\u0985-\u098C\u098F-\u0990\u0993-\u09A8\u09AA-\u09B0\u09B2\u09B6-\u09B9\u09BD\u09CE\u09DC-\u09DD\u09DF-\u09E1\u09F0-\u09F1\u0A05-\u0A0A\u0A0F-\u0A10\u0A13-\u0A28\u0A2A-\u0A30\u0A32-\u0A33\u0A35-\u0A36\u0A38-\u0A39\u0A59-\u0A5C\u0A5E\u0A72-\u0A74\u0A85-\u0A8D\u0A8F-\u0A91\u0A93-\u0AA8\u0AAA-\u0AB0\u0AB2-\u0AB3\u0AB5-\u0AB9\u0ABD\u0AD0\u0AE0-\u0AE1\u0AF9\u0B05-\u0B0C\u0B0F-\u0B10\u0B13-\u0B28\u0B2A-\u0B30\u0B32-\u0B33\u0B35-\u0B39\u0B3D\u0B5C-\u0B5D\u0B5F-\u0B61\u0B71\u0B83\u0B85-\u0B8A\u0B8E-\u0B90\u0B92-\u0B95\u0B99-\u0B9A\u0B9C\u0B9E-\u0B9F\u0BA3-\u0BA4\u0BA8-\u0BAA\u0BAE-\u0BB9\u0BD0\u0C05-\u0C0C\u0C0E-\u0C10\u0C12-\u0C28\u0C2A-\u0C39\u0C3D\u0C58-\u0C5A\u0C60-\u0C61\u0C85-\u0C8C\u0C8E-\u0C90\u0C92-\u0CA8\u0CAA-\u0CB3\u0CB5-\u0CB9\u0CBD\u0CDE\u0CE0-\u0CE1\u0CF1-\u0CF2\u0D05-\u0D0C\u0D0E-\u0D10\u0D12-\u0D3A\u0D3D\u0D4E\u0D5F-\u0D61\u0D7A-\u0D7F\u0D85-\u0D96\u0D9A-\u0DB1\u0DB3-\u0DBB\u0DBD\u0DC0-\u0DC6\u0E01-\u0E30\u0E32-\u0E33\u0E40-\u0E45\u0E81-\u0E82\u0E84\u0E87-\u0E88\u0E8A\u0E8D\u0E94-\u0E97\u0E99-\u0E9F\u0EA1-\u0EA3\u0EA5\u0EA7\u0EAA-\u0EAB\u0EAD-\u0EB0\u0EB2-\u0EB3\u0EBD\u0EC0-\u0EC4\u0EDC-\u0EDF\u0F00\u0F40-\u0F47\u0F49-\u0F6C\u0F88-\u0F8C\u1000-\u102A\u103F\u1050-\u1055\u105A-\u105D\u1061\u1065-\u1066\u106E-\u1070\u1075-\u1081\u108E\u10D0-\u10FA\u10FD-\u1248\u124A-\u124D\u1250-\u1256\u1258\u125A-\u125D\u1260-\u1288\u128A-\u128D\u1290-\u12B0\u12B2-\u12B5\u12B8-\u12BE\u12C0\u12C2-\u12C5\u12C8-\u12D6\u12D8-\u1310\u1312-\u1315\u1318-\u135A\u1380-\u138F\u1401-\u166C\u166F-\u167F\u1681-\u169A\u16A0-\u16EA\u16F1-\u16F8\u1700-\u170C\u170E-\u1711\u1720-\u1731\u1740-\u1751\u1760-\u176C\u176E-\u1770\u1780-\u17B3\u17DC\u1820-\u1842\u1844-\u1877\u1880-\u18A8\u18AA\u18B0-\u18F5\u1900-\u191E\u1950-\u196D\u1970-\u1974\u1980-\u19AB\u19B0-\u19C9\u1A00-\u1A16\u1A20-\u1A54\u1B05-\u1B33\u1B45-\u1B4B\u1B83-\u1BA0\u1BAE-\u1BAF\u1BBA-\u1BE5\u1C00-\u1C23\u1C4D-\u1C4F\u1C5A-\u1C77\u1CE9-\u1CEC\u1CEE-\u1CF1\u1CF5-\u1CF6\u2135-\u2138\u2D30-\u2D67\u2D80-\u2D96\u2DA0-\u2DA6\u2DA8-\u2DAE\u2DB0-\u2DB6\u2DB8-\u2DBE\u2DC0-\u2DC6\u2DC8-\u2DCE\u2DD0-\u2DD6\u2DD8-\u2DDE\u3006\u303C\u3041-\u3096\u309F\u30A1-\u30FA\u30FF\u3105-\u312D\u3131-\u318E\u31A0-\u31BA\u31F0-\u31FF\u3400-\u4DB5\u4E00-\u9FD5\uA000-\uA014\uA016-\uA48C\uA4D0-\uA4F7\uA500-\uA60B\uA610-\uA61F\uA62A-\uA62B\uA66E\uA6A0-\uA6E5\uA78F\uA7F7\uA7FB-\uA801\uA803-\uA805\uA807-\uA80A\uA80C-\uA822\uA840-\uA873\uA882-\uA8B3\uA8F2-\uA8F7\uA8FB\uA8FD\uA90A-\uA925\uA930-\uA946\uA960-\uA97C\uA984-\uA9B2\uA9E0-\uA9E4\uA9E7-\uA9EF\uA9FA-\uA9FE\uAA00-\uAA28\uAA40-\uAA42\uAA44-\uAA4B\uAA60-\uAA6F\uAA71-\uAA76\uAA7A\uAA7E-\uAAAF\uAAB1\uAAB5-\uAAB6\uAAB9-\uAABD\uAAC0\uAAC2\uAADB-\uAADC\uAAE0-\uAAEA\uAAF2\uAB01-\uAB06\uAB09-\uAB0E\uAB11-\uAB16\uAB20-\uAB26\uAB28-\uAB2E\uABC0-\uABE2\uAC00-\uD7A3\uD7B0-\uD7C6\uD7CB-\uD7FB\uF900-\uFA6D\uFA70-\uFAD9\uFB1D\uFB1F-\uFB28\uFB2A-\uFB36\uFB38-\uFB3C\uFB3E\uFB40-\uFB41\uFB43-\uFB44\uFB46-\uFBB1\uFBD3-\uFD3D\uFD50-\uFD8F\uFD92-\uFDC7\uFDF0-\uFDFB\uFE70-\uFE74\uFE76-\uFEFC\uFF66-\uFF6F\uFF71-\uFF9D\uFFA0-\uFFBE\uFFC2-\uFFC7\uFFCA-\uFFCF\uFFD2-\uFFD7\uFFDA-\uFFDC]/,
      fe = /^[\u01C5\u01C8\u01CB\u01F2\u1F88-\u1F8F\u1F98-\u1F9F\u1FA8-\u1FAF\u1FBC\u1FCC\u1FFC]/,
      Ee = /^[A-Z\xC0-\xD6\xD8-\xDE\u0100\u0102\u0104\u0106\u0108\u010A\u010C\u010E\u0110\u0112\u0114\u0116\u0118\u011A\u011C\u011E\u0120\u0122\u0124\u0126\u0128\u012A\u012C\u012E\u0130\u0132\u0134\u0136\u0139\u013B\u013D\u013F\u0141\u0143\u0145\u0147\u014A\u014C\u014E\u0150\u0152\u0154\u0156\u0158\u015A\u015C\u015E\u0160\u0162\u0164\u0166\u0168\u016A\u016C\u016E\u0170\u0172\u0174\u0176\u0178-\u0179\u017B\u017D\u0181-\u0182\u0184\u0186-\u0187\u0189-\u018B\u018E-\u0191\u0193-\u0194\u0196-\u0198\u019C-\u019D\u019F-\u01A0\u01A2\u01A4\u01A6-\u01A7\u01A9\u01AC\u01AE-\u01AF\u01B1-\u01B3\u01B5\u01B7-\u01B8\u01BC\u01C4\u01C7\u01CA\u01CD\u01CF\u01D1\u01D3\u01D5\u01D7\u01D9\u01DB\u01DE\u01E0\u01E2\u01E4\u01E6\u01E8\u01EA\u01EC\u01EE\u01F1\u01F4\u01F6-\u01F8\u01FA\u01FC\u01FE\u0200\u0202\u0204\u0206\u0208\u020A\u020C\u020E\u0210\u0212\u0214\u0216\u0218\u021A\u021C\u021E\u0220\u0222\u0224\u0226\u0228\u022A\u022C\u022E\u0230\u0232\u023A-\u023B\u023D-\u023E\u0241\u0243-\u0246\u0248\u024A\u024C\u024E\u0370\u0372\u0376\u037F\u0386\u0388-\u038A\u038C\u038E-\u038F\u0391-\u03A1\u03A3-\u03AB\u03CF\u03D2-\u03D4\u03D8\u03DA\u03DC\u03DE\u03E0\u03E2\u03E4\u03E6\u03E8\u03EA\u03EC\u03EE\u03F4\u03F7\u03F9-\u03FA\u03FD-\u042F\u0460\u0462\u0464\u0466\u0468\u046A\u046C\u046E\u0470\u0472\u0474\u0476\u0478\u047A\u047C\u047E\u0480\u048A\u048C\u048E\u0490\u0492\u0494\u0496\u0498\u049A\u049C\u049E\u04A0\u04A2\u04A4\u04A6\u04A8\u04AA\u04AC\u04AE\u04B0\u04B2\u04B4\u04B6\u04B8\u04BA\u04BC\u04BE\u04C0-\u04C1\u04C3\u04C5\u04C7\u04C9\u04CB\u04CD\u04D0\u04D2\u04D4\u04D6\u04D8\u04DA\u04DC\u04DE\u04E0\u04E2\u04E4\u04E6\u04E8\u04EA\u04EC\u04EE\u04F0\u04F2\u04F4\u04F6\u04F8\u04FA\u04FC\u04FE\u0500\u0502\u0504\u0506\u0508\u050A\u050C\u050E\u0510\u0512\u0514\u0516\u0518\u051A\u051C\u051E\u0520\u0522\u0524\u0526\u0528\u052A\u052C\u052E\u0531-\u0556\u10A0-\u10C5\u10C7\u10CD\u13A0-\u13F5\u1E00\u1E02\u1E04\u1E06\u1E08\u1E0A\u1E0C\u1E0E\u1E10\u1E12\u1E14\u1E16\u1E18\u1E1A\u1E1C\u1E1E\u1E20\u1E22\u1E24\u1E26\u1E28\u1E2A\u1E2C\u1E2E\u1E30\u1E32\u1E34\u1E36\u1E38\u1E3A\u1E3C\u1E3E\u1E40\u1E42\u1E44\u1E46\u1E48\u1E4A\u1E4C\u1E4E\u1E50\u1E52\u1E54\u1E56\u1E58\u1E5A\u1E5C\u1E5E\u1E60\u1E62\u1E64\u1E66\u1E68\u1E6A\u1E6C\u1E6E\u1E70\u1E72\u1E74\u1E76\u1E78\u1E7A\u1E7C\u1E7E\u1E80\u1E82\u1E84\u1E86\u1E88\u1E8A\u1E8C\u1E8E\u1E90\u1E92\u1E94\u1E9E\u1EA0\u1EA2\u1EA4\u1EA6\u1EA8\u1EAA\u1EAC\u1EAE\u1EB0\u1EB2\u1EB4\u1EB6\u1EB8\u1EBA\u1EBC\u1EBE\u1EC0\u1EC2\u1EC4\u1EC6\u1EC8\u1ECA\u1ECC\u1ECE\u1ED0\u1ED2\u1ED4\u1ED6\u1ED8\u1EDA\u1EDC\u1EDE\u1EE0\u1EE2\u1EE4\u1EE6\u1EE8\u1EEA\u1EEC\u1EEE\u1EF0\u1EF2\u1EF4\u1EF6\u1EF8\u1EFA\u1EFC\u1EFE\u1F08-\u1F0F\u1F18-\u1F1D\u1F28-\u1F2F\u1F38-\u1F3F\u1F48-\u1F4D\u1F59\u1F5B\u1F5D\u1F5F\u1F68-\u1F6F\u1FB8-\u1FBB\u1FC8-\u1FCB\u1FD8-\u1FDB\u1FE8-\u1FEC\u1FF8-\u1FFB\u2102\u2107\u210B-\u210D\u2110-\u2112\u2115\u2119-\u211D\u2124\u2126\u2128\u212A-\u212D\u2130-\u2133\u213E-\u213F\u2145\u2183\u2C00-\u2C2E\u2C60\u2C62-\u2C64\u2C67\u2C69\u2C6B\u2C6D-\u2C70\u2C72\u2C75\u2C7E-\u2C80\u2C82\u2C84\u2C86\u2C88\u2C8A\u2C8C\u2C8E\u2C90\u2C92\u2C94\u2C96\u2C98\u2C9A\u2C9C\u2C9E\u2CA0\u2CA2\u2CA4\u2CA6\u2CA8\u2CAA\u2CAC\u2CAE\u2CB0\u2CB2\u2CB4\u2CB6\u2CB8\u2CBA\u2CBC\u2CBE\u2CC0\u2CC2\u2CC4\u2CC6\u2CC8\u2CCA\u2CCC\u2CCE\u2CD0\u2CD2\u2CD4\u2CD6\u2CD8\u2CDA\u2CDC\u2CDE\u2CE0\u2CE2\u2CEB\u2CED\u2CF2\uA640\uA642\uA644\uA646\uA648\uA64A\uA64C\uA64E\uA650\uA652\uA654\uA656\uA658\uA65A\uA65C\uA65E\uA660\uA662\uA664\uA666\uA668\uA66A\uA66C\uA680\uA682\uA684\uA686\uA688\uA68A\uA68C\uA68E\uA690\uA692\uA694\uA696\uA698\uA69A\uA722\uA724\uA726\uA728\uA72A\uA72C\uA72E\uA732\uA734\uA736\uA738\uA73A\uA73C\uA73E\uA740\uA742\uA744\uA746\uA748\uA74A\uA74C\uA74E\uA750\uA752\uA754\uA756\uA758\uA75A\uA75C\uA75E\uA760\uA762\uA764\uA766\uA768\uA76A\uA76C\uA76E\uA779\uA77B\uA77D-\uA77E\uA780\uA782\uA784\uA786\uA78B\uA78D\uA790\uA792\uA796\uA798\uA79A\uA79C\uA79E\uA7A0\uA7A2\uA7A4\uA7A6\uA7A8\uA7AA-\uA7AD\uA7B0-\uA7B4\uA7B6\uFF21-\uFF3A]/,
      he = /^[\u0903\u093B\u093E-\u0940\u0949-\u094C\u094E-\u094F\u0982-\u0983\u09BE-\u09C0\u09C7-\u09C8\u09CB-\u09CC\u09D7\u0A03\u0A3E-\u0A40\u0A83\u0ABE-\u0AC0\u0AC9\u0ACB-\u0ACC\u0B02-\u0B03\u0B3E\u0B40\u0B47-\u0B48\u0B4B-\u0B4C\u0B57\u0BBE-\u0BBF\u0BC1-\u0BC2\u0BC6-\u0BC8\u0BCA-\u0BCC\u0BD7\u0C01-\u0C03\u0C41-\u0C44\u0C82-\u0C83\u0CBE\u0CC0-\u0CC4\u0CC7-\u0CC8\u0CCA-\u0CCB\u0CD5-\u0CD6\u0D02-\u0D03\u0D3E-\u0D40\u0D46-\u0D48\u0D4A-\u0D4C\u0D57\u0D82-\u0D83\u0DCF-\u0DD1\u0DD8-\u0DDF\u0DF2-\u0DF3\u0F3E-\u0F3F\u0F7F\u102B-\u102C\u1031\u1038\u103B-\u103C\u1056-\u1057\u1062-\u1064\u1067-\u106D\u1083-\u1084\u1087-\u108C\u108F\u109A-\u109C\u17B6\u17BE-\u17C5\u17C7-\u17C8\u1923-\u1926\u1929-\u192B\u1930-\u1931\u1933-\u1938\u1A19-\u1A1A\u1A55\u1A57\u1A61\u1A63-\u1A64\u1A6D-\u1A72\u1B04\u1B35\u1B3B\u1B3D-\u1B41\u1B43-\u1B44\u1B82\u1BA1\u1BA6-\u1BA7\u1BAA\u1BE7\u1BEA-\u1BEC\u1BEE\u1BF2-\u1BF3\u1C24-\u1C2B\u1C34-\u1C35\u1CE1\u1CF2-\u1CF3\u302E-\u302F\uA823-\uA824\uA827\uA880-\uA881\uA8B4-\uA8C3\uA952-\uA953\uA983\uA9B4-\uA9B5\uA9BA-\uA9BB\uA9BD-\uA9C0\uAA2F-\uAA30\uAA33-\uAA34\uAA4D\uAA7B\uAA7D\uAAEB\uAAEE-\uAAEF\uAAF5\uABE3-\uABE4\uABE6-\uABE7\uABE9-\uABEA\uABEC]/,
      de = /^[\u0300-\u036F\u0483-\u0487\u0591-\u05BD\u05BF\u05C1-\u05C2\u05C4-\u05C5\u05C7\u0610-\u061A\u064B-\u065F\u0670\u06D6-\u06DC\u06DF-\u06E4\u06E7-\u06E8\u06EA-\u06ED\u0711\u0730-\u074A\u07A6-\u07B0\u07EB-\u07F3\u0816-\u0819\u081B-\u0823\u0825-\u0827\u0829-\u082D\u0859-\u085B\u08E3-\u0902\u093A\u093C\u0941-\u0948\u094D\u0951-\u0957\u0962-\u0963\u0981\u09BC\u09C1-\u09C4\u09CD\u09E2-\u09E3\u0A01-\u0A02\u0A3C\u0A41-\u0A42\u0A47-\u0A48\u0A4B-\u0A4D\u0A51\u0A70-\u0A71\u0A75\u0A81-\u0A82\u0ABC\u0AC1-\u0AC5\u0AC7-\u0AC8\u0ACD\u0AE2-\u0AE3\u0B01\u0B3C\u0B3F\u0B41-\u0B44\u0B4D\u0B56\u0B62-\u0B63\u0B82\u0BC0\u0BCD\u0C00\u0C3E-\u0C40\u0C46-\u0C48\u0C4A-\u0C4D\u0C55-\u0C56\u0C62-\u0C63\u0C81\u0CBC\u0CBF\u0CC6\u0CCC-\u0CCD\u0CE2-\u0CE3\u0D01\u0D41-\u0D44\u0D4D\u0D62-\u0D63\u0DCA\u0DD2-\u0DD4\u0DD6\u0E31\u0E34-\u0E3A\u0E47-\u0E4E\u0EB1\u0EB4-\u0EB9\u0EBB-\u0EBC\u0EC8-\u0ECD\u0F18-\u0F19\u0F35\u0F37\u0F39\u0F71-\u0F7E\u0F80-\u0F84\u0F86-\u0F87\u0F8D-\u0F97\u0F99-\u0FBC\u0FC6\u102D-\u1030\u1032-\u1037\u1039-\u103A\u103D-\u103E\u1058-\u1059\u105E-\u1060\u1071-\u1074\u1082\u1085-\u1086\u108D\u109D\u135D-\u135F\u1712-\u1714\u1732-\u1734\u1752-\u1753\u1772-\u1773\u17B4-\u17B5\u17B7-\u17BD\u17C6\u17C9-\u17D3\u17DD\u180B-\u180D\u18A9\u1920-\u1922\u1927-\u1928\u1932\u1939-\u193B\u1A17-\u1A18\u1A1B\u1A56\u1A58-\u1A5E\u1A60\u1A62\u1A65-\u1A6C\u1A73-\u1A7C\u1A7F\u1AB0-\u1ABD\u1B00-\u1B03\u1B34\u1B36-\u1B3A\u1B3C\u1B42\u1B6B-\u1B73\u1B80-\u1B81\u1BA2-\u1BA5\u1BA8-\u1BA9\u1BAB-\u1BAD\u1BE6\u1BE8-\u1BE9\u1BED\u1BEF-\u1BF1\u1C2C-\u1C33\u1C36-\u1C37\u1CD0-\u1CD2\u1CD4-\u1CE0\u1CE2-\u1CE8\u1CED\u1CF4\u1CF8-\u1CF9\u1DC0-\u1DF5\u1DFC-\u1DFF\u20D0-\u20DC\u20E1\u20E5-\u20F0\u2CEF-\u2CF1\u2D7F\u2DE0-\u2DFF\u302A-\u302D\u3099-\u309A\uA66F\uA674-\uA67D\uA69E-\uA69F\uA6F0-\uA6F1\uA802\uA806\uA80B\uA825-\uA826\uA8C4\uA8E0-\uA8F1\uA926-\uA92D\uA947-\uA951\uA980-\uA982\uA9B3\uA9B6-\uA9B9\uA9BC\uA9E5\uAA29-\uAA2E\uAA31-\uAA32\uAA35-\uAA36\uAA43\uAA4C\uAA7C\uAAB0\uAAB2-\uAAB4\uAAB7-\uAAB8\uAABE-\uAABF\uAAC1\uAAEC-\uAAED\uAAF6\uABE5\uABE8\uABED\uFB1E\uFE00-\uFE0F\uFE20-\uFE2F]/,
      Ce = /^[0-9\u0660-\u0669\u06F0-\u06F9\u07C0-\u07C9\u0966-\u096F\u09E6-\u09EF\u0A66-\u0A6F\u0AE6-\u0AEF\u0B66-\u0B6F\u0BE6-\u0BEF\u0C66-\u0C6F\u0CE6-\u0CEF\u0D66-\u0D6F\u0DE6-\u0DEF\u0E50-\u0E59\u0ED0-\u0ED9\u0F20-\u0F29\u1040-\u1049\u1090-\u1099\u17E0-\u17E9\u1810-\u1819\u1946-\u194F\u19D0-\u19D9\u1A80-\u1A89\u1A90-\u1A99\u1B50-\u1B59\u1BB0-\u1BB9\u1C40-\u1C49\u1C50-\u1C59\uA620-\uA629\uA8D0-\uA8D9\uA900-\uA909\uA9D0-\uA9D9\uA9F0-\uA9F9\uAA50-\uAA59\uABF0-\uABF9\uFF10-\uFF19]/,
      ge = /^[\u16EE-\u16F0\u2160-\u2182\u2185-\u2188\u3007\u3021-\u3029\u3038-\u303A\uA6E6-\uA6EF]/,
      me = /^[_\u203F-\u2040\u2054\uFE33-\uFE34\uFE4D-\uFE4F\uFF3F]/,
      Fe = /^[ \xA0\u1680\u2000-\u200A\u202F\u205F\u3000]/,
      _e = kt("{", !1),
      ve = kt("}", !1),
      Be = kt("=", !1),
      De = kt("/", !1),
      $e = kt("@", !1),
      Se = kt(":", !1),
      ye = kt("$", !1),
      Pe = kt("&", !1),
      xe = kt("!", !1),
      be = kt("?", !1),
      Re = kt("*", !1),
      Oe = kt("+", !1),
      Le = kt("|", !1),
      Me = kt(",", !1),
      Te = kt("..", !1),
      Ie = kt("(", !1),
      we = kt(")", !1),
      Ne = {
        type: "any"
      },
      ke = Ut("whitespace"),
      He = kt("\t", !1),
      Ue = kt("\v", !1),
      je = kt("\f", !1),
      Ge = kt(" ", !1),
      Ve = kt(" ", !1),
      Ye = kt("\ufeff", !1),
      We = Ht(["\n", "\r", "\u2028", "\u2029"], !1, !1),
      ze = Ut("end of line"),
      Je = kt("\n", !1),
      Qe = kt("\r\n", !1),
      qe = kt("\r", !1),
      Xe = kt("\u2028", !1),
      Ke = kt("\u2029", !1),
      Ze = Ut("comment"),
      eu = kt("/*", !1),
      uu = kt("*/", !1),
      tu = kt("//", !1),
      ru = Ut("identifier"),
      nu = kt("_", !1),
      ou = kt("\\", !1),
      au = kt("‌", !1),
      iu = kt("‍", !1),
      su = Ut("literal"),
      cu = kt("i", !1),
      lu = Ut("string"),
      pu = kt('"', !1),
      Au = kt("'", !1),
      fu = Ut("character class"),
      Eu = kt("[", !1),
      hu = kt("^", !1),
      du = kt("]", !1),
      Cu = kt("-", !1),
      gu = kt("0", !1),
      mu = kt("b", !1),
      Fu = kt("f", !1),
      _u = kt("n", !1),
      vu = kt("r", !1),
      Bu = kt("t", !1),
      Du = kt("v", !1),
      $u = kt("x", !1),
      Su = kt("u", !1),
      yu = Ht([["0", "9"]], !1, !1),
      Pu = Ht([["0", "9"], ["a", "f"]], !1, !0),
      xu = kt(".", !1),
      bu = Ut("code block"),
      Ru = Ht(["{", "}"], !1, !1),
      Ou = Ht([["a", "z"], "µ", ["ß", "ö"], ["ø", "ÿ"], "ā", "ă", "ą", "ć", "ĉ", "ċ", "č", "ď", "đ", "ē", "ĕ", "ė", "ę", "ě", "ĝ", "ğ", "ġ", "ģ", "ĥ", "ħ", "ĩ", "ī", "ĭ", "į", "ı", "ĳ", "ĵ", ["ķ", "ĸ"], "ĺ", "ļ", "ľ", "ŀ", "ł", "ń", "ņ", ["ň", "ŉ"], "ŋ", "ō", "ŏ", "ő", "œ", "ŕ", "ŗ", "ř", "ś", "ŝ", "ş", "š", "ţ", "ť", "ŧ", "ũ", "ū", "ŭ", "ů", "ű", "ų", "ŵ", "ŷ", "ź", "ż", ["ž", "ƀ"], "ƃ", "ƅ", "ƈ", ["ƌ", "ƍ"], "ƒ", "ƕ", ["ƙ", "ƛ"], "ƞ", "ơ", "ƣ", "ƥ", "ƨ", ["ƪ", "ƫ"], "ƭ", "ư", "ƴ", "ƶ", ["ƹ", "ƺ"], ["ƽ", "ƿ"], "ǆ", "ǉ", "ǌ", "ǎ", "ǐ", "ǒ", "ǔ", "ǖ", "ǘ", "ǚ", ["ǜ", "ǝ"], "ǟ", "ǡ", "ǣ", "ǥ", "ǧ", "ǩ", "ǫ", "ǭ", ["ǯ", "ǰ"], "ǳ", "ǵ", "ǹ", "ǻ", "ǽ", "ǿ", "ȁ", "ȃ", "ȅ", "ȇ", "ȉ", "ȋ", "ȍ", "ȏ", "ȑ", "ȓ", "ȕ", "ȗ", "ș", "ț", "ȝ", "ȟ", "ȡ", "ȣ", "ȥ", "ȧ", "ȩ", "ȫ", "ȭ", "ȯ", "ȱ", ["ȳ", "ȹ"], "ȼ", ["ȿ", "ɀ"], "ɂ", "ɇ", "ɉ", "ɋ", "ɍ", ["ɏ", "ʓ"], ["ʕ", "ʯ"], "ͱ", "ͳ", "ͷ", ["ͻ", "ͽ"], "ΐ", ["ά", "ώ"], ["ϐ", "ϑ"], ["ϕ", "ϗ"], "ϙ", "ϛ", "ϝ", "ϟ", "ϡ", "ϣ", "ϥ", "ϧ", "ϩ", "ϫ", "ϭ", ["ϯ", "ϳ"], "ϵ", "ϸ", ["ϻ", "ϼ"], ["а", "џ"], "ѡ", "ѣ", "ѥ", "ѧ", "ѩ", "ѫ", "ѭ", "ѯ", "ѱ", "ѳ", "ѵ", "ѷ", "ѹ", "ѻ", "ѽ", "ѿ", "ҁ", "ҋ", "ҍ", "ҏ", "ґ", "ғ", "ҕ", "җ", "ҙ", "қ", "ҝ", "ҟ", "ҡ", "ң", "ҥ", "ҧ", "ҩ", "ҫ", "ҭ", "ү", "ұ", "ҳ", "ҵ", "ҷ", "ҹ", "һ", "ҽ", "ҿ", "ӂ", "ӄ", "ӆ", "ӈ", "ӊ", "ӌ", ["ӎ", "ӏ"], "ӑ", "ӓ", "ӕ", "ӗ", "ә", "ӛ", "ӝ", "ӟ", "ӡ", "ӣ", "ӥ", "ӧ", "ө", "ӫ", "ӭ", "ӯ", "ӱ", "ӳ", "ӵ", "ӷ", "ӹ", "ӻ", "ӽ", "ӿ", "ԁ", "ԃ", "ԅ", "ԇ", "ԉ", "ԋ", "ԍ", "ԏ", "ԑ", "ԓ", "ԕ", "ԗ", "ԙ", "ԛ", "ԝ", "ԟ", "ԡ", "ԣ", "ԥ", "ԧ", "ԩ", "ԫ", "ԭ", "ԯ", ["ա", "և"], ["ᏸ", "ᏽ"], ["ᴀ", "ᴫ"], ["ᵫ", "ᵷ"], ["ᵹ", "ᶚ"], "ḁ", "ḃ", "ḅ", "ḇ", "ḉ", "ḋ", "ḍ", "ḏ", "ḑ", "ḓ", "ḕ", "ḗ", "ḙ", "ḛ", "ḝ", "ḟ", "ḡ", "ḣ", "ḥ", "ḧ", "ḩ", "ḫ", "ḭ", "ḯ", "ḱ", "ḳ", "ḵ", "ḷ", "ḹ", "ḻ", "ḽ", "ḿ", "ṁ", "ṃ", "ṅ", "ṇ", "ṉ", "ṋ", "ṍ", "ṏ", "ṑ", "ṓ", "ṕ", "ṗ", "ṙ", "ṛ", "ṝ", "ṟ", "ṡ", "ṣ", "ṥ", "ṧ", "ṩ", "ṫ", "ṭ", "ṯ", "ṱ", "ṳ", "ṵ", "ṷ", "ṹ", "ṻ", "ṽ", "ṿ", "ẁ", "ẃ", "ẅ", "ẇ", "ẉ", "ẋ", "ẍ", "ẏ", "ẑ", "ẓ", ["ẕ", "ẝ"], "ẟ", "ạ", "ả", "ấ", "ầ", "ẩ", "ẫ", "ậ", "ắ", "ằ", "ẳ", "ẵ", "ặ", "ẹ", "ẻ", "ẽ", "ế", "ề", "ể", "ễ", "ệ", "ỉ", "ị", "ọ", "ỏ", "ố", "ồ", "ổ", "ỗ", "ộ", "ớ", "ờ", "ở", "ỡ", "ợ", "ụ", "ủ", "ứ", "ừ", "ử", "ữ", "ự", "ỳ", "ỵ", "ỷ", "ỹ", "ỻ", "ỽ", ["ỿ", "ἇ"], ["ἐ", "ἕ"], ["ἠ", "ἧ"], ["ἰ", "ἷ"], ["ὀ", "ὅ"], ["ὐ", "ὗ"], ["ὠ", "ὧ"], ["ὰ", "ώ"], ["ᾀ", "ᾇ"], ["ᾐ", "ᾗ"], ["ᾠ", "ᾧ"], ["ᾰ", "ᾴ"], ["ᾶ", "ᾷ"], "ι", ["ῂ", "ῄ"], ["ῆ", "ῇ"], ["ῐ", "ΐ"], ["ῖ", "ῗ"], ["ῠ", "ῧ"], ["ῲ", "ῴ"], ["ῶ", "ῷ"], "ℊ", ["ℎ", "ℏ"], "ℓ", "ℯ", "ℴ", "ℹ", ["ℼ", "ℽ"], ["ⅆ", "ⅉ"], "ⅎ", "ↄ", ["ⰰ", "ⱞ"], "ⱡ", ["ⱥ", "ⱦ"], "ⱨ", "ⱪ", "ⱬ", "ⱱ", ["ⱳ", "ⱴ"], ["ⱶ", "ⱻ"], "ⲁ", "ⲃ", "ⲅ", "ⲇ", "ⲉ", "ⲋ", "ⲍ", "ⲏ", "ⲑ", "ⲓ", "ⲕ", "ⲗ", "ⲙ", "ⲛ", "ⲝ", "ⲟ", "ⲡ", "ⲣ", "ⲥ", "ⲧ", "ⲩ", "ⲫ", "ⲭ", "ⲯ", "ⲱ", "ⲳ", "ⲵ", "ⲷ", "ⲹ", "ⲻ", "ⲽ", "ⲿ", "ⳁ", "ⳃ", "ⳅ", "ⳇ", "ⳉ", "ⳋ", "ⳍ", "ⳏ", "ⳑ", "ⳓ", "ⳕ", "ⳗ", "ⳙ", "ⳛ", "ⳝ", "ⳟ", "ⳡ", ["ⳣ", "ⳤ"], "ⳬ", "ⳮ", "ⳳ", ["ⴀ", "ⴥ"], "ⴧ", "ⴭ", "ꙁ", "ꙃ", "ꙅ", "ꙇ", "ꙉ", "ꙋ", "ꙍ", "ꙏ", "ꙑ", "ꙓ", "ꙕ", "ꙗ", "ꙙ", "ꙛ", "ꙝ", "ꙟ", "ꙡ", "ꙣ", "ꙥ", "ꙧ", "ꙩ", "ꙫ", "ꙭ", "ꚁ", "ꚃ", "ꚅ", "ꚇ", "ꚉ", "ꚋ", "ꚍ", "ꚏ", "ꚑ", "ꚓ", "ꚕ", "ꚗ", "ꚙ", "ꚛ", "ꜣ", "ꜥ", "ꜧ", "ꜩ", "ꜫ", "ꜭ", ["ꜯ", "ꜱ"], "ꜳ", "ꜵ", "ꜷ", "ꜹ", "ꜻ", "ꜽ", "ꜿ", "ꝁ", "ꝃ", "ꝅ", "ꝇ", "ꝉ", "ꝋ", "ꝍ", "ꝏ", "ꝑ", "ꝓ", "ꝕ", "ꝗ", "ꝙ", "ꝛ", "ꝝ", "ꝟ", "ꝡ", "ꝣ", "ꝥ", "ꝧ", "ꝩ", "ꝫ", "ꝭ", "ꝯ", ["ꝱ", "ꝸ"], "ꝺ", "ꝼ", "ꝿ", "ꞁ", "ꞃ", "ꞅ", "ꞇ", "ꞌ", "ꞎ", "ꞑ", ["ꞓ", "ꞕ"], "ꞗ", "ꞙ", "ꞛ", "ꞝ", "ꞟ", "ꞡ", "ꞣ", "ꞥ", "ꞧ", "ꞩ", "ꞵ", "ꞷ", "ꟺ", ["ꬰ", "ꭚ"], ["ꭠ", "ꭥ"], ["ꭰ", "ꮿ"], ["ﬀ", "ﬆ"], ["ﬓ", "ﬗ"], ["ａ", "ｚ"]], !1, !1),
      Lu = Ht([["ʰ", "ˁ"], ["ˆ", "ˑ"], ["ˠ", "ˤ"], "ˬ", "ˮ", "ʹ", "ͺ", "ՙ", "ـ", ["ۥ", "ۦ"], ["ߴ", "ߵ"], "ߺ", "ࠚ", "ࠤ", "ࠨ", "ॱ", "ๆ", "ໆ", "ჼ", "ៗ", "ᡃ", "ᪧ", ["ᱸ", "ᱽ"], ["ᴬ", "ᵪ"], "ᵸ", ["ᶛ", "ᶿ"], "ⁱ", "ⁿ", ["ₐ", "ₜ"], ["ⱼ", "ⱽ"], "ⵯ", "ⸯ", "々", ["〱", "〵"], "〻", ["ゝ", "ゞ"], ["ー", "ヾ"], "ꀕ", ["ꓸ", "ꓽ"], "ꘌ", "ꙿ", ["ꚜ", "ꚝ"], ["ꜗ", "ꜟ"], "ꝰ", "ꞈ", ["ꟸ", "ꟹ"], "ꧏ", "ꧦ", "ꩰ", "ꫝ", ["ꫳ", "ꫴ"], ["ꭜ", "ꭟ"], "ｰ", ["ﾞ", "ﾟ"]], !1, !1),
      Mu = Ht(["ª", "º", "ƻ", ["ǀ", "ǃ"], "ʔ", ["א", "ת"], ["װ", "ײ"], ["ؠ", "ؿ"], ["ف", "ي"], ["ٮ", "ٯ"], ["ٱ", "ۓ"], "ە", ["ۮ", "ۯ"], ["ۺ", "ۼ"], "ۿ", "ܐ", ["ܒ", "ܯ"], ["ݍ", "ޥ"], "ޱ", ["ߊ", "ߪ"], ["ࠀ", "ࠕ"], ["ࡀ", "ࡘ"], ["ࢠ", "ࢴ"], ["ऄ", "ह"], "ऽ", "ॐ", ["क़", "ॡ"], ["ॲ", "ঀ"], ["অ", "ঌ"], ["এ", "ঐ"], ["ও", "ন"], ["প", "র"], "ল", ["শ", "হ"], "ঽ", "ৎ", ["ড়", "ঢ়"], ["য়", "ৡ"], ["ৰ", "ৱ"], ["ਅ", "ਊ"], ["ਏ", "ਐ"], ["ਓ", "ਨ"], ["ਪ", "ਰ"], ["ਲ", "ਲ਼"], ["ਵ", "ਸ਼"], ["ਸ", "ਹ"], ["ਖ਼", "ੜ"], "ਫ਼", ["ੲ", "ੴ"], ["અ", "ઍ"], ["એ", "ઑ"], ["ઓ", "ન"], ["પ", "ર"], ["લ", "ળ"], ["વ", "હ"], "ઽ", "ૐ", ["ૠ", "ૡ"], "ૹ", ["ଅ", "ଌ"], ["ଏ", "ଐ"], ["ଓ", "ନ"], ["ପ", "ର"], ["ଲ", "ଳ"], ["ଵ", "ହ"], "ଽ", ["ଡ଼", "ଢ଼"], ["ୟ", "ୡ"], "ୱ", "ஃ", ["அ", "ஊ"], ["எ", "ஐ"], ["ஒ", "க"], ["ங", "ச"], "ஜ", ["ஞ", "ட"], ["ண", "த"], ["ந", "ப"], ["ம", "ஹ"], "ௐ", ["అ", "ఌ"], ["ఎ", "ఐ"], ["ఒ", "న"], ["ప", "హ"], "ఽ", ["ౘ", "ౚ"], ["ౠ", "ౡ"], ["ಅ", "ಌ"], ["ಎ", "ಐ"], ["ಒ", "ನ"], ["ಪ", "ಳ"], ["ವ", "ಹ"], "ಽ", "ೞ", ["ೠ", "ೡ"], ["ೱ", "ೲ"], ["അ", "ഌ"], ["എ", "ഐ"], ["ഒ", "ഺ"], "ഽ", "ൎ", ["ൟ", "ൡ"], ["ൺ", "ൿ"], ["අ", "ඖ"], ["ක", "න"], ["ඳ", "ර"], "ල", ["ව", "ෆ"], ["ก", "ะ"], ["า", "ำ"], ["เ", "ๅ"], ["ກ", "ຂ"], "ຄ", ["ງ", "ຈ"], "ຊ", "ຍ", ["ດ", "ທ"], ["ນ", "ຟ"], ["ມ", "ຣ"], "ລ", "ວ", ["ສ", "ຫ"], ["ອ", "ະ"], ["າ", "ຳ"], "ຽ", ["ເ", "ໄ"], ["ໜ", "ໟ"], "ༀ", ["ཀ", "ཇ"], ["ཉ", "ཬ"], ["ྈ", "ྌ"], ["က", "ဪ"], "ဿ", ["ၐ", "ၕ"], ["ၚ", "ၝ"], "ၡ", ["ၥ", "ၦ"], ["ၮ", "ၰ"], ["ၵ", "ႁ"], "ႎ", ["ა", "ჺ"], ["ჽ", "ቈ"], ["ቊ", "ቍ"], ["ቐ", "ቖ"], "ቘ", ["ቚ", "ቝ"], ["በ", "ኈ"], ["ኊ", "ኍ"], ["ነ", "ኰ"], ["ኲ", "ኵ"], ["ኸ", "ኾ"], "ዀ", ["ዂ", "ዅ"], ["ወ", "ዖ"], ["ዘ", "ጐ"], ["ጒ", "ጕ"], ["ጘ", "ፚ"], ["ᎀ", "ᎏ"], ["ᐁ", "ᙬ"], ["ᙯ", "ᙿ"], ["ᚁ", "ᚚ"], ["ᚠ", "ᛪ"], ["ᛱ", "ᛸ"], ["ᜀ", "ᜌ"], ["ᜎ", "ᜑ"], ["ᜠ", "ᜱ"], ["ᝀ", "ᝑ"], ["ᝠ", "ᝬ"], ["ᝮ", "ᝰ"], ["ក", "ឳ"], "ៜ", ["ᠠ", "ᡂ"], ["ᡄ", "ᡷ"], ["ᢀ", "ᢨ"], "ᢪ", ["ᢰ", "ᣵ"], ["ᤀ", "ᤞ"], ["ᥐ", "ᥭ"], ["ᥰ", "ᥴ"], ["ᦀ", "ᦫ"], ["ᦰ", "ᧉ"], ["ᨀ", "ᨖ"], ["ᨠ", "ᩔ"], ["ᬅ", "ᬳ"], ["ᭅ", "ᭋ"], ["ᮃ", "ᮠ"], ["ᮮ", "ᮯ"], ["ᮺ", "ᯥ"], ["ᰀ", "ᰣ"], ["ᱍ", "ᱏ"], ["ᱚ", "ᱷ"], ["ᳩ", "ᳬ"], ["ᳮ", "ᳱ"], ["ᳵ", "ᳶ"], ["ℵ", "ℸ"], ["ⴰ", "ⵧ"], ["ⶀ", "ⶖ"], ["ⶠ", "ⶦ"], ["ⶨ", "ⶮ"], ["ⶰ", "ⶶ"], ["ⶸ", "ⶾ"], ["ⷀ", "ⷆ"], ["ⷈ", "ⷎ"], ["ⷐ", "ⷖ"], ["ⷘ", "ⷞ"], "〆", "〼", ["ぁ", "ゖ"], "ゟ", ["ァ", "ヺ"], "ヿ", ["ㄅ", "ㄭ"], ["ㄱ", "ㆎ"], ["ㆠ", "ㆺ"], ["ㇰ", "ㇿ"], ["㐀", "䶵"], ["一", "鿕"], ["ꀀ", "ꀔ"], ["ꀖ", "ꒌ"], ["ꓐ", "ꓷ"], ["ꔀ", "ꘋ"], ["ꘐ", "ꘟ"], ["ꘪ", "ꘫ"], "ꙮ", ["ꚠ", "ꛥ"], "ꞏ", "ꟷ", ["ꟻ", "ꠁ"], ["ꠃ", "ꠅ"], ["ꠇ", "ꠊ"], ["ꠌ", "ꠢ"], ["ꡀ", "ꡳ"], ["ꢂ", "ꢳ"], ["ꣲ", "ꣷ"], "ꣻ", "ꣽ", ["ꤊ", "ꤥ"], ["ꤰ", "ꥆ"], ["ꥠ", "ꥼ"], ["ꦄ", "ꦲ"], ["ꧠ", "ꧤ"], ["ꧧ", "ꧯ"], ["ꧺ", "ꧾ"], ["ꨀ", "ꨨ"], ["ꩀ", "ꩂ"], ["ꩄ", "ꩋ"], ["ꩠ", "ꩯ"], ["ꩱ", "ꩶ"], "ꩺ", ["ꩾ", "ꪯ"], "ꪱ", ["ꪵ", "ꪶ"], ["ꪹ", "ꪽ"], "ꫀ", "ꫂ", ["ꫛ", "ꫜ"], ["ꫠ", "ꫪ"], "ꫲ", ["ꬁ", "ꬆ"], ["ꬉ", "ꬎ"], ["ꬑ", "ꬖ"], ["ꬠ", "ꬦ"], ["ꬨ", "ꬮ"], ["ꯀ", "ꯢ"], ["가", "힣"], ["ힰ", "ퟆ"], ["ퟋ", "ퟻ"], ["豈", "舘"], ["並", "龎"], "יִ", ["ײַ", "ﬨ"], ["שׁ", "זּ"], ["טּ", "לּ"], "מּ", ["נּ", "סּ"], ["ףּ", "פּ"], ["צּ", "ﮱ"], ["ﯓ", "ﴽ"], ["ﵐ", "ﶏ"], ["ﶒ", "ﷇ"], ["ﷰ", "ﷻ"], ["ﹰ", "ﹴ"], ["ﹶ", "ﻼ"], ["ｦ", "ｯ"], ["ｱ", "ﾝ"], ["ﾠ", "ﾾ"], ["ￂ", "ￇ"], ["ￊ", "ￏ"], ["ￒ", "ￗ"], ["ￚ", "ￜ"]], !1, !1),
      Tu = Ht(["ǅ", "ǈ", "ǋ", "ǲ", ["ᾈ", "ᾏ"], ["ᾘ", "ᾟ"], ["ᾨ", "ᾯ"], "ᾼ", "ῌ", "ῼ"], !1, !1),
      Iu = Ht([["A", "Z"], ["À", "Ö"], ["Ø", "Þ"], "Ā", "Ă", "Ą", "Ć", "Ĉ", "Ċ", "Č", "Ď", "Đ", "Ē", "Ĕ", "Ė", "Ę", "Ě", "Ĝ", "Ğ", "Ġ", "Ģ", "Ĥ", "Ħ", "Ĩ", "Ī", "Ĭ", "Į", "İ", "Ĳ", "Ĵ", "Ķ", "Ĺ", "Ļ", "Ľ", "Ŀ", "Ł", "Ń", "Ņ", "Ň", "Ŋ", "Ō", "Ŏ", "Ő", "Œ", "Ŕ", "Ŗ", "Ř", "Ś", "Ŝ", "Ş", "Š", "Ţ", "Ť", "Ŧ", "Ũ", "Ū", "Ŭ", "Ů", "Ű", "Ų", "Ŵ", "Ŷ", ["Ÿ", "Ź"], "Ż", "Ž", ["Ɓ", "Ƃ"], "Ƅ", ["Ɔ", "Ƈ"], ["Ɖ", "Ƌ"], ["Ǝ", "Ƒ"], ["Ɠ", "Ɣ"], ["Ɩ", "Ƙ"], ["Ɯ", "Ɲ"], ["Ɵ", "Ơ"], "Ƣ", "Ƥ", ["Ʀ", "Ƨ"], "Ʃ", "Ƭ", ["Ʈ", "Ư"], ["Ʊ", "Ƴ"], "Ƶ", ["Ʒ", "Ƹ"], "Ƽ", "Ǆ", "Ǉ", "Ǌ", "Ǎ", "Ǐ", "Ǒ", "Ǔ", "Ǖ", "Ǘ", "Ǚ", "Ǜ", "Ǟ", "Ǡ", "Ǣ", "Ǥ", "Ǧ", "Ǩ", "Ǫ", "Ǭ", "Ǯ", "Ǳ", "Ǵ", ["Ƕ", "Ǹ"], "Ǻ", "Ǽ", "Ǿ", "Ȁ", "Ȃ", "Ȅ", "Ȇ", "Ȉ", "Ȋ", "Ȍ", "Ȏ", "Ȑ", "Ȓ", "Ȕ", "Ȗ", "Ș", "Ț", "Ȝ", "Ȟ", "Ƞ", "Ȣ", "Ȥ", "Ȧ", "Ȩ", "Ȫ", "Ȭ", "Ȯ", "Ȱ", "Ȳ", ["Ⱥ", "Ȼ"], ["Ƚ", "Ⱦ"], "Ɂ", ["Ƀ", "Ɇ"], "Ɉ", "Ɋ", "Ɍ", "Ɏ", "Ͱ", "Ͳ", "Ͷ", "Ϳ", "Ά", ["Έ", "Ί"], "Ό", ["Ύ", "Ώ"], ["Α", "Ρ"], ["Σ", "Ϋ"], "Ϗ", ["ϒ", "ϔ"], "Ϙ", "Ϛ", "Ϝ", "Ϟ", "Ϡ", "Ϣ", "Ϥ", "Ϧ", "Ϩ", "Ϫ", "Ϭ", "Ϯ", "ϴ", "Ϸ", ["Ϲ", "Ϻ"], ["Ͻ", "Я"], "Ѡ", "Ѣ", "Ѥ", "Ѧ", "Ѩ", "Ѫ", "Ѭ", "Ѯ", "Ѱ", "Ѳ", "Ѵ", "Ѷ", "Ѹ", "Ѻ", "Ѽ", "Ѿ", "Ҁ", "Ҋ", "Ҍ", "Ҏ", "Ґ", "Ғ", "Ҕ", "Җ", "Ҙ", "Қ", "Ҝ", "Ҟ", "Ҡ", "Ң", "Ҥ", "Ҧ", "Ҩ", "Ҫ", "Ҭ", "Ү", "Ұ", "Ҳ", "Ҵ", "Ҷ", "Ҹ", "Һ", "Ҽ", "Ҿ", ["Ӏ", "Ӂ"], "Ӄ", "Ӆ", "Ӈ", "Ӊ", "Ӌ", "Ӎ", "Ӑ", "Ӓ", "Ӕ", "Ӗ", "Ә", "Ӛ", "Ӝ", "Ӟ", "Ӡ", "Ӣ", "Ӥ", "Ӧ", "Ө", "Ӫ", "Ӭ", "Ӯ", "Ӱ", "Ӳ", "Ӵ", "Ӷ", "Ӹ", "Ӻ", "Ӽ", "Ӿ", "Ԁ", "Ԃ", "Ԅ", "Ԇ", "Ԉ", "Ԋ", "Ԍ", "Ԏ", "Ԑ", "Ԓ", "Ԕ", "Ԗ", "Ԙ", "Ԛ", "Ԝ", "Ԟ", "Ԡ", "Ԣ", "Ԥ", "Ԧ", "Ԩ", "Ԫ", "Ԭ", "Ԯ", ["Ա", "Ֆ"], ["Ⴀ", "Ⴥ"], "Ⴧ", "Ⴭ", ["Ꭰ", "Ᏽ"], "Ḁ", "Ḃ", "Ḅ", "Ḇ", "Ḉ", "Ḋ", "Ḍ", "Ḏ", "Ḑ", "Ḓ", "Ḕ", "Ḗ", "Ḙ", "Ḛ", "Ḝ", "Ḟ", "Ḡ", "Ḣ", "Ḥ", "Ḧ", "Ḩ", "Ḫ", "Ḭ", "Ḯ", "Ḱ", "Ḳ", "Ḵ", "Ḷ", "Ḹ", "Ḻ", "Ḽ", "Ḿ", "Ṁ", "Ṃ", "Ṅ", "Ṇ", "Ṉ", "Ṋ", "Ṍ", "Ṏ", "Ṑ", "Ṓ", "Ṕ", "Ṗ", "Ṙ", "Ṛ", "Ṝ", "Ṟ", "Ṡ", "Ṣ", "Ṥ", "Ṧ", "Ṩ", "Ṫ", "Ṭ", "Ṯ", "Ṱ", "Ṳ", "Ṵ", "Ṷ", "Ṹ", "Ṻ", "Ṽ", "Ṿ", "Ẁ", "Ẃ", "Ẅ", "Ẇ", "Ẉ", "Ẋ", "Ẍ", "Ẏ", "Ẑ", "Ẓ", "Ẕ", "ẞ", "Ạ", "Ả", "Ấ", "Ầ", "Ẩ", "Ẫ", "Ậ", "Ắ", "Ằ", "Ẳ", "Ẵ", "Ặ", "Ẹ", "Ẻ", "Ẽ", "Ế", "Ề", "Ể", "Ễ", "Ệ", "Ỉ", "Ị", "Ọ", "Ỏ", "Ố", "Ồ", "Ổ", "Ỗ", "Ộ", "Ớ", "Ờ", "Ở", "Ỡ", "Ợ", "Ụ", "Ủ", "Ứ", "Ừ", "Ử", "Ữ", "Ự", "Ỳ", "Ỵ", "Ỷ", "Ỹ", "Ỻ", "Ỽ", "Ỿ", ["Ἀ", "Ἇ"], ["Ἐ", "Ἕ"], ["Ἠ", "Ἧ"], ["Ἰ", "Ἷ"], ["Ὀ", "Ὅ"], "Ὑ", "Ὓ", "Ὕ", "Ὗ", ["Ὠ", "Ὧ"], ["Ᾰ", "Ά"], ["Ὲ", "Ή"], ["Ῐ", "Ί"], ["Ῠ", "Ῥ"], ["Ὸ", "Ώ"], "ℂ", "ℇ", ["ℋ", "ℍ"], ["ℐ", "ℒ"], "ℕ", ["ℙ", "ℝ"], "ℤ", "Ω", "ℨ", ["K", "ℭ"], ["ℰ", "ℳ"], ["ℾ", "ℿ"], "ⅅ", "Ↄ", ["Ⰰ", "Ⱞ"], "Ⱡ", ["Ɫ", "Ɽ"], "Ⱨ", "Ⱪ", "Ⱬ", ["Ɑ", "Ɒ"], "Ⱳ", "Ⱶ", ["Ȿ", "Ⲁ"], "Ⲃ", "Ⲅ", "Ⲇ", "Ⲉ", "Ⲋ", "Ⲍ", "Ⲏ", "Ⲑ", "Ⲓ", "Ⲕ", "Ⲗ", "Ⲙ", "Ⲛ", "Ⲝ", "Ⲟ", "Ⲡ", "Ⲣ", "Ⲥ", "Ⲧ", "Ⲩ", "Ⲫ", "Ⲭ", "Ⲯ", "Ⲱ", "Ⲳ", "Ⲵ", "Ⲷ", "Ⲹ", "Ⲻ", "Ⲽ", "Ⲿ", "Ⳁ", "Ⳃ", "Ⳅ", "Ⳇ", "Ⳉ", "Ⳋ", "Ⳍ", "Ⳏ", "Ⳑ", "Ⳓ", "Ⳕ", "Ⳗ", "Ⳙ", "Ⳛ", "Ⳝ", "Ⳟ", "Ⳡ", "Ⳣ", "Ⳬ", "Ⳮ", "Ⳳ", "Ꙁ", "Ꙃ", "Ꙅ", "Ꙇ", "Ꙉ", "Ꙋ", "Ꙍ", "Ꙏ", "Ꙑ", "Ꙓ", "Ꙕ", "Ꙗ", "Ꙙ", "Ꙛ", "Ꙝ", "Ꙟ", "Ꙡ", "Ꙣ", "Ꙥ", "Ꙧ", "Ꙩ", "Ꙫ", "Ꙭ", "Ꚁ", "Ꚃ", "Ꚅ", "Ꚇ", "Ꚉ", "Ꚋ", "Ꚍ", "Ꚏ", "Ꚑ", "Ꚓ", "Ꚕ", "Ꚗ", "Ꚙ", "Ꚛ", "Ꜣ", "Ꜥ", "Ꜧ", "Ꜩ", "Ꜫ", "Ꜭ", "Ꜯ", "Ꜳ", "Ꜵ", "Ꜷ", "Ꜹ", "Ꜻ", "Ꜽ", "Ꜿ", "Ꝁ", "Ꝃ", "Ꝅ", "Ꝇ", "Ꝉ", "Ꝋ", "Ꝍ", "Ꝏ", "Ꝑ", "Ꝓ", "Ꝕ", "Ꝗ", "Ꝙ", "Ꝛ", "Ꝝ", "Ꝟ", "Ꝡ", "Ꝣ", "Ꝥ", "Ꝧ", "Ꝩ", "Ꝫ", "Ꝭ", "Ꝯ", "Ꝺ", "Ꝼ", ["Ᵹ", "Ꝿ"], "Ꞁ", "Ꞃ", "Ꞅ", "Ꞇ", "Ꞌ", "Ɥ", "Ꞑ", "Ꞓ", "Ꞗ", "Ꞙ", "Ꞛ", "Ꞝ", "Ꞟ", "Ꞡ", "Ꞣ", "Ꞥ", "Ꞧ", "Ꞩ", ["Ɦ", "Ɬ"], ["Ʞ", "Ꞵ"], "Ꞷ", ["Ａ", "Ｚ"]], !1, !1),
      wu = Ht(["ः", "ऻ", ["ा", "ी"], ["ॉ", "ौ"], ["ॎ", "ॏ"], ["ং", "ঃ"], ["া", "ী"], ["ে", "ৈ"], ["ো", "ৌ"], "ৗ", "ਃ", ["ਾ", "ੀ"], "ઃ", ["ા", "ી"], "ૉ", ["ો", "ૌ"], ["ଂ", "ଃ"], "ା", "ୀ", ["େ", "ୈ"], ["ୋ", "ୌ"], "ୗ", ["ா", "ி"], ["ு", "ூ"], ["ெ", "ை"], ["ொ", "ௌ"], "ௗ", ["ఁ", "ః"], ["ు", "ౄ"], ["ಂ", "ಃ"], "ಾ", ["ೀ", "ೄ"], ["ೇ", "ೈ"], ["ೊ", "ೋ"], ["ೕ", "ೖ"], ["ം", "ഃ"], ["ാ", "ീ"], ["െ", "ൈ"], ["ൊ", "ൌ"], "ൗ", ["ං", "ඃ"], ["ා", "ෑ"], ["ෘ", "ෟ"], ["ෲ", "ෳ"], ["༾", "༿"], "ཿ", ["ါ", "ာ"], "ေ", "း", ["ျ", "ြ"], ["ၖ", "ၗ"], ["ၢ", "ၤ"], ["ၧ", "ၭ"], ["ႃ", "ႄ"], ["ႇ", "ႌ"], "ႏ", ["ႚ", "ႜ"], "ា", ["ើ", "ៅ"], ["ះ", "ៈ"], ["ᤣ", "ᤦ"], ["ᤩ", "ᤫ"], ["ᤰ", "ᤱ"], ["ᤳ", "ᤸ"], ["ᨙ", "ᨚ"], "ᩕ", "ᩗ", "ᩡ", ["ᩣ", "ᩤ"], ["ᩭ", "ᩲ"], "ᬄ", "ᬵ", "ᬻ", ["ᬽ", "ᭁ"], ["ᭃ", "᭄"], "ᮂ", "ᮡ", ["ᮦ", "ᮧ"], "᮪", "ᯧ", ["ᯪ", "ᯬ"], "ᯮ", ["᯲", "᯳"], ["ᰤ", "ᰫ"], ["ᰴ", "ᰵ"], "᳡", ["ᳲ", "ᳳ"], ["〮", "〯"], ["ꠣ", "ꠤ"], "ꠧ", ["ꢀ", "ꢁ"], ["ꢴ", "ꣃ"], ["ꥒ", "꥓"], "ꦃ", ["ꦴ", "ꦵ"], ["ꦺ", "ꦻ"], ["ꦽ", "꧀"], ["ꨯ", "ꨰ"], ["ꨳ", "ꨴ"], "ꩍ", "ꩻ", "ꩽ", "ꫫ", ["ꫮ", "ꫯ"], "ꫵ", ["ꯣ", "ꯤ"], ["ꯦ", "ꯧ"], ["ꯩ", "ꯪ"], "꯬"], !1, !1),
      Nu = Ht([["̀", "ͯ"], ["҃", "҇"], ["֑", "ֽ"], "ֿ", ["ׁ", "ׂ"], ["ׄ", "ׅ"], "ׇ", ["ؐ", "ؚ"], ["ً", "ٟ"], "ٰ", ["ۖ", "ۜ"], ["۟", "ۤ"], ["ۧ", "ۨ"], ["۪", "ۭ"], "ܑ", ["ܰ", "݊"], ["ަ", "ް"], ["߫", "߳"], ["ࠖ", "࠙"], ["ࠛ", "ࠣ"], ["ࠥ", "ࠧ"], ["ࠩ", "࠭"], ["࡙", "࡛"], ["ࣣ", "ं"], "ऺ", "़", ["ु", "ै"], "्", ["॑", "ॗ"], ["ॢ", "ॣ"], "ঁ", "়", ["ু", "ৄ"], "্", ["ৢ", "ৣ"], ["ਁ", "ਂ"], "਼", ["ੁ", "ੂ"], ["ੇ", "ੈ"], ["ੋ", "੍"], "ੑ", ["ੰ", "ੱ"], "ੵ", ["ઁ", "ં"], "઼", ["ુ", "ૅ"], ["ે", "ૈ"], "્", ["ૢ", "ૣ"], "ଁ", "଼", "ି", ["ୁ", "ୄ"], "୍", "ୖ", ["ୢ", "ୣ"], "ஂ", "ீ", "்", "ఀ", ["ా", "ీ"], ["ె", "ై"], ["ొ", "్"], ["ౕ", "ౖ"], ["ౢ", "ౣ"], "ಁ", "಼", "ಿ", "ೆ", ["ೌ", "್"], ["ೢ", "ೣ"], "ഁ", ["ു", "ൄ"], "്", ["ൢ", "ൣ"], "්", ["ි", "ු"], "ූ", "ั", ["ิ", "ฺ"], ["็", "๎"], "ັ", ["ິ", "ູ"], ["ົ", "ຼ"], ["່", "ໍ"], ["༘", "༙"], "༵", "༷", "༹", ["ཱ", "ཾ"], ["ྀ", "྄"], ["྆", "྇"], ["ྍ", "ྗ"], ["ྙ", "ྼ"], "࿆", ["ိ", "ူ"], ["ဲ", "့"], ["္", "်"], ["ွ", "ှ"], ["ၘ", "ၙ"], ["ၞ", "ၠ"], ["ၱ", "ၴ"], "ႂ", ["ႅ", "ႆ"], "ႍ", "ႝ", ["፝", "፟"], ["ᜒ", "᜔"], ["ᜲ", "᜴"], ["ᝒ", "ᝓ"], ["ᝲ", "ᝳ"], ["឴", "឵"], ["ិ", "ួ"], "ំ", ["៉", "៓"], "៝", ["᠋", "᠍"], "ᢩ", ["ᤠ", "ᤢ"], ["ᤧ", "ᤨ"], "ᤲ", ["᤹", "᤻"], ["ᨗ", "ᨘ"], "ᨛ", "ᩖ", ["ᩘ", "ᩞ"], "᩠", "ᩢ", ["ᩥ", "ᩬ"], ["ᩳ", "᩼"], "᩿", ["᪰", "᪽"], ["ᬀ", "ᬃ"], "᬴", ["ᬶ", "ᬺ"], "ᬼ", "ᭂ", ["᭫", "᭳"], ["ᮀ", "ᮁ"], ["ᮢ", "ᮥ"], ["ᮨ", "ᮩ"], ["᮫", "ᮭ"], "᯦", ["ᯨ", "ᯩ"], "ᯭ", ["ᯯ", "ᯱ"], ["ᰬ", "ᰳ"], ["ᰶ", "᰷"], ["᳐", "᳒"], ["᳔", "᳠"], ["᳢", "᳨"], "᳭", "᳴", ["᳸", "᳹"], ["᷀", "᷵"], ["᷼", "᷿"], ["⃐", "⃜"], "⃡", ["⃥", "⃰"], ["⳯", "⳱"], "⵿", ["ⷠ", "ⷿ"], ["〪", "〭"], ["゙", "゚"], "꙯", ["ꙴ", "꙽"], ["ꚞ", "ꚟ"], ["꛰", "꛱"], "ꠂ", "꠆", "ꠋ", ["ꠥ", "ꠦ"], "꣄", ["꣠", "꣱"], ["ꤦ", "꤭"], ["ꥇ", "ꥑ"], ["ꦀ", "ꦂ"], "꦳", ["ꦶ", "ꦹ"], "ꦼ", "ꧥ", ["ꨩ", "ꨮ"], ["ꨱ", "ꨲ"], ["ꨵ", "ꨶ"], "ꩃ", "ꩌ", "ꩼ", "ꪰ", ["ꪲ", "ꪴ"], ["ꪷ", "ꪸ"], ["ꪾ", "꪿"], "꫁", ["ꫬ", "ꫭ"], "꫶", "ꯥ", "ꯨ", "꯭", "ﬞ", ["︀", "️"], ["︠", "︯"]], !1, !1),
      ku = Ht([["0", "9"], ["٠", "٩"], ["۰", "۹"], ["߀", "߉"], ["०", "९"], ["০", "৯"], ["੦", "੯"], ["૦", "૯"], ["୦", "୯"], ["௦", "௯"], ["౦", "౯"], ["೦", "೯"], ["൦", "൯"], ["෦", "෯"], ["๐", "๙"], ["໐", "໙"], ["༠", "༩"], ["၀", "၉"], ["႐", "႙"], ["០", "៩"], ["᠐", "᠙"], ["᥆", "᥏"], ["᧐", "᧙"], ["᪀", "᪉"], ["᪐", "᪙"], ["᭐", "᭙"], ["᮰", "᮹"], ["᱀", "᱉"], ["᱐", "᱙"], ["꘠", "꘩"], ["꣐", "꣙"], ["꤀", "꤉"], ["꧐", "꧙"], ["꧰", "꧹"], ["꩐", "꩙"], ["꯰", "꯹"], ["０", "９"]], !1, !1),
      Hu = Ht([["ᛮ", "ᛰ"], ["Ⅰ", "ↂ"], ["ↅ", "ↈ"], "〇", ["〡", "〩"], ["〸", "〺"], ["ꛦ", "ꛯ"]], !1, !1),
      Uu = Ht(["_", ["‿", "⁀"], "⁔", ["︳", "︴"], ["﹍", "﹏"], "＿"], !1, !1),
      ju = Ht([" ", " ", " ", [" ", " "], " ", " ", "　"], !1, !1),
      Gu = kt(";", !1),
      Vu = function (e, u, t) {
        return {
          type: "grammar",
          topLevelInitializer: e,
          initializer: u,
          rules: t,
          location: wt()
        };
      },
      Yu = function (e) {
        return {
          type: "top_level_initializer",
          code: e[0],
          codeLocation: e[1],
          location: wt()
        };
      },
      Wu = function (e) {
        return {
          type: "initializer",
          code: e[0],
          codeLocation: e[1],
          location: wt()
        };
      },
      zu = function (e, u, t) {
        return {
          type: "rule",
          name: e[0],
          nameLocation: e[1],
          expression: null !== u ? {
            type: "named",
            name: u,
            expression: t,
            location: wt()
          } : t,
          location: wt()
        };
      },
      Ju = function (e, u) {
        return u.length > 0 ? {
          type: "choice",
          alternatives: [e].concat(u),
          location: wt()
        } : e;
      },
      Qu = function (e, u) {
        return null !== u ? {
          type: "action",
          expression: e,
          code: u[0],
          codeLocation: u[1],
          location: wt()
        } : e;
      },
      qu = function (e, u) {
        return u.length > 0 || "labeled" === e.type && e.pick ? {
          type: "sequence",
          elements: [e].concat(u),
          location: wt()
        } : e;
      },
      Xu = function (e, u, t) {
        return t.type.startsWith("semantic_") && Nt('"@" cannot be used on a semantic predicate', e), {
          type: "labeled",
          label: null !== u ? u[0] : null,
          labelLocation: null !== u ? u[1] : e,
          pick: !0,
          expression: t,
          location: wt()
        };
      },
      Ku = function (e, u) {
        return {
          type: "labeled",
          label: e[0],
          labelLocation: e[1],
          expression: u,
          location: wt()
        };
      },
      Zu = function () {
        return wt();
      },
      et = function (e) {
        return Sr.indexOf(e[0]) >= 0 && Nt("Label can't be a reserved word \"".concat(e[0], '"'), e[1]), e;
      },
      ut = function (e, u) {
        return {
          type: OPS_TO_PREFIXED_TYPES[e],
          expression: u,
          location: wt()
        };
      },
      tt = function (e, u) {
        return {
          type: OPS_TO_SUFFIXED_TYPES[u],
          expression: e,
          location: wt()
        };
      },
      rt = function (e, u, t) {
        var r = u[0],
          n = u[1];
        return "constant" === n.type && 0 === n.value && Nt("The maximum count of repetitions of the rule must be > 0", n.location), {
          type: "repeated",
          min: r,
          max: n,
          expression: e,
          delimiter: t,
          location: wt()
        };
      },
      nt = function (e, u) {
        return [null !== e ? e : {
          type: "constant",
          value: 0
        }, null !== u ? u : {
          type: "constant",
          value: null
        }];
      },
      ot = function (e) {
        return [null, e];
      },
      at = function (e) {
        return {
          type: "constant",
          value: e,
          location: wt()
        };
      },
      it = function (e) {
        return {
          type: "variable",
          value: e[0],
          location: wt()
        };
      },
      st = function (e) {
        return {
          type: "function",
          value: e[0],
          codeLocation: e[1],
          location: wt()
        };
      },
      ct = function (e) {
        return "labeled" === e.type || "sequence" === e.type ? {
          type: "group",
          expression: e,
          location: wt()
        } : e;
      },
      lt = function (e) {
        return {
          type: "rule_ref",
          name: e[0],
          location: wt()
        };
      },
      pt = function (e, u) {
        return {
          type: OPS_TO_SEMANTIC_PREDICATE_TYPES[e],
          code: u[0],
          codeLocation: u[1],
          location: wt()
        };
      },
      At = function (e, u) {
        return [e + u.join(""), wt()];
      },
      ft = function (e, u) {
        return {
          type: "literal",
          value: e,
          ignoreCase: null !== u,
          location: wt()
        };
      },
      Et = function (e) {
        return e.join("");
      },
      ht = function (e) {
        return e.join("");
      },
      dt = function (e, u, t) {
        return {
          type: "class",
          parts: u.filter(function (e) {
            return "" !== e;
          }),
          inverted: null !== e,
          ignoreCase: null !== t,
          location: wt()
        };
      },
      Ct = function (u, t) {
        return u.charCodeAt(0) > t.charCodeAt(0) && Nt("Invalid character range: " + e.substring(Ot, Rt) + "."), [u, t];
      },
      gt = function () {
        return "";
      },
      mt = function () {
        return "\0";
      },
      Ft = function () {
        return "\b";
      },
      _t = function () {
        return "\f";
      },
      vt = function () {
        return "\n";
      },
      Bt = function () {
        return "\r";
      },
      Dt = function () {
        return "\t";
      },
      $t = function () {
        return "\v";
      },
      St = function (e) {
        return String.fromCharCode(parseInt(e, 16));
      },
      yt = function (e) {
        return String.fromCharCode(parseInt(e, 16));
      },
      Pt = function () {
        return {
          type: "any",
          location: wt()
        };
      },
      xt = function (e) {
        return [e, wt()];
      },
      bt = function (e) {
        return parseInt(e, 10);
      },
      Rt = 0,
      Ot = 0,
      Lt = [{
        line: 1,
        column: 1
      }],
      Mt = 0,
      Tt = [],
      It = 0;
    if ("startRule" in u) {
      if (!(u.startRule in o)) throw new Error("Can't start parsing from rule \"" + u.startRule + '".');
      a = o[u.startRule];
    }
    function wt() {
      return Gt(Ot, Rt);
    }
    function Nt(e, u) {
      throw function (e, u) {
        return new peg$SyntaxError(e, null, null, u);
      }(e, u = void 0 !== u ? u : Gt(Ot, Rt));
    }
    function kt(e, u) {
      return {
        type: "literal",
        text: e,
        ignoreCase: u
      };
    }
    function Ht(e, u, t) {
      return {
        type: "class",
        parts: e,
        inverted: u,
        ignoreCase: t
      };
    }
    function Ut(e) {
      return {
        type: "other",
        description: e
      };
    }
    function jt(u) {
      var t,
        r = Lt[u];
      if (r) return r;
      for (t = u - 1; !Lt[t];) t--;
      for (r = {
        line: (r = Lt[t]).line,
        column: r.column
      }; t < u;) 10 === e.charCodeAt(t) ? (r.line++, r.column = 1) : r.column++, t++;
      return Lt[u] = r, r;
    }
    function Gt(e, u, t) {
      var r = jt(e),
        o = jt(u),
        a = {
          source: n,
          start: {
            offset: e,
            line: r.line,
            column: r.column
          },
          end: {
            offset: u,
            line: o.line,
            column: o.column
          }
        };
      return t && n && "function" == typeof n.offset && (a.start = n.offset(a.start), a.end = n.offset(a.end)), a;
    }
    function Vt(e) {
      Rt < Mt || (Rt > Mt && (Mt = Rt, Tt = []), Tt.push(e));
    }
    function Yt() {
      var u, t, n, o, a, c;
      if (u = Rt, Dr(), t = Rt, n = function () {
        var u, t, n, o;
        return u = Rt, 123 === e.charCodeAt(Rt) ? (t = i, Rt++) : (t = r, 0 === It && Vt(_e)), t !== r && (n = vr()) !== r ? (125 === e.charCodeAt(Rt) ? (o = s, Rt++) : (o = r, 0 === It && Vt(ve)), o !== r && $r() !== r ? (Ot = u, u = Yu(n)) : (Rt = u, u = r)) : (Rt = u, u = r), u;
      }(), n !== r ? (o = Dr(), t = n) : (Rt = t, t = r), t === r && (t = null), n = Rt, o = function () {
        var e, u;
        return e = Rt, (u = vr()) !== r && $r() !== r ? (Ot = e, e = Wu(u)) : (Rt = e, e = r), e;
      }(), o !== r ? (a = Dr(), n = o) : (Rt = n, n = r), n === r && (n = null), o = [], a = Rt, (c = Wt()) !== r ? (Dr(), a = c) : (Rt = a, a = r), a !== r) for (; a !== r;) o.push(a), a = Rt, (c = Wt()) !== r ? (Dr(), a = c) : (Rt = a, a = r);else o = r;
      return o !== r ? (Ot = u, u = Vu(t, n, o)) : (Rt = u, u = r), u;
    }
    function Wt() {
      var u, t, n, o, a;
      return u = Rt, (t = sr()) !== r ? (Dr(), n = Rt, (o = pr()) !== r ? (Dr(), n = o) : (Rt = n, n = r), n === r && (n = null), 61 === e.charCodeAt(Rt) ? (o = c, Rt++) : (o = r, 0 === It && Vt(Be)), o !== r ? (Dr(), (a = zt()) !== r && $r() !== r ? (Ot = u, u = zu(t, n, a)) : (Rt = u, u = r)) : (Rt = u, u = r)) : (Rt = u, u = r), u;
    }
    function zt() {
      var u, t, n, o, a, i;
      if (u = Rt, (t = Jt()) !== r) {
        for (n = [], o = Rt, Dr(), 47 === e.charCodeAt(Rt) ? (a = l, Rt++) : (a = r, 0 === It && Vt(De)), a !== r ? (Dr(), (i = Jt()) !== r ? o = i : (Rt = o, o = r)) : (Rt = o, o = r); o !== r;) n.push(o), o = Rt, Dr(), 47 === e.charCodeAt(Rt) ? (a = l, Rt++) : (a = r, 0 === It && Vt(De)), a !== r ? (Dr(), (i = Jt()) !== r ? o = i : (Rt = o, o = r)) : (Rt = o, o = r);
        Ot = u, u = Ju(t, n);
      } else Rt = u, u = r;
      return u;
    }
    function Jt() {
      var e, u, t, n;
      return e = Rt, u = function () {
        var e, u, t, n, o;
        if (e = Rt, (u = Qt()) !== r) {
          for (t = [], n = Rt, Dr(), (o = Qt()) !== r ? n = o : (Rt = n, n = r); n !== r;) t.push(n), n = Rt, Dr(), (o = Qt()) !== r ? n = o : (Rt = n, n = r);
          Ot = e, e = qu(u, t);
        } else Rt = e, e = r;
        return e;
      }(), u !== r ? (t = Rt, Dr(), (n = vr()) !== r ? t = n : (Rt = t, t = r), t === r && (t = null), Ot = e, e = Qu(u, t)) : (Rt = e, e = r), e;
    }
    function Qt() {
      var u, t, n, o;
      return u = Rt, t = function () {
        var u, t;
        return u = Rt, 64 === e.charCodeAt(Rt) ? (t = p, Rt++) : (t = r, 0 === It && Vt($e)), t !== r && (Ot = u, t = Zu()), u = t;
      }(), t !== r ? ((n = qt()) === r && (n = null), (o = Xt()) !== r ? (Ot = u, u = Xu(t, n, o)) : (Rt = u, u = r)) : (Rt = u, u = r), u === r && (u = Rt, (t = qt()) !== r ? (n = Dr(), (o = Xt()) !== r ? (Ot = u, u = Ku(t, o)) : (Rt = u, u = r)) : (Rt = u, u = r), u === r && (u = Xt())), u;
    }
    function qt() {
      var u, t, n;
      return u = Rt, (t = sr()) !== r ? (Dr(), 58 === e.charCodeAt(Rt) ? (n = A, Rt++) : (n = r, 0 === It && Vt(Se)), n !== r ? (Ot = u, u = et(t)) : (Rt = u, u = r)) : (Rt = u, u = r), u;
    }
    function Xt() {
      var u, t, n;
      return u = Rt, t = function () {
        var u;
        return 36 === e.charCodeAt(Rt) ? (u = f, Rt++) : (u = r, 0 === It && Vt(ye)), u === r && (38 === e.charCodeAt(Rt) ? (u = E, Rt++) : (u = r, 0 === It && Vt(Pe)), u === r && (33 === e.charCodeAt(Rt) ? (u = h, Rt++) : (u = r, 0 === It && Vt(xe)))), u;
      }(), t !== r ? (Dr(), (n = Kt()) !== r ? (Ot = u, u = ut(t, n)) : (Rt = u, u = r)) : (Rt = u, u = r), u === r && (u = Kt()), u;
    }
    function Kt() {
      var u, t, n;
      return u = Rt, (t = er()) !== r ? (Dr(), n = function () {
        var u;
        return 63 === e.charCodeAt(Rt) ? (u = d, Rt++) : (u = r, 0 === It && Vt(be)), u === r && (42 === e.charCodeAt(Rt) ? (u = C, Rt++) : (u = r, 0 === It && Vt(Re)), u === r && (43 === e.charCodeAt(Rt) ? (u = g, Rt++) : (u = r, 0 === It && Vt(Oe)))), u;
      }(), n !== r ? (Ot = u, u = tt(t, n)) : (Rt = u, u = r)) : (Rt = u, u = r), u === r && (u = function () {
        var u, t, n, o, a, i, s;
        return u = Rt, (t = er()) !== r ? (Dr(), 124 === e.charCodeAt(Rt) ? (n = m, Rt++) : (n = r, 0 === It && Vt(Le)), n !== r ? (Dr(), o = function () {
          var u, t, n, o;
          return u = Rt, (t = Zt()) === r && (t = null), Dr(), e.substr(Rt, 2) === _ ? (n = _, Rt += 2) : (n = r, 0 === It && Vt(Te)), n !== r ? (Dr(), (o = Zt()) === r && (o = null), Ot = u, u = nt(t, o)) : (Rt = u, u = r), u === r && (u = Rt, (t = Zt()) !== r && (Ot = u, t = ot(t)), u = t), u;
        }(), o !== r ? (Dr(), a = Rt, 44 === e.charCodeAt(Rt) ? (i = F, Rt++) : (i = r, 0 === It && Vt(Me)), i !== r ? (Dr(), (s = zt()) !== r ? (Dr(), a = s) : (Rt = a, a = r)) : (Rt = a, a = r), a === r && (a = null), 124 === e.charCodeAt(Rt) ? (i = m, Rt++) : (i = r, 0 === It && Vt(Le)), i !== r ? (Ot = u, u = rt(t, o, a)) : (Rt = u, u = r)) : (Rt = u, u = r)) : (Rt = u, u = r)) : (Rt = u, u = r), u;
      }(), u === r && (u = er())), u;
    }
    function Zt() {
      var u, t;
      return u = Rt, t = function () {
        var u, t, n, o;
        if (u = Rt, t = Rt, n = [], (o = Fr()) !== r) for (; o !== r;) n.push(o), o = Fr();else n = r;
        return (t = n !== r ? e.substring(t, Rt) : n) !== r && (Ot = u, t = bt(t)), u = t;
      }(), t !== r && (Ot = u, t = at(t)), (u = t) === r && (u = Rt, (t = sr()) !== r && (Ot = u, t = it(t)), (u = t) === r && (u = Rt, (t = vr()) !== r && (Ot = u, t = st(t)), u = t)), u;
    }
    function er() {
      var u, t, n, o;
      return u = function () {
        var u, t, n;
        return It++, u = Rt, (t = pr()) !== r ? (105 === e.charCodeAt(Rt) ? (n = j, Rt++) : (n = r, 0 === It && Vt(cu)), n === r && (n = null), Ot = u, u = ft(t, n)) : (Rt = u, u = r), It--, u === r && (t = r, 0 === It && Vt(su)), u;
      }(), u === r && (u = function () {
        var u, t, n, o, a, i;
        if (It++, u = Rt, 91 === e.charCodeAt(Rt) ? (t = Y, Rt++) : (t = r, 0 === It && Vt(Eu)), t !== r) {
          for (94 === e.charCodeAt(Rt) ? (n = W, Rt++) : (n = r, 0 === It && Vt(hu)), n === r && (n = null), o = [], (a = Er()) === r && (a = hr()); a !== r;) o.push(a), (a = Er()) === r && (a = hr());
          93 === e.charCodeAt(Rt) ? (a = z, Rt++) : (a = r, 0 === It && Vt(du)), a !== r ? (105 === e.charCodeAt(Rt) ? (i = j, Rt++) : (i = r, 0 === It && Vt(cu)), i === r && (i = null), Ot = u, u = dt(n, o, i)) : (Rt = u, u = r);
        } else Rt = u, u = r;
        return It--, u === r && (t = r, 0 === It && Vt(fu)), u;
      }(), u === r && (u = function () {
        var u, t;
        return u = Rt, 46 === e.charCodeAt(Rt) ? (t = ne, Rt++) : (t = r, 0 === It && Vt(xu)), t !== r && (Ot = u, t = Pt()), u = t;
      }(), u === r && (u = function () {
        var u, t, n, o, a, i, s;
        return u = Rt, (t = sr()) !== r ? (n = Rt, It++, o = Rt, a = Dr(), i = Rt, (s = pr()) !== r ? i = s = [s, Dr()] : (Rt = i, i = r), i === r && (i = null), 61 === e.charCodeAt(Rt) ? (s = c, Rt++) : (s = r, 0 === It && Vt(Be)), s !== r ? o = a = [a, i, s] : (Rt = o, o = r), It--, o === r ? n = void 0 : (Rt = n, n = r), n !== r ? (Ot = u, u = lt(t)) : (Rt = u, u = r)) : (Rt = u, u = r), u;
      }(), u === r && (u = function () {
        var u, t, n;
        return u = Rt, t = function () {
          var u;
          return 38 === e.charCodeAt(Rt) ? (u = E, Rt++) : (u = r, 0 === It && Vt(Pe)), u === r && (33 === e.charCodeAt(Rt) ? (u = h, Rt++) : (u = r, 0 === It && Vt(xe))), u;
        }(), t !== r ? (Dr(), (n = vr()) !== r ? (Ot = u, u = pt(t, n)) : (Rt = u, u = r)) : (Rt = u, u = r), u;
      }(), u === r && (u = Rt, 40 === e.charCodeAt(Rt) ? (t = v, Rt++) : (t = r, 0 === It && Vt(Ie)), t !== r ? (Dr(), (n = zt()) !== r ? (Dr(), 41 === e.charCodeAt(Rt) ? (o = B, Rt++) : (o = r, 0 === It && Vt(we)), o !== r ? (Ot = u, u = ct(n)) : (Rt = u, u = r)) : (Rt = u, u = r)) : (Rt = u, u = r)))))), u;
    }
    function ur() {
      var u;
      return e.length > Rt ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Ne)), u;
    }
    function tr() {
      var u;
      return It++, 9 === e.charCodeAt(Rt) ? (u = D, Rt++) : (u = r, 0 === It && Vt(He)), u === r && (11 === e.charCodeAt(Rt) ? (u = $, Rt++) : (u = r, 0 === It && Vt(Ue)), u === r && (12 === e.charCodeAt(Rt) ? (u = S, Rt++) : (u = r, 0 === It && Vt(je)), u === r && (32 === e.charCodeAt(Rt) ? (u = y, Rt++) : (u = r, 0 === It && Vt(Ge)), u === r && (160 === e.charCodeAt(Rt) ? (u = P, Rt++) : (u = r, 0 === It && Vt(Ve)), u === r && (65279 === e.charCodeAt(Rt) ? (u = x, Rt++) : (u = r, 0 === It && Vt(Ye)), u === r && (u = function () {
        var u;
        return Fe.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(ju)), u;
      }())))))), It--, u === r && 0 === It && Vt(ke), u;
    }
    function rr() {
      var u;
      return ae.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(We)), u;
    }
    function nr() {
      var u;
      return It++, 10 === e.charCodeAt(Rt) ? (u = b, Rt++) : (u = r, 0 === It && Vt(Je)), u === r && (e.substr(Rt, 2) === R ? (u = R, Rt += 2) : (u = r, 0 === It && Vt(Qe)), u === r && (13 === e.charCodeAt(Rt) ? (u = O, Rt++) : (u = r, 0 === It && Vt(qe)), u === r && (8232 === e.charCodeAt(Rt) ? (u = L, Rt++) : (u = r, 0 === It && Vt(Xe)), u === r && (8233 === e.charCodeAt(Rt) ? (u = M, Rt++) : (u = r, 0 === It && Vt(Ke)))))), It--, u === r && 0 === It && Vt(ze), u;
    }
    function or() {
      var u;
      return It++, (u = function () {
        var u, t, n, o, a, i;
        if (u = Rt, e.substr(Rt, 2) === T ? (t = T, Rt += 2) : (t = r, 0 === It && Vt(eu)), t !== r) {
          for (n = [], o = Rt, a = Rt, It++, e.substr(Rt, 2) === I ? (i = I, Rt += 2) : (i = r, 0 === It && Vt(uu)), It--, i === r ? a = void 0 : (Rt = a, a = r), a !== r && (i = ur()) !== r ? o = a = [a, i] : (Rt = o, o = r); o !== r;) n.push(o), o = Rt, a = Rt, It++, e.substr(Rt, 2) === I ? (i = I, Rt += 2) : (i = r, 0 === It && Vt(uu)), It--, i === r ? a = void 0 : (Rt = a, a = r), a !== r && (i = ur()) !== r ? o = a = [a, i] : (Rt = o, o = r);
          e.substr(Rt, 2) === I ? (o = I, Rt += 2) : (o = r, 0 === It && Vt(uu)), o !== r ? u = t = [t, n, o] : (Rt = u, u = r);
        } else Rt = u, u = r;
        return u;
      }()) === r && (u = ir()), It--, u === r && 0 === It && Vt(Ze), u;
    }
    function ar() {
      var u, t, n, o, a, i;
      if (u = Rt, e.substr(Rt, 2) === T ? (t = T, Rt += 2) : (t = r, 0 === It && Vt(eu)), t !== r) {
        for (n = [], o = Rt, a = Rt, It++, e.substr(Rt, 2) === I ? (i = I, Rt += 2) : (i = r, 0 === It && Vt(uu)), i === r && (i = rr()), It--, i === r ? a = void 0 : (Rt = a, a = r), a !== r && (i = ur()) !== r ? o = a = [a, i] : (Rt = o, o = r); o !== r;) n.push(o), o = Rt, a = Rt, It++, e.substr(Rt, 2) === I ? (i = I, Rt += 2) : (i = r, 0 === It && Vt(uu)), i === r && (i = rr()), It--, i === r ? a = void 0 : (Rt = a, a = r), a !== r && (i = ur()) !== r ? o = a = [a, i] : (Rt = o, o = r);
        e.substr(Rt, 2) === I ? (o = I, Rt += 2) : (o = r, 0 === It && Vt(uu)), o !== r ? u = t = [t, n, o] : (Rt = u, u = r);
      } else Rt = u, u = r;
      return u;
    }
    function ir() {
      var u, t, n, o, a, i;
      if (u = Rt, e.substr(Rt, 2) === w ? (t = w, Rt += 2) : (t = r, 0 === It && Vt(tu)), t !== r) {
        for (n = [], o = Rt, a = Rt, It++, i = rr(), It--, i === r ? a = void 0 : (Rt = a, a = r), a !== r && (i = ur()) !== r ? o = a = [a, i] : (Rt = o, o = r); o !== r;) n.push(o), o = Rt, a = Rt, It++, i = rr(), It--, i === r ? a = void 0 : (Rt = a, a = r), a !== r && (i = ur()) !== r ? o = a = [a, i] : (Rt = o, o = r);
        u = t = [t, n];
      } else Rt = u, u = r;
      return u;
    }
    function sr() {
      var e, u, t, n;
      if (It++, e = Rt, (u = cr()) !== r) {
        for (t = [], n = lr(); n !== r;) t.push(n), n = lr();
        Ot = e, e = At(u, t);
      } else Rt = e, e = r;
      return It--, e === r && (u = r, 0 === It && Vt(ru)), e;
    }
    function cr() {
      var u, t, n;
      return (u = function () {
        var u;
        return (u = function () {
          var u;
          return Ee.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Iu)), u;
        }()) === r && (u = function () {
          var u;
          return le.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Ou)), u;
        }()) === r && (u = function () {
          var u;
          return fe.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Tu)), u;
        }()) === r && (u = function () {
          var u;
          return pe.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Lu)), u;
        }()) === r && (u = function () {
          var u;
          return Ae.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Mu)), u;
        }()) === r && (u = function () {
          var u;
          return ge.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Hu)), u;
        }()), u;
      }()) === r && (95 === e.charCodeAt(Rt) ? (u = N, Rt++) : (u = r, 0 === It && Vt(nu)), u === r && (u = Rt, 92 === e.charCodeAt(Rt) ? (t = k, Rt++) : (t = r, 0 === It && Vt(ou)), t !== r && (n = mr()) !== r ? u = n : (Rt = u, u = r))), u;
    }
    function lr() {
      var u;
      return (u = cr()) === r && (36 === e.charCodeAt(Rt) ? (u = f, Rt++) : (u = r, 0 === It && Vt(ye)), u === r && (u = function () {
        var u;
        return (u = function () {
          var u;
          return de.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Nu)), u;
        }()) === r && (u = function () {
          var u;
          return he.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(wu)), u;
        }()), u;
      }()) === r && (u = function () {
        var u;
        return Ce.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(ku)), u;
      }()) === r && (u = function () {
        var u;
        return me.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Uu)), u;
      }()) === r && (8204 === e.charCodeAt(Rt) ? (u = H, Rt++) : (u = r, 0 === It && Vt(au)), u === r && (8205 === e.charCodeAt(Rt) ? (u = U, Rt++) : (u = r, 0 === It && Vt(iu))))), u;
    }
    function pr() {
      var u, t, n, o;
      if (It++, u = Rt, 34 === e.charCodeAt(Rt) ? (t = G, Rt++) : (t = r, 0 === It && Vt(pu)), t !== r) {
        for (n = [], o = Ar(); o !== r;) n.push(o), o = Ar();
        34 === e.charCodeAt(Rt) ? (o = G, Rt++) : (o = r, 0 === It && Vt(pu)), o !== r ? (Ot = u, u = Et(n)) : (Rt = u, u = r);
      } else Rt = u, u = r;
      if (u === r) if (u = Rt, 39 === e.charCodeAt(Rt) ? (t = V, Rt++) : (t = r, 0 === It && Vt(Au)), t !== r) {
        for (n = [], o = fr(); o !== r;) n.push(o), o = fr();
        39 === e.charCodeAt(Rt) ? (o = V, Rt++) : (o = r, 0 === It && Vt(Au)), o !== r ? (Ot = u, u = ht(n)) : (Rt = u, u = r);
      } else Rt = u, u = r;
      return It--, u === r && (t = r, 0 === It && Vt(lu)), u;
    }
    function Ar() {
      var u, t, n, o;
      return u = Rt, t = Rt, n = Rt, It++, 34 === e.charCodeAt(Rt) ? (o = G, Rt++) : (o = r, 0 === It && Vt(pu)), o === r && (92 === e.charCodeAt(Rt) ? (o = k, Rt++) : (o = r, 0 === It && Vt(ou)), o === r && (o = rr())), It--, o === r ? n = void 0 : (Rt = n, n = r), n !== r && (o = ur()) !== r ? t = n = [n, o] : (Rt = t, t = r), (u = t !== r ? e.substring(u, Rt) : t) === r && (u = Rt, 92 === e.charCodeAt(Rt) ? (t = k, Rt++) : (t = r, 0 === It && Vt(ou)), t !== r && (n = Cr()) !== r ? u = n : (Rt = u, u = r), u === r && (u = dr())), u;
    }
    function fr() {
      var u, t, n, o;
      return u = Rt, t = Rt, n = Rt, It++, 39 === e.charCodeAt(Rt) ? (o = V, Rt++) : (o = r, 0 === It && Vt(Au)), o === r && (92 === e.charCodeAt(Rt) ? (o = k, Rt++) : (o = r, 0 === It && Vt(ou)), o === r && (o = rr())), It--, o === r ? n = void 0 : (Rt = n, n = r), n !== r && (o = ur()) !== r ? t = n = [n, o] : (Rt = t, t = r), (u = t !== r ? e.substring(u, Rt) : t) === r && (u = Rt, 92 === e.charCodeAt(Rt) ? (t = k, Rt++) : (t = r, 0 === It && Vt(ou)), t !== r && (n = Cr()) !== r ? u = n : (Rt = u, u = r), u === r && (u = dr())), u;
    }
    function Er() {
      var u, t, n, o;
      return u = Rt, (t = hr()) !== r ? (45 === e.charCodeAt(Rt) ? (n = J, Rt++) : (n = r, 0 === It && Vt(Cu)), n !== r && (o = hr()) !== r ? (Ot = u, u = Ct(t, o)) : (Rt = u, u = r)) : (Rt = u, u = r), u;
    }
    function hr() {
      var u, t, n, o;
      return u = Rt, t = Rt, n = Rt, It++, 93 === e.charCodeAt(Rt) ? (o = z, Rt++) : (o = r, 0 === It && Vt(du)), o === r && (92 === e.charCodeAt(Rt) ? (o = k, Rt++) : (o = r, 0 === It && Vt(ou)), o === r && (o = rr())), It--, o === r ? n = void 0 : (Rt = n, n = r), n !== r && (o = ur()) !== r ? t = n = [n, o] : (Rt = t, t = r), (u = t !== r ? e.substring(u, Rt) : t) === r && (u = Rt, 92 === e.charCodeAt(Rt) ? (t = k, Rt++) : (t = r, 0 === It && Vt(ou)), t !== r && (n = Cr()) !== r ? u = n : (Rt = u, u = r), u === r && (u = dr())), u;
    }
    function dr() {
      var u, t;
      return u = Rt, 92 === e.charCodeAt(Rt) ? (t = k, Rt++) : (t = r, 0 === It && Vt(ou)), t !== r && nr() !== r ? (Ot = u, u = gt()) : (Rt = u, u = r), u;
    }
    function Cr() {
      var u, t, n, o;
      return u = function () {
        var u;
        return (u = gr()) === r && (u = function () {
          var u, t, n, o;
          return u = Rt, t = Rt, n = Rt, It++, o = function () {
            var u;
            return (u = gr()) === r && (u = Fr()) === r && (120 === e.charCodeAt(Rt) ? (u = te, Rt++) : (u = r, 0 === It && Vt($u)), u === r && (117 === e.charCodeAt(Rt) ? (u = re, Rt++) : (u = r, 0 === It && Vt(Su)))), u;
          }(), o === r && (o = rr()), It--, o === r ? n = void 0 : (Rt = n, n = r), n !== r && (o = ur()) !== r ? t = n = [n, o] : (Rt = t, t = r), u = t !== r ? e.substring(u, Rt) : t;
        }()), u;
      }(), u === r && (u = Rt, 48 === e.charCodeAt(Rt) ? (t = Q, Rt++) : (t = r, 0 === It && Vt(gu)), t !== r ? (n = Rt, It++, o = Fr(), It--, o === r ? n = void 0 : (Rt = n, n = r), n !== r ? (Ot = u, u = mt()) : (Rt = u, u = r)) : (Rt = u, u = r), u === r && (u = function () {
        var u, t, n, o, a, i;
        return u = Rt, 120 === e.charCodeAt(Rt) ? (t = te, Rt++) : (t = r, 0 === It && Vt($u)), t !== r ? (n = Rt, o = Rt, (a = _r()) !== r && (i = _r()) !== r ? o = a = [a, i] : (Rt = o, o = r), (n = o !== r ? e.substring(n, Rt) : o) !== r ? (Ot = u, u = St(n)) : (Rt = u, u = r)) : (Rt = u, u = r), u;
      }(), u === r && (u = mr()))), u;
    }
    function gr() {
      var u, t;
      return 39 === e.charCodeAt(Rt) ? (u = V, Rt++) : (u = r, 0 === It && Vt(Au)), u === r && (34 === e.charCodeAt(Rt) ? (u = G, Rt++) : (u = r, 0 === It && Vt(pu)), u === r && (92 === e.charCodeAt(Rt) ? (u = k, Rt++) : (u = r, 0 === It && Vt(ou)), u === r && (u = Rt, 98 === e.charCodeAt(Rt) ? (t = q, Rt++) : (t = r, 0 === It && Vt(mu)), t !== r && (Ot = u, t = Ft()), (u = t) === r && (u = Rt, 102 === e.charCodeAt(Rt) ? (t = X, Rt++) : (t = r, 0 === It && Vt(Fu)), t !== r && (Ot = u, t = _t()), (u = t) === r && (u = Rt, 110 === e.charCodeAt(Rt) ? (t = K, Rt++) : (t = r, 0 === It && Vt(_u)), t !== r && (Ot = u, t = vt()), (u = t) === r && (u = Rt, 114 === e.charCodeAt(Rt) ? (t = Z, Rt++) : (t = r, 0 === It && Vt(vu)), t !== r && (Ot = u, t = Bt()), (u = t) === r && (u = Rt, 116 === e.charCodeAt(Rt) ? (t = ee, Rt++) : (t = r, 0 === It && Vt(Bu)), t !== r && (Ot = u, t = Dt()), (u = t) === r && (u = Rt, 118 === e.charCodeAt(Rt) ? (t = ue, Rt++) : (t = r, 0 === It && Vt(Du)), t !== r && (Ot = u, t = $t()), u = t)))))))), u;
    }
    function mr() {
      var u, t, n, o, a, i, s, c;
      return u = Rt, 117 === e.charCodeAt(Rt) ? (t = re, Rt++) : (t = r, 0 === It && Vt(Su)), t !== r ? (n = Rt, o = Rt, (a = _r()) !== r && (i = _r()) !== r && (s = _r()) !== r && (c = _r()) !== r ? o = a = [a, i, s, c] : (Rt = o, o = r), (n = o !== r ? e.substring(n, Rt) : o) !== r ? (Ot = u, u = yt(n)) : (Rt = u, u = r)) : (Rt = u, u = r), u;
    }
    function Fr() {
      var u;
      return ie.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(yu)), u;
    }
    function _r() {
      var u;
      return se.test(e.charAt(Rt)) ? (u = e.charAt(Rt), Rt++) : (u = r, 0 === It && Vt(Pu)), u;
    }
    function vr() {
      var u, t, n, o;
      return It++, u = Rt, 123 === e.charCodeAt(Rt) ? (t = i, Rt++) : (t = r, 0 === It && Vt(_e)), t !== r ? (n = function () {
        var e, u;
        return e = Rt, u = Br(), Ot = e, e = u = xt(u);
      }(), 125 === e.charCodeAt(Rt) ? (o = s, Rt++) : (o = r, 0 === It && Vt(ve)), o !== r ? u = n : (Rt = u, u = r)) : (Rt = u, u = r), It--, u === r && (t = r, 0 === It && Vt(bu)), u;
    }
    function Br() {
      var u, t, n, o, a, c;
      if (u = Rt, t = [], n = [], o = Rt, a = Rt, It++, ce.test(e.charAt(Rt)) ? (c = e.charAt(Rt), Rt++) : (c = r, 0 === It && Vt(Ru)), It--, c === r ? a = void 0 : (Rt = a, a = r), a !== r && (c = ur()) !== r ? o = a = [a, c] : (Rt = o, o = r), o !== r) for (; o !== r;) n.push(o), o = Rt, a = Rt, It++, ce.test(e.charAt(Rt)) ? (c = e.charAt(Rt), Rt++) : (c = r, 0 === It && Vt(Ru)), It--, c === r ? a = void 0 : (Rt = a, a = r), a !== r && (c = ur()) !== r ? o = a = [a, c] : (Rt = o, o = r);else n = r;
      for (n === r && (n = Rt, 123 === e.charCodeAt(Rt) ? (o = i, Rt++) : (o = r, 0 === It && Vt(_e)), o !== r ? (a = Br(), 125 === e.charCodeAt(Rt) ? (c = s, Rt++) : (c = r, 0 === It && Vt(ve)), c !== r ? n = o = [o, a, c] : (Rt = n, n = r)) : (Rt = n, n = r)); n !== r;) {
        if (t.push(n), n = [], o = Rt, a = Rt, It++, ce.test(e.charAt(Rt)) ? (c = e.charAt(Rt), Rt++) : (c = r, 0 === It && Vt(Ru)), It--, c === r ? a = void 0 : (Rt = a, a = r), a !== r && (c = ur()) !== r ? o = a = [a, c] : (Rt = o, o = r), o !== r) for (; o !== r;) n.push(o), o = Rt, a = Rt, It++, ce.test(e.charAt(Rt)) ? (c = e.charAt(Rt), Rt++) : (c = r, 0 === It && Vt(Ru)), It--, c === r ? a = void 0 : (Rt = a, a = r), a !== r && (c = ur()) !== r ? o = a = [a, c] : (Rt = o, o = r);else n = r;
        n === r && (n = Rt, 123 === e.charCodeAt(Rt) ? (o = i, Rt++) : (o = r, 0 === It && Vt(_e)), o !== r ? (a = Br(), 125 === e.charCodeAt(Rt) ? (c = s, Rt++) : (c = r, 0 === It && Vt(ve)), c !== r ? n = o = [o, a, c] : (Rt = n, n = r)) : (Rt = n, n = r));
      }
      return e.substring(u, Rt);
    }
    function Dr() {
      var e, u;
      for (e = [], (u = tr()) === r && (u = nr()) === r && (u = or()); u !== r;) e.push(u), (u = tr()) === r && (u = nr()) === r && (u = or());
      return e;
    }
    function $r() {
      var u, t, n, o;
      if (u = [], t = Rt, n = Dr(), 59 === e.charCodeAt(Rt) ? (o = oe, Rt++) : (o = r, 0 === It && Vt(Gu)), o !== r ? t = n = [n, o] : (Rt = t, t = r), t !== r) for (; t !== r;) u.push(t), t = Rt, n = Dr(), 59 === e.charCodeAt(Rt) ? (o = oe, Rt++) : (o = r, 0 === It && Vt(Gu)), o !== r ? t = n = [n, o] : (Rt = t, t = r);else u = r;
      return u === r && (u = Rt, t = function () {
        var e, u;
        for (e = [], (u = tr()) === r && (u = ar()); u !== r;) e.push(u), (u = tr()) === r && (u = ar());
        return e;
      }(), (n = ir()) === r && (n = null), (o = nr()) !== r ? u = t = [t, n, o] : (Rt = u, u = r), u === r && (u = Rt, t = Dr(), n = function () {
        var u, t;
        return u = Rt, It++, e.length > Rt ? (t = e.charAt(Rt), Rt++) : (t = r, 0 === It && Vt(Ne)), It--, t === r ? u = void 0 : (Rt = u, u = r), u;
      }(), n !== r ? u = t = [t, n] : (Rt = u, u = r))), u;
    }
    var Sr = u.reservedWords || [];
    if ((t = a()) !== r && Rt === e.length) return t;
    throw t !== r && Rt < e.length && Vt({
      type: "end"
    }), function (e, u, t) {
      return new peg$SyntaxError(peg$SyntaxError.buildMessage(e, u), e, u, t);
    }(Tt, Mt < e.length ? e.charAt(Mt) : null, Mt < e.length ? Gt(Mt, Mt + 1) : Gt(Mt, Mt));
  }
  peg$subclass(peg$SyntaxError, Error), peg$SyntaxError.prototype.format = function (e) {
    var u = "Error: " + this.message;
    if (this.location) {
      var t,
        r = null;
      for (t = 0; t < e.length; t++) if (e[t].source === this.location.source) {
        r = e[t].text.split(/\r\n|\n|\r/g);
        break;
      }
      var n = this.location.start,
        o = this.location.source && "function" == typeof this.location.source.offset ? this.location.source.offset(n) : n,
        a = this.location.source + ":" + o.line + ":" + o.column;
      if (r) {
        var i = this.location.end,
          s = peg$padEnd("", o.line.toString().length, " "),
          c = r[n.line - 1],
          l = (n.line === i.line ? i.column : c.length + 1) - n.column || 1;
        u += "\n --\x3e " + a + "\n" + s + " |\n" + o.line + " | " + c + "\n" + s + " | " + peg$padEnd("", n.column - 1, " ") + peg$padEnd("", l, "^");
      } else u += "\n at " + a;
    }
    return u;
  }, peg$SyntaxError.buildMessage = function (e, u) {
    var t = {
      literal: function (e) {
        return '"' + n(e.text) + '"';
      },
      class: function (e) {
        var u = e.parts.map(function (e) {
          return Array.isArray(e) ? o(e[0]) + "-" + o(e[1]) : o(e);
        });
        return "[" + (e.inverted ? "^" : "") + u.join("") + "]";
      },
      any: function () {
        return "any character";
      },
      end: function () {
        return "end of input";
      },
      other: function (e) {
        return e.description;
      }
    };
    function r(e) {
      return e.charCodeAt(0).toString(16).toUpperCase();
    }
    function n(e) {
      return e.replace(/\\/g, "\\\\").replace(/"/g, '\\"').replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (e) {
        return "\\x0" + r(e);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (e) {
        return "\\x" + r(e);
      });
    }
    function o(e) {
      return e.replace(/\\/g, "\\\\").replace(/\]/g, "\\]").replace(/\^/g, "\\^").replace(/-/g, "\\-").replace(/\0/g, "\\0").replace(/\t/g, "\\t").replace(/\n/g, "\\n").replace(/\r/g, "\\r").replace(/[\x00-\x0F]/g, function (e) {
        return "\\x0" + r(e);
      }).replace(/[\x10-\x1F\x7F-\x9F]/g, function (e) {
        return "\\x" + r(e);
      });
    }
    function a(e) {
      return t[e.type](e);
    }
    return "Expected " + function (e) {
      var u,
        t,
        r = e.map(a);
      if (r.sort(), r.length > 0) {
        for (u = 1, t = 1; u < r.length; u++) r[u - 1] !== r[u] && (r[t] = r[u], t++);
        r.length = t;
      }
      switch (r.length) {
        case 1:
          return r[0];
        case 2:
          return r[0] + " or " + r[1];
        default:
          return r.slice(0, -1).join(", ") + ", or " + r[r.length - 1];
      }
    }(e) + " but " + function (e) {
      return e ? '"' + n(e) + '"' : "end of input";
    }(u) + " found.";
  };
  var parser$1 = {
      SyntaxError: peg$SyntaxError,
      parse: peg$parse
    },
    GrammarError = grammarError,
    GrammarLocation = grammarLocation,
    compiler = compiler_1,
    parser = parser$1,
    VERSION = version,
    RESERVED_WORDS = ["break", "case", "catch", "class", "const", "continue", "debugger", "default", "delete", "do", "else", "export", "extends", "finally", "for", "function", "if", "import", "in", "instanceof", "new", "return", "super", "switch", "this", "throw", "try", "typeof", "var", "void", "while", "with", "null", "true", "false", "enum", "implements", "interface", "let", "package", "private", "protected", "public", "static", "yield", "await", "arguments", "eval"],
    peg = {
      VERSION: VERSION,
      RESERVED_WORDS: RESERVED_WORDS,
      GrammarError: GrammarError,
      GrammarLocation: GrammarLocation,
      parser: parser,
      compiler: compiler,
      generate: function (e, u) {
        var t,
          r,
          n = "plugins" in (u = void 0 !== u ? u : {}) ? u.plugins : [],
          o = {
            parser: peg.parser,
            passes: (t = peg.compiler.passes, r = {}, Object.keys(t).forEach(function (e) {
              r[e] = t[e].slice();
            }), r),
            reservedWords: peg.RESERVED_WORDS.slice()
          };
        return n.forEach(function (e) {
          e.use(o, u);
        }), peg.compiler.compile(o.parser.parse(e, {
          grammarSource: u.grammarSource,
          reservedWords: o.reservedWords
        }), o.passes, u);
      }
    },
    peg_1 = peg;
  return peg_1;
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,