// Copyright 2022-2023, University of Colorado Boulder

/**
 * Logic that handles the creation and disposal of model-view pairs.
 *
 * This is helpful to use in cases where you've got to track model-view pairs, and you want to make sure that
 * the view is created/removed when the corresponding model element is created/removed.
 *
 * @author Agust√≠n Vallejo
 * @author Jonathan Olson
 */

import sceneryPhet from './sceneryPhet.js';
export default class ViewSynchronizer {
  // Node that will be the parent of all Nodes that are created.

  // Factory function that creates a view (Node) for a given model element.

  // Map from model elements to their associated Nodes.

  /**
   * @param container - parent for all Nodes that are created
   * @param factory - function that creates a Node for a given model element
   */
  constructor(container, factory) {
    this.container = container;
    this.factory = factory;
    this.map = new Map();
  }

  /**
   * Adds a model element. An associated view (Node) is created and added to the scene graph.
   */
  add(model) {
    const node = this.factory(model);
    this.map.set(model, node);
    this.container.addChild(node);
  }

  /**
   * Removes a model element. Its associated view (Node) is removed from the scene graph and disposed.
   */
  remove(model) {
    const node = this.map.get(model);
    this.map.delete(model);
    this.container.removeChild(node);
    node.dispose();
  }

  /**
   * Gets the view (Node) for a specified model element.
   */
  getView(model) {
    return this.map.get(model);
  }

  /**
   * Gets the views (Nodes) for all model elements.
   */
  getViews() {
    return [...this.map.values()];
  }

  /**
   * Removes all model elements and their associated views (Nodes).
   */
  dispose() {
    for (const model of this.map.keys()) {
      this.remove(model);
    }
  }
}
sceneryPhet.register('ViewSynchronizer', ViewSynchronizer);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzY2VuZXJ5UGhldCIsIlZpZXdTeW5jaHJvbml6ZXIiLCJjb25zdHJ1Y3RvciIsImNvbnRhaW5lciIsImZhY3RvcnkiLCJtYXAiLCJNYXAiLCJhZGQiLCJtb2RlbCIsIm5vZGUiLCJzZXQiLCJhZGRDaGlsZCIsInJlbW92ZSIsImdldCIsImRlbGV0ZSIsInJlbW92ZUNoaWxkIiwiZGlzcG9zZSIsImdldFZpZXciLCJnZXRWaWV3cyIsInZhbHVlcyIsImtleXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZpZXdTeW5jaHJvbml6ZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTG9naWMgdGhhdCBoYW5kbGVzIHRoZSBjcmVhdGlvbiBhbmQgZGlzcG9zYWwgb2YgbW9kZWwtdmlldyBwYWlycy5cclxuICpcclxuICogVGhpcyBpcyBoZWxwZnVsIHRvIHVzZSBpbiBjYXNlcyB3aGVyZSB5b3UndmUgZ290IHRvIHRyYWNrIG1vZGVsLXZpZXcgcGFpcnMsIGFuZCB5b3Ugd2FudCB0byBtYWtlIHN1cmUgdGhhdFxyXG4gKiB0aGUgdmlldyBpcyBjcmVhdGVkL3JlbW92ZWQgd2hlbiB0aGUgY29ycmVzcG9uZGluZyBtb2RlbCBlbGVtZW50IGlzIGNyZWF0ZWQvcmVtb3ZlZC5cclxuICpcclxuICogQGF1dGhvciBBZ3VzdMOtbiBWYWxsZWpvXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb25cclxuICovXHJcblxyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmlld1N5bmNocm9uaXplcjxNb2RlbCwgVmlldyBleHRlbmRzIE5vZGU+IHtcclxuXHJcbiAgLy8gTm9kZSB0aGF0IHdpbGwgYmUgdGhlIHBhcmVudCBvZiBhbGwgTm9kZXMgdGhhdCBhcmUgY3JlYXRlZC5cclxuICBwcml2YXRlIHJlYWRvbmx5IGNvbnRhaW5lcjogTm9kZTtcclxuXHJcbiAgLy8gRmFjdG9yeSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYSB2aWV3IChOb2RlKSBmb3IgYSBnaXZlbiBtb2RlbCBlbGVtZW50LlxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZmFjdG9yeTogKCB4OiBNb2RlbCApID0+IFZpZXc7XHJcblxyXG4gIC8vIE1hcCBmcm9tIG1vZGVsIGVsZW1lbnRzIHRvIHRoZWlyIGFzc29jaWF0ZWQgTm9kZXMuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBtYXA6IE1hcDxNb2RlbCwgVmlldz47XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBjb250YWluZXIgLSBwYXJlbnQgZm9yIGFsbCBOb2RlcyB0aGF0IGFyZSBjcmVhdGVkXHJcbiAgICogQHBhcmFtIGZhY3RvcnkgLSBmdW5jdGlvbiB0aGF0IGNyZWF0ZXMgYSBOb2RlIGZvciBhIGdpdmVuIG1vZGVsIGVsZW1lbnRcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvbnRhaW5lcjogTm9kZSwgZmFjdG9yeTogKCB4OiBNb2RlbCApID0+IFZpZXcgKSB7XHJcbiAgICB0aGlzLmNvbnRhaW5lciA9IGNvbnRhaW5lcjtcclxuICAgIHRoaXMuZmFjdG9yeSA9IGZhY3Rvcnk7XHJcbiAgICB0aGlzLm1hcCA9IG5ldyBNYXA8TW9kZWwsIFZpZXc+KCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgbW9kZWwgZWxlbWVudC4gQW4gYXNzb2NpYXRlZCB2aWV3IChOb2RlKSBpcyBjcmVhdGVkIGFuZCBhZGRlZCB0byB0aGUgc2NlbmUgZ3JhcGguXHJcbiAgICovXHJcbiAgcHVibGljIGFkZCggbW9kZWw6IE1vZGVsICk6IHZvaWQge1xyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZmFjdG9yeSggbW9kZWwgKTtcclxuICAgIHRoaXMubWFwLnNldCggbW9kZWwsIG5vZGUgKTtcclxuICAgIHRoaXMuY29udGFpbmVyLmFkZENoaWxkKCBub2RlICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZW1vdmVzIGEgbW9kZWwgZWxlbWVudC4gSXRzIGFzc29jaWF0ZWQgdmlldyAoTm9kZSkgaXMgcmVtb3ZlZCBmcm9tIHRoZSBzY2VuZSBncmFwaCBhbmQgZGlzcG9zZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHJlbW92ZSggbW9kZWw6IE1vZGVsICk6IHZvaWQge1xyXG4gICAgY29uc3Qgbm9kZSA9IHRoaXMubWFwLmdldCggbW9kZWwgKSE7XHJcbiAgICB0aGlzLm1hcC5kZWxldGUoIG1vZGVsICk7XHJcbiAgICB0aGlzLmNvbnRhaW5lci5yZW1vdmVDaGlsZCggbm9kZSApO1xyXG4gICAgbm9kZS5kaXNwb3NlKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSB2aWV3IChOb2RlKSBmb3IgYSBzcGVjaWZpZWQgbW9kZWwgZWxlbWVudC5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0VmlldyggbW9kZWw6IE1vZGVsICk6IFZpZXcge1xyXG4gICAgcmV0dXJuIHRoaXMubWFwLmdldCggbW9kZWwgKSE7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBHZXRzIHRoZSB2aWV3cyAoTm9kZXMpIGZvciBhbGwgbW9kZWwgZWxlbWVudHMuXHJcbiAgICovXHJcbiAgcHVibGljIGdldFZpZXdzKCk6IFZpZXdbXSB7XHJcbiAgICByZXR1cm4gWyAuLi50aGlzLm1hcC52YWx1ZXMoKSBdO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBhbGwgbW9kZWwgZWxlbWVudHMgYW5kIHRoZWlyIGFzc29jaWF0ZWQgdmlld3MgKE5vZGVzKS5cclxuICAgKi9cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIGZvciAoIGNvbnN0IG1vZGVsIG9mIHRoaXMubWFwLmtleXMoKSApIHtcclxuICAgICAgdGhpcy5yZW1vdmUoIG1vZGVsICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ1ZpZXdTeW5jaHJvbml6ZXInLCBWaWV3U3luY2hyb25pemVyICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLGtCQUFrQjtBQUcxQyxlQUFlLE1BQU1DLGdCQUFnQixDQUEyQjtFQUU5RDs7RUFHQTs7RUFHQTs7RUFHQTtBQUNGO0FBQ0E7QUFDQTtFQUNTQyxXQUFXQSxDQUFFQyxTQUFlLEVBQUVDLE9BQTZCLEVBQUc7SUFDbkUsSUFBSSxDQUFDRCxTQUFTLEdBQUdBLFNBQVM7SUFDMUIsSUFBSSxDQUFDQyxPQUFPLEdBQUdBLE9BQU87SUFDdEIsSUFBSSxDQUFDQyxHQUFHLEdBQUcsSUFBSUMsR0FBRyxDQUFjLENBQUM7RUFDbkM7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLEdBQUdBLENBQUVDLEtBQVksRUFBUztJQUMvQixNQUFNQyxJQUFJLEdBQUcsSUFBSSxDQUFDTCxPQUFPLENBQUVJLEtBQU0sQ0FBQztJQUNsQyxJQUFJLENBQUNILEdBQUcsQ0FBQ0ssR0FBRyxDQUFFRixLQUFLLEVBQUVDLElBQUssQ0FBQztJQUMzQixJQUFJLENBQUNOLFNBQVMsQ0FBQ1EsUUFBUSxDQUFFRixJQUFLLENBQUM7RUFDakM7O0VBRUE7QUFDRjtBQUNBO0VBQ1NHLE1BQU1BLENBQUVKLEtBQVksRUFBUztJQUNsQyxNQUFNQyxJQUFJLEdBQUcsSUFBSSxDQUFDSixHQUFHLENBQUNRLEdBQUcsQ0FBRUwsS0FBTSxDQUFFO0lBQ25DLElBQUksQ0FBQ0gsR0FBRyxDQUFDUyxNQUFNLENBQUVOLEtBQU0sQ0FBQztJQUN4QixJQUFJLENBQUNMLFNBQVMsQ0FBQ1ksV0FBVyxDQUFFTixJQUFLLENBQUM7SUFDbENBLElBQUksQ0FBQ08sT0FBTyxDQUFDLENBQUM7RUFDaEI7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLE9BQU9BLENBQUVULEtBQVksRUFBUztJQUNuQyxPQUFPLElBQUksQ0FBQ0gsR0FBRyxDQUFDUSxHQUFHLENBQUVMLEtBQU0sQ0FBQztFQUM5Qjs7RUFFQTtBQUNGO0FBQ0E7RUFDU1UsUUFBUUEsQ0FBQSxFQUFXO0lBQ3hCLE9BQU8sQ0FBRSxHQUFHLElBQUksQ0FBQ2IsR0FBRyxDQUFDYyxNQUFNLENBQUMsQ0FBQyxDQUFFO0VBQ2pDOztFQUVBO0FBQ0Y7QUFDQTtFQUNTSCxPQUFPQSxDQUFBLEVBQVM7SUFDckIsS0FBTSxNQUFNUixLQUFLLElBQUksSUFBSSxDQUFDSCxHQUFHLENBQUNlLElBQUksQ0FBQyxDQUFDLEVBQUc7TUFDckMsSUFBSSxDQUFDUixNQUFNLENBQUVKLEtBQU0sQ0FBQztJQUN0QjtFQUNGO0FBQ0Y7QUFFQVIsV0FBVyxDQUFDcUIsUUFBUSxDQUFFLGtCQUFrQixFQUFFcEIsZ0JBQWlCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=