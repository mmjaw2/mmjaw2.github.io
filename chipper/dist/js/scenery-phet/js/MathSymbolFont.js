// Copyright 2016-2023, University of Colorado Boulder

/**
 * MathSymbolFont is the font used for math symbols (e.g. 'x', 'y') in PhET sims.
 * See https://github.com/phetsims/scenery/issues/545
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import optionize from '../../phet-core/js/optionize.js';
import StringUtils from '../../phetcommon/js/util/StringUtils.js';
import { Font } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
import Tandem from '../../tandem/js/Tandem.js';
import DerivedStringProperty from '../../axon/js/DerivedStringProperty.js';
const DEFAULT_STYLE = 'italic';
export default class MathSymbolFont extends Font {
  static FAMILY = '"Times New Roman", Times, serif';
  constructor(providedOptions) {
    // convenience constructor: new MathSymbolFont( {number|string} size )
    if (typeof providedOptions === 'number' || typeof providedOptions === 'string') {
      providedOptions = {
        size: providedOptions
      };
    }
    const options = optionize()({
      family: MathSymbolFont.FAMILY,
      style: DEFAULT_STYLE
    }, providedOptions);
    super(options);
  }

  /**
   * Converts a string to the markup needed to display that string with RichText, using the same family as MathSymbolFont.
   * @param text
   * @param [style] - see Font options.style
   */
  static getRichTextMarkup(text, style = DEFAULT_STYLE) {
    assert && assert(Font.isFontStyle(style), `invalid style: ${style}`);
    return StringUtils.fillIn('<span style=\'font-family: {{family}};font-style: {{style}}\'>{{text}}</span>', {
      family: MathSymbolFont.FAMILY,
      style: style,
      text: text
    });
  }

  /**
   * Wraps a dynamic string in RichText markup that will display the string in the same font as MathSymbolFont.
   */
  static createDerivedProperty(symbolStringProperty, providedOptions) {
    const options = providedOptions || {};
    return new DerivedStringProperty([symbolStringProperty], symbolString => MathSymbolFont.getRichTextMarkup(symbolString, options.style || DEFAULT_STYLE), {
      tandem: options.tandem || Tandem.OPT_OUT
    });
  }
}
sceneryPhet.register('MathSymbolFont', MathSymbolFont);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJTdHJpbmdVdGlscyIsIkZvbnQiLCJzY2VuZXJ5UGhldCIsIlRhbmRlbSIsIkRlcml2ZWRTdHJpbmdQcm9wZXJ0eSIsIkRFRkFVTFRfU1RZTEUiLCJNYXRoU3ltYm9sRm9udCIsIkZBTUlMWSIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwic2l6ZSIsIm9wdGlvbnMiLCJmYW1pbHkiLCJzdHlsZSIsImdldFJpY2hUZXh0TWFya3VwIiwidGV4dCIsImFzc2VydCIsImlzRm9udFN0eWxlIiwiZmlsbEluIiwiY3JlYXRlRGVyaXZlZFByb3BlcnR5Iiwic3ltYm9sU3RyaW5nUHJvcGVydHkiLCJzeW1ib2xTdHJpbmciLCJ0YW5kZW0iLCJPUFRfT1VUIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJNYXRoU3ltYm9sRm9udC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBNYXRoU3ltYm9sRm9udCBpcyB0aGUgZm9udCB1c2VkIGZvciBtYXRoIHN5bWJvbHMgKGUuZy4gJ3gnLCAneScpIGluIFBoRVQgc2ltcy5cclxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5L2lzc3Vlcy81NDVcclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBGb250LCBGb250T3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IFBpY2tPcHRpb25hbCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvUGlja09wdGlvbmFsLmpzJztcclxuaW1wb3J0IHsgUGhldGlvT2JqZWN0T3B0aW9ucyB9IGZyb20gJy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgRGVyaXZlZFN0cmluZ1Byb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvRGVyaXZlZFN0cmluZ1Byb3BlcnR5LmpzJztcclxuXHJcbmNvbnN0IERFRkFVTFRfU1RZTEUgPSAnaXRhbGljJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IHR5cGUgTWF0aFN5bWJvbEZvbnRPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PEZvbnRPcHRpb25zLCAnZmFtaWx5Jz47XHJcblxyXG50eXBlIENyZWF0ZURlcml2ZWRQcm9wZXJ0eU9wdGlvbnMgPSBQaWNrT3B0aW9uYWw8Rm9udE9wdGlvbnMsICdzdHlsZSc+ICYgUGlja09wdGlvbmFsPFBoZXRpb09iamVjdE9wdGlvbnMsICd0YW5kZW0nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE1hdGhTeW1ib2xGb250IGV4dGVuZHMgRm9udCB7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgRkFNSUxZID0gJ1wiVGltZXMgTmV3IFJvbWFuXCIsIFRpbWVzLCBzZXJpZic7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogbnVtYmVyIHwgc3RyaW5nIHwgTWF0aFN5bWJvbEZvbnRPcHRpb25zICkge1xyXG5cclxuICAgIC8vIGNvbnZlbmllbmNlIGNvbnN0cnVjdG9yOiBuZXcgTWF0aFN5bWJvbEZvbnQoIHtudW1iZXJ8c3RyaW5nfSBzaXplIClcclxuICAgIGlmICggdHlwZW9mIHByb3ZpZGVkT3B0aW9ucyA9PT0gJ251bWJlcicgfHwgdHlwZW9mIHByb3ZpZGVkT3B0aW9ucyA9PT0gJ3N0cmluZycgKSB7XHJcbiAgICAgIHByb3ZpZGVkT3B0aW9ucyA9IHtcclxuICAgICAgICBzaXplOiBwcm92aWRlZE9wdGlvbnNcclxuICAgICAgfTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPE1hdGhTeW1ib2xGb250T3B0aW9ucywgU2VsZk9wdGlvbnMsIEZvbnRPcHRpb25zPigpKCB7XHJcbiAgICAgIGZhbWlseTogTWF0aFN5bWJvbEZvbnQuRkFNSUxZLFxyXG4gICAgICBzdHlsZTogREVGQVVMVF9TVFlMRVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENvbnZlcnRzIGEgc3RyaW5nIHRvIHRoZSBtYXJrdXAgbmVlZGVkIHRvIGRpc3BsYXkgdGhhdCBzdHJpbmcgd2l0aCBSaWNoVGV4dCwgdXNpbmcgdGhlIHNhbWUgZmFtaWx5IGFzIE1hdGhTeW1ib2xGb250LlxyXG4gICAqIEBwYXJhbSB0ZXh0XHJcbiAgICogQHBhcmFtIFtzdHlsZV0gLSBzZWUgRm9udCBvcHRpb25zLnN0eWxlXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBnZXRSaWNoVGV4dE1hcmt1cCggdGV4dDogc3RyaW5nLCBzdHlsZSA9IERFRkFVTFRfU1RZTEUgKTogc3RyaW5nIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIEZvbnQuaXNGb250U3R5bGUoIHN0eWxlICksIGBpbnZhbGlkIHN0eWxlOiAke3N0eWxlfWAgKTtcclxuICAgIHJldHVybiBTdHJpbmdVdGlscy5maWxsSW4oICc8c3BhbiBzdHlsZT1cXCdmb250LWZhbWlseToge3tmYW1pbHl9fTtmb250LXN0eWxlOiB7e3N0eWxlfX1cXCc+e3t0ZXh0fX08L3NwYW4+Jywge1xyXG4gICAgICBmYW1pbHk6IE1hdGhTeW1ib2xGb250LkZBTUlMWSxcclxuICAgICAgc3R5bGU6IHN0eWxlLFxyXG4gICAgICB0ZXh0OiB0ZXh0XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBXcmFwcyBhIGR5bmFtaWMgc3RyaW5nIGluIFJpY2hUZXh0IG1hcmt1cCB0aGF0IHdpbGwgZGlzcGxheSB0aGUgc3RyaW5nIGluIHRoZSBzYW1lIGZvbnQgYXMgTWF0aFN5bWJvbEZvbnQuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGVEZXJpdmVkUHJvcGVydHkoIHN5bWJvbFN0cmluZ1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCBwcm92aWRlZE9wdGlvbnM/OiBDcmVhdGVEZXJpdmVkUHJvcGVydHlPcHRpb25zICk6IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz4ge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBwcm92aWRlZE9wdGlvbnMgfHwge307XHJcblxyXG4gICAgcmV0dXJuIG5ldyBEZXJpdmVkU3RyaW5nUHJvcGVydHkoIFsgc3ltYm9sU3RyaW5nUHJvcGVydHkgXSxcclxuICAgICAgc3ltYm9sU3RyaW5nID0+IE1hdGhTeW1ib2xGb250LmdldFJpY2hUZXh0TWFya3VwKCBzeW1ib2xTdHJpbmcsIG9wdGlvbnMuc3R5bGUgfHwgREVGQVVMVF9TVFlMRSApLCB7XHJcbiAgICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbSB8fCBUYW5kZW0uT1BUX09VVFxyXG4gICAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ01hdGhTeW1ib2xGb250JywgTWF0aFN5bWJvbEZvbnQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQTRCLGlDQUFpQztBQUU3RSxPQUFPQyxXQUFXLE1BQU0seUNBQXlDO0FBQ2pFLFNBQVNDLElBQUksUUFBcUIsNkJBQTZCO0FBQy9ELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFHMUMsT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUM5QyxPQUFPQyxxQkFBcUIsTUFBTSx3Q0FBd0M7QUFFMUUsTUFBTUMsYUFBYSxHQUFHLFFBQVE7QUFROUIsZUFBZSxNQUFNQyxjQUFjLFNBQVNMLElBQUksQ0FBQztFQUUvQyxPQUF1Qk0sTUFBTSxHQUFHLGlDQUFpQztFQUUxREMsV0FBV0EsQ0FBRUMsZUFBeUQsRUFBRztJQUU5RTtJQUNBLElBQUssT0FBT0EsZUFBZSxLQUFLLFFBQVEsSUFBSSxPQUFPQSxlQUFlLEtBQUssUUFBUSxFQUFHO01BQ2hGQSxlQUFlLEdBQUc7UUFDaEJDLElBQUksRUFBRUQ7TUFDUixDQUFDO0lBQ0g7SUFFQSxNQUFNRSxPQUFPLEdBQUdaLFNBQVMsQ0FBa0QsQ0FBQyxDQUFFO01BQzVFYSxNQUFNLEVBQUVOLGNBQWMsQ0FBQ0MsTUFBTTtNQUM3Qk0sS0FBSyxFQUFFUjtJQUNULENBQUMsRUFBRUksZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVFLE9BQVEsQ0FBQztFQUNsQjs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBY0csaUJBQWlCQSxDQUFFQyxJQUFZLEVBQUVGLEtBQUssR0FBR1IsYUFBYSxFQUFXO0lBQzdFVyxNQUFNLElBQUlBLE1BQU0sQ0FBRWYsSUFBSSxDQUFDZ0IsV0FBVyxDQUFFSixLQUFNLENBQUMsRUFBRyxrQkFBaUJBLEtBQU0sRUFBRSxDQUFDO0lBQ3hFLE9BQU9iLFdBQVcsQ0FBQ2tCLE1BQU0sQ0FBRSwrRUFBK0UsRUFBRTtNQUMxR04sTUFBTSxFQUFFTixjQUFjLENBQUNDLE1BQU07TUFDN0JNLEtBQUssRUFBRUEsS0FBSztNQUNaRSxJQUFJLEVBQUVBO0lBQ1IsQ0FBRSxDQUFDO0VBQ0w7O0VBRUE7QUFDRjtBQUNBO0VBQ0UsT0FBY0kscUJBQXFCQSxDQUFFQyxvQkFBK0MsRUFBRVgsZUFBOEMsRUFBOEI7SUFFaEssTUFBTUUsT0FBTyxHQUFHRixlQUFlLElBQUksQ0FBQyxDQUFDO0lBRXJDLE9BQU8sSUFBSUwscUJBQXFCLENBQUUsQ0FBRWdCLG9CQUFvQixDQUFFLEVBQ3hEQyxZQUFZLElBQUlmLGNBQWMsQ0FBQ1EsaUJBQWlCLENBQUVPLFlBQVksRUFBRVYsT0FBTyxDQUFDRSxLQUFLLElBQUlSLGFBQWMsQ0FBQyxFQUFFO01BQ2hHaUIsTUFBTSxFQUFFWCxPQUFPLENBQUNXLE1BQU0sSUFBSW5CLE1BQU0sQ0FBQ29CO0lBQ25DLENBQUUsQ0FBQztFQUNQO0FBQ0Y7QUFFQXJCLFdBQVcsQ0FBQ3NCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWxCLGNBQWUsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==