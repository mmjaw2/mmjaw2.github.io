// Copyright 2022-2023, University of Colorado Boulder

/**
 * key object, intended for use in the PhET common-code keypad
 *
 * @author Aadish Gupta
 * @author John Blanco
 */

import optionize from '../../../phet-core/js/optionize.js';
import sceneryPhet from '../sceneryPhet.js';
class Key {
  // number of horizontal cells in the keypad grid that this key occupies

  // number of vertical cells in the keypad grid that this key occupies

  // The tandem component name to use when creating a button from this key.

  // For keyboard input, this is used to identify the keystroke to activate this key (see KeyboardListener.ts)

  /**
   * @param label - node or string that will appear on the key
   * @param identifier - ID for this key, see KeyID.js
   * @param [providedOptions]
   */
  constructor(label, identifier, providedOptions) {
    this.label = label;
    this.identifier = identifier;
    const options = optionize()({
      horizontalSpan: 1,
      verticalSpan: 1,
      keyboardIdentifiers: []
    }, providedOptions);
    this.horizontalSpan = options.horizontalSpan;
    this.verticalSpan = options.verticalSpan;
    this.keyboardIdentifiers = options.keyboardIdentifiers;
    this.buttonTandemName = `${_.camelCase(this.identifier)}Button`;
  }
}
sceneryPhet.register('Key', Key);
export default Key;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIktleSIsImNvbnN0cnVjdG9yIiwibGFiZWwiLCJpZGVudGlmaWVyIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImhvcml6b250YWxTcGFuIiwidmVydGljYWxTcGFuIiwia2V5Ym9hcmRJZGVudGlmaWVycyIsImJ1dHRvblRhbmRlbU5hbWUiLCJfIiwiY2FtZWxDYXNlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJLZXkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICoga2V5IG9iamVjdCwgaW50ZW5kZWQgZm9yIHVzZSBpbiB0aGUgUGhFVCBjb21tb24tY29kZSBrZXlwYWRcclxuICpcclxuICogQGF1dGhvciBBYWRpc2ggR3VwdGFcclxuICogQGF1dGhvciBKb2huIEJsYW5jb1xyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIE9uZUtleVN0cm9rZSB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCB7IEtleUlEVmFsdWUgfSBmcm9tICcuL0tleUlELmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgaG9yaXpvbnRhbFNwYW4/OiBudW1iZXI7XHJcbiAgdmVydGljYWxTcGFuPzogbnVtYmVyO1xyXG4gIGtleWJvYXJkSWRlbnRpZmllcnM/OiBPbmVLZXlTdHJva2VbXTtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEtleU9wdGlvbnMgPSBTZWxmT3B0aW9ucztcclxuXHJcbmNsYXNzIEtleSB7XHJcblxyXG4gIC8vIG51bWJlciBvZiBob3Jpem9udGFsIGNlbGxzIGluIHRoZSBrZXlwYWQgZ3JpZCB0aGF0IHRoaXMga2V5IG9jY3VwaWVzXHJcbiAgcHVibGljIHJlYWRvbmx5IGhvcml6b250YWxTcGFuOiBudW1iZXI7XHJcblxyXG4gIC8vIG51bWJlciBvZiB2ZXJ0aWNhbCBjZWxscyBpbiB0aGUga2V5cGFkIGdyaWQgdGhhdCB0aGlzIGtleSBvY2N1cGllc1xyXG4gIHB1YmxpYyByZWFkb25seSB2ZXJ0aWNhbFNwYW46IG51bWJlcjtcclxuXHJcbiAgLy8gVGhlIHRhbmRlbSBjb21wb25lbnQgbmFtZSB0byB1c2Ugd2hlbiBjcmVhdGluZyBhIGJ1dHRvbiBmcm9tIHRoaXMga2V5LlxyXG4gIHB1YmxpYyByZWFkb25seSBidXR0b25UYW5kZW1OYW1lOiBzdHJpbmc7XHJcblxyXG4gIC8vIEZvciBrZXlib2FyZCBpbnB1dCwgdGhpcyBpcyB1c2VkIHRvIGlkZW50aWZ5IHRoZSBrZXlzdHJva2UgdG8gYWN0aXZhdGUgdGhpcyBrZXkgKHNlZSBLZXlib2FyZExpc3RlbmVyLnRzKVxyXG4gIHB1YmxpYyByZWFkb25seSBrZXlib2FyZElkZW50aWZpZXJzOiBPbmVLZXlTdHJva2VbXTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGxhYmVsIC0gbm9kZSBvciBzdHJpbmcgdGhhdCB3aWxsIGFwcGVhciBvbiB0aGUga2V5XHJcbiAgICogQHBhcmFtIGlkZW50aWZpZXIgLSBJRCBmb3IgdGhpcyBrZXksIHNlZSBLZXlJRC5qc1xyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByZWFkb25seSBsYWJlbDogTm9kZSB8IHN0cmluZyxcclxuICAgIHB1YmxpYyByZWFkb25seSBpZGVudGlmaWVyOiBLZXlJRFZhbHVlLFxyXG4gICAgcHJvdmlkZWRPcHRpb25zPzogS2V5T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEtleU9wdGlvbnMsIFNlbGZPcHRpb25zPigpKCB7XHJcbiAgICAgIGhvcml6b250YWxTcGFuOiAxLFxyXG4gICAgICB2ZXJ0aWNhbFNwYW46IDEsXHJcbiAgICAgIGtleWJvYXJkSWRlbnRpZmllcnM6IFtdXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmhvcml6b250YWxTcGFuID0gb3B0aW9ucy5ob3Jpem9udGFsU3BhbjtcclxuICAgIHRoaXMudmVydGljYWxTcGFuID0gb3B0aW9ucy52ZXJ0aWNhbFNwYW47XHJcbiAgICB0aGlzLmtleWJvYXJkSWRlbnRpZmllcnMgPSBvcHRpb25zLmtleWJvYXJkSWRlbnRpZmllcnM7XHJcblxyXG4gICAgdGhpcy5idXR0b25UYW5kZW1OYW1lID0gYCR7Xy5jYW1lbENhc2UoIHRoaXMuaWRlbnRpZmllciApfUJ1dHRvbmA7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ0tleScsIEtleSApO1xyXG5leHBvcnQgZGVmYXVsdCBLZXk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLG9DQUFvQztBQUUxRCxPQUFPQyxXQUFXLE1BQU0sbUJBQW1CO0FBVzNDLE1BQU1DLEdBQUcsQ0FBQztFQUVSOztFQUdBOztFQUdBOztFQUdBOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FDQUMsS0FBb0IsRUFDcEJDLFVBQXNCLEVBQ3RDQyxlQUE0QixFQUFHO0lBQUEsS0FGZkYsS0FBb0IsR0FBcEJBLEtBQW9CO0lBQUEsS0FDcEJDLFVBQXNCLEdBQXRCQSxVQUFzQjtJQUd0QyxNQUFNRSxPQUFPLEdBQUdQLFNBQVMsQ0FBMEIsQ0FBQyxDQUFFO01BQ3BEUSxjQUFjLEVBQUUsQ0FBQztNQUNqQkMsWUFBWSxFQUFFLENBQUM7TUFDZkMsbUJBQW1CLEVBQUU7SUFDdkIsQ0FBQyxFQUFFSixlQUFnQixDQUFDO0lBRXBCLElBQUksQ0FBQ0UsY0FBYyxHQUFHRCxPQUFPLENBQUNDLGNBQWM7SUFDNUMsSUFBSSxDQUFDQyxZQUFZLEdBQUdGLE9BQU8sQ0FBQ0UsWUFBWTtJQUN4QyxJQUFJLENBQUNDLG1CQUFtQixHQUFHSCxPQUFPLENBQUNHLG1CQUFtQjtJQUV0RCxJQUFJLENBQUNDLGdCQUFnQixHQUFJLEdBQUVDLENBQUMsQ0FBQ0MsU0FBUyxDQUFFLElBQUksQ0FBQ1IsVUFBVyxDQUFFLFFBQU87RUFDbkU7QUFDRjtBQUVBSixXQUFXLENBQUNhLFFBQVEsQ0FBRSxLQUFLLEVBQUVaLEdBQUksQ0FBQztBQUNsQyxlQUFlQSxHQUFHIiwiaWdub3JlTGlzdCI6W119