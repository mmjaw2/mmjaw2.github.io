// Copyright 2019-2023, University of Colorado Boulder

/**
 * Stopwatch is the model for the stopwatch. It is responsible for time, position, and visibility.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import BooleanProperty from '../../axon/js/BooleanProperty.js';
import NumberProperty from '../../axon/js/NumberProperty.js';
import Vector2 from '../../dot/js/Vector2.js';
import Range from '../../dot/js/Range.js';
import Vector2Property from '../../dot/js/Vector2Property.js';
import PhetioObject from '../../tandem/js/PhetioObject.js';
import Tandem from '../../tandem/js/Tandem.js';
import IOType from '../../tandem/js/types/IOType.js';
import ReferenceIO from '../../tandem/js/types/ReferenceIO.js';
import sceneryPhet from './sceneryPhet.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import isSettingPhetioStateProperty from '../../tandem/js/isSettingPhetioStateProperty.js';
const DEFAULT_TIME_RANGE = new Range(0, Number.POSITIVE_INFINITY);
export default class Stopwatch extends PhetioObject {
  // position of the stopwatch, in view coordinates

  // whether the stopwatch is visible

  // whether the stopwatch is running

  // time displayed on the stopwatch, in units as specified by the client

  static ZERO_TO_ALMOST_SIXTY = new Range(0, 3599.99); // works out to be 59:59.99

  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      position: Vector2.ZERO,
      isVisible: false,
      timePropertyOptions: {
        range: DEFAULT_TIME_RANGE,
        // When time reaches range.max, the Stopwatch automatically pauses.
        units: 's',
        isValidValue: value => value >= 0,
        phetioReadOnly: true,
        phetioHighFrequency: true
      },
      // PhetioObjectOptions
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'Stopwatch',
      phetioType: ReferenceIO(IOType.ObjectIO),
      phetioState: false
    }, providedOptions);
    super(options);
    this.positionProperty = new Vector2Property(options.position, {
      tandem: options.tandem.createTandem('positionProperty'),
      phetioDocumentation: `view coordinates for the upper-left of the stopwatch (initially ${options.position.x},${options.position.y})`,
      phetioFeatured: true
    });
    this.isVisibleProperty = new BooleanProperty(options.isVisible, {
      tandem: options.tandem.createTandem('isVisibleProperty'),
      phetioFeatured: true
    });
    this.isRunningProperty = new BooleanProperty(false, {
      tandem: options.tandem.createTandem('isRunningProperty'),
      phetioFeatured: true
    });
    this.timeProperty = new NumberProperty(0, combineOptions({
      tandem: options.tandem.createTandem('timeProperty'),
      phetioFeatured: true
    }, options.timePropertyOptions));

    // When the stopwatch visibility changes, stop it and reset its value.
    const visibilityListener = () => {
      if (!isSettingPhetioStateProperty.value) {
        this.isRunningProperty.value = false;
        this.timeProperty.value = 0;
      }
    };
    this.isVisibleProperty.link(visibilityListener);
    this.disposeStopwatch = () => {
      this.isVisibleProperty.unlink(visibilityListener);
      this.positionProperty.dispose();
      this.isVisibleProperty.dispose();
      this.isRunningProperty.dispose();
      this.timeProperty.dispose();
    };
  }
  dispose() {
    this.disposeStopwatch();
    super.dispose();
  }
  reset() {
    this.positionProperty.reset();
    this.isVisibleProperty.reset();
    this.isRunningProperty.reset();
    this.timeProperty.reset();
  }

  /**
   * Steps the stopwatch.
   * @param dt - time delta, in units as specified by the client
   */
  step(dt) {
    assert && assert(dt > 0, `invalid dt: ${dt}`);
    this.setTime(this.timeProperty.value + dt);
  }

  /**
   * Similar to step() but sets the time to a specific value.
   * @param t
   */
  setTime(t) {
    assert && assert(t >= 0, `invalid t: ${t}`);
    if (this.isRunningProperty.value) {
      // Increment time, but don't exceed the range.
      this.timeProperty.value = this.timeProperty.range.constrainValue(t);

      // If the max is reached, then pause.
      if (this.timeProperty.value >= this.timeProperty.range.max) {
        this.isRunningProperty.value = false;
      }
    }
  }
}
sceneryPhet.register('Stopwatch', Stopwatch);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJOdW1iZXJQcm9wZXJ0eSIsIlZlY3RvcjIiLCJSYW5nZSIsIlZlY3RvcjJQcm9wZXJ0eSIsIlBoZXRpb09iamVjdCIsIlRhbmRlbSIsIklPVHlwZSIsIlJlZmVyZW5jZUlPIiwic2NlbmVyeVBoZXQiLCJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsImlzU2V0dGluZ1BoZXRpb1N0YXRlUHJvcGVydHkiLCJERUZBVUxUX1RJTUVfUkFOR0UiLCJOdW1iZXIiLCJQT1NJVElWRV9JTkZJTklUWSIsIlN0b3B3YXRjaCIsIlpFUk9fVE9fQUxNT1NUX1NJWFRZIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicG9zaXRpb24iLCJaRVJPIiwiaXNWaXNpYmxlIiwidGltZVByb3BlcnR5T3B0aW9ucyIsInJhbmdlIiwidW5pdHMiLCJpc1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsInBoZXRpb1JlYWRPbmx5IiwicGhldGlvSGlnaEZyZXF1ZW5jeSIsInRhbmRlbSIsIlJFUVVJUkVEIiwidGFuZGVtTmFtZVN1ZmZpeCIsInBoZXRpb1R5cGUiLCJPYmplY3RJTyIsInBoZXRpb1N0YXRlIiwicG9zaXRpb25Qcm9wZXJ0eSIsImNyZWF0ZVRhbmRlbSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJ4IiwieSIsInBoZXRpb0ZlYXR1cmVkIiwiaXNWaXNpYmxlUHJvcGVydHkiLCJpc1J1bm5pbmdQcm9wZXJ0eSIsInRpbWVQcm9wZXJ0eSIsInZpc2liaWxpdHlMaXN0ZW5lciIsImxpbmsiLCJkaXNwb3NlU3RvcHdhdGNoIiwidW5saW5rIiwiZGlzcG9zZSIsInJlc2V0Iiwic3RlcCIsImR0IiwiYXNzZXJ0Iiwic2V0VGltZSIsInQiLCJjb25zdHJhaW5WYWx1ZSIsIm1heCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU3RvcHdhdGNoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFN0b3B3YXRjaCBpcyB0aGUgbW9kZWwgZm9yIHRoZSBzdG9wd2F0Y2guIEl0IGlzIHJlc3BvbnNpYmxlIGZvciB0aW1lLCBwb3NpdGlvbiwgYW5kIHZpc2liaWxpdHkuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL0Jvb2xlYW5Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5LCB7IE51bWJlclByb3BlcnR5T3B0aW9ucyB9IGZyb20gJy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBSYW5nZSBmcm9tICcuLi8uLi9kb3QvanMvUmFuZ2UuanMnO1xyXG5pbXBvcnQgVmVjdG9yMlByb3BlcnR5IGZyb20gJy4uLy4uL2RvdC9qcy9WZWN0b3IyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0LCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IFJlZmVyZW5jZUlPIGZyb20gJy4uLy4uL3RhbmRlbS9qcy90eXBlcy9SZWZlcmVuY2VJTy5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBpc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5IGZyb20gJy4uLy4uL3RhbmRlbS9qcy9pc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5LmpzJztcclxuXHJcbmNvbnN0IERFRkFVTFRfVElNRV9SQU5HRSA9IG5ldyBSYW5nZSggMCwgTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZICk7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIHBvc2l0aW9uPzogVmVjdG9yMjtcclxuICBpc1Zpc2libGU/OiBib29sZWFuO1xyXG4gIHRpbWVQcm9wZXJ0eU9wdGlvbnM/OiBTdHJpY3RPbWl0PE51bWJlclByb3BlcnR5T3B0aW9ucywgJ3RhbmRlbSc+O1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgU3RvcHdhdGNoT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGhldGlvT2JqZWN0T3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN0b3B3YXRjaCBleHRlbmRzIFBoZXRpb09iamVjdCB7XHJcblxyXG4gIC8vIHBvc2l0aW9uIG9mIHRoZSBzdG9wd2F0Y2gsIGluIHZpZXcgY29vcmRpbmF0ZXNcclxuICBwdWJsaWMgcmVhZG9ubHkgcG9zaXRpb25Qcm9wZXJ0eTogUHJvcGVydHk8VmVjdG9yMj47XHJcblxyXG4gIC8vIHdoZXRoZXIgdGhlIHN0b3B3YXRjaCBpcyB2aXNpYmxlXHJcbiAgcHVibGljIHJlYWRvbmx5IGlzVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPjtcclxuXHJcbiAgLy8gd2hldGhlciB0aGUgc3RvcHdhdGNoIGlzIHJ1bm5pbmdcclxuICBwdWJsaWMgcmVhZG9ubHkgaXNSdW5uaW5nUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyB0aW1lIGRpc3BsYXllZCBvbiB0aGUgc3RvcHdhdGNoLCBpbiB1bml0cyBhcyBzcGVjaWZpZWQgYnkgdGhlIGNsaWVudFxyXG4gIHB1YmxpYyByZWFkb25seSB0aW1lUHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VTdG9wd2F0Y2g6ICgpID0+IHZvaWQ7XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgWkVST19UT19BTE1PU1RfU0lYVFkgPSBuZXcgUmFuZ2UoIDAsIDM1OTkuOTkgKTsgLy8gd29ya3Mgb3V0IHRvIGJlIDU5OjU5Ljk5XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogU3RvcHdhdGNoT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFN0b3B3YXRjaE9wdGlvbnMsIFNlbGZPcHRpb25zLCBQaGV0aW9PYmplY3RPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBwb3NpdGlvbjogVmVjdG9yMi5aRVJPLFxyXG4gICAgICBpc1Zpc2libGU6IGZhbHNlLFxyXG4gICAgICB0aW1lUHJvcGVydHlPcHRpb25zOiB7XHJcbiAgICAgICAgcmFuZ2U6IERFRkFVTFRfVElNRV9SQU5HRSwgLy8gV2hlbiB0aW1lIHJlYWNoZXMgcmFuZ2UubWF4LCB0aGUgU3RvcHdhdGNoIGF1dG9tYXRpY2FsbHkgcGF1c2VzLlxyXG4gICAgICAgIHVuaXRzOiAncycsXHJcbiAgICAgICAgaXNWYWxpZFZhbHVlOiAoIHZhbHVlOiBudW1iZXIgKSA9PiB2YWx1ZSA+PSAwLFxyXG4gICAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlLFxyXG4gICAgICAgIHBoZXRpb0hpZ2hGcmVxdWVuY3k6IHRydWVcclxuICAgICAgfSxcclxuXHJcbiAgICAgIC8vIFBoZXRpb09iamVjdE9wdGlvbnNcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uUkVRVUlSRUQsXHJcbiAgICAgIHRhbmRlbU5hbWVTdWZmaXg6ICdTdG9wd2F0Y2gnLFxyXG4gICAgICBwaGV0aW9UeXBlOiBSZWZlcmVuY2VJTyggSU9UeXBlLk9iamVjdElPICksXHJcbiAgICAgIHBoZXRpb1N0YXRlOiBmYWxzZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnBvc2l0aW9uUHJvcGVydHkgPSBuZXcgVmVjdG9yMlByb3BlcnR5KCBvcHRpb25zLnBvc2l0aW9uLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAncG9zaXRpb25Qcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvRG9jdW1lbnRhdGlvbjogYHZpZXcgY29vcmRpbmF0ZXMgZm9yIHRoZSB1cHBlci1sZWZ0IG9mIHRoZSBzdG9wd2F0Y2ggKGluaXRpYWxseSAke29wdGlvbnMucG9zaXRpb24ueH0sJHtvcHRpb25zLnBvc2l0aW9uLnl9KWAsXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5pc1Zpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIG9wdGlvbnMuaXNWaXNpYmxlLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnaXNWaXNpYmxlUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5pc1J1bm5pbmdQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIGZhbHNlLCB7XHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0uY3JlYXRlVGFuZGVtKCAnaXNSdW5uaW5nUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy50aW1lUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIDAsIGNvbWJpbmVPcHRpb25zPE51bWJlclByb3BlcnR5T3B0aW9ucz4oIHtcclxuICAgICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICd0aW1lUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlXHJcbiAgICB9LCBvcHRpb25zLnRpbWVQcm9wZXJ0eU9wdGlvbnMgKSApO1xyXG5cclxuICAgIC8vIFdoZW4gdGhlIHN0b3B3YXRjaCB2aXNpYmlsaXR5IGNoYW5nZXMsIHN0b3AgaXQgYW5kIHJlc2V0IGl0cyB2YWx1ZS5cclxuICAgIGNvbnN0IHZpc2liaWxpdHlMaXN0ZW5lciA9ICgpID0+IHtcclxuICAgICAgaWYgKCAhaXNTZXR0aW5nUGhldGlvU3RhdGVQcm9wZXJ0eS52YWx1ZSApIHtcclxuICAgICAgICB0aGlzLmlzUnVubmluZ1Byb3BlcnR5LnZhbHVlID0gZmFsc2U7XHJcbiAgICAgICAgdGhpcy50aW1lUHJvcGVydHkudmFsdWUgPSAwO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy5pc1Zpc2libGVQcm9wZXJ0eS5saW5rKCB2aXNpYmlsaXR5TGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VTdG9wd2F0Y2ggPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMuaXNWaXNpYmxlUHJvcGVydHkudW5saW5rKCB2aXNpYmlsaXR5TGlzdGVuZXIgKTtcclxuICAgICAgdGhpcy5wb3NpdGlvblByb3BlcnR5LmRpc3Bvc2UoKTtcclxuICAgICAgdGhpcy5pc1Zpc2libGVQcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICAgIHRoaXMuaXNSdW5uaW5nUHJvcGVydHkuZGlzcG9zZSgpO1xyXG4gICAgICB0aGlzLnRpbWVQcm9wZXJ0eS5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VTdG9wd2F0Y2goKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIHRoaXMucG9zaXRpb25Qcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5pc1Zpc2libGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5pc1J1bm5pbmdQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy50aW1lUHJvcGVydHkucmVzZXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFN0ZXBzIHRoZSBzdG9wd2F0Y2guXHJcbiAgICogQHBhcmFtIGR0IC0gdGltZSBkZWx0YSwgaW4gdW5pdHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBjbGllbnRcclxuICAgKi9cclxuICBwdWJsaWMgc3RlcCggZHQ6IG51bWJlciApOiB2b2lkIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGR0ID4gMCwgYGludmFsaWQgZHQ6ICR7ZHR9YCApO1xyXG5cclxuICAgIHRoaXMuc2V0VGltZSggdGhpcy50aW1lUHJvcGVydHkudmFsdWUgKyBkdCApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogU2ltaWxhciB0byBzdGVwKCkgYnV0IHNldHMgdGhlIHRpbWUgdG8gYSBzcGVjaWZpYyB2YWx1ZS5cclxuICAgKiBAcGFyYW0gdFxyXG4gICAqL1xyXG4gIHB1YmxpYyBzZXRUaW1lKCB0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCB0ID49IDAsIGBpbnZhbGlkIHQ6ICR7dH1gICk7XHJcblxyXG4gICAgaWYgKCB0aGlzLmlzUnVubmluZ1Byb3BlcnR5LnZhbHVlICkge1xyXG5cclxuICAgICAgLy8gSW5jcmVtZW50IHRpbWUsIGJ1dCBkb24ndCBleGNlZWQgdGhlIHJhbmdlLlxyXG4gICAgICB0aGlzLnRpbWVQcm9wZXJ0eS52YWx1ZSA9IHRoaXMudGltZVByb3BlcnR5LnJhbmdlLmNvbnN0cmFpblZhbHVlKCB0ICk7XHJcblxyXG4gICAgICAvLyBJZiB0aGUgbWF4IGlzIHJlYWNoZWQsIHRoZW4gcGF1c2UuXHJcbiAgICAgIGlmICggdGhpcy50aW1lUHJvcGVydHkudmFsdWUgPj0gdGhpcy50aW1lUHJvcGVydHkucmFuZ2UubWF4ICkge1xyXG4gICAgICAgIHRoaXMuaXNSdW5uaW5nUHJvcGVydHkudmFsdWUgPSBmYWxzZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdTdG9wd2F0Y2gnLCBTdG9wd2F0Y2ggKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLGtDQUFrQztBQUU5RCxPQUFPQyxjQUFjLE1BQWlDLGlDQUFpQztBQUN2RixPQUFPQyxPQUFPLE1BQU0seUJBQXlCO0FBQzdDLE9BQU9DLEtBQUssTUFBTSx1QkFBdUI7QUFDekMsT0FBT0MsZUFBZSxNQUFNLGlDQUFpQztBQUM3RCxPQUFPQyxZQUFZLE1BQStCLGlDQUFpQztBQUNuRixPQUFPQyxNQUFNLE1BQU0sMkJBQTJCO0FBQzlDLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsV0FBVyxNQUFNLHNDQUFzQztBQUM5RCxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBRTFDLE9BQU9DLFNBQVMsSUFBSUMsY0FBYyxRQUFRLGlDQUFpQztBQUMzRSxPQUFPQyw0QkFBNEIsTUFBTSxpREFBaUQ7QUFFMUYsTUFBTUMsa0JBQWtCLEdBQUcsSUFBSVYsS0FBSyxDQUFFLENBQUMsRUFBRVcsTUFBTSxDQUFDQyxpQkFBa0IsQ0FBQztBQVVuRSxlQUFlLE1BQU1DLFNBQVMsU0FBU1gsWUFBWSxDQUFDO0VBRWxEOztFQUdBOztFQUdBOztFQUdBOztFQUtBLE9BQXVCWSxvQkFBb0IsR0FBRyxJQUFJZCxLQUFLLENBQUUsQ0FBQyxFQUFFLE9BQVEs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