// Copyright 2022-2024, University of Colorado Boulder

/**
 * A row of KeyboardHelpSection, containing the label, icon, and text. Many of the static functions of
 * KeyboardHelpSection will return a KeyboardHelpSectionRow. The label and icon are often grouped in an AlignGroup for
 * easy positioning in KeyboardHelpSection. This cannot be done in KeyboardHelpSection directly because different
 * labels and icons will have varying layout. For instance, see labelWithIcon vs labelWithIconList.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
import { AlignGroup, HBox, Node, RichText, Text, VBox } from '../../../../scenery/js/imports.js';
import PhetFont from '../../PhetFont.js';
import sceneryPhet from '../../sceneryPhet.js';
import SceneryPhetStrings from '../../SceneryPhetStrings.js';
import LetterKeyNode from '../LetterKeyNode.js';
import TextKeyNode from '../TextKeyNode.js';
import KeyboardHelpIconFactory from './KeyboardHelpIconFactory.js';
import KeyboardHelpSection from './KeyboardHelpSection.js';

// text fonts and max widths
const LABEL_FONT = new PhetFont(16);
const OR_TEXT_MAX_WIDTH = 16;

// Options type for labelWithIconList, see that function.

// Options type for labelWithIcon, see that function

class KeyboardHelpSectionRow {
  // Includes a reference to the Text because KeyboardHelpSection will constrain the width of all text in its
  // KeyboardHelpSectionRows for i18n.

  // A layout Node containing the readable Text describing this row.

  // An icon Node graphically showing the keyboard keys for this row.

  // voicing - When Voicing is enabled, this is the content for this row that will be spoken with speech synthesis
  // when the row is activated with a click.

  // Reusable font style and size for the KeyboardHelpDialog labels.
  static LABEL_FONT = LABEL_FONT;
  constructor(text, label, icon, providedOptions) {
    const options = optionize()({
      readingBlockContent: null
    }, providedOptions);
    this.text = text;
    this.label = label;
    this.icon = icon;
    this.readingBlockContent = options.readingBlockContent;
  }

  /**
   * Sets visibility of the label, icon, and text so that it can be hidden if necessary. If using
   * KeyboardHelpSection, this will also correctly layout the content because of scenery dynamic layout.
   */
  setContentsVisible(visible) {
    this.text.visible = visible;
    this.label.visible = visible;
    this.icon.visible = visible;
  }

  /**
   * Horizontally align a label and an icon, with the label on the left and the icon on the right. AlignGroup is used
   * to give the label and icon identical dimensions for easy layout in KeyboardHelpSection.
   */
  static labelWithIcon(labelString, icon, providedOptions) {
    const options = optionize()({
      labelInnerContent: null,
      readingBlockContent: null,
      labelOptions: {
        font: LABEL_FONT
      },
      iconOptions: {
        tagName: 'li'
      }
    }, providedOptions);
    const labelText = new RichText(labelString, options.labelOptions);

    // make the label and icon the same height so that they will align when we assemble help section group
    const labelIconGroup = new AlignGroup({
      matchHorizontal: false
    });
    const labelBox = labelIconGroup.createBox(labelText);
    const iconBox = labelIconGroup.createBox(new Node({
      children: [icon]
    }), options.iconOptions);
    iconBox.innerContent = options.labelInnerContent;
    return new KeyboardHelpSectionRow(labelText, labelBox, iconBox, {
      readingBlockContent: options.readingBlockContent || options.labelInnerContent
    });
  }

  /**
   * Creates a row with one or more keys, with keys separated by '+'.
   * @param keyStrings - each should be a letter key
   * @param labelString
   * @param [providedOptions]
   */
  static createKeysRowFromStrings(keyStrings, labelString, providedOptions) {
    return KeyboardHelpSectionRow.createKeysRow(keyStrings.map(key => new LetterKeyNode(key)), labelString, providedOptions);
  }

  /**
   * Creates a row with one or more keys, with keys separated by '+'.
   */
  static createKeysRow(keyIcons, labelString, providedOptions) {
    assert && assert(keyIcons.length > 0, 'expected keys');
    let keysNode = null;
    for (let i = 0; i < keyIcons.length; i++) {
      const keyNode = keyIcons[i];

      // Continue to "add" more icons to the end of the keysNode with iconPlusIcon until we go through all keyIcons.
      // If there is only one keyIcon it will just be returned without any '+' icons.
      keysNode = keysNode ? KeyboardHelpIconFactory.iconPlusIcon(keysNode, keyNode) : keyNode;
    }
    assert && assert(keysNode, 'keysNode must be defined since there were more than zero keyIcons.');
    return KeyboardHelpSectionRow.labelWithIcon(labelString, keysNode, providedOptions);
  }

  /**
   * Create an entry for the dialog that looks horizontally aligns a letter key with a 'J' key separated by a plus
   * sign, with a descriptive label. Something like:   * "J + S jumps close to sweater"
   * @param keyString - the letter name that will come after 'J', note this can be hard coded, no need for i18n.
   * @param labelString - visual label
   * @param [providedOptions]
   */
  static createJumpKeyRow(keyString, labelString, providedOptions) {
    return KeyboardHelpSectionRow.createKeysRowFromStrings(['J', keyString], labelString, providedOptions);
  }

  /**
   * Create a KeyboardHelpSectionRow that describes how to play and pause the sim with the "Alt" + "K" hotkey.
   */
  static createPlayPauseKeyRow(labelString, providedOptions) {
    return KeyboardHelpSectionRow.createGlobalHotkeyRow(labelString, SceneryPhetStrings.key.kStringProperty, providedOptions);
  }

  /**
   * Create a KeyboardHelpSectionRow that describes how to step forward the sim with the "Alt" + "L" hotkeys.
   */
  static createStepForwardKeyRow(labelString, providedOptions) {
    return KeyboardHelpSectionRow.createGlobalHotkeyRow(labelString, SceneryPhetStrings.key.lStringProperty, providedOptions);
  }

  /**
   * Create a KeyboardHelpSectionRow that describes how to use a global hotkey. Global hotkeys are triggered with "Alt" plus
   * some other key, to be provided.
   */
  static createGlobalHotkeyRow(labelString, keyString, providedOptions) {
    return KeyboardHelpSectionRow.createKeysRow([TextKeyNode.altOrOption(), new LetterKeyNode(keyString)], labelString, providedOptions);
  }

  /**
   * Create a label with a list of icons. The icons will be vertically aligned, each separated by 'or' text. The
   * label will be vertically centered with the first item in the list of icons. To vertically align the label
   * with the first icon, AlignGroup is used. Finally, an AlignGroup is used to make the label
   * content match height with the entire icon list. When assembled, the label with icon list will look like:
   *
   * This is the label: Icon1 or
   *                    Icon2 or
   *                    Icon3
   */
  static labelWithIconList(labelString, icons, providedOptions) {
    const options = optionize()({
      labelInnerContent: null,
      readingBlockContent: null,
      iconsVBoxOptions: {},
      labelOptions: {
        font: LABEL_FONT
      }
    }, providedOptions);
    options.iconsVBoxOptions = combineOptions({
      spacing: KeyboardHelpSection.DEFAULT_VERTICAL_ICON_SPACING * 0.75,
      // less than the normal vertical icon spacing since it is a group
      align: 'left',
      // pdom - each icon will be presented as a list item under the parent 'ul' of the KeyboardHelpSectionRow.
      tagName: 'li',
      innerContent: options.labelInnerContent
    }, options.iconsVBoxOptions);
    const labelText = new RichText(labelString, options.labelOptions);

    // horizontally align the label with the first item in the list of icons, guarantees that the label and first
    // icon have identical heights
    const labelFirstIconGroup = new AlignGroup({
      matchHorizontal: false
    });
    labelFirstIconGroup.createBox(new Node({
      children: [icons[0]]
    })); // create the box to restrain bounds, but a reference isn't necessary
    const labelBox = labelFirstIconGroup.createBox(labelText);
    const iconsWithOrText = [];

    // for each of the icons (excluding the last one, add a vertically aligned 'or' text to the right
    for (let i = 0; i < icons.length - 1; i++) {
      const orText = new Text(SceneryPhetStrings.keyboardHelpDialog.orStringProperty, {
        font: LABEL_FONT,
        maxWidth: OR_TEXT_MAX_WIDTH
      });

      // place orText with the icon in an HBox
      const hBox = new HBox({
        children: [new Node({
          children: [icons[i]]
        }), orText],
        spacing: KeyboardHelpIconFactory.DEFAULT_ICON_SPACING
      });
      iconsWithOrText.push(hBox);
    }
    iconsWithOrText.push(icons[icons.length - 1]);

    // place icons in a VBox, passing through optional spacing and a11y representation
    const iconsVBox = new VBox(combineOptions({
      children: iconsWithOrText
    }, options.iconsVBoxOptions));

    // make the label the same height as the icon list by aligning them in a box that matches height
    const groupOptions = {
      yAlign: 'top'
    };
    const labelIconListGroup = new AlignGroup({
      matchHorizontal: false
    });
    const iconsBox = labelIconListGroup.createBox(iconsVBox, groupOptions); // create the box to match height, but reference not necessary
    const labelWithHeightBox = labelIconListGroup.createBox(labelBox, groupOptions);
    return new KeyboardHelpSectionRow(labelText, labelWithHeightBox, iconsBox, {
      readingBlockContent: options.readingBlockContent || options.labelInnerContent
    });
  }
}
sceneryPhet.register('KeyboardHelpSectionRow', KeyboardHelpSectionRow);
export default KeyboardHelpSectionRow;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,