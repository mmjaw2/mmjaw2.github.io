// Copyright 2017-2023, University of Colorado Boulder

/**
 * General help information for how to navigation a simulation with a keyboard. In general, this file supports a fair
 * number of options, like displaying group content, or shortcuts for checkbox interaction. The algorithm this type
 * implements set all the optional potential rows as null, and then fills them in if the options is provided. Then at the
 * end anything that is null is filtered out.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import sceneryPhet from '../../sceneryPhet.js';
import SceneryPhetStrings from '../../SceneryPhetStrings.js';
import TextKeyNode from '../TextKeyNode.js';
import KeyboardHelpIconFactory from './KeyboardHelpIconFactory.js';
import KeyboardHelpSection from './KeyboardHelpSection.js';
import KeyboardHelpSectionRow from './KeyboardHelpSectionRow.js';
import LetterKeyNode from '../LetterKeyNode.js';
import StringUtils from '../../../../phetcommon/js/util/StringUtils.js';
import NumberKeyNode from '../NumberKeyNode.js';
export default class BasicActionsKeyboardHelpSection extends KeyboardHelpSection {
  constructor(providedOptions) {
    const options = optionize()({
      withCheckboxContent: false,
      withKeypadContent: false
    }, providedOptions);

    // 'Move to next item or group'
    const tabKeyNode = TextKeyNode.tab();
    const moveToNextItemRow = KeyboardHelpSectionRow.labelWithIcon(SceneryPhetStrings.keyboardHelpDialog.moveToNextItemOrGroupStringProperty, tabKeyNode, {
      labelInnerContent: SceneryPhetStrings.a11y.keyboardHelpDialog.general.tabGroupDescriptionStringProperty
    });

    // 'Move to previous item or group'
    const shiftPlusTabIcon = KeyboardHelpIconFactory.shiftPlusIcon(tabKeyNode);
    const moveToPreviousItemRow = KeyboardHelpSectionRow.labelWithIcon(SceneryPhetStrings.keyboardHelpDialog.moveToPreviousItemOrGroupStringProperty, shiftPlusTabIcon, {
      labelInnerContent: SceneryPhetStrings.a11y.keyboardHelpDialog.general.shiftTabGroupDescriptionStringProperty
    });

    // 'Move between items in a group'
    const leftRightArrowsIcon = KeyboardHelpIconFactory.leftRightArrowKeysRowIcon();
    const upDownArrowsIcon = KeyboardHelpIconFactory.upDownArrowKeysRowIcon();
    const arrowsIcon = KeyboardHelpIconFactory.iconOrIcon(leftRightArrowsIcon, upDownArrowsIcon);
    const moveBetweenItemsInAGroupRow = KeyboardHelpSectionRow.labelWithIcon(SceneryPhetStrings.keyboardHelpDialog.moveBetweenItemsInAGroupStringProperty, arrowsIcon, {
      labelInnerContent: SceneryPhetStrings.a11y.keyboardHelpDialog.general.groupNavigationDescriptionStringProperty
    });

    // 'Press buttons'
    const spaceKeyNode = TextKeyNode.space();
    const enterKeyNode = TextKeyNode.enter();
    const spaceOrEnterIcon = KeyboardHelpIconFactory.iconOrIcon(spaceKeyNode, enterKeyNode);
    const pressButtonsItemRow = KeyboardHelpSectionRow.labelWithIcon(SceneryPhetStrings.keyboardHelpDialog.pressButtonsStringProperty, spaceOrEnterIcon, {
      labelInnerContent: SceneryPhetStrings.a11y.keyboardHelpDialog.general.pressButtonsDescriptionStringProperty
    });

    // 'Reset All'
    const altIcon = TextKeyNode.altOrOption();
    const rIcon = LetterKeyNode.r();
    const altPlusRIcon = KeyboardHelpIconFactory.iconPlusIcon(altIcon, rIcon);
    const resetAllRow = KeyboardHelpSectionRow.labelWithIcon(SceneryPhetStrings.keyboardHelpDialog.resetAllStringProperty, altPlusRIcon, {
      labelInnerContent: StringUtils.fillIn(SceneryPhetStrings.a11y.keyboardHelpDialog.general.resetAllDescriptionPatternStringProperty, {
        altOrOption: TextKeyNode.getAltKeyString()
      })
    });

    // 'Exit a dialog'
    const escapeKeyNode = TextKeyNode.esc();
    const exitADialogRow = KeyboardHelpSectionRow.labelWithIcon(SceneryPhetStrings.keyboardHelpDialog.exitADialogStringProperty, escapeKeyNode, {
      labelInnerContent: SceneryPhetStrings.a11y.keyboardHelpDialog.general.exitDialogDescriptionStringProperty
    });
    const content = [moveToNextItemRow, moveToPreviousItemRow, moveBetweenItemsInAGroupRow];
    if (options.withKeypadContent) {
      // 'Set values within keypad'
      const zeroToNineIcon = KeyboardHelpIconFactory.iconToIcon(new NumberKeyNode(0), new NumberKeyNode(9));
      const setValuesInKeypadRow = KeyboardHelpSectionRow.labelWithIcon(SceneryPhetStrings.keyboardHelpDialog.setValuesInKeypadStringProperty, zeroToNineIcon, {
        labelInnerContent: SceneryPhetStrings.a11y.keyboardHelpDialog.general.setValuesInKeypadDescriptionStringProperty
      });
      content.push(setValuesInKeypadRow);
    }

    // 'Toggle checkboxes'
    if (options.withCheckboxContent) {
      const checkboxSpaceKeyNode = TextKeyNode.space();
      const toggleCheckboxes = KeyboardHelpSectionRow.labelWithIcon(SceneryPhetStrings.keyboardHelpDialog.toggleCheckboxesStringProperty, checkboxSpaceKeyNode, {
        labelInnerContent: SceneryPhetStrings.a11y.keyboardHelpDialog.general.toggleCheckboxesDescriptionStringProperty
      });
      content.push(toggleCheckboxes);
    }

    // a bit strange, but important for ordering with optional rows
    content.push(...[pressButtonsItemRow, resetAllRow, exitADialogRow]);

    // order the rows of content
    super(SceneryPhetStrings.keyboardHelpDialog.basicActionsStringProperty, content, options);
  }
}
sceneryPhet.register('BasicActionsKeyboardHelpSection', BasicActionsKeyboardHelpSection);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIlNjZW5lcnlQaGV0U3RyaW5ncyIsIlRleHRLZXlOb2RlIiwiS2V5Ym9hcmRIZWxwSWNvbkZhY3RvcnkiLCJLZXlib2FyZEhlbHBTZWN0aW9uIiwiS2V5Ym9hcmRIZWxwU2VjdGlvblJvdyIsIkxldHRlcktleU5vZGUiLCJTdHJpbmdVdGlscyIsIk51bWJlcktleU5vZGUiLCJCYXNpY0FjdGlvbnNLZXlib2FyZEhlbHBTZWN0aW9uIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwid2l0aENoZWNrYm94Q29udGVudCIsIndpdGhLZXlwYWRDb250ZW50IiwidGFiS2V5Tm9kZSIsInRhYiIsIm1vdmVUb05leHRJdGVtUm93IiwibGFiZWxXaXRoSWNvbiIsImtleWJvYXJkSGVscERpYWxvZyIsIm1vdmVUb05leHRJdGVtT3JHcm91cFN0cmluZ1Byb3BlcnR5IiwibGFiZWxJbm5lckNvbnRlbnQiLCJhMTF5IiwiZ2VuZXJhbCIsInRhYkdyb3VwRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSIsInNoaWZ0UGx1c1RhYkljb24iLCJzaGlmdFBsdXNJY29uIiwibW92ZVRvUHJldmlvdXNJdGVtUm93IiwibW92ZVRvUHJldmlvdXNJdGVtT3JHcm91cFN0cmluZ1Byb3BlcnR5Iiwic2hpZnRUYWJHcm91cERlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkiLCJsZWZ0UmlnaHRBcnJvd3NJY29uIiwibGVmdFJpZ2h0QXJyb3dLZXlzUm93SWNvbiIsInVwRG93bkFycm93c0ljb24iLCJ1cERvd25BcnJvd0tleXNSb3dJY29uIiwiYXJyb3dzSWNvbiIsImljb25Pckljb24iLCJtb3ZlQmV0d2Vlbkl0ZW1zSW5BR3JvdXBSb3ciLCJtb3ZlQmV0d2Vlbkl0ZW1zSW5BR3JvdXBTdHJpbmdQcm9wZXJ0eSIsImdyb3VwTmF2aWdhdGlvbkRlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkiLCJzcGFjZUtleU5vZGUiLCJzcGFjZSIsImVudGVyS2V5Tm9kZSIsImVudGVyIiwic3BhY2VPckVudGVySWNvbiIsInByZXNzQnV0dG9uc0l0ZW1Sb3ciLCJwcmVzc0J1dHRvbnNTdHJpbmdQcm9wZXJ0eSIsInByZXNzQnV0dG9uc0Rlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHkiLCJhbHRJY29uIiwiYWx0T3JPcHRpb24iLCJySWNvbiIsInIiLCJhbHRQbHVzUkljb24iLCJpY29uUGx1c0ljb24iLCJyZXNldEFsbFJvdyIsInJlc2V0QWxsU3RyaW5nUHJvcGVydHkiLCJmaWxsSW4iLCJyZXNldEFsbERlc2NyaXB0aW9uUGF0dGVyblN0cmluZ1Byb3BlcnR5IiwiZ2V0QWx0S2V5U3RyaW5nIiwiZXNjYXBlS2V5Tm9kZSIsImVzYyIsImV4aXRBRGlhbG9nUm93IiwiZXhpdEFEaWFsb2dTdHJpbmdQcm9wZXJ0eSIsImV4aXREaWFsb2dEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5IiwiY29udGVudCIsInplcm9Ub05pbmVJY29uIiwiaWNvblRvSWNvbiIsInNldFZhbHVlc0luS2V5cGFkUm93Iiwic2V0VmFsdWVzSW5LZXlwYWRTdHJpbmdQcm9wZXJ0eSIsInNldFZhbHVlc0luS2V5cGFkRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSIsInB1c2giLCJjaGVja2JveFNwYWNlS2V5Tm9kZSIsInRvZ2dsZUNoZWNrYm94ZXMiLCJ0b2dnbGVDaGVja2JveGVzU3RyaW5nUHJvcGVydHkiLCJ0b2dnbGVDaGVja2JveGVzRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSIsImJhc2ljQWN0aW9uc1N0cmluZ1Byb3BlcnR5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCYXNpY0FjdGlvbnNLZXlib2FyZEhlbHBTZWN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdlbmVyYWwgaGVscCBpbmZvcm1hdGlvbiBmb3IgaG93IHRvIG5hdmlnYXRpb24gYSBzaW11bGF0aW9uIHdpdGggYSBrZXlib2FyZC4gSW4gZ2VuZXJhbCwgdGhpcyBmaWxlIHN1cHBvcnRzIGEgZmFpclxyXG4gKiBudW1iZXIgb2Ygb3B0aW9ucywgbGlrZSBkaXNwbGF5aW5nIGdyb3VwIGNvbnRlbnQsIG9yIHNob3J0Y3V0cyBmb3IgY2hlY2tib3ggaW50ZXJhY3Rpb24uIFRoZSBhbGdvcml0aG0gdGhpcyB0eXBlXHJcbiAqIGltcGxlbWVudHMgc2V0IGFsbCB0aGUgb3B0aW9uYWwgcG90ZW50aWFsIHJvd3MgYXMgbnVsbCwgYW5kIHRoZW4gZmlsbHMgdGhlbSBpbiBpZiB0aGUgb3B0aW9ucyBpcyBwcm92aWRlZC4gVGhlbiBhdCB0aGVcclxuICogZW5kIGFueXRoaW5nIHRoYXQgaXMgbnVsbCBpcyBmaWx0ZXJlZCBvdXQuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4uLy4uL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IFNjZW5lcnlQaGV0U3RyaW5ncyBmcm9tICcuLi8uLi9TY2VuZXJ5UGhldFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgVGV4dEtleU5vZGUgZnJvbSAnLi4vVGV4dEtleU5vZGUuanMnO1xyXG5pbXBvcnQgS2V5Ym9hcmRIZWxwSWNvbkZhY3RvcnkgZnJvbSAnLi9LZXlib2FyZEhlbHBJY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCBLZXlib2FyZEhlbHBTZWN0aW9uLCB7IEtleWJvYXJkSGVscFNlY3Rpb25PcHRpb25zIH0gZnJvbSAnLi9LZXlib2FyZEhlbHBTZWN0aW9uLmpzJztcclxuaW1wb3J0IEtleWJvYXJkSGVscFNlY3Rpb25Sb3cgZnJvbSAnLi9LZXlib2FyZEhlbHBTZWN0aW9uUm93LmpzJztcclxuaW1wb3J0IExldHRlcktleU5vZGUgZnJvbSAnLi4vTGV0dGVyS2V5Tm9kZS5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5pbXBvcnQgTnVtYmVyS2V5Tm9kZSBmcm9tICcuLi9OdW1iZXJLZXlOb2RlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIGlmIHRydWUsIHRoZSBoZWxwIGNvbnRlbnQgd2lsbCBpbmNsdWRlIGluZm9ybWF0aW9uIGFib3V0IGhvdyB0byBpbnRlcmFjdCB3aXRoIGNoZWNrYm94ZXNcclxuICB3aXRoQ2hlY2tib3hDb250ZW50PzogYm9vbGVhbjtcclxuXHJcbiAgLy8gaWYgdHJ1ZSwgdGhlIGhlbHAgY29udGVudCB3aWxsIGluY2x1ZGUgaW5mb3JtYXRpb24gYWJvdXQgaG93IHRvIGludGVyYWN0IHdpdGggYSBrZXlwYWRcclxuICB3aXRoS2V5cGFkQ29udGVudD86IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBCYXNpY0FjdGlvbnNLZXlib2FyZEhlbHBTZWN0aW9uT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgS2V5Ym9hcmRIZWxwU2VjdGlvbk9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBCYXNpY0FjdGlvbnNLZXlib2FyZEhlbHBTZWN0aW9uIGV4dGVuZHMgS2V5Ym9hcmRIZWxwU2VjdGlvbiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwU2VjdGlvbk9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCYXNpY0FjdGlvbnNLZXlib2FyZEhlbHBTZWN0aW9uT3B0aW9ucywgU2VsZk9wdGlvbnMsIEtleWJvYXJkSGVscFNlY3Rpb25PcHRpb25zPigpKCB7XHJcbiAgICAgIHdpdGhDaGVja2JveENvbnRlbnQ6IGZhbHNlLFxyXG4gICAgICB3aXRoS2V5cGFkQ29udGVudDogZmFsc2VcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vICdNb3ZlIHRvIG5leHQgaXRlbSBvciBncm91cCdcclxuICAgIGNvbnN0IHRhYktleU5vZGUgPSBUZXh0S2V5Tm9kZS50YWIoKTtcclxuICAgIGNvbnN0IG1vdmVUb05leHRJdGVtUm93ID0gS2V5Ym9hcmRIZWxwU2VjdGlvblJvdy5sYWJlbFdpdGhJY29uKFxyXG4gICAgICBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5Ym9hcmRIZWxwRGlhbG9nLm1vdmVUb05leHRJdGVtT3JHcm91cFN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICB0YWJLZXlOb2RlLCB7XHJcbiAgICAgICAgbGFiZWxJbm5lckNvbnRlbnQ6IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5LmtleWJvYXJkSGVscERpYWxvZy5nZW5lcmFsLnRhYkdyb3VwRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gJ01vdmUgdG8gcHJldmlvdXMgaXRlbSBvciBncm91cCdcclxuICAgIGNvbnN0IHNoaWZ0UGx1c1RhYkljb24gPSBLZXlib2FyZEhlbHBJY29uRmFjdG9yeS5zaGlmdFBsdXNJY29uKCB0YWJLZXlOb2RlICk7XHJcbiAgICBjb25zdCBtb3ZlVG9QcmV2aW91c0l0ZW1Sb3cgPSBLZXlib2FyZEhlbHBTZWN0aW9uUm93LmxhYmVsV2l0aEljb24oXHJcbiAgICAgIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXlib2FyZEhlbHBEaWFsb2cubW92ZVRvUHJldmlvdXNJdGVtT3JHcm91cFN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBzaGlmdFBsdXNUYWJJY29uLCB7XHJcbiAgICAgICAgbGFiZWxJbm5lckNvbnRlbnQ6IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5LmtleWJvYXJkSGVscERpYWxvZy5nZW5lcmFsLnNoaWZ0VGFiR3JvdXBEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAvLyAnTW92ZSBiZXR3ZWVuIGl0ZW1zIGluIGEgZ3JvdXAnXHJcbiAgICBjb25zdCBsZWZ0UmlnaHRBcnJvd3NJY29uID0gS2V5Ym9hcmRIZWxwSWNvbkZhY3RvcnkubGVmdFJpZ2h0QXJyb3dLZXlzUm93SWNvbigpO1xyXG4gICAgY29uc3QgdXBEb3duQXJyb3dzSWNvbiA9IEtleWJvYXJkSGVscEljb25GYWN0b3J5LnVwRG93bkFycm93S2V5c1Jvd0ljb24oKTtcclxuICAgIGNvbnN0IGFycm93c0ljb24gPSBLZXlib2FyZEhlbHBJY29uRmFjdG9yeS5pY29uT3JJY29uKCBsZWZ0UmlnaHRBcnJvd3NJY29uLCB1cERvd25BcnJvd3NJY29uICk7XHJcbiAgICBjb25zdCBtb3ZlQmV0d2Vlbkl0ZW1zSW5BR3JvdXBSb3cgPSBLZXlib2FyZEhlbHBTZWN0aW9uUm93LmxhYmVsV2l0aEljb24oXHJcbiAgICAgIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXlib2FyZEhlbHBEaWFsb2cubW92ZUJldHdlZW5JdGVtc0luQUdyb3VwU3RyaW5nUHJvcGVydHksXHJcbiAgICAgIGFycm93c0ljb24sIHtcclxuICAgICAgICBsYWJlbElubmVyQ29udGVudDogU2NlbmVyeVBoZXRTdHJpbmdzLmExMXkua2V5Ym9hcmRIZWxwRGlhbG9nLmdlbmVyYWwuZ3JvdXBOYXZpZ2F0aW9uRGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eVxyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gJ1ByZXNzIGJ1dHRvbnMnXHJcbiAgICBjb25zdCBzcGFjZUtleU5vZGUgPSBUZXh0S2V5Tm9kZS5zcGFjZSgpO1xyXG4gICAgY29uc3QgZW50ZXJLZXlOb2RlID0gVGV4dEtleU5vZGUuZW50ZXIoKTtcclxuICAgIGNvbnN0IHNwYWNlT3JFbnRlckljb24gPSBLZXlib2FyZEhlbHBJY29uRmFjdG9yeS5pY29uT3JJY29uKCBzcGFjZUtleU5vZGUsIGVudGVyS2V5Tm9kZSApO1xyXG4gICAgY29uc3QgcHJlc3NCdXR0b25zSXRlbVJvdyA9IEtleWJvYXJkSGVscFNlY3Rpb25Sb3cubGFiZWxXaXRoSWNvbihcclxuICAgICAgU2NlbmVyeVBoZXRTdHJpbmdzLmtleWJvYXJkSGVscERpYWxvZy5wcmVzc0J1dHRvbnNTdHJpbmdQcm9wZXJ0eSwgc3BhY2VPckVudGVySWNvbiwge1xyXG4gICAgICAgIGxhYmVsSW5uZXJDb250ZW50OiBTY2VuZXJ5UGhldFN0cmluZ3MuYTExeS5rZXlib2FyZEhlbHBEaWFsb2cuZ2VuZXJhbC5wcmVzc0J1dHRvbnNEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAvLyAnUmVzZXQgQWxsJ1xyXG4gICAgY29uc3QgYWx0SWNvbiA9IFRleHRLZXlOb2RlLmFsdE9yT3B0aW9uKCk7XHJcbiAgICBjb25zdCBySWNvbiA9IExldHRlcktleU5vZGUucigpO1xyXG4gICAgY29uc3QgYWx0UGx1c1JJY29uID0gS2V5Ym9hcmRIZWxwSWNvbkZhY3RvcnkuaWNvblBsdXNJY29uKCBhbHRJY29uLCBySWNvbiApO1xyXG4gICAgY29uc3QgcmVzZXRBbGxSb3cgPSBLZXlib2FyZEhlbHBTZWN0aW9uUm93LmxhYmVsV2l0aEljb24oXHJcbiAgICAgIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXlib2FyZEhlbHBEaWFsb2cucmVzZXRBbGxTdHJpbmdQcm9wZXJ0eSwgYWx0UGx1c1JJY29uLCB7XHJcbiAgICAgICAgbGFiZWxJbm5lckNvbnRlbnQ6IFN0cmluZ1V0aWxzLmZpbGxJbiggU2NlbmVyeVBoZXRTdHJpbmdzLmExMXkua2V5Ym9hcmRIZWxwRGlhbG9nLmdlbmVyYWwucmVzZXRBbGxEZXNjcmlwdGlvblBhdHRlcm5TdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgYWx0T3JPcHRpb246IFRleHRLZXlOb2RlLmdldEFsdEtleVN0cmluZygpXHJcbiAgICAgICAgfSApXHJcbiAgICAgIH1cclxuICAgICk7XHJcblxyXG4gICAgLy8gJ0V4aXQgYSBkaWFsb2cnXHJcbiAgICBjb25zdCBlc2NhcGVLZXlOb2RlID0gVGV4dEtleU5vZGUuZXNjKCk7XHJcbiAgICBjb25zdCBleGl0QURpYWxvZ1JvdyA9IEtleWJvYXJkSGVscFNlY3Rpb25Sb3cubGFiZWxXaXRoSWNvbihcclxuICAgICAgU2NlbmVyeVBoZXRTdHJpbmdzLmtleWJvYXJkSGVscERpYWxvZy5leGl0QURpYWxvZ1N0cmluZ1Byb3BlcnR5LCBlc2NhcGVLZXlOb2RlLCB7XHJcbiAgICAgICAgbGFiZWxJbm5lckNvbnRlbnQ6IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5LmtleWJvYXJkSGVscERpYWxvZy5nZW5lcmFsLmV4aXREaWFsb2dEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5XHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBjb250ZW50ID0gW1xyXG4gICAgICBtb3ZlVG9OZXh0SXRlbVJvdyxcclxuICAgICAgbW92ZVRvUHJldmlvdXNJdGVtUm93LFxyXG4gICAgICBtb3ZlQmV0d2Vlbkl0ZW1zSW5BR3JvdXBSb3dcclxuICAgIF07XHJcblxyXG4gICAgaWYgKCBvcHRpb25zLndpdGhLZXlwYWRDb250ZW50ICkge1xyXG5cclxuICAgICAgLy8gJ1NldCB2YWx1ZXMgd2l0aGluIGtleXBhZCdcclxuICAgICAgY29uc3QgemVyb1RvTmluZUljb24gPSBLZXlib2FyZEhlbHBJY29uRmFjdG9yeS5pY29uVG9JY29uKCBuZXcgTnVtYmVyS2V5Tm9kZSggMCApLCBuZXcgTnVtYmVyS2V5Tm9kZSggOSApICk7XHJcbiAgICAgIGNvbnN0IHNldFZhbHVlc0luS2V5cGFkUm93ID0gS2V5Ym9hcmRIZWxwU2VjdGlvblJvdy5sYWJlbFdpdGhJY29uKFxyXG4gICAgICAgIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXlib2FyZEhlbHBEaWFsb2cuc2V0VmFsdWVzSW5LZXlwYWRTdHJpbmdQcm9wZXJ0eSwgemVyb1RvTmluZUljb24sIHtcclxuICAgICAgICAgIGxhYmVsSW5uZXJDb250ZW50OiBTY2VuZXJ5UGhldFN0cmluZ3MuYTExeS5rZXlib2FyZEhlbHBEaWFsb2cuZ2VuZXJhbC5zZXRWYWx1ZXNJbktleXBhZERlc2NyaXB0aW9uU3RyaW5nUHJvcGVydHlcclxuICAgICAgICB9ICk7XHJcbiAgICAgIGNvbnRlbnQucHVzaCggc2V0VmFsdWVzSW5LZXlwYWRSb3cgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyAnVG9nZ2xlIGNoZWNrYm94ZXMnXHJcbiAgICBpZiAoIG9wdGlvbnMud2l0aENoZWNrYm94Q29udGVudCApIHtcclxuICAgICAgY29uc3QgY2hlY2tib3hTcGFjZUtleU5vZGUgPSBUZXh0S2V5Tm9kZS5zcGFjZSgpO1xyXG4gICAgICBjb25zdCB0b2dnbGVDaGVja2JveGVzID0gS2V5Ym9hcmRIZWxwU2VjdGlvblJvdy5sYWJlbFdpdGhJY29uKFxyXG4gICAgICAgIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXlib2FyZEhlbHBEaWFsb2cudG9nZ2xlQ2hlY2tib3hlc1N0cmluZ1Byb3BlcnR5LCBjaGVja2JveFNwYWNlS2V5Tm9kZSwge1xyXG4gICAgICAgICAgbGFiZWxJbm5lckNvbnRlbnQ6IFNjZW5lcnlQaGV0U3RyaW5ncy5hMTF5LmtleWJvYXJkSGVscERpYWxvZy5nZW5lcmFsLnRvZ2dsZUNoZWNrYm94ZXNEZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5XHJcbiAgICAgICAgfSApO1xyXG4gICAgICBjb250ZW50LnB1c2goIHRvZ2dsZUNoZWNrYm94ZXMgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBhIGJpdCBzdHJhbmdlLCBidXQgaW1wb3J0YW50IGZvciBvcmRlcmluZyB3aXRoIG9wdGlvbmFsIHJvd3NcclxuICAgIGNvbnRlbnQucHVzaCggLi4uW1xyXG4gICAgICBwcmVzc0J1dHRvbnNJdGVtUm93LFxyXG4gICAgICByZXNldEFsbFJvdyxcclxuICAgICAgZXhpdEFEaWFsb2dSb3dcclxuICAgIF0gKTtcclxuXHJcbiAgICAvLyBvcmRlciB0aGUgcm93cyBvZiBjb250ZW50XHJcbiAgICBzdXBlciggU2NlbmVyeVBoZXRTdHJpbmdzLmtleWJvYXJkSGVscERpYWxvZy5iYXNpY0FjdGlvbnNTdHJpbmdQcm9wZXJ0eSwgY29udGVudCwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdCYXNpY0FjdGlvbnNLZXlib2FyZEhlbHBTZWN0aW9uJywgQmFzaWNBY3Rpb25zS2V5Ym9hcmRIZWxwU2VjdGlvbiApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSx1Q0FBdUM7QUFDN0QsT0FBT0MsV0FBVyxNQUFNLHNCQUFzQjtBQUM5QyxPQUFPQyxrQkFBa0IsTUFBTSw2QkFBNkI7QUFDNUQsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjtBQUMzQyxPQUFPQyx1QkFBdUIsTUFBTSw4QkFBOEI7QUFDbEUsT0FBT0MsbUJBQW1CLE1BQXNDLDBCQUEwQjtBQUMxRixPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFDaEUsT0FBT0MsYUFBYSxNQUFNLHFCQUFxQjtBQUMvQyxPQUFPQyxXQUFXLE1BQU0sK0NBQStDO0FBQ3ZFLE9BQU9DLGFBQWEsTUFBTSxxQkFBcUI7QUFhL0MsZUFBZSxNQUFNQywrQkFBK0IsU0FBU0wsbUJBQW1CLENBQUM7RUFFeEVNLFdBQVdBLENBQUVDLGVBQXdELEVBQUc7SUFFN0UsTUFBTUMsT0FBTyxHQUFHYixTQUFTLENBQWtGLENBQUMsQ0FBRTtNQUM1R2MsbUJBQW1CLEVBQUUsS0FBSztNQUMxQkMsaUJBQWlCLEVBQUU7SUFDckIsQ0FBQyxFQUFFSCxlQUFnQixDQUFDOztJQUVwQjtJQUNBLE1BQU1JLFVBQVUsR0FBR2IsV0FB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