// Copyright 2017-2024, University of Colorado Boulder

/**
 * LetterKeyNode is a TextKeyNode with layout and spacing defaults that look best for a single letter. A letter key is
 * square and that looks best for a single character.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import optionize from '../../../phet-core/js/optionize.js';
import sceneryPhet from '../sceneryPhet.js';
import TextKeyNode from './TextKeyNode.js';
import SceneryPhetStrings from '../SceneryPhetStrings.js';
export default class LetterKeyNode extends TextKeyNode {
  constructor(letter, providedOptions) {
    const options = optionize()({
      xPadding: 5,
      forceSquareKey: true
    }, providedOptions);
    super(letter, options);
  }

  //-------------------------------------------------------------------------------------------------
  // Static factory methods for specific letter key strings.
  //-------------------------------------------------------------------------------------------------

  static a(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.aStringProperty, providedOptions);
  }
  static c(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.cStringProperty, providedOptions);
  }
  static d(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.dStringProperty, providedOptions);
  }
  static l(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.lStringProperty, providedOptions);
  }
  static r(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.rStringProperty, providedOptions);
  }
  static s(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.sStringProperty, providedOptions);
  }
  static w(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.wStringProperty, providedOptions);
  }
  static one(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.oneStringProperty, providedOptions);
  }
  static two(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.twoStringProperty, providedOptions);
  }
  static three(providedOptions) {
    return new LetterKeyNode(SceneryPhetStrings.key.threeStringProperty, providedOptions);
  }
}
sceneryPhet.register('LetterKeyNode', LetterKeyNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIlRleHRLZXlOb2RlIiwiU2NlbmVyeVBoZXRTdHJpbmdzIiwiTGV0dGVyS2V5Tm9kZSIsImNvbnN0cnVjdG9yIiwibGV0dGVyIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInhQYWRkaW5nIiwiZm9yY2VTcXVhcmVLZXkiLCJhIiwia2V5IiwiYVN0cmluZ1Byb3BlcnR5IiwiYyIsImNTdHJpbmdQcm9wZXJ0eSIsImQiLCJkU3RyaW5nUHJvcGVydHkiLCJsIiwibFN0cmluZ1Byb3BlcnR5IiwiciIsInJTdHJpbmdQcm9wZXJ0eSIsInMiLCJzU3RyaW5nUHJvcGVydHkiLCJ3Iiwid1N0cmluZ1Byb3BlcnR5Iiwib25lIiwib25lU3RyaW5nUHJvcGVydHkiLCJ0d28iLCJ0d29TdHJpbmdQcm9wZXJ0eSIsInRocmVlIiwidGhyZWVTdHJpbmdQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGV0dGVyS2V5Tm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMZXR0ZXJLZXlOb2RlIGlzIGEgVGV4dEtleU5vZGUgd2l0aCBsYXlvdXQgYW5kIHNwYWNpbmcgZGVmYXVsdHMgdGhhdCBsb29rIGJlc3QgZm9yIGEgc2luZ2xlIGxldHRlci4gQSBsZXR0ZXIga2V5IGlzXHJcbiAqIHNxdWFyZSBhbmQgdGhhdCBsb29rcyBiZXN0IGZvciBhIHNpbmdsZSBjaGFyYWN0ZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuLi9zY2VuZXJ5UGhldC5qcyc7XHJcbmltcG9ydCBUZXh0S2V5Tm9kZSwgeyBUZXh0S2V5Tm9kZU9wdGlvbnMgfSBmcm9tICcuL1RleHRLZXlOb2RlLmpzJztcclxuaW1wb3J0IEtleU5vZGUgZnJvbSAnLi9LZXlOb2RlLmpzJztcclxuaW1wb3J0IFNjZW5lcnlQaGV0U3RyaW5ncyBmcm9tICcuLi9TY2VuZXJ5UGhldFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIExldHRlcktleU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFRleHRLZXlOb2RlT3B0aW9ucywgJ2ZvcmNlU3F1YXJlS2V5Jz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMZXR0ZXJLZXlOb2RlIGV4dGVuZHMgVGV4dEtleU5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGxldHRlcjogc3RyaW5nIHwgVFJlYWRPbmx5UHJvcGVydHk8c3RyaW5nPiwgcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKSB7XHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPExldHRlcktleU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgVGV4dEtleU5vZGVPcHRpb25zPigpKCB7XHJcbiAgICAgIHhQYWRkaW5nOiA1LFxyXG4gICAgICBmb3JjZVNxdWFyZUtleTogdHJ1ZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGxldHRlciwgb3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgLy8tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXHJcbiAgLy8gU3RhdGljIGZhY3RvcnkgbWV0aG9kcyBmb3Igc3BlY2lmaWMgbGV0dGVyIGtleSBzdHJpbmdzLlxyXG4gIC8vLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGEoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LmFTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGMoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LmNTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGQoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LmRTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGwoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LmxTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHIoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LnJTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHMoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LnNTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHcoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LndTdHJpbmdQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIG9uZSggcHJvdmlkZWRPcHRpb25zPzogTGV0dGVyS2V5Tm9kZU9wdGlvbnMgKTogS2V5Tm9kZSB7XHJcbiAgICByZXR1cm4gbmV3IExldHRlcktleU5vZGUoIFNjZW5lcnlQaGV0U3RyaW5ncy5rZXkub25lU3RyaW5nUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyB0d28oIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LnR3b1N0cmluZ1Byb3BlcnR5LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgdGhyZWUoIHByb3ZpZGVkT3B0aW9ucz86IExldHRlcktleU5vZGVPcHRpb25zICk6IEtleU5vZGUge1xyXG4gICAgcmV0dXJuIG5ldyBMZXR0ZXJLZXlOb2RlKCBTY2VuZXJ5UGhldFN0cmluZ3Mua2V5LnRocmVlU3RyaW5nUHJvcGVydHksIHByb3ZpZGVkT3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdMZXR0ZXJLZXlOb2RlJywgTGV0dGVyS2V5Tm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsb0NBQW9DO0FBRWhGLE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7QUFDM0MsT0FBT0MsV0FBVyxNQUE4QixrQkFBa0I7QUFFbEUsT0FBT0Msa0JBQWtCLE1BQU0sMEJBQTBCO0FBT3pELGVBQWUsTUFBTUMsYUFBYSxTQUFTRixXQUFXLENBQUM7RUFFOUNHLFdBQVdBLENBQUVDLE1BQTBDLEVBQUVDLGVBQXNDLEVBQUc7SUFDdkcsTUFBTUMsT0FBTyxHQUFHUixTQUFTLENBQXdELENBQUMsQ0FBRTtNQUNsRlMsUUFBUSxFQUFFLENBQUM7TUFDWEMsY0FBYyxFQUFFO0lBQ2xCLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVELE1BQU0sRUFBRUUsT0FBUSxDQUFDO0VBQzFCOztFQUVBO0VBQ0E7RUFDQTs7RUFFQSxPQUFjRyxDQUFDQSxDQUFFSixlQUFzQyxFQUFZO0lBQ2pFLE9BQU8sSUFBSUgsYUFBYSxDQUFFRCxrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDQyxlQUFlLEVBQUVOLGVBQWdCLENBQUM7RUFDckY7RUFFQSxPQUFjTyxDQUFDQSxDQUFFUCxlQUFzQyxFQUFZO0lBQ2pFLE9BQU8sSUFBSUgsYUFBYSxDQUFFRCxrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDRyxlQUFlLEVBQUVSLGVBQWdCLENBQUM7RUFDckY7RUFFQSxPQUFjUyxDQUFDQSxDQUFFVCxlQUFzQyxFQUFZO0lBQ2pFLE9BQU8sSUFBSUgsYUFBYSxDQUFFRCxrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDSyxlQUFlLEVBQUVWLGVBQWdCLENBQUM7RUFDckY7RUFFQSxPQUFjVyxDQUFDQSxDQUFFWCxlQUFzQyxFQUFZO0lBQ2pFLE9BQU8sSUFBSUgsYUFBYSxDQUFFRCxrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDTyxlQUFlLEVBQUVaLGVBQWdCLENBQUM7RUFDckY7RUFFQSxPQUFjYSxDQUFDQSxDQUFFYixlQUFzQyxFQUFZO0lBQ2pFLE9BQU8sSUFBSUgsYUFBYSxDQUFFRCxrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDUyxlQUFlLEVBQUVkLGVBQWdCLENBQUM7RUFDckY7RUFFQSxPQUFjZSxDQUFDQSxDQUFFZixlQUFzQyxFQUFZO0lBQ2pFLE9BQU8sSUFBSUgsYUFBYSxDQUFFRCxrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDVyxlQUFlLEVBQUVoQixlQUFnQixDQUFDO0VBQ3JGO0VBRUEsT0FBY2lCLENBQUNBLENBQUVqQixlQUFzQyxFQUFZO0lBQ2pFLE9BQU8sSUFBSUgsYUFBYSxDQUFFRCxrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDYSxlQUFlLEVBQUVsQixlQUFnQixDQUFDO0VBQ3JGO0VBRUEsT0FBY21CLEdBQUdBLENBQUVuQixlQUFzQyxFQUFZO0lBQ25FLE9BQU8sSUFBSUgsYUFBYSxDQUFFRCxrQkFBa0IsQ0FBQ1MsR0FBRyxDQUFDZSxpQkFBaUIsRUFBRXBCLGVBQWdCLENBQUM7RUFDdkY7RUFFQSxPQUFjcUIsR0FBR0EsQ0FBRXJCLGVBQXNDLEVBQVk7SUFDbkUsT0FBTyxJQUFJSCxhQUFhLENBQUVELGtCQUFrQixDQUFDUyxHQUFHLENBQUNpQixpQkFBaUIsRUFBRXRCLGVBQWdCLENBQUM7RUFDdkY7RUFFQSxPQUFjdUIsS0FBS0EsQ0FBRXZCLGVBQXNDLEVBQVk7SUFDckUsT0FBTyxJQUFJSCxhQUFhLENBQUVELGtCQUFrQixDQUFDUyxHQUFHLENBQUNtQixtQkFBbUIsRUFBRXhCLGVBQWdCLENBQUM7RUFDekY7QUFDRjtBQUVBTixXQUFXLENBQUMrQixRQUFRLENBQUUsZUFBZSxFQUFFNUIsYUFBYyxDQUFDIiwiaWdub3JlTGlzdCI6W119