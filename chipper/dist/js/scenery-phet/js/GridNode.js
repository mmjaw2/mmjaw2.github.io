// Copyright 2022-2023, University of Colorado Boulder

/**
 * When enabled, shows a grid across the play area that helps the user to make quantitative comparisons
 * between distances.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Aaron Davis (PhET Interactive Simulations)
 * @author AgustÃ­n Vallejo
 */

import sceneryPhet from './sceneryPhet.js';
import { Shape } from '../../kite/js/imports.js';
import { Path } from '../../scenery/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
export default class GridNode extends Path {
  /**
   * @param transformProperty
   * @param spacing - spacing between grid lines
   * @param center - center of the grid in model coordinates
   * @param numberOfGridLines - number of grid lines on each side of the center
   * @param [providedOptions]
   */
  constructor(transformProperty, spacing, center, numberOfGridLines, providedOptions) {
    const options = optionize()({
      stroke: 'gray'
    }, providedOptions);
    super(null, options);
    transformProperty.link(transform => {
      const shape = new Shape();
      const x1 = -numberOfGridLines * spacing + center.x;
      const x2 = numberOfGridLines * spacing + center.x;
      const y1 = -numberOfGridLines * spacing + center.y;
      const y2 = numberOfGridLines * spacing + center.y;
      for (let i = -numberOfGridLines; i <= numberOfGridLines; i++) {
        const x = i * spacing + center.x;
        const y = i * spacing + center.y;
        shape.moveTo(x1, y).lineTo(x2, y); // horizontal lines
        shape.moveTo(x, y1).lineTo(x, y2); // vertical lines
      }
      this.shape = transform.modelToViewShape(shape);
    });
  }
}
sceneryPhet.register('GridNode', GridNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJzY2VuZXJ5UGhldCIsIlNoYXBlIiwiUGF0aCIsIm9wdGlvbml6ZSIsIkdyaWROb2RlIiwiY29uc3RydWN0b3IiLCJ0cmFuc2Zvcm1Qcm9wZXJ0eSIsInNwYWNpbmciLCJjZW50ZXIiLCJudW1iZXJPZkdyaWRMaW5lcyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzdHJva2UiLCJsaW5rIiwidHJhbnNmb3JtIiwic2hhcGUiLCJ4MSIsIngiLCJ4MiIsInkxIiwieSIsInkyIiwiaSIsIm1vdmVUbyIsImxpbmVUbyIsIm1vZGVsVG9WaWV3U2hhcGUiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdyaWROb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFdoZW4gZW5hYmxlZCwgc2hvd3MgYSBncmlkIGFjcm9zcyB0aGUgcGxheSBhcmVhIHRoYXQgaGVscHMgdGhlIHVzZXIgdG8gbWFrZSBxdWFudGl0YXRpdmUgY29tcGFyaXNvbnNcclxuICogYmV0d2VlbiBkaXN0YW5jZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQWFyb24gRGF2aXMgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgQWd1c3TDrW4gVmFsbGVqb1xyXG4gKi9cclxuXHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IHsgU2hhcGUgfSBmcm9tICcuLi8uLi9raXRlL2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBQYXRoLCBQYXRoT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBNb2RlbFZpZXdUcmFuc2Zvcm0yIGZyb20gJy4uLy4uL3BoZXRjb21tb24vanMvdmlldy9Nb2RlbFZpZXdUcmFuc2Zvcm0yLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG5leHBvcnQgdHlwZSBHcmlkTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBhdGhPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgR3JpZE5vZGUgZXh0ZW5kcyBQYXRoIHtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIHRyYW5zZm9ybVByb3BlcnR5XHJcbiAgICogQHBhcmFtIHNwYWNpbmcgLSBzcGFjaW5nIGJldHdlZW4gZ3JpZCBsaW5lc1xyXG4gICAqIEBwYXJhbSBjZW50ZXIgLSBjZW50ZXIgb2YgdGhlIGdyaWQgaW4gbW9kZWwgY29vcmRpbmF0ZXNcclxuICAgKiBAcGFyYW0gbnVtYmVyT2ZHcmlkTGluZXMgLSBudW1iZXIgb2YgZ3JpZCBsaW5lcyBvbiBlYWNoIHNpZGUgb2YgdGhlIGNlbnRlclxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggdHJhbnNmb3JtUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PE1vZGVsVmlld1RyYW5zZm9ybTI+LCBzcGFjaW5nOiBudW1iZXIsIGNlbnRlcjogVmVjdG9yMiwgbnVtYmVyT2ZHcmlkTGluZXM6IG51bWJlciwgcHJvdmlkZWRPcHRpb25zPzogR3JpZE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8R3JpZE5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGF0aE9wdGlvbnM+KCkoIHtcclxuICAgICAgc3Ryb2tlOiAnZ3JheSdcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBudWxsLCBvcHRpb25zICk7XHJcblxyXG4gICAgdHJhbnNmb3JtUHJvcGVydHkubGluayggKCB0cmFuc2Zvcm06IE1vZGVsVmlld1RyYW5zZm9ybTIgKSA9PiB7XHJcbiAgICAgIGNvbnN0IHNoYXBlID0gbmV3IFNoYXBlKCk7XHJcblxyXG4gICAgICBjb25zdCB4MSA9IC1udW1iZXJPZkdyaWRMaW5lcyAqIHNwYWNpbmcgKyBjZW50ZXIueDtcclxuICAgICAgY29uc3QgeDIgPSBudW1iZXJPZkdyaWRMaW5lcyAqIHNwYWNpbmcgKyBjZW50ZXIueDtcclxuICAgICAgY29uc3QgeTEgPSAtbnVtYmVyT2ZHcmlkTGluZXMgKiBzcGFjaW5nICsgY2VudGVyLnk7XHJcbiAgICAgIGNvbnN0IHkyID0gbnVtYmVyT2ZHcmlkTGluZXMgKiBzcGFjaW5nICsgY2VudGVyLnk7XHJcblxyXG4gICAgICBmb3IgKCBsZXQgaSA9IC1udW1iZXJPZkdyaWRMaW5lczsgaSA8PSBudW1iZXJPZkdyaWRMaW5lczsgaSsrICkge1xyXG4gICAgICAgIGNvbnN0IHggPSBpICogc3BhY2luZyArIGNlbnRlci54O1xyXG4gICAgICAgIGNvbnN0IHkgPSBpICogc3BhY2luZyArIGNlbnRlci55O1xyXG4gICAgICAgIHNoYXBlLm1vdmVUbyggeDEsIHkgKS5saW5lVG8oIHgyLCB5ICk7IC8vIGhvcml6b250YWwgbGluZXNcclxuICAgICAgICBzaGFwZS5tb3ZlVG8oIHgsIHkxICkubGluZVRvKCB4LCB5MiApOyAvLyB2ZXJ0aWNhbCBsaW5lc1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzLnNoYXBlID0gdHJhbnNmb3JtLm1vZGVsVG9WaWV3U2hhcGUoIHNoYXBlICk7XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5UGhldC5yZWdpc3RlciggJ0dyaWROb2RlJywgR3JpZE5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxTQUFTQyxLQUFLLFFBQVEsMEJBQTBCO0FBQ2hELFNBQVNDLElBQUksUUFBcUIsNkJBQTZCO0FBRy9ELE9BQU9DLFNBQVMsTUFBNEIsaUNBQWlDO0FBTzdFLGVBQWUsTUFBTUMsUUFBUSxTQUFTRixJQUFJLENBQUM7RUFFekM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0csV0FBV0EsQ0FBRUMsaUJBQXlELEVBQUVDLE9BQWUsRUFBRUMsTUFBZSxFQUFFQyxpQkFBeUIsRUFBRUMsZUFBaUMsRUFBRztJQUU5SyxNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBNEMsQ0FBQyxDQUFFO01BQ3RFUyxNQUFNLEVBQUU7SUFDVixDQUFDLEVBQUVGLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFLElBQUksRUFBRUMsT0FBUSxDQUFDO0lBRXRCTCxpQkFBaUIsQ0FBQ08sSUFBSSxDQUFJQyxTQUE4QixJQUFNO01BQzVELE1BQU1DLEtBQUssR0FBRyxJQUFJZCxLQUFLLENBQUMsQ0FBQztNQUV6QixNQUFNZSxFQUFFLEdBQUcsQ0FBQ1AsaUJBQWlCLEdBQUdGLE9BQU8sR0FBR0MsTUFBTSxDQUFDUyxDQUFDO01BQ2xELE1BQU1DLEVBQUUsR0FBR1QsaUJBQWlCLEdBQUdGLE9BQU8sR0FBR0MsTUFBTSxDQUFDUyxDQUFDO01BQ2pELE1BQU1FLEVBQUUsR0FBRyxDQUFDVixpQkFBaUIsR0FBR0YsT0FBTyxHQUFHQyxNQUFNLENBQUNZLENBQUM7TUFDbEQsTUFBTUMsRUFBRSxHQUFHWixpQkFBaUIsR0FBR0YsT0FBTyxHQUFHQyxNQUFNLENBQUNZLENBQUM7TUFFakQsS0FBTSxJQUFJRSxDQUFDLEdBQUcsQ0FBQ2IsaUJBQWlCLEVBQUVhLENBQUMsSUFBSWIsaUJBQWlCLEVBQUVhLENBQUMsRUFBRSxFQUFHO1FBQzlELE1BQU1MLENBQUMsR0FBR0ssQ0FBQyxHQUFHZixPQUFPLEdBQUdDLE1BQU0sQ0FBQ1MsQ0FBQztRQUNoQyxNQUFNRyxDQUFDLEdBQUdFLENBQUMsR0FBR2YsT0FBTyxHQUFHQyxNQUFNLENBQUNZLENBQUM7UUFDaENMLEtBQUssQ0FBQ1EsTUFBTSxDQUFFUCxFQUFFLEVBQUVJLENBQUUsQ0FBQyxDQUFDSSxNQUFNLENBQUVOLEVBQUUsRUFBRUUsQ0FBRSxDQUFDLENBQUMsQ0FBQztRQUN2Q0wsS0FBSyxDQUFDUSxNQUFNLENBQUVOLENBQUMsRUFBRUUsRUFBRyxDQUFDLENBQUNLLE1BQU0sQ0FBRVAsQ0FBQyxFQUFFSSxFQUFHLENBQUMsQ0FBQyxDQUFDO01BQ3pDO01BRUEsSUFBSSxDQUFDTixLQUFLLEdBQUdELFNBQVMsQ0FBQ1csZ0JBQWdCLENBQUVWLEtBQU0sQ0FBQztJQUNsRCxDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFmLFdBQVcsQ0FBQzBCLFFBQVEsQ0FBRSxVQUFVLEVBQUV0QixRQUFTLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=