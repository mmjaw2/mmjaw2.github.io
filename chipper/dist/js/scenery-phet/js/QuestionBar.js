// Copyright 2022-2023, University of Colorado Boulder

/**
 * In every screen, the question bar at the top provides a framing question and context.
 *
 * @author Chris Klusendorf (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../phet-core/js/optionize.js';
import sceneryPhet from './sceneryPhet.js';
import StatusBar from '../../scenery-phet/js/StatusBar.js';
import { Text } from '../../scenery/js/imports.js';
import PhetFont from '../../scenery-phet/js/PhetFont.js';
import Multilink from '../../axon/js/Multilink.js';
const QUESTION_TEXT_MARGIN = 30;
export default class QuestionBar extends StatusBar {
  constructor(layoutBounds, visibleBoundsProperty, providedOptions) {
    const options = optionize()({
      floatToTop: true,
      barHeight: 70,
      textOptions: {
        font: new PhetFont({
          weight: 'bold',
          size: '23px'
        }),
        maxWidth: layoutBounds.width - QUESTION_TEXT_MARGIN * 2
      }
    }, providedOptions);
    super(layoutBounds, visibleBoundsProperty, options);
    const questionText = new Text(options.questionString, options.textOptions);
    this.addChild(questionText);
    Multilink.multilink([questionText.localBoundsProperty, this.positioningBoundsProperty], (localBounds, positioningBounds) => {
      questionText.centerY = positioningBounds.centerY;
      questionText.left = QUESTION_TEXT_MARGIN;
    });
    this.disposeQuestionBar = () => {
      questionText.dispose(); // may be linked to a string Property
    };
  }
  dispose() {
    this.disposeQuestionBar();
    super.dispose();
  }
}
sceneryPhet.register('QuestionBar', QuestionBar);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIlN0YXR1c0JhciIsIlRleHQiLCJQaGV0Rm9udCIsIk11bHRpbGluayIsIlFVRVNUSU9OX1RFWFRfTUFSR0lOIiwiUXVlc3Rpb25CYXIiLCJjb25zdHJ1Y3RvciIsImxheW91dEJvdW5kcyIsInZpc2libGVCb3VuZHNQcm9wZXJ0eSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJmbG9hdFRvVG9wIiwiYmFySGVpZ2h0IiwidGV4dE9wdGlvbnMiLCJmb250Iiwid2VpZ2h0Iiwic2l6ZSIsIm1heFdpZHRoIiwid2lkdGgiLCJxdWVzdGlvblRleHQiLCJxdWVzdGlvblN0cmluZyIsImFkZENoaWxkIiwibXVsdGlsaW5rIiwibG9jYWxCb3VuZHNQcm9wZXJ0eSIsInBvc2l0aW9uaW5nQm91bmRzUHJvcGVydHkiLCJsb2NhbEJvdW5kcyIsInBvc2l0aW9uaW5nQm91bmRzIiwiY2VudGVyWSIsImxlZnQiLCJkaXNwb3NlUXVlc3Rpb25CYXIiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJRdWVzdGlvbkJhci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBJbiBldmVyeSBzY3JlZW4sIHRoZSBxdWVzdGlvbiBiYXIgYXQgdGhlIHRvcCBwcm92aWRlcyBhIGZyYW1pbmcgcXVlc3Rpb24gYW5kIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgS2x1c2VuZG9yZiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaWN0T21pdCBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvU3RyaWN0T21pdC5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IFN0YXR1c0JhciwgeyBTdGF0dXNCYXJPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS1waGV0L2pzL1N0YXR1c0Jhci5qcyc7XHJcbmltcG9ydCB7IFRleHQsIFRleHRPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi4vLi4vc2NlbmVyeS1waGV0L2pzL1BoZXRGb250LmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgcXVlc3Rpb25TdHJpbmc6IHN0cmluZyB8IFRSZWFkT25seVByb3BlcnR5PHN0cmluZz47XHJcbiAgdGV4dE9wdGlvbnM/OiBUZXh0T3B0aW9ucztcclxufTtcclxuZXhwb3J0IHR5cGUgUXVlc3Rpb25CYXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTdHJpY3RPbWl0PFN0YXR1c0Jhck9wdGlvbnMsICdmbG9hdFRvVG9wJz47XHJcblxyXG5jb25zdCBRVUVTVElPTl9URVhUX01BUkdJTiA9IDMwO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUXVlc3Rpb25CYXIgZXh0ZW5kcyBTdGF0dXNCYXIge1xyXG5cclxuICBwcml2YXRlIHJlYWRvbmx5IGRpc3Bvc2VRdWVzdGlvbkJhcjogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsYXlvdXRCb3VuZHM6IEJvdW5kczIsIHZpc2libGVCb3VuZHNQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Qm91bmRzMj4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM6IFF1ZXN0aW9uQmFyT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFF1ZXN0aW9uQmFyT3B0aW9ucywgU2VsZk9wdGlvbnMsIFN0YXR1c0Jhck9wdGlvbnM+KCkoIHtcclxuICAgICAgZmxvYXRUb1RvcDogdHJ1ZSxcclxuICAgICAgYmFySGVpZ2h0OiA3MCxcclxuICAgICAgdGV4dE9wdGlvbnM6IHtcclxuICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIHtcclxuICAgICAgICAgIHdlaWdodDogJ2JvbGQnLFxyXG4gICAgICAgICAgc2l6ZTogJzIzcHgnXHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIG1heFdpZHRoOiBsYXlvdXRCb3VuZHMud2lkdGggLSBRVUVTVElPTl9URVhUX01BUkdJTiAqIDJcclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIGxheW91dEJvdW5kcywgdmlzaWJsZUJvdW5kc1Byb3BlcnR5LCBvcHRpb25zICk7XHJcblxyXG4gICAgY29uc3QgcXVlc3Rpb25UZXh0ID0gbmV3IFRleHQoIG9wdGlvbnMucXVlc3Rpb25TdHJpbmcsIG9wdGlvbnMudGV4dE9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmFkZENoaWxkKCBxdWVzdGlvblRleHQgKTtcclxuXHJcbiAgICBNdWx0aWxpbmsubXVsdGlsaW5rKCBbIHF1ZXN0aW9uVGV4dC5sb2NhbEJvdW5kc1Byb3BlcnR5LCB0aGlzLnBvc2l0aW9uaW5nQm91bmRzUHJvcGVydHkgXSwgKCBsb2NhbEJvdW5kcywgcG9zaXRpb25pbmdCb3VuZHMgKSA9PiB7XHJcbiAgICAgIHF1ZXN0aW9uVGV4dC5jZW50ZXJZID0gcG9zaXRpb25pbmdCb3VuZHMuY2VudGVyWTtcclxuICAgICAgcXVlc3Rpb25UZXh0LmxlZnQgPSBRVUVTVElPTl9URVhUX01BUkdJTjtcclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VRdWVzdGlvbkJhciA9ICgpID0+IHtcclxuICAgICAgcXVlc3Rpb25UZXh0LmRpc3Bvc2UoKTsgLy8gbWF5IGJlIGxpbmtlZCB0byBhIHN0cmluZyBQcm9wZXJ0eVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5kaXNwb3NlUXVlc3Rpb25CYXIoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnUXVlc3Rpb25CYXInLCBRdWVzdGlvbkJhciApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFFdkQsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxTQUFTLE1BQTRCLG9DQUFvQztBQUNoRixTQUFTQyxJQUFJLFFBQXFCLDZCQUE2QjtBQUUvRCxPQUFPQyxRQUFRLE1BQU0sbUNBQW1DO0FBRXhELE9BQU9DLFNBQVMsTUFBTSw0QkFBNEI7QUFRbEQsTUFBTUMsb0JBQW9CLEdBQUcsRUFBRTtBQUUvQixlQUFlLE1BQU1DLFdBQVcsU0FBU0wsU0FBUyxDQUFDO0VBSTFDTSxXQUFXQSxDQUFFQyxZQUFxQixFQUFFQyxxQkFBaUQsRUFDeEVDLGVBQW1DLEVBQUc7SUFFeEQsTUFBTUMsT0FBTyxHQUFHWixTQUFTLENBQW9ELENBQUMsQ0FBRTtNQUM5RWEsVUFBVSxFQUFFLElBQUk7TUFDaEJDLFNBQVMsRUFBRSxFQUFFO01BQ2JDLFdBQVcsRUFBRTtRQUNYQyxJQUFJLEVBQUUsSUFBSVosUUFBUSxDQUFFO1VBQ2xCYSxNQUFNLEVBQUUsTUFBTTtVQUNkQyxJQUFJLEVBQUU7UUFDUixDQUFFLENBQUM7UUFDSEMsUUFBUSxFQUFFVixZQUFZLENBQUNXLEtBQUssR0FBR2Qsb0JBQW9CLEdBQUc7TUFDeEQ7SUFDRixDQUFDLEVBQUVLLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFRixZQUFZLEVBQUVDLHFCQUFxQixFQUFFRSxPQUFRLENBQUM7SUFFckQsTUFBTVMsWUFBWSxHQUFHLElBQUlsQixJQUFJLENBQUVTLE9BQU8sQ0FBQ1UsY0FBYyxFQUFFVixPQUFPLENBQUNHLFdBQVksQ0FBQztJQUU1RSxJQUFJLENBQUNRLFFBQVEsQ0FBRUYsWUFBYSxDQUFDO0lBRTdCaEIsU0FBUyxDQUFDbUIsU0FBUyxDQUFFLENBQUVILFlBQVksQ0FBQ0ksbUJBQW1CLEVBQUUsSUFBSSxDQUFDQyx5QkFBeUIsQ0FBRSxFQUFFLENBQUVDLFdBQVcsRUFBRUMsaUJBQWlCLEtBQU07TUFDL0hQLFlBQVksQ0FBQ1EsT0FBTyxHQUFHRCxpQkFBaUIsQ0FBQ0MsT0FBTztNQUNoRFIsWUFBWSxDQUFDUyxJQUFJLEdBQUd4QixvQkFBb0I7SUFDMUMsQ0FBRSxDQUFDO0lBRUgsSUFBSSxDQUFDeUIsa0JBQWtCLEdBQUcsTUFBTTtNQUM5QlYsWUFBWSxDQUFDVyxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUM7SUFDMUIsQ0FBQztFQUNIO0VBRWdCQSxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDRCxrQkFBa0IsQ0FBQyxDQUFDO0lBQ3pCLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBL0IsV0FBVyxDQUFDZ0MsUUFBUSxDQUFFLGFBQWEsRUFBRTFCLFdBQVksQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==