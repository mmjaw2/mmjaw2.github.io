// Copyright 2022-2024, University of Colorado Boulder

/**
 * BackgroundNode puts a Node on a rectangular background, dynamically sized to fit the Node.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import optionize from '../../phet-core/js/optionize.js';
import { Node, Rectangle } from '../../scenery/js/imports.js';
import sceneryPhet from './sceneryPhet.js';
export default class BackgroundNode extends Node {
  // Unfortunate that this is public :(

  /**
   * @param node - the Node that will be put on the background
   * @param providedOptions
   */
  constructor(node, providedOptions) {
    const options = optionize()({
      // BackgroundNodeOptions
      xMargin: 2,
      yMargin: 2,
      rectangleOptions: {
        fill: 'white',
        opacity: 0.75
      }
    }, providedOptions);
    super();

    // translucent rectangle, initial size is arbitrary since it is resized below
    this.background = new Rectangle(0, 0, 1, 1, options.rectangleOptions);

    // Wrap the provided Node in a parent to avoid unneeded notifications in the bounds-change listener.
    const wrapperNode = new Node({
      children: [node]
    });

    // Size the background rectangle to fit the Node.
    const boundsListener = bounds => {
      if (!bounds.isEmpty()) {
        this.background.setRect(0, 0, node.width + 2 * options.xMargin, node.height + 2 * options.yMargin);
        wrapperNode.center = this.background.center;
      }
    };
    node.boundsProperty.link(boundsListener);
    this.disposeEmitter.addListener(() => {
      if (node.boundsProperty.hasListener(boundsListener)) {
        node.boundsProperty.unlink(boundsListener);
      }
    });
    options.children = [this.background, wrapperNode];
    this.mutate(options);
  }
}
sceneryPhet.register('BackgroundNode', BackgroundNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOb2RlIiwiUmVjdGFuZ2xlIiwic2NlbmVyeVBoZXQiLCJCYWNrZ3JvdW5kTm9kZSIsImNvbnN0cnVjdG9yIiwibm9kZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ4TWFyZ2luIiwieU1hcmdpbiIsInJlY3RhbmdsZU9wdGlvbnMiLCJmaWxsIiwib3BhY2l0eSIsImJhY2tncm91bmQiLCJ3cmFwcGVyTm9kZSIsImNoaWxkcmVuIiwiYm91bmRzTGlzdGVuZXIiLCJib3VuZHMiLCJpc0VtcHR5Iiwic2V0UmVjdCIsIndpZHRoIiwiaGVpZ2h0IiwiY2VudGVyIiwiYm91bmRzUHJvcGVydHkiLCJsaW5rIiwiZGlzcG9zZUVtaXR0ZXIiLCJhZGRMaXN0ZW5lciIsImhhc0xpc3RlbmVyIiwidW5saW5rIiwibXV0YXRlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJCYWNrZ3JvdW5kTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBCYWNrZ3JvdW5kTm9kZSBwdXRzIGEgTm9kZSBvbiBhIHJlY3Rhbmd1bGFyIGJhY2tncm91bmQsIGR5bmFtaWNhbGx5IHNpemVkIHRvIGZpdCB0aGUgTm9kZS5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMsIFJlY3RhbmdsZSwgUmVjdGFuZ2xlT3B0aW9ucyB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICB4TWFyZ2luPzogbnVtYmVyOyAvLyBzZXQgdGhlIHggbWFyZ2luIGJldHdlZW4gdGhlIE5vZGUgY29udGVudCBhbmQgYmFja2dyb3VuZCBlZGdlXHJcbiAgeU1hcmdpbj86IG51bWJlcjsgLy8gc2V0IHRoZSB5IG1hcmdpbiBiZXR3ZWVuIHRoZSBOb2RlIGNvbnRlbnQgYW5kIGJhY2tncm91bmQgZWRnZVxyXG4gIHJlY3RhbmdsZU9wdGlvbnM/OiBSZWN0YW5nbGVPcHRpb25zOyAvLyBvcHRpb25zIHBhc3NlZCB0byB0aGUgYmFja2dyb3VuZCBwaGV0LnNjZW5lcnkuUmVjdGFuZ2xlXHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBCYWNrZ3JvdW5kTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8Tm9kZU9wdGlvbnMsICdjaGlsZHJlbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQmFja2dyb3VuZE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGJhY2tncm91bmQ6IFJlY3RhbmdsZTsgLy8gVW5mb3J0dW5hdGUgdGhhdCB0aGlzIGlzIHB1YmxpYyA6KFxyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gbm9kZSAtIHRoZSBOb2RlIHRoYXQgd2lsbCBiZSBwdXQgb24gdGhlIGJhY2tncm91bmRcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBub2RlOiBOb2RlLCBwcm92aWRlZE9wdGlvbnM/OiBCYWNrZ3JvdW5kTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxCYWNrZ3JvdW5kTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gQmFja2dyb3VuZE5vZGVPcHRpb25zXHJcbiAgICAgIHhNYXJnaW46IDIsXHJcbiAgICAgIHlNYXJnaW46IDIsXHJcbiAgICAgIHJlY3RhbmdsZU9wdGlvbnM6IHtcclxuICAgICAgICBmaWxsOiAnd2hpdGUnLFxyXG4gICAgICAgIG9wYWNpdHk6IDAuNzVcclxuICAgICAgfVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICAvLyB0cmFuc2x1Y2VudCByZWN0YW5nbGUsIGluaXRpYWwgc2l6ZSBpcyBhcmJpdHJhcnkgc2luY2UgaXQgaXMgcmVzaXplZCBiZWxvd1xyXG4gICAgdGhpcy5iYWNrZ3JvdW5kID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgMSwgMSwgb3B0aW9ucy5yZWN0YW5nbGVPcHRpb25zICk7XHJcblxyXG4gICAgLy8gV3JhcCB0aGUgcHJvdmlkZWQgTm9kZSBpbiBhIHBhcmVudCB0byBhdm9pZCB1bm5lZWRlZCBub3RpZmljYXRpb25zIGluIHRoZSBib3VuZHMtY2hhbmdlIGxpc3RlbmVyLlxyXG4gICAgY29uc3Qgd3JhcHBlck5vZGUgPSBuZXcgTm9kZSggeyBjaGlsZHJlbjogWyBub2RlIF0gfSApO1xyXG5cclxuICAgIC8vIFNpemUgdGhlIGJhY2tncm91bmQgcmVjdGFuZ2xlIHRvIGZpdCB0aGUgTm9kZS5cclxuICAgIGNvbnN0IGJvdW5kc0xpc3RlbmVyID0gKCBib3VuZHM6IEJvdW5kczIgKSA9PiB7XHJcbiAgICAgIGlmICggIWJvdW5kcy5pc0VtcHR5KCkgKSB7XHJcbiAgICAgICAgdGhpcy5iYWNrZ3JvdW5kLnNldFJlY3QoIDAsIDAsIG5vZGUud2lkdGggKyAyICogb3B0aW9ucy54TWFyZ2luLCBub2RlLmhlaWdodCArIDIgKiBvcHRpb25zLnlNYXJnaW4gKTtcclxuICAgICAgICB3cmFwcGVyTm9kZS5jZW50ZXIgPSB0aGlzLmJhY2tncm91bmQuY2VudGVyO1xyXG4gICAgICB9XHJcbiAgICB9O1xyXG4gICAgbm9kZS5ib3VuZHNQcm9wZXJ0eS5saW5rKCBib3VuZHNMaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMuZGlzcG9zZUVtaXR0ZXIuYWRkTGlzdGVuZXIoICgpID0+IHtcclxuICAgICAgaWYgKCBub2RlLmJvdW5kc1Byb3BlcnR5Lmhhc0xpc3RlbmVyKCBib3VuZHNMaXN0ZW5lciApICkge1xyXG4gICAgICAgIG5vZGUuYm91bmRzUHJvcGVydHkudW5saW5rKCBib3VuZHNMaXN0ZW5lciApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgdGhpcy5iYWNrZ3JvdW5kLCB3cmFwcGVyTm9kZSBdO1xyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnQmFja2dyb3VuZE5vZGUnLCBCYWNrZ3JvdW5kTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFFdkQsU0FBU0MsSUFBSSxFQUFlQyxTQUFTLFFBQTBCLDZCQUE2QjtBQUM1RixPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBVzFDLGVBQWUsTUFBTUMsY0FBYyxTQUFTSCxJQUFJLENBQUM7RUFFUjs7RUFFdkM7QUFDRjtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsSUFBVSxFQUFFQyxlQUF1QyxFQUFHO0lBRXhFLE1BQU1DLE9BQU8sR0FBR1IsU0FBUyxDQUFrRCxDQUFDLENBQUU7TUFFNUU7TUFDQVMsT0FBTyxFQUFFLENBQUM7TUFDVkMsT0FBTyxFQUFFLENBQUM7TUFDVkMsZ0JBQWdCLEVBQUU7UUFDaEJDLElBQUksRUFBRSxPQUFPO1FBQ2JDLE9BQU8sRUFBRTtNQUNYO0lBQ0YsQ0FBQyxFQUFFTixlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBQyxDQUFDOztJQUVQO0lBQ0EsSUFBSSxDQUFDTyxVQUFVLEdBQUcsSUFBSVosU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRU0sT0FBTyxDQUFDRyxnQkFBaUIsQ0FBQzs7SUFFdkU7SUFDQSxNQUFNSSxXQUFXLEdBQUcsSUFBSWQsSUFBSSxDQUFFO01BQUVlLFFBQVEsRUFBRSxDQUFFVixJQUFJO0lBQUcsQ0FBRSxDQUFDOztJQUV0RDtJQUNBLE1BQU1XLGNBQWMsR0FBS0MsTUFBZSxJQUFNO01BQzVDLElBQUssQ0FBQ0EsTUFBTSxDQUFDQyxPQUFPLENBQUMsQ0FBQyxFQUFHO1FBQ3ZCLElBQUksQ0FBQ0wsVUFBVSxDQUFDTSxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRWQsSUFBSSxDQUFDZSxLQUFLLEdBQUcsQ0FBQyxHQUFHYixPQUFPLENBQUNDLE9BQU8sRUFBRUgsSUFBSSxDQUFDZ0IsTUFBTSxHQUFHLENBQUMsR0FBR2QsT0FBTyxDQUFDRSxPQUFRLENBQUM7UUFDcEdLLFdBQVcsQ0FBQ1EsTUFBTSxHQUFHLElBQUksQ0FBQ1QsVUFBVSxDQUFDUyxNQUFNO01BQzdDO0lBQ0YsQ0FBQztJQUNEakIsSUFBSSxDQUFDa0IsY0FBYyxDQUFDQyxJQUFJLENBQUVSLGNBQWUsQ0FBQztJQUUxQyxJQUFJLENBQUNTLGNBQWMsQ0FBQ0MsV0FBVyxDQUFFLE1BQU07TUFDckMsSUFBS3JCLElBQUksQ0FBQ2tCLGNBQWMsQ0FBQ0ksV0FBVyxDQUFFWCxjQUFlLENBQUMsRUFBRztRQUN2RFgsSUFBSSxDQUFDa0IsY0FBYyxDQUFDSyxNQUFNLENBQUVaLGNBQWUsQ0FBQztNQUM5QztJQUNGLENBQUUsQ0FBQztJQUVIVCxPQUFPLENBQUNRLFFBQVEsR0FBRyxDQUFFLElBQUksQ0FBQ0YsVUFBVSxFQUFFQyxXQUFXLENBQUU7SUFDbkQsSUFBSSxDQUFDZSxNQUFNLENBQUV0QixPQUFRLENBQUM7RUFDeEI7QUFDRjtBQUVBTCxXQUFXLENBQUM0QixRQUFRLENBQUUsZ0JBQWdCLEVBQUUzQixjQUFlLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=