// Copyright 2013-2024, University of Colorado Boulder

/**
 * GaugeNode is a circular gauge that depicts some dynamic value.
 * This was originally ported from the speedometer node in forces-and-motion-basics.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author John Blanco (PhET Interactive Simulations)
 */

import Matrix3 from '../../dot/js/Matrix3.js';
import Utils from '../../dot/js/Utils.js';
import { Shape } from '../../kite/js/imports.js';
import InstanceRegistry from '../../phet-core/js/documentation/InstanceRegistry.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import { Circle, Node, Path, Text } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import PhetFont from './PhetFont.js';
import sceneryPhet from './sceneryPhet.js';
export default class GaugeNode extends Node {
  /**
   * @param valueProperty
   * @param labelProperty - label to display, scaled to fit if necessary
   * @param range - range of the needle. If valueProperty exceeds this range, the needle will stop at min or max.
   * @param providedOptions
   */
  constructor(valueProperty, labelProperty, range, providedOptions) {
    const options = optionize()({
      // SelfOptions
      radius: 100,
      backgroundFill: 'white',
      backgroundStroke: 'rgb( 85, 85, 85 )',
      backgroundLineWidth: 2,
      maxLabelWidthScale: 1.3,
      numberOfTicks: 21,
      // 10 ticks each on the right side and left side, plus 1 in the center
      majorTickStroke: 'gray',
      minorTickStroke: 'gray',
      majorTickLength: 10,
      minorTickLength: 5,
      majorTickLineWidth: 2,
      minorTickLineWidth: 1,
      span: Math.PI + Math.PI / 4,
      needleLineWidth: 3,
      updateWhenInvisible: true,
      labelTextOptions: {
        font: new PhetFont(20)
      },
      // NodeOptions
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'Node'
    }, providedOptions);
    assert && assert(options.span <= 2 * Math.PI, `options.span must be <= 2 * Math.PI: ${options.span}`);
    super();
    this.radius = options.radius;
    const anglePerTick = options.span / options.numberOfTicks;
    this.addChild(new Circle(this.radius, {
      fill: options.backgroundFill,
      stroke: options.backgroundStroke,
      lineWidth: options.backgroundLineWidth
    }));
    const foregroundNode = new Node({
      pickable: false
    });
    this.addChild(foregroundNode);
    const needle = new Path(Shape.lineSegment(0, 0, this.radius - options.majorTickLength / 2, 0), {
      stroke: 'red',
      lineWidth: options.needleLineWidth
    });
    const labelText = new Text(labelProperty, combineOptions(options.labelTextOptions, {
      tandem: options.tandem.createTandem('labelText'),
      maxWidth: options.radius * options.maxLabelWidthScale
    }));
    labelText.boundsProperty.link(() => {
      labelText.centerX = 0;
      labelText.centerY = -this.radius / 3;
    });
    foregroundNode.addChild(labelText);
    const pin = new Circle(2, {
      fill: 'black'
    });
    foregroundNode.addChild(pin);
    const totalAngle = (options.numberOfTicks - 1) * anglePerTick;
    const startAngle = -1 / 2 * Math.PI - totalAngle / 2;
    const endAngle = startAngle + totalAngle;
    const scratchMatrix = new Matrix3();
    const updateNeedle = () => {
      if (this.visibleProperty.value || options.updateWhenInvisible) {
        if (typeof valueProperty.get() === 'number') {
          // clamp value to valid range and map it to an angle
          const clampedValue = Utils.clamp(valueProperty.get(), range.min, range.max);
          const needleAngle = Utils.linear(range.min, range.max, startAngle, endAngle, clampedValue);

          // 2d rotation, but reusing our matrix above
          needle.setMatrix(scratchMatrix.setToRotationZ(needleAngle));
          needle.visible = true;
        } else {
          // Hide the needle if there is no number value.
          needle.visible = false;
        }
      }
    };
    valueProperty.link(updateNeedle);

    // If options.updateWhenInvisible is true, updateNeedle will be called by the valueProperty listener above.
    // Otherwise, we need to listen to visibleProperty, and call updateNeedle when the gauge becomes visible.
    if (!options.updateWhenInvisible) {
      this.visibleProperty.link(visible => {
        visible && updateNeedle();
      });
    }

    // Render all of the ticks into Shapes layers (since they have different strokes)
    // see https://github.com/phetsims/energy-skate-park-basics/issues/208
    const bigTicksShape = new Shape();
    const smallTicksShape = new Shape();

    // Add the tick marks
    for (let i = 0; i < options.numberOfTicks; i++) {
      const tickAngle = i * anglePerTick + startAngle;
      const tickLength = i % 2 === 0 ? options.majorTickLength : options.minorTickLength;
      const x1 = (this.radius - tickLength) * Math.cos(tickAngle);
      const y1 = (this.radius - tickLength) * Math.sin(tickAngle);
      const x2 = this.radius * Math.cos(tickAngle);
      const y2 = this.radius * Math.sin(tickAngle);
      if (i % 2 === 0) {
        bigTicksShape.moveTo(x1, y1);
        bigTicksShape.lineTo(x2, y2);
      } else {
        smallTicksShape.moveTo(x1, y1);
        smallTicksShape.lineTo(x2, y2);
      }
    }
    foregroundNode.addChild(new Path(bigTicksShape, {
      stroke: options.majorTickStroke,
      lineWidth: options.majorTickLineWidth
    }));
    foregroundNode.addChild(new Path(smallTicksShape, {
      stroke: options.minorTickStroke,
      lineWidth: options.minorTickLineWidth
    }));

    // Add needle last, so it's on top of ticks. See https://github.com/phetsims/scenery-phet/issues/502
    foregroundNode.addChild(needle);
    this.mutate(options);
    this.disposeGaugeNode = () => {
      if (valueProperty.hasListener(updateNeedle)) {
        valueProperty.unlink(updateNeedle);
      }

      // de-register phet-io tandems
      foregroundNode.dispose();
      labelText.dispose();
    };

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet?.chipper?.queryParameters?.binder && InstanceRegistry.registerDataURL('scenery-phet', 'GaugeNode', this);
  }
  dispose() {
    this.disposeGaugeNode();
    super.dispose();
  }
}
sceneryPhet.register('GaugeNode', GaugeNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiVXRpbHMiLCJTaGFwZSIsIkluc3RhbmNlUmVnaXN0cnkiLCJvcHRpb25pemUiLCJjb21iaW5lT3B0aW9ucyIsIkNpcmNsZSIsIk5vZGUiLCJQYXRoIiwiVGV4dCIsIlRhbmRlbSIsIlBoZXRGb250Iiwic2NlbmVyeVBoZXQiLCJHYXVnZU5vZGUiLCJjb25zdHJ1Y3RvciIsInZhbHVlUHJvcGVydHkiLCJsYWJlbFByb3BlcnR5IiwicmFuZ2UiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicmFkaXVzIiwiYmFja2dyb3VuZEZpbGwiLCJiYWNrZ3JvdW5kU3Ryb2tlIiwiYmFja2dyb3VuZExpbmVXaWR0aCIsIm1heExhYmVsV2lkdGhTY2FsZSIsIm51bWJlck9mVGlja3MiLCJtYWpvclRpY2tTdHJva2UiLCJtaW5vclRpY2tTdHJva2UiLCJtYWpvclRpY2tMZW5ndGgiLCJtaW5vclRpY2tMZW5ndGgiLCJtYWpvclRpY2tMaW5lV2lkdGgiLCJtaW5vclRpY2tMaW5lV2lkdGgiLCJzcGFuIiwiTWF0aCIsIlBJIiwibmVlZGxlTGluZVdpZHRoIiwidXBkYXRlV2hlbkludmlzaWJsZSIsImxhYmVsVGV4dE9wdGlvbnMiLCJmb250IiwidGFuZGVtIiwiUkVRVUlSRUQiLCJ0YW5kZW1OYW1lU3VmZml4IiwiYXNzZXJ0IiwiYW5nbGVQZXJUaWNrIiwiYWRkQ2hpbGQiLCJmaWxsIiwic3Ryb2tlIiwibGluZVdpZHRoIiwiZm9yZWdyb3VuZE5vZGUiLCJwaWNrYWJsZSIsIm5lZWRsZSIsImxpbmVTZWdtZW50IiwibGFiZWxUZXh0IiwiY3JlYXRlVGFuZGVtIiwibWF4V2lkdGgiLCJib3VuZHNQcm9wZXJ0eSIsImxpbmsiLCJjZW50ZXJYIiwiY2VudGVyWSIsInBpbiIsInRvdGFsQW5nbGUiLCJzdGFydEFuZ2xlIiwiZW5kQW5nbGUiLCJzY3JhdGNoTWF0cml4IiwidXBkYXRlTmVlZGxlIiwidmlzaWJsZVByb3BlcnR5IiwidmFsdWUiLCJnZXQiLCJjbGFtcGVkVmFsdWUiLCJjbGFtcCIsIm1pbiIsIm1heCIsIm5lZWRsZUFuZ2xlIiwibGluZWFyIiwic2V0TWF0cml4Iiwic2V0VG9Sb3RhdGlvbloiLCJ2aXNpYmxlIiwiYmlnVGlja3NTaGFwZSIsInNtYWxsVGlja3NTaGFwZSIsImkiLCJ0aWNrQW5nbGUiLCJ0aWNrTGVuZ3RoIiwieDEiLCJjb3MiLCJ5MSIsInNpbiIsIngyIiwieTIiLCJtb3ZlVG8iLCJsaW5lVG8iLCJtdXRhdGUiLCJkaXNwb3NlR2F1Z2VOb2RlIiwiaGFzTGlzdGVuZXIiLCJ1bmxpbmsiLCJkaXNwb3NlIiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJiaW5kZXIiLCJyZWdpc3RlckRhdGFVUkwiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkdhdWdlTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHYXVnZU5vZGUgaXMgYSBjaXJjdWxhciBnYXVnZSB0aGF0IGRlcGljdHMgc29tZSBkeW5hbWljIHZhbHVlLlxyXG4gKiBUaGlzIHdhcyBvcmlnaW5hbGx5IHBvcnRlZCBmcm9tIHRoZSBzcGVlZG9tZXRlciBub2RlIGluIGZvcmNlcy1hbmQtbW90aW9uLWJhc2ljcy5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBKb2huIEJsYW5jbyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNYXRyaXgzIGZyb20gJy4uLy4uL2RvdC9qcy9NYXRyaXgzLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBVdGlscyBmcm9tICcuLi8uLi9kb3QvanMvVXRpbHMuanMnO1xyXG5pbXBvcnQgeyBTaGFwZSB9IGZyb20gJy4uLy4uL2tpdGUvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBJbnN0YW5jZVJlZ2lzdHJ5IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9kb2N1bWVudGF0aW9uL0luc3RhbmNlUmVnaXN0cnkuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IGNvbWJpbmVPcHRpb25zIH0gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCB7IENpcmNsZSwgVENvbG9yLCBOb2RlLCBOb2RlT3B0aW9ucywgUGF0aCwgVGV4dCwgVGV4dE9wdGlvbnMgfSBmcm9tICcuLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgUGhldEZvbnQgZnJvbSAnLi9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBzY2VuZXJ5UGhldCBmcm9tICcuL3NjZW5lcnlQaGV0LmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5cclxudHlwZSBHYXVnZU5vZGVMYWJlbFRleHRPcHRpb25zID0gU3RyaWN0T21pdDxUZXh0T3B0aW9ucywgJ21heFdpZHRoJyB8ICd0YW5kZW0nPjtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIHJhZGl1cz86IG51bWJlcjtcclxuICBiYWNrZ3JvdW5kRmlsbD86IFRDb2xvcjtcclxuICBiYWNrZ3JvdW5kU3Ryb2tlPzogVENvbG9yO1xyXG4gIGJhY2tncm91bmRMaW5lV2lkdGg/OiBudW1iZXI7XHJcbiAgbWF4TGFiZWxXaWR0aFNjYWxlPzogbnVtYmVyOyAvLyBkZWZpbmVzIG1heCB3aWR0aCBvZiB0aGUgbGFiZWwsIHJlbGF0aXZlIHRvIHRoZSByYWRpdXNcclxuXHJcbiAgLy8gdGlja3NcclxuICBudW1iZXJPZlRpY2tzPzogbnVtYmVyO1xyXG4gIG1ham9yVGlja1N0cm9rZT86IFRDb2xvcjtcclxuICBtaW5vclRpY2tTdHJva2U/OiBUQ29sb3I7XHJcbiAgbWFqb3JUaWNrTGVuZ3RoPzogbnVtYmVyO1xyXG4gIG1pbm9yVGlja0xlbmd0aD86IG51bWJlcjtcclxuICBtYWpvclRpY2tMaW5lV2lkdGg/OiBudW1iZXI7XHJcbiAgbWlub3JUaWNrTGluZVdpZHRoPzogbnVtYmVyO1xyXG5cclxuICAvLyBsYWJlbCB0ZXh0XHJcbiAgbGFiZWxUZXh0T3B0aW9ucz86IEdhdWdlTm9kZUxhYmVsVGV4dE9wdGlvbnM7XHJcblxyXG4gIC8vIHRoZSB0b3AgaGFsZiBvZiB0aGUgZ2F1Z2UsIHBsdXMgUEkvOCBleHRlbmRlZCBiZWxvdyB0aGUgdG9wIGhhbGYgb24gZWFjaCBzaWRlXHJcbiAgc3Bhbj86IG51bWJlcjsgLy8gdGhlIHZpc2libGUgc3BhbiBvZiB0aGUgZ2F1Z2UgdmFsdWUgcmFuZ2UsIGluIHJhZGlhbnNcclxuXHJcbiAgbmVlZGxlTGluZVdpZHRoPzogbnVtYmVyO1xyXG5cclxuICAvLyB0cnVlIC0gYWx3YXlzIHVwZGF0ZXMsIGV2ZW4gd2hlbiBpbnZpc2libGVcclxuICAvLyBmYWxzZSAtIGRvZXMgbm90IHVwZGF0ZSB3aGVuIGludmlzaWJsZSwgdXNlIHRvIG9wdGltaXplIHBlcmZvcm1hbmNlXHJcbiAgdXBkYXRlV2hlbkludmlzaWJsZT86IGJvb2xlYW47XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBHYXVnZU5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEdhdWdlTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgcmFkaXVzOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBkaXNwb3NlR2F1Z2VOb2RlOiAoKSA9PiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gdmFsdWVQcm9wZXJ0eVxyXG4gICAqIEBwYXJhbSBsYWJlbFByb3BlcnR5IC0gbGFiZWwgdG8gZGlzcGxheSwgc2NhbGVkIHRvIGZpdCBpZiBuZWNlc3NhcnlcclxuICAgKiBAcGFyYW0gcmFuZ2UgLSByYW5nZSBvZiB0aGUgbmVlZGxlLiBJZiB2YWx1ZVByb3BlcnR5IGV4Y2VlZHMgdGhpcyByYW5nZSwgdGhlIG5lZWRsZSB3aWxsIHN0b3AgYXQgbWluIG9yIG1heC5cclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCB2YWx1ZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxudW1iZXI+LCBsYWJlbFByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxzdHJpbmc+LCByYW5nZTogUmFuZ2UsIHByb3ZpZGVkT3B0aW9ucz86IEdhdWdlTm9kZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxHYXVnZU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgTm9kZU9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIFNlbGZPcHRpb25zXHJcbiAgICAgIHJhZGl1czogMTAwLFxyXG4gICAgICBiYWNrZ3JvdW5kRmlsbDogJ3doaXRlJyxcclxuICAgICAgYmFja2dyb3VuZFN0cm9rZTogJ3JnYiggODUsIDg1LCA4NSApJyxcclxuICAgICAgYmFja2dyb3VuZExpbmVXaWR0aDogMixcclxuICAgICAgbWF4TGFiZWxXaWR0aFNjYWxlOiAxLjMsXHJcbiAgICAgIG51bWJlck9mVGlja3M6IDIxLCAvLyAxMCB0aWNrcyBlYWNoIG9uIHRoZSByaWdodCBzaWRlIGFuZCBsZWZ0IHNpZGUsIHBsdXMgMSBpbiB0aGUgY2VudGVyXHJcbiAgICAgIG1ham9yVGlja1N0cm9rZTogJ2dyYXknLFxyXG4gICAgICBtaW5vclRpY2tTdHJva2U6ICdncmF5JyxcclxuICAgICAgbWFqb3JUaWNrTGVuZ3RoOiAxMCxcclxuICAgICAgbWlub3JUaWNrTGVuZ3RoOiA1LFxyXG4gICAgICBtYWpvclRpY2tMaW5lV2lkdGg6IDIsXHJcbiAgICAgIG1pbm9yVGlja0xpbmVXaWR0aDogMSxcclxuICAgICAgc3BhbjogTWF0aC5QSSArIE1hdGguUEkgLyA0LFxyXG4gICAgICBuZWVkbGVMaW5lV2lkdGg6IDMsXHJcbiAgICAgIHVwZGF0ZVdoZW5JbnZpc2libGU6IHRydWUsXHJcblxyXG4gICAgICBsYWJlbFRleHRPcHRpb25zOiB7XHJcbiAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCAyMCApXHJcbiAgICAgIH0sXHJcblxyXG4gICAgICAvLyBOb2RlT3B0aW9uc1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5SRVFVSVJFRCxcclxuICAgICAgdGFuZGVtTmFtZVN1ZmZpeDogJ05vZGUnXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLnNwYW4gPD0gMiAqIE1hdGguUEksIGBvcHRpb25zLnNwYW4gbXVzdCBiZSA8PSAyICogTWF0aC5QSTogJHtvcHRpb25zLnNwYW59YCApO1xyXG5cclxuICAgIHN1cGVyKCk7XHJcblxyXG4gICAgdGhpcy5yYWRpdXMgPSBvcHRpb25zLnJhZGl1cztcclxuXHJcbiAgICBjb25zdCBhbmdsZVBlclRpY2sgPSBvcHRpb25zLnNwYW4gLyBvcHRpb25zLm51bWJlck9mVGlja3M7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IENpcmNsZSggdGhpcy5yYWRpdXMsIHtcclxuICAgICAgZmlsbDogb3B0aW9ucy5iYWNrZ3JvdW5kRmlsbCxcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLmJhY2tncm91bmRTdHJva2UsXHJcbiAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5iYWNrZ3JvdW5kTGluZVdpZHRoXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICBjb25zdCBmb3JlZ3JvdW5kTm9kZSA9IG5ldyBOb2RlKCB7XHJcbiAgICAgIHBpY2thYmxlOiBmYWxzZVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggZm9yZWdyb3VuZE5vZGUgKTtcclxuXHJcbiAgICBjb25zdCBuZWVkbGUgPSBuZXcgUGF0aCggU2hhcGUubGluZVNlZ21lbnQoIDAsIDAsIHRoaXMucmFkaXVzIC0gb3B0aW9ucy5tYWpvclRpY2tMZW5ndGggLyAyLCAwICksIHtcclxuICAgICAgc3Ryb2tlOiAncmVkJyxcclxuICAgICAgbGluZVdpZHRoOiBvcHRpb25zLm5lZWRsZUxpbmVXaWR0aFxyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGxhYmVsVGV4dCA9IG5ldyBUZXh0KCBsYWJlbFByb3BlcnR5LCBjb21iaW5lT3B0aW9uczxUZXh0T3B0aW9ucz4oIG9wdGlvbnMubGFiZWxUZXh0T3B0aW9ucywge1xyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtLmNyZWF0ZVRhbmRlbSggJ2xhYmVsVGV4dCcgKSxcclxuICAgICAgbWF4V2lkdGg6IG9wdGlvbnMucmFkaXVzICogb3B0aW9ucy5tYXhMYWJlbFdpZHRoU2NhbGVcclxuICAgIH0gKSApO1xyXG5cclxuICAgIGxhYmVsVGV4dC5ib3VuZHNQcm9wZXJ0eS5saW5rKCAoKSA9PiB7XHJcbiAgICAgIGxhYmVsVGV4dC5jZW50ZXJYID0gMDtcclxuICAgICAgbGFiZWxUZXh0LmNlbnRlclkgPSAtdGhpcy5yYWRpdXMgLyAzO1xyXG4gICAgfSApO1xyXG4gICAgZm9yZWdyb3VuZE5vZGUuYWRkQ2hpbGQoIGxhYmVsVGV4dCApO1xyXG5cclxuICAgIGNvbnN0IHBpbiA9IG5ldyBDaXJjbGUoIDIsIHsgZmlsbDogJ2JsYWNrJyB9ICk7XHJcbiAgICBmb3JlZ3JvdW5kTm9kZS5hZGRDaGlsZCggcGluICk7XHJcblxyXG4gICAgY29uc3QgdG90YWxBbmdsZSA9ICggb3B0aW9ucy5udW1iZXJPZlRpY2tzIC0gMSApICogYW5nbGVQZXJUaWNrO1xyXG4gICAgY29uc3Qgc3RhcnRBbmdsZSA9IC0xIC8gMiAqIE1hdGguUEkgLSB0b3RhbEFuZ2xlIC8gMjtcclxuICAgIGNvbnN0IGVuZEFuZ2xlID0gc3RhcnRBbmdsZSArIHRvdGFsQW5nbGU7XHJcblxyXG4gICAgY29uc3Qgc2NyYXRjaE1hdHJpeCA9IG5ldyBNYXRyaXgzKCk7XHJcblxyXG4gICAgY29uc3QgdXBkYXRlTmVlZGxlID0gKCkgPT4ge1xyXG4gICAgICBpZiAoIHRoaXMudmlzaWJsZVByb3BlcnR5LnZhbHVlIHx8IG9wdGlvbnMudXBkYXRlV2hlbkludmlzaWJsZSApIHtcclxuICAgICAgICBpZiAoIHR5cGVvZiAoIHZhbHVlUHJvcGVydHkuZ2V0KCkgKSA9PT0gJ251bWJlcicgKSB7XHJcblxyXG4gICAgICAgICAgLy8gY2xhbXAgdmFsdWUgdG8gdmFsaWQgcmFuZ2UgYW5kIG1hcCBpdCB0byBhbiBhbmdsZVxyXG4gICAgICAgICAgY29uc3QgY2xhbXBlZFZhbHVlID0gVXRpbHMuY2xhbXAoIHZhbHVlUHJvcGVydHkuZ2V0KCksIHJhbmdlLm1pbiwgcmFuZ2UubWF4ICk7XHJcbiAgICAgICAgICBjb25zdCBuZWVkbGVBbmdsZSA9IFV0aWxzLmxpbmVhciggcmFuZ2UubWluLCByYW5nZS5tYXgsIHN0YXJ0QW5nbGUsIGVuZEFuZ2xlLCBjbGFtcGVkVmFsdWUgKTtcclxuXHJcbiAgICAgICAgICAvLyAyZCByb3RhdGlvbiwgYnV0IHJldXNpbmcgb3VyIG1hdHJpeCBhYm92ZVxyXG4gICAgICAgICAgbmVlZGxlLnNldE1hdHJpeCggc2NyYXRjaE1hdHJpeC5zZXRUb1JvdGF0aW9uWiggbmVlZGxlQW5nbGUgKSApO1xyXG4gICAgICAgICAgbmVlZGxlLnZpc2libGUgPSB0cnVlO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuXHJcbiAgICAgICAgICAvLyBIaWRlIHRoZSBuZWVkbGUgaWYgdGhlcmUgaXMgbm8gbnVtYmVyIHZhbHVlLlxyXG4gICAgICAgICAgbmVlZGxlLnZpc2libGUgPSBmYWxzZTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICB2YWx1ZVByb3BlcnR5LmxpbmsoIHVwZGF0ZU5lZWRsZSApO1xyXG5cclxuICAgIC8vIElmIG9wdGlvbnMudXBkYXRlV2hlbkludmlzaWJsZSBpcyB0cnVlLCB1cGRhdGVOZWVkbGUgd2lsbCBiZSBjYWxsZWQgYnkgdGhlIHZhbHVlUHJvcGVydHkgbGlzdGVuZXIgYWJvdmUuXHJcbiAgICAvLyBPdGhlcndpc2UsIHdlIG5lZWQgdG8gbGlzdGVuIHRvIHZpc2libGVQcm9wZXJ0eSwgYW5kIGNhbGwgdXBkYXRlTmVlZGxlIHdoZW4gdGhlIGdhdWdlIGJlY29tZXMgdmlzaWJsZS5cclxuICAgIGlmICggIW9wdGlvbnMudXBkYXRlV2hlbkludmlzaWJsZSApIHtcclxuICAgICAgdGhpcy52aXNpYmxlUHJvcGVydHkubGluayggdmlzaWJsZSA9PiB7XHJcbiAgICAgICAgdmlzaWJsZSAmJiB1cGRhdGVOZWVkbGUoKTtcclxuICAgICAgfSApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFJlbmRlciBhbGwgb2YgdGhlIHRpY2tzIGludG8gU2hhcGVzIGxheWVycyAoc2luY2UgdGhleSBoYXZlIGRpZmZlcmVudCBzdHJva2VzKVxyXG4gICAgLy8gc2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9lbmVyZ3ktc2thdGUtcGFyay1iYXNpY3MvaXNzdWVzLzIwOFxyXG4gICAgY29uc3QgYmlnVGlja3NTaGFwZSA9IG5ldyBTaGFwZSgpO1xyXG4gICAgY29uc3Qgc21hbGxUaWNrc1NoYXBlID0gbmV3IFNoYXBlKCk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSB0aWNrIG1hcmtzXHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBvcHRpb25zLm51bWJlck9mVGlja3M7IGkrKyApIHtcclxuICAgICAgY29uc3QgdGlja0FuZ2xlID0gaSAqIGFuZ2xlUGVyVGljayArIHN0YXJ0QW5nbGU7XHJcblxyXG4gICAgICBjb25zdCB0aWNrTGVuZ3RoID0gaSAlIDIgPT09IDAgPyBvcHRpb25zLm1ham9yVGlja0xlbmd0aCA6IG9wdGlvbnMubWlub3JUaWNrTGVuZ3RoO1xyXG4gICAgICBjb25zdCB4MSA9ICggdGhpcy5yYWRpdXMgLSB0aWNrTGVuZ3RoICkgKiBNYXRoLmNvcyggdGlja0FuZ2xlICk7XHJcbiAgICAgIGNvbnN0IHkxID0gKCB0aGlzLnJhZGl1cyAtIHRpY2tMZW5ndGggKSAqIE1hdGguc2luKCB0aWNrQW5nbGUgKTtcclxuICAgICAgY29uc3QgeDIgPSB0aGlzLnJhZGl1cyAqIE1hdGguY29zKCB0aWNrQW5nbGUgKTtcclxuICAgICAgY29uc3QgeTIgPSB0aGlzLnJhZGl1cyAqIE1hdGguc2luKCB0aWNrQW5nbGUgKTtcclxuICAgICAgaWYgKCBpICUgMiA9PT0gMCApIHtcclxuICAgICAgICBiaWdUaWNrc1NoYXBlLm1vdmVUbyggeDEsIHkxICk7XHJcbiAgICAgICAgYmlnVGlja3NTaGFwZS5saW5lVG8oIHgyLCB5MiApO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIHNtYWxsVGlja3NTaGFwZS5tb3ZlVG8oIHgxLCB5MSApO1xyXG4gICAgICAgIHNtYWxsVGlja3NTaGFwZS5saW5lVG8oIHgyLCB5MiApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgZm9yZWdyb3VuZE5vZGUuYWRkQ2hpbGQoIG5ldyBQYXRoKCBiaWdUaWNrc1NoYXBlLCB7XHJcbiAgICAgIHN0cm9rZTogb3B0aW9ucy5tYWpvclRpY2tTdHJva2UsXHJcbiAgICAgIGxpbmVXaWR0aDogb3B0aW9ucy5tYWpvclRpY2tMaW5lV2lkdGhcclxuICAgIH0gKSApO1xyXG4gICAgZm9yZWdyb3VuZE5vZGUuYWRkQ2hpbGQoIG5ldyBQYXRoKCBzbWFsbFRpY2tzU2hhcGUsIHtcclxuICAgICAgc3Ryb2tlOiBvcHRpb25zLm1pbm9yVGlja1N0cm9rZSxcclxuICAgICAgbGluZVdpZHRoOiBvcHRpb25zLm1pbm9yVGlja0xpbmVXaWR0aFxyXG4gICAgfSApICk7XHJcblxyXG4gICAgLy8gQWRkIG5lZWRsZSBsYXN0LCBzbyBpdCdzIG9uIHRvcCBvZiB0aWNrcy4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5LXBoZXQvaXNzdWVzLzUwMlxyXG4gICAgZm9yZWdyb3VuZE5vZGUuYWRkQ2hpbGQoIG5lZWRsZSApO1xyXG5cclxuICAgIHRoaXMubXV0YXRlKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy5kaXNwb3NlR2F1Z2VOb2RlID0gKCkgPT4ge1xyXG4gICAgICBpZiAoIHZhbHVlUHJvcGVydHkuaGFzTGlzdGVuZXIoIHVwZGF0ZU5lZWRsZSApICkge1xyXG4gICAgICAgIHZhbHVlUHJvcGVydHkudW5saW5rKCB1cGRhdGVOZWVkbGUgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gZGUtcmVnaXN0ZXIgcGhldC1pbyB0YW5kZW1zXHJcbiAgICAgIGZvcmVncm91bmROb2RlLmRpc3Bvc2UoKTtcclxuICAgICAgbGFiZWxUZXh0LmRpc3Bvc2UoKTtcclxuICAgIH07XHJcblxyXG4gICAgLy8gc3VwcG9ydCBmb3IgYmluZGVyIGRvY3VtZW50YXRpb24sIHN0cmlwcGVkIG91dCBpbiBidWlsZHMgYW5kIG9ubHkgcnVucyB3aGVuID9iaW5kZXIgaXMgc3BlY2lmaWVkXHJcbiAgICBhc3NlcnQgJiYgcGhldD8uY2hpcHBlcj8ucXVlcnlQYXJhbWV0ZXJzPy5iaW5kZXIgJiYgSW5zdGFuY2VSZWdpc3RyeS5yZWdpc3RlckRhdGFVUkwoICdzY2VuZXJ5LXBoZXQnLCAnR2F1Z2VOb2RlJywgdGhpcyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLmRpc3Bvc2VHYXVnZU5vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnR2F1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