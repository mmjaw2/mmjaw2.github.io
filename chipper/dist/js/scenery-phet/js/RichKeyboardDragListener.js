// Copyright 2024, University of Colorado Boulder

/**
 * RichKeyboardDragListener extends KeyboardDragListener to integrate PhET-specific features that should be
 * broadly applied to DragListener instances in PhET sims.
 *
 * For grab and release sounds, responsibilities include:
 * - provide default sound files
 * - create SoundClips and register them with soundManager
 * - dispose of SoundClips and deregister them with soundManager
 *
 * @author AgustÃ­n Vallejo
 * @author Michael Kauzmann
 * @author Chris Malley (PixelZoom, Inc.)
 */

import sceneryPhet from './sceneryPhet.js';
import { KeyboardDragListener } from '../../scenery/js/imports.js';
import optionize from '../../phet-core/js/optionize.js';
import SoundClip from '../../tambo/js/sound-generators/SoundClip.js';
import grab_mp3 from '../../tambo/sounds/grab_mp3.js';
import release_mp3 from '../../tambo/sounds/release_mp3.js';
import soundManager from '../../tambo/js/soundManager.js';
const DEFAULT_DRAG_CLIP_OPTIONS = {
  initialOutputLevel: 0.4
};
export default class RichKeyboardDragListener extends KeyboardDragListener {
  constructor(providedOptions) {
    const options = optionize()({
      // SelfOptions
      grabSound: grab_mp3,
      releaseSound: release_mp3,
      grabSoundClipOptions: DEFAULT_DRAG_CLIP_OPTIONS,
      releaseSoundClipOptions: DEFAULT_DRAG_CLIP_OPTIONS,
      grabSoundGeneratorAddOptions: {},
      releaseSoundGeneratorAddOptions: {}
    }, providedOptions);

    // Create the grab SoundClip and wire it into the start function for the drag cycle.
    let grabClip;
    if (options.grabSound) {
      grabClip = new SoundClip(options.grabSound, options.grabSoundClipOptions);
      soundManager.addSoundGenerator(grabClip, options.grabSoundGeneratorAddOptions);
      const previousStart = options.start;
      options.start = (...args) => {
        previousStart && previousStart(...args);
        grabClip.play();
      };
    }

    // Create the release SoundClip and wire it into the end function for the drag cycle.
    let releaseClip;
    if (options.releaseSound) {
      releaseClip = new SoundClip(options.releaseSound, options.releaseSoundClipOptions);
      soundManager.addSoundGenerator(releaseClip, options.releaseSoundGeneratorAddOptions);
      const previousEnd = options.end;
      options.end = (...args) => {
        previousEnd && previousEnd(...args);
        !this.interrupted && releaseClip.play();
      };
    }
    super(options);

    // Clean up SoundClips when this RichKeyboardDragListener is disposed.
    this.disposeEmitter.addListener(() => {
      if (grabClip) {
        grabClip.dispose();
        soundManager.removeSoundGenerator(grabClip);
      }
      if (releaseClip) {
        releaseClip.dispose();
        soundManager.removeSoundGenerator(releaseClip);
      }
    });
  }
}
sceneryPhet.register('RichKeyboardDragListener', RichKeyboardDragListener);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,