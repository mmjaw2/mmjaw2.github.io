// Copyright 2022-2024, University of Colorado Boulder

/**
 * Demo for NumberControl
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import PhetFont from '../../PhetFont.js';
import NumberControl from '../../NumberControl.js';
import Property from '../../../../axon/js/Property.js';
import RangeWithValue from '../../../../dot/js/RangeWithValue.js';
import { combineOptions } from '../../../../phet-core/js/optionize.js';
import { HBox, Text, VBox } from '../../../../scenery/js/imports.js';
import Checkbox from '../../../../sun/js/Checkbox.js';
import Orientation from '../../../../phet-core/js/Orientation.js';
export default function demoNumberControl(layoutBounds) {
  const weightRange = new RangeWithValue(0, 300, 100);

  // all NumberControls will be synchronized with these Properties
  const weightProperty = new Property(weightRange.defaultValue);
  const enabledProperty = new Property(true);

  // options shared by all NumberControls
  const numberControlOptions = {
    enabledProperty: enabledProperty,
    titleNodeOptions: {
      font: new PhetFont(20)
    },
    numberDisplayOptions: {
      textOptions: {
        font: new PhetFont(20)
      },
      valuePattern: '{0} lbs'
    },
    sliderOptions: {
      majorTicks: [{
        value: weightRange.min,
        label: new Text(weightRange.min, {
          font: new PhetFont(20)
        })
      }, {
        value: weightRange.getCenter(),
        label: new Text(weightRange.getCenter(), {
          font: new PhetFont(20)
        })
      }, {
        value: weightRange.max,
        label: new Text(weightRange.max, {
          font: new PhetFont(20)
        })
      }],
      minorTickSpacing: 50
    }
  };

  // NumberControl with default layout
  const numberControl1 = new NumberControl('Weight:', weightProperty, weightRange, numberControlOptions);

  // NumberControl with a predefined alternate layout
  const numberControl2 = new NumberControl('Weight:', weightProperty, weightRange, combineOptions({
    layoutFunction: NumberControl.createLayoutFunction2()
  }, numberControlOptions));

  // NumberControl with options provided for a predefined alternate layout
  const numberControl3 = new NumberControl('Weight:', weightProperty, weightRange, combineOptions({
    layoutFunction: NumberControl.createLayoutFunction3({
      alignTitle: 'left'
    })
  }, numberControlOptions));

  // NumberControl with alternate layout provided by the client
  const numberControl4 = new NumberControl('Weight:', weightProperty, weightRange, combineOptions({
    layoutFunction: (titleNode, numberDisplay, slider, leftArrowButton, rightArrowButton) => {
      assert && assert(leftArrowButton && rightArrowButton);
      return new HBox({
        spacing: 8,
        resize: false,
        // prevent sliders from causing a resize when thumb is at min or max
        children: [titleNode, numberDisplay, leftArrowButton, slider, rightArrowButton]
      });
    }
  }, numberControlOptions));
  const verticalNumberControl = new NumberControl('Weight', weightProperty, weightRange, combineOptions({
    sliderOptions: {
      orientation: Orientation.VERTICAL
    },
    layoutFunction: (titleNode, numberDisplay, slider, leftArrowButton, rightArrowButton) => {
      assert && assert(leftArrowButton && rightArrowButton);
      return new VBox({
        spacing: 8,
        resize: false,
        align: 'center',
        children: [titleNode, new HBox({
          children: [leftArrowButton, numberDisplay, rightArrowButton],
          spacing: 4
        }), slider]
      });
    }
  }, numberControlOptions));

  // Checkbox that will disable all NumberControls
  const enabledCheckbox = new Checkbox(enabledProperty, new Text('enabled', {
    font: new PhetFont(20)
  }));
  const vBox = new VBox({
    spacing: 30,
    resize: false,
    // prevent sliders from causing a resize when thumb is at min or max
    children: [numberControl1, numberControl2, numberControl3, numberControl4, enabledCheckbox]
  });
  return new HBox({
    spacing: 30,
    resize: false,
    children: [verticalNumberControl, vBox],
    center: layoutBounds.center
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0Rm9udCIsIk51bWJlckNvbnRyb2wiLCJQcm9wZXJ0eSIsIlJhbmdlV2l0aFZhbHVlIiwiY29tYmluZU9wdGlvbnMiLCJIQm94IiwiVGV4dCIsIlZCb3giLCJDaGVja2JveCIsIk9yaWVudGF0aW9uIiwiZGVtb051bWJlckNvbnRyb2wiLCJsYXlvdXRCb3VuZHMiLCJ3ZWlnaHRSYW5nZSIsIndlaWdodFByb3BlcnR5IiwiZGVmYXVsdFZhbHVlIiwiZW5hYmxlZFByb3BlcnR5IiwibnVtYmVyQ29udHJvbE9wdGlvbnMiLCJ0aXRsZU5vZGVPcHRpb25zIiwiZm9udCIsIm51bWJlckRpc3BsYXlPcHRpb25zIiwidGV4dE9wdGlvbnMiLCJ2YWx1ZVBhdHRlcm4iLCJzbGlkZXJPcHRpb25zIiwibWFqb3JUaWNrcyIsInZhbHVlIiwibWluIiwibGFiZWwiLCJnZXRDZW50ZXIiLCJtYXgiLCJtaW5vclRpY2tTcGFjaW5nIiwibnVtYmVyQ29udHJvbDEiLCJudW1iZXJDb250cm9sMiIsImxheW91dEZ1bmN0aW9uIiwiY3JlYXRlTGF5b3V0RnVuY3Rpb24yIiwibnVtYmVyQ29udHJvbDMiLCJjcmVhdGVMYXlvdXRGdW5jdGlvbjMiLCJhbGlnblRpdGxlIiwibnVtYmVyQ29udHJvbDQiLCJ0aXRsZU5vZGUiLCJudW1iZXJEaXNwbGF5Iiwic2xpZGVyIiwibGVmdEFycm93QnV0dG9uIiwicmlnaHRBcnJvd0J1dHRvbiIsImFzc2VydCIsInNwYWNpbmciLCJyZXNpemUiLCJjaGlsZHJlbiIsInZlcnRpY2FsTnVtYmVyQ29udHJvbCIsIm9yaWVudGF0aW9uIiwiVkVSVElDQUwiLCJhbGlnbiIsImVuYWJsZWRDaGVja2JveCIsInZCb3giLCJjZW50ZXIiXSwic291cmNlcyI6WyJkZW1vTnVtYmVyQ29udHJvbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEZW1vIGZvciBOdW1iZXJDb250cm9sXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uL1BoZXRGb250LmpzJztcclxuaW1wb3J0IE51bWJlckNvbnRyb2wsIHsgTnVtYmVyQ29udHJvbE9wdGlvbnMgfSBmcm9tICcuLi8uLi9OdW1iZXJDb250cm9sLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSYW5nZVdpdGhWYWx1ZSBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvUmFuZ2VXaXRoVmFsdWUuanMnO1xyXG5pbXBvcnQgeyBjb21iaW5lT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBOb2RlLCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IENoZWNrYm94IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9DaGVja2JveC5qcyc7XHJcbmltcG9ydCBPcmllbnRhdGlvbiBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvT3JpZW50YXRpb24uanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVtb051bWJlckNvbnRyb2woIGxheW91dEJvdW5kczogQm91bmRzMiApOiBOb2RlIHtcclxuXHJcbiAgY29uc3Qgd2VpZ2h0UmFuZ2UgPSBuZXcgUmFuZ2VXaXRoVmFsdWUoIDAsIDMwMCwgMTAwICk7XHJcblxyXG4gIC8vIGFsbCBOdW1iZXJDb250cm9scyB3aWxsIGJlIHN5bmNocm9uaXplZCB3aXRoIHRoZXNlIFByb3BlcnRpZXNcclxuICBjb25zdCB3ZWlnaHRQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggd2VpZ2h0UmFuZ2UuZGVmYXVsdFZhbHVlICk7XHJcbiAgY29uc3QgZW5hYmxlZFByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCB0cnVlICk7XHJcblxyXG4gIC8vIG9wdGlvbnMgc2hhcmVkIGJ5IGFsbCBOdW1iZXJDb250cm9sc1xyXG4gIGNvbnN0IG51bWJlckNvbnRyb2xPcHRpb25zOiBOdW1iZXJDb250cm9sT3B0aW9ucyA9IHtcclxuICAgIGVuYWJsZWRQcm9wZXJ0eTogZW5hYmxlZFByb3BlcnR5LFxyXG4gICAgdGl0bGVOb2RlT3B0aW9uczoge1xyXG4gICAgICBmb250OiBuZXcgUGhldEZvbnQoIDIwIClcclxuICAgIH0sXHJcbiAgICBudW1iZXJEaXNwbGF5T3B0aW9uczoge1xyXG4gICAgICB0ZXh0T3B0aW9uczoge1xyXG4gICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKVxyXG4gICAgICB9LFxyXG4gICAgICB2YWx1ZVBhdHRlcm46ICd7MH0gbGJzJ1xyXG4gICAgfSxcclxuICAgIHNsaWRlck9wdGlvbnM6IHtcclxuICAgICAgbWFqb3JUaWNrczogW1xyXG4gICAgICAgIHsgdmFsdWU6IHdlaWdodFJhbmdlLm1pbiwgbGFiZWw6IG5ldyBUZXh0KCB3ZWlnaHRSYW5nZS5taW4sIHsgZm9udDogbmV3IFBoZXRGb250KCAyMCApIH0gKSB9LFxyXG4gICAgICAgIHsgdmFsdWU6IHdlaWdodFJhbmdlLmdldENlbnRlcigpLCBsYWJlbDogbmV3IFRleHQoIHdlaWdodFJhbmdlLmdldENlbnRlcigpLCB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSB9ICkgfSxcclxuICAgICAgICB7IHZhbHVlOiB3ZWlnaHRSYW5nZS5tYXgsIGxhYmVsOiBuZXcgVGV4dCggd2VpZ2h0UmFuZ2UubWF4LCB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSB9ICkgfVxyXG4gICAgICBdLFxyXG4gICAgICBtaW5vclRpY2tTcGFjaW5nOiA1MFxyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIC8vIE51bWJlckNvbnRyb2wgd2l0aCBkZWZhdWx0IGxheW91dFxyXG4gIGNvbnN0IG51bWJlckNvbnRyb2wxID0gbmV3IE51bWJlckNvbnRyb2woICdXZWlnaHQ6Jywgd2VpZ2h0UHJvcGVydHksIHdlaWdodFJhbmdlLCBudW1iZXJDb250cm9sT3B0aW9ucyApO1xyXG5cclxuICAvLyBOdW1iZXJDb250cm9sIHdpdGggYSBwcmVkZWZpbmVkIGFsdGVybmF0ZSBsYXlvdXRcclxuICBjb25zdCBudW1iZXJDb250cm9sMiA9IG5ldyBOdW1iZXJDb250cm9sKCAnV2VpZ2h0OicsIHdlaWdodFByb3BlcnR5LCB3ZWlnaHRSYW5nZSxcclxuICAgIGNvbWJpbmVPcHRpb25zPE51bWJlckNvbnRyb2xPcHRpb25zPigge1xyXG4gICAgICBsYXlvdXRGdW5jdGlvbjogTnVtYmVyQ29udHJvbC5jcmVhdGVMYXlvdXRGdW5jdGlvbjIoKVxyXG4gICAgfSwgbnVtYmVyQ29udHJvbE9wdGlvbnMgKSApO1xyXG5cclxuICAvLyBOdW1iZXJDb250cm9sIHdpdGggb3B0aW9ucyBwcm92aWRlZCBmb3IgYSBwcmVkZWZpbmVkIGFsdGVybmF0ZSBsYXlvdXRcclxuICBjb25zdCBudW1iZXJDb250cm9sMyA9IG5ldyBOdW1iZXJDb250cm9sKCAnV2VpZ2h0OicsIHdlaWdodFByb3BlcnR5LCB3ZWlnaHRSYW5nZSxcclxuICAgIGNvbWJpbmVPcHRpb25zPE51bWJlckNvbnRyb2xPcHRpb25zPigge1xyXG4gICAgICBsYXlvdXRGdW5jdGlvbjogTnVtYmVyQ29udHJvbC5jcmVhdGVMYXlvdXRGdW5jdGlvbjMoIHtcclxuICAgICAgICBhbGlnblRpdGxlOiAnbGVmdCdcclxuICAgICAgfSApXHJcbiAgICB9LCBudW1iZXJDb250cm9sT3B0aW9ucyApICk7XHJcblxyXG4gIC8vIE51bWJlckNvbnRyb2wgd2l0aCBhbHRlcm5hdGUgbGF5b3V0IHByb3ZpZGVkIGJ5IHRoZSBjbGllbnRcclxuICBjb25zdCBudW1iZXJDb250cm9sNCA9IG5ldyBOdW1iZXJDb250cm9sKCAnV2VpZ2h0OicsIHdlaWdodFByb3BlcnR5LCB3ZWlnaHRSYW5nZSxcclxuICAgIGNvbWJpbmVPcHRpb25zPE51bWJlckNvbnRyb2xPcHRpb25zPigge1xyXG4gICAgICBsYXlvdXRGdW5jdGlvbjogKCB0aXRsZU5vZGUsIG51bWJlckRpc3BsYXksIHNsaWRlciwgbGVmdEFycm93QnV0dG9uLCByaWdodEFycm93QnV0dG9uICkgPT4ge1xyXG4gICAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGxlZnRBcnJvd0J1dHRvbiAmJiByaWdodEFycm93QnV0dG9uICk7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBIQm94KCB7XHJcbiAgICAgICAgICBzcGFjaW5nOiA4LFxyXG4gICAgICAgICAgcmVzaXplOiBmYWxzZSwgLy8gcHJldmVudCBzbGlkZXJzIGZyb20gY2F1c2luZyBhIHJlc2l6ZSB3aGVuIHRodW1iIGlzIGF0IG1pbiBvciBtYXhcclxuICAgICAgICAgIGNoaWxkcmVuOiBbIHRpdGxlTm9kZSwgbnVtYmVyRGlzcGxheSwgbGVmdEFycm93QnV0dG9uISwgc2xpZGVyLCByaWdodEFycm93QnV0dG9uISBdXHJcbiAgICAgICAgfSApO1xyXG4gICAgICB9XHJcbiAgICB9LCBudW1iZXJDb250cm9sT3B0aW9ucyApICk7XHJcblxyXG4gIGNvbnN0IHZlcnRpY2FsTnVtYmVyQ29udHJvbCA9IG5ldyBOdW1iZXJDb250cm9sKCAnV2VpZ2h0Jywgd2VpZ2h0UHJvcGVydHksIHdlaWdodFJhbmdlLFxyXG4gICAgY29tYmluZU9wdGlvbnM8TnVtYmVyQ29udHJvbE9wdGlvbnM+KCB7XHJcbiAgICAgIHNsaWRlck9wdGlvbnM6IHtcclxuICAgICAgICBvcmllbnRhdGlvbjogT3JpZW50YXRpb24uVkVSVElDQUxcclxuICAgICAgfSxcclxuICAgICAgbGF5b3V0RnVuY3Rpb246ICggdGl0bGVOb2RlLCBudW1iZXJEaXNwbGF5LCBzbGlkZXIsIGxlZnRBcnJvd0J1dHRvbiwgcmlnaHRBcnJvd0J1dHRvbiApID0+IHtcclxuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBsZWZ0QXJyb3dCdXR0b24gJiYgcmlnaHRBcnJvd0J1dHRvbiApO1xyXG4gICAgICAgIHJldHVybiBuZXcgVkJveCgge1xyXG4gICAgICAgICAgc3BhY2luZzogOCxcclxuICAgICAgICAgIHJlc2l6ZTogZmFsc2UsXHJcbiAgICAgICAgICBhbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICB0aXRsZU5vZGUsXHJcbiAgICAgICAgICAgIG5ldyBIQm94KCB7XHJcbiAgICAgICAgICAgICAgY2hpbGRyZW46IFsgbGVmdEFycm93QnV0dG9uISwgbnVtYmVyRGlzcGxheSwgcmlnaHRBcnJvd0J1dHRvbiEgXSxcclxuICAgICAgICAgICAgICBzcGFjaW5nOiA0XHJcbiAgICAgICAgICAgIH0gKSxcclxuICAgICAgICAgICAgc2xpZGVyXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSApO1xyXG4gICAgICB9XHJcbiAgICB9LCBudW1iZXJDb250cm9sT3B0aW9ucyApICk7XHJcblxyXG4gIC8vIENoZWNrYm94IHRoYXQgd2lsbCBkaXNhYmxlIGFsbCBOdW1iZXJDb250cm9sc1xyXG4gIGNvbnN0IGVuYWJsZWRDaGVja2JveCA9IG5ldyBDaGVja2JveCggZW5hYmxlZFByb3BlcnR5LCBuZXcgVGV4dCggJ2VuYWJsZWQnLCB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSB9ICkgKTtcclxuXHJcbiAgY29uc3QgdkJveCA9IG5ldyBWQm94KCB7XHJcbiAgICBzcGFjaW5nOiAzMCxcclxuICAgIHJlc2l6ZTogZmFsc2UsIC8vIHByZXZlbnQgc2xpZGVycyBmcm9tIGNhdXNpbmcgYSByZXNpemUgd2hlbiB0aHVtYiBpcyBhdCBtaW4gb3IgbWF4XHJcbiAgICBjaGlsZHJlbjogWyBudW1iZXJDb250cm9sMSwgbnVtYmVyQ29udHJvbDIsIG51bWJlckNvbnRyb2wzLCBudW1iZXJDb250cm9sNCwgZW5hYmxlZENoZWNrYm94IF1cclxuICB9ICk7XHJcblxyXG4gIHJldHVybiBuZXcgSEJveCgge1xyXG4gICAgc3BhY2luZzogMzAsXHJcbiAgICByZXNpemU6IGZhbHNlLFxyXG4gICAgY2hpbGRyZW46IFsgdmVydGljYWxOdW1iZXJDb250cm9sLCB2Qm94IF0sXHJcbiAgICBjZW50ZXI6IGxheW91dEJvdW5kcy5jZW50ZXJcclxuICB9ICk7XHJcbn0iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLG1CQUFtQjtBQUN4QyxPQUFPQyxhQUFhLE1BQWdDLHdCQUF3QjtBQUU1RSxPQUFPQyxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLGNBQWMsTUFBTSxzQ0FBc0M7QUFDakUsU0FBU0MsY0FBYyxRQUFRLHVDQUF1QztBQUN0RSxTQUFTQyxJQUFJLEVBQVFDLElBQUksRUFBRUMsSUFBSSxRQUFRLG1DQUFtQztBQUMxRSxPQUFPQyxRQUFRLE1BQU0sZ0NBQWdDO0FBQ3JELE9BQU9DLFdBQVcsTUFBTSx5Q0FBeUM7QUFFakUsZUFBZSxTQUFTQyxpQkFBaUJBLENBQUVDLFlBQXFCLEVBQVM7RUFFdkUsTUFBTUMsV0FBVyxHQUFHLElBQUlULGNBQWMsQ0FBRSxDQUFDLEVBQUUsR0FBRyxFQUFFLEdBQUksQ0FBQzs7RUFFckQ7RUFDQSxNQUFNVSxjQUFjLEdBQUcsSUFBSVgsUUFBUSxDQUFFVSxXQUFXLENBQUNFLFlBQWEsQ0FBQztFQUMvRCxNQUFNQyxlQUFlLEdBQUcsSUFBSWIsUUFBUSxDQUFFLElBQUssQ0FBQzs7RUFFNUM7RUFDQSxNQUFNYyxvQkFBMEMsR0FBRztJQUNqREQsZUFBZSxFQUFFQSxlQUFlO0lBQ2hDRSxnQkFBZ0IsRUFBRTtNQUNoQkMsSUFBSSxFQUFFLElBQUlsQixRQUFRLENBQUUsRUFBRztJQUN6QixDQUFDO0lBQ0RtQixvQkFBb0Is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