// Copyright 2022-2024, University of Colorado Boulder

/**
 * Demo for KeyNode and its subtypes
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import ArrowKeyNode from '../../keyboard/ArrowKeyNode.js';
import LetterKeyNode from '../../keyboard/LetterKeyNode.js';
import TextKeyNode from '../../keyboard/TextKeyNode.js';
import { HBox, VBox } from '../../../../scenery/js/imports.js';
export default function demoKeyNode(layoutBounds) {
  // example letter keys, portion of a typical keyboard
  const topRowKeyStrings = ['Q', 'W', 'E', 'R', 'T', 'Y', 'U', 'I', 'O', 'P', '[', ']', '\\'];
  const middleRowKeyStrings = ['A', 'S', 'D', 'F', 'G', 'H', 'J', 'K', 'L', ':', '"'];
  const bottomRowKeyStrings = ['Z', 'X', 'C', 'V', 'B', 'N', 'M', '\'', '.', '/'];

  // arrays that hold key nodes for each row of a keyboard - each row starts with an additional multi-character key
  const topKeyNodes = [TextKeyNode.tab()];
  const middleKeyNodes = [TextKeyNode.capsLock()];
  const bottomKeyNodes = [TextKeyNode.shift()];
  let i;
  for (i = 0; i < topRowKeyStrings.length; i++) {
    topKeyNodes.push(new LetterKeyNode(topRowKeyStrings[i]));
  }
  for (i = 0; i < middleRowKeyStrings.length; i++) {
    middleKeyNodes.push(new LetterKeyNode(middleRowKeyStrings[i]));
  }
  for (i = 0; i < bottomRowKeyStrings.length; i++) {
    bottomKeyNodes.push(new LetterKeyNode(bottomRowKeyStrings[i]));
  }
  const topArrowKeyNode = new ArrowKeyNode('up');
  const bottomArrowKeyNodes = [new ArrowKeyNode('left'), new ArrowKeyNode('down'), new ArrowKeyNode('right')];
  const bottomArrowKeyBox = new HBox({
    children: bottomArrowKeyNodes,
    spacing: 2
  });

  // add the enter and shift keys to the middle and bottom rows, shift key has extra width for alignment
  middleKeyNodes.push(TextKeyNode.enter());
  bottomKeyNodes.push(TextKeyNode.shift({
    xAlign: 'right',
    xMargin: 4,
    minKeyWidth: 70
  }));
  const topHBox = new HBox({
    children: topKeyNodes,
    spacing: 5
  });
  const middleHBox = new HBox({
    children: middleKeyNodes,
    spacing: 5
  });
  const bottomHBox = new HBox({
    children: bottomKeyNodes,
    spacing: 5
  });
  const arrowKeysVBox = new VBox({
    children: [topArrowKeyNode, bottomArrowKeyBox],
    spacing: 1
  });
  return new VBox({
    children: [topHBox, middleHBox, bottomHBox, arrowKeysVBox],
    center: layoutBounds.center,
    align: 'right',
    spacing: 3,
    scale: 1.5
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBcnJvd0tleU5vZGUiLCJMZXR0ZXJLZXlOb2RlIiwiVGV4dEtleU5vZGUiLCJIQm94IiwiVkJveCIsImRlbW9LZXlOb2RlIiwibGF5b3V0Qm91bmRzIiwidG9wUm93S2V5U3RyaW5ncyIsIm1pZGRsZVJvd0tleVN0cmluZ3MiLCJib3R0b21Sb3dLZXlTdHJpbmdzIiwidG9wS2V5Tm9kZXMiLCJ0YWIiLCJtaWRkbGVLZXlOb2RlcyIsImNhcHNMb2NrIiwiYm90dG9tS2V5Tm9kZXMiLCJzaGlmdCIsImkiLCJsZW5ndGgiLCJwdXNoIiwidG9wQXJyb3dLZXlOb2RlIiwiYm90dG9tQXJyb3dLZXlOb2RlcyIsImJvdHRvbUFycm93S2V5Qm94IiwiY2hpbGRyZW4iLCJzcGFjaW5nIiwiZW50ZXIiLCJ4QWxpZ24iLCJ4TWFyZ2luIiwibWluS2V5V2lkdGgiLCJ0b3BIQm94IiwibWlkZGxlSEJveCIsImJvdHRvbUhCb3giLCJhcnJvd0tleXNWQm94IiwiY2VudGVyIiwiYWxpZ24iLCJzY2FsZSJdLCJzb3VyY2VzIjpbImRlbW9LZXlOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERlbW8gZm9yIEtleU5vZGUgYW5kIGl0cyBzdWJ0eXBlc1xyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBBcnJvd0tleU5vZGUgZnJvbSAnLi4vLi4va2V5Ym9hcmQvQXJyb3dLZXlOb2RlLmpzJztcclxuaW1wb3J0IExldHRlcktleU5vZGUgZnJvbSAnLi4vLi4va2V5Ym9hcmQvTGV0dGVyS2V5Tm9kZS5qcyc7XHJcbmltcG9ydCBUZXh0S2V5Tm9kZSBmcm9tICcuLi8uLi9rZXlib2FyZC9UZXh0S2V5Tm9kZS5qcyc7XHJcbmltcG9ydCB7IEhCb3gsIE5vZGUsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZW1vS2V5Tm9kZSggbGF5b3V0Qm91bmRzOiBCb3VuZHMyICk6IE5vZGUge1xyXG5cclxuICAvLyBleGFtcGxlIGxldHRlciBrZXlzLCBwb3J0aW9uIG9mIGEgdHlwaWNhbCBrZXlib2FyZFxyXG4gIGNvbnN0IHRvcFJvd0tleVN0cmluZ3MgPSBbICdRJywgJ1cnLCAnRScsICdSJywgJ1QnLCAnWScsICdVJywgJ0knLCAnTycsICdQJywgJ1snLCAnXScsICdcXFxcJyBdO1xyXG4gIGNvbnN0IG1pZGRsZVJvd0tleVN0cmluZ3MgPSBbICdBJywgJ1MnLCAnRCcsICdGJywgJ0cnLCAnSCcsICdKJywgJ0snLCAnTCcsICc6JywgJ1wiJyBdO1xyXG4gIGNvbnN0IGJvdHRvbVJvd0tleVN0cmluZ3MgPSBbICdaJywgJ1gnLCAnQycsICdWJywgJ0InLCAnTicsICdNJywgJ1xcJycsICcuJywgJy8nIF07XHJcblxyXG4gIC8vIGFycmF5cyB0aGF0IGhvbGQga2V5IG5vZGVzIGZvciBlYWNoIHJvdyBvZiBhIGtleWJvYXJkIC0gZWFjaCByb3cgc3RhcnRzIHdpdGggYW4gYWRkaXRpb25hbCBtdWx0aS1jaGFyYWN0ZXIga2V5XHJcbiAgY29uc3QgdG9wS2V5Tm9kZXMgPSBbIFRleHRLZXlOb2RlLnRhYigpIF07XHJcbiAgY29uc3QgbWlkZGxlS2V5Tm9kZXMgPSBbIFRleHRLZXlOb2RlLmNhcHNMb2NrKCkgXTtcclxuICBjb25zdCBib3R0b21LZXlOb2RlcyA9IFsgVGV4dEtleU5vZGUuc2hpZnQoKSBdO1xyXG5cclxuICBsZXQgaTtcclxuICBmb3IgKCBpID0gMDsgaSA8IHRvcFJvd0tleVN0cmluZ3MubGVuZ3RoOyBpKysgKSB7XHJcbiAgICB0b3BLZXlOb2Rlcy5wdXNoKCBuZXcgTGV0dGVyS2V5Tm9kZSggdG9wUm93S2V5U3RyaW5nc1sgaSBdICkgKTtcclxuICB9XHJcbiAgZm9yICggaSA9IDA7IGkgPCBtaWRkbGVSb3dLZXlTdHJpbmdzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgbWlkZGxlS2V5Tm9kZXMucHVzaCggbmV3IExldHRlcktleU5vZGUoIG1pZGRsZVJvd0tleVN0cmluZ3NbIGkgXSApICk7XHJcbiAgfVxyXG4gIGZvciAoIGkgPSAwOyBpIDwgYm90dG9tUm93S2V5U3RyaW5ncy5sZW5ndGg7IGkrKyApIHtcclxuICAgIGJvdHRvbUtleU5vZGVzLnB1c2goIG5ldyBMZXR0ZXJLZXlOb2RlKCBib3R0b21Sb3dLZXlTdHJpbmdzWyBpIF0gKSApO1xyXG4gIH1cclxuICBjb25zdCB0b3BBcnJvd0tleU5vZGUgPSBuZXcgQXJyb3dLZXlOb2RlKCAndXAnICk7XHJcbiAgY29uc3QgYm90dG9tQXJyb3dLZXlOb2RlcyA9IFsgbmV3IEFycm93S2V5Tm9kZSggJ2xlZnQnICksIG5ldyBBcnJvd0tleU5vZGUoICdkb3duJyApLCBuZXcgQXJyb3dLZXlOb2RlKCAncmlnaHQnICkgXTtcclxuICBjb25zdCBib3R0b21BcnJvd0tleUJveCA9IG5ldyBIQm94KCB7IGNoaWxkcmVuOiBib3R0b21BcnJvd0tleU5vZGVzLCBzcGFjaW5nOiAyIH0gKTtcclxuXHJcbiAgLy8gYWRkIHRoZSBlbnRlciBhbmQgc2hpZnQga2V5cyB0byB0aGUgbWlkZGxlIGFuZCBib3R0b20gcm93cywgc2hpZnQga2V5IGhhcyBleHRyYSB3aWR0aCBmb3IgYWxpZ25tZW50XHJcbiAgbWlkZGxlS2V5Tm9kZXMucHVzaCggVGV4dEtleU5vZGUuZW50ZXIoKSApO1xyXG4gIGJvdHRvbUtleU5vZGVzLnB1c2goIFRleHRLZXlOb2RlLnNoaWZ0KCB7IHhBbGlnbjogJ3JpZ2h0JywgeE1hcmdpbjogNCwgbWluS2V5V2lkdGg6IDcwIH0gKSApO1xyXG5cclxuICBjb25zdCB0b3BIQm94ID0gbmV3IEhCb3goIHsgY2hpbGRyZW46IHRvcEtleU5vZGVzLCBzcGFjaW5nOiA1IH0gKTtcclxuICBjb25zdCBtaWRkbGVIQm94ID0gbmV3IEhCb3goIHsgY2hpbGRyZW46IG1pZGRsZUtleU5vZGVzLCBzcGFjaW5nOiA1IH0gKTtcclxuICBjb25zdCBib3R0b21IQm94ID0gbmV3IEhCb3goIHsgY2hpbGRyZW46IGJvdHRvbUtleU5vZGVzLCBzcGFjaW5nOiA1IH0gKTtcclxuICBjb25zdCBhcnJvd0tleXNWQm94ID0gbmV3IFZCb3goIHtcclxuICAgIGNoaWxkcmVuOiBbIHRvcEFycm93S2V5Tm9kZSwgYm90dG9tQXJyb3dLZXlCb3ggXSxcclxuICAgIHNwYWNpbmc6IDFcclxuICB9ICk7XHJcblxyXG4gIHJldHVybiBuZXcgVkJveCgge1xyXG4gICAgY2hpbGRyZW46IFsgdG9wSEJveCwgbWlkZGxlSEJveCwgYm90dG9tSEJveCwgYXJyb3dLZXlzVkJveCBdLFxyXG4gICAgY2VudGVyOiBsYXlvdXRCb3VuZHMuY2VudGVyLFxyXG4gICAgYWxpZ246ICdyaWdodCcsXHJcbiAgICBzcGFjaW5nOiAzLFxyXG4gICAgc2NhbGU6IDEuNVxyXG4gIH0gKTtcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxZQUFZLE1BQU0sZ0NBQWdDO0FBQ3pELE9BQU9DLGFBQWEsTUFBTSxpQ0FBaUM7QUFDM0QsT0FBT0MsV0FBVyxNQUFNLCtCQUErQjtBQUN2RCxTQUFTQyxJQUFJLEVBQVFDLElBQUksUUFBUSxtQ0FBbUM7QUFHcEUsZUFBZSxTQUFTQyxXQUFXQSxDQUFFQyxZQUFxQixFQUFTO0VBRWpFO0VBQ0EsTUFBTUMsZ0JBQWdCLEdBQUcsQ0FBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxHQUFHLEVBQUUsR0FBRyxFQUFFLEdBQUcsRUFBRSxJQUFJLENBQUU7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