// Copyright 2022-2024, University of Colorado Boulder

/**
 * Demo for StarNode
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import StarNode from '../../StarNode.js';
import { Node } from '../../../../scenery/js/imports.js';
import Range from '../../../../dot/js/Range.js';
import Property from '../../../../axon/js/Property.js';
import HSlider from '../../../../sun/js/HSlider.js';
import Dimension2 from '../../../../dot/js/Dimension2.js';
export default function demoStarNode(layoutBounds) {
  const starValueProperty = new Property(1);
  const starSlider = new HSlider(starValueProperty, new Range(0, 1), {
    thumbSize: new Dimension2(25, 50),
    thumbFillHighlighted: 'yellow',
    thumbFill: 'rgb(220,220,0)',
    thumbCenterLineStroke: 'black'
  });
  const starNodeContainer = new Node({
    children: [new StarNode()],
    top: starSlider.bottom + 30,
    right: starSlider.right
  });

  /*
   * Fill up a star by creating new StarNodes dynamically.
   * Shouldn't be a problem for sims since stars are relatively static.
   * Stars should be rewritten if they need to support smooth dynamic filling (may require mutable kite paths).
   */
  starValueProperty.link(value => {
    starNodeContainer.children = [new StarNode({
      value: value,
      starShapeOptions: {
        outerRadius: 30,
        innerRadius: 15
      }
    })];
  });
  return new Node({
    children: [starNodeContainer, starSlider],
    center: layoutBounds.center
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdGFyTm9kZSIsIk5vZGUiLCJSYW5nZSIsIlByb3BlcnR5IiwiSFNsaWRlciIsIkRpbWVuc2lvbjIiLCJkZW1vU3Rhck5vZGUiLCJsYXlvdXRCb3VuZHMiLCJzdGFyVmFsdWVQcm9wZXJ0eSIsInN0YXJTbGlkZXIiLCJ0aHVtYlNpemUiLCJ0aHVtYkZpbGxIaWdobGlnaHRlZCIsInRodW1iRmlsbCIsInRodW1iQ2VudGVyTGluZVN0cm9rZSIsInN0YXJOb2RlQ29udGFpbmVyIiwiY2hpbGRyZW4iLCJ0b3AiLCJib3R0b20iLCJyaWdodCIsImxpbmsiLCJ2YWx1ZSIsInN0YXJTaGFwZU9wdGlvbnMiLCJvdXRlclJhZGl1cyIsImlubmVyUmFkaXVzIiwiY2VudGVyIl0sInNvdXJjZXMiOlsiZGVtb1N0YXJOb2RlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERlbW8gZm9yIFN0YXJOb2RlXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IFN0YXJOb2RlIGZyb20gJy4uLy4uL1N0YXJOb2RlLmpzJztcclxuaW1wb3J0IHsgTm9kZSB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IEhTbGlkZXIgZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL0hTbGlkZXIuanMnO1xyXG5pbXBvcnQgRGltZW5zaW9uMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvRGltZW5zaW9uMi5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZW1vU3Rhck5vZGUoIGxheW91dEJvdW5kczogQm91bmRzMiApOiBOb2RlIHtcclxuXHJcbiAgY29uc3Qgc3RhclZhbHVlUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIDEgKTtcclxuXHJcbiAgY29uc3Qgc3RhclNsaWRlciA9IG5ldyBIU2xpZGVyKCBzdGFyVmFsdWVQcm9wZXJ0eSwgbmV3IFJhbmdlKCAwLCAxICksIHtcclxuICAgIHRodW1iU2l6ZTogbmV3IERpbWVuc2lvbjIoIDI1LCA1MCApLFxyXG4gICAgdGh1bWJGaWxsSGlnaGxpZ2h0ZWQ6ICd5ZWxsb3cnLFxyXG4gICAgdGh1bWJGaWxsOiAncmdiKDIyMCwyMjAsMCknLFxyXG4gICAgdGh1bWJDZW50ZXJMaW5lU3Ryb2tlOiAnYmxhY2snXHJcbiAgfSApO1xyXG5cclxuICBjb25zdCBzdGFyTm9kZUNvbnRhaW5lciA9IG5ldyBOb2RlKCB7XHJcbiAgICBjaGlsZHJlbjogWyBuZXcgU3Rhck5vZGUoKSBdLFxyXG4gICAgdG9wOiBzdGFyU2xpZGVyLmJvdHRvbSArIDMwLFxyXG4gICAgcmlnaHQ6IHN0YXJTbGlkZXIucmlnaHRcclxuICB9ICk7XHJcblxyXG4gIC8qXHJcbiAgICogRmlsbCB1cCBhIHN0YXIgYnkgY3JlYXRpbmcgbmV3IFN0YXJOb2RlcyBkeW5hbWljYWxseS5cclxuICAgKiBTaG91bGRuJ3QgYmUgYSBwcm9ibGVtIGZvciBzaW1zIHNpbmNlIHN0YXJzIGFyZSByZWxhdGl2ZWx5IHN0YXRpYy5cclxuICAgKiBTdGFycyBzaG91bGQgYmUgcmV3cml0dGVuIGlmIHRoZXkgbmVlZCB0byBzdXBwb3J0IHNtb290aCBkeW5hbWljIGZpbGxpbmcgKG1heSByZXF1aXJlIG11dGFibGUga2l0ZSBwYXRocykuXHJcbiAgICovXHJcbiAgc3RhclZhbHVlUHJvcGVydHkubGluayggdmFsdWUgPT4ge1xyXG4gICAgc3Rhck5vZGVDb250YWluZXIuY2hpbGRyZW4gPSBbXHJcbiAgICAgIG5ldyBTdGFyTm9kZSgge1xyXG4gICAgICAgIHZhbHVlOiB2YWx1ZSxcclxuICAgICAgICBzdGFyU2hhcGVPcHRpb25zOiB7XHJcbiAgICAgICAgICBvdXRlclJhZGl1czogMzAsXHJcbiAgICAgICAgICBpbm5lclJhZGl1czogMTVcclxuICAgICAgICB9XHJcbiAgICAgIH0gKVxyXG4gICAgXTtcclxuICB9ICk7XHJcblxyXG4gIHJldHVybiBuZXcgTm9kZSgge1xyXG4gICAgY2hpbGRyZW46IFsgc3Rhck5vZGVDb250YWluZXIsIHN0YXJTbGlkZXIgXSxcclxuICAgIGNlbnRlcjogbGF5b3V0Qm91bmRzLmNlbnRlclxyXG4gIH0gKTtcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sbUJBQW1CO0FBQ3hDLFNBQVNDLElBQUksUUFBUSxtQ0FBbUM7QUFFeEQsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxRQUFRLE1BQU0saUNBQWlDO0FBQ3RELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsVUFBVSxNQUFNLGtDQUFrQztBQUV6RCxlQUFlLFNBQVNDLFlBQVlBLENBQUVDLFlBQXFCLEVBQVM7RUFFbEUsTUFBTUMsaUJBQWlCLEdBQUcsSUFBSUwsUUFBUSxDQUFFLENBQUUsQ0FBQztFQUUzQyxNQUFNTSxVQUFVLEdBQUcsSUFBSUwsT0FBTyxDQUFFSSxpQkFBaUIsRUFBRSxJQUFJTixLQUFLLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxFQUFFO0lBQ3BFUSxTQUFTLEVBQUUsSUFBSUwsVUFBVSxDQUFFLEVBQUUsRUFBRSxFQUFHLENBQUM7SUFDbkNNLG9CQUFvQixFQUFFLFFBQVE7SUFDOUJDLFNBQVMsRUFBRSxnQkFBZ0I7SUFDM0JDLHFCQUFxQixFQUFFO0VBQ3pCLENBQUUsQ0FBQztFQUVILE1BQU1DLGlCQUFpQixHQUFHLElBQUliLElBQUksQ0FBRTtJQUNsQ2MsUUFBUSxFQUFFLENBQUUsSUFBSWYsUUFBUSxDQUFDLENBQUMsQ0FBRTtJQUM1QmdCLEdBQUcsRUFBRVAsVUFBVSxDQUFDUSxNQUFNLEdBQUcsRUFBRTtJQUMzQkMsS0FBSyxFQUFFVCxVQUFVLENBQUNTO0VBQ3BCLENBQUUsQ0FBQzs7RUFFSDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VWLGlCQUFpQixDQUFDVyxJQUFJLENBQUVDLEtBQUssSUFBSTtJQUMvQk4saUJBQWlCLENBQUNDLFFBQVEsR0FBRyxDQUMzQixJQUFJZixRQUFRLENBQUU7TUFDWm9CLEtBQUssRUFBRUEsS0FBSztNQUNaQyxnQkFBZ0IsRUFBRTtRQUNoQkMsV0FBVyxFQUFFLEVBQUU7UUFDZkMsV0FBVyxFQUFFO01BQ2Y7SUFDRixDQUFFLENBQUMsQ0FDSjtFQUNILENBQUUsQ0FBQztFQUVILE9BQU8sSUFBSXRCLElBQUksQ0FBRTtJQUNmYyxRQUFRLEVBQUUsQ0FBRUQsaUJBQWlCLEVBQUVMLFVBQVUsQ0FBRTtJQUMzQ2UsTUFBTSxFQUFFakIsWUFBWSxDQUFDaUI7RUFDdkIsQ0FBRSxDQUFDO0FBQ0wiLCJpZ25vcmVMaXN0IjpbXX0=