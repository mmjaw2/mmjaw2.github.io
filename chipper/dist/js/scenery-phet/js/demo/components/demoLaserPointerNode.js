// Copyright 2022-2024, University of Colorado Boulder

/**
 * Demo for LaserPointerNode
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node, Rectangle } from '../../../../scenery/js/imports.js';
import LaserPointerNode from '../../LaserPointerNode.js';
import Property from '../../../../axon/js/Property.js';
export default function demoLaserPointerNode(layoutBounds) {
  const leftOnProperty = new Property(false);
  const rightOnProperty = new Property(false);

  // Demonstrate how to adjust lighting
  const leftLaserNode = new LaserPointerNode(leftOnProperty, {
    // these options adjust the lighting
    topColor: LaserPointerNode.DEFAULT_LASER_NODE_OPTIONS.bottomColor,
    bottomColor: LaserPointerNode.DEFAULT_LASER_NODE_OPTIONS.topColor,
    highlightColorStop: 1 - LaserPointerNode.DEFAULT_LASER_NODE_OPTIONS.highlightColorStop,
    buttonRotation: Math.PI,
    rotation: Math.PI,
    right: layoutBounds.centerX - 20,
    centerY: layoutBounds.centerY
  });
  const rightLaserNode = new LaserPointerNode(rightOnProperty, {
    left: layoutBounds.centerX + 20,
    centerY: layoutBounds.centerY,
    hasGlass: true
  });
  const leftBeamNode = new Rectangle(0, 0, 1000, 40, {
    fill: 'yellow',
    right: leftLaserNode.centerX,
    centerY: leftLaserNode.centerY
  });
  const rightBeamNode = new Rectangle(0, 0, 1000, 40, {
    fill: 'yellow',
    left: rightLaserNode.centerX,
    centerY: rightLaserNode.centerY
  });
  leftOnProperty.link(on => {
    leftBeamNode.visible = on;
  });
  rightOnProperty.link(on => {
    rightBeamNode.visible = on;
  });
  return new Node({
    children: [leftBeamNode, leftLaserNode, rightBeamNode, rightLaserNode]
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiUmVjdGFuZ2xlIiwiTGFzZXJQb2ludGVyTm9kZSIsIlByb3BlcnR5IiwiZGVtb0xhc2VyUG9pbnRlck5vZGUiLCJsYXlvdXRCb3VuZHMiLCJsZWZ0T25Qcm9wZXJ0eSIsInJpZ2h0T25Qcm9wZXJ0eSIsImxlZnRMYXNlck5vZGUiLCJ0b3BDb2xvciIsIkRFRkFVTFRfTEFTRVJfTk9ERV9PUFRJT05TIiwiYm90dG9tQ29sb3IiLCJoaWdobGlnaHRDb2xvclN0b3AiLCJidXR0b25Sb3RhdGlvbiIsIk1hdGgiLCJQSSIsInJvdGF0aW9uIiwicmlnaHQiLCJjZW50ZXJYIiwiY2VudGVyWSIsInJpZ2h0TGFzZXJOb2RlIiwibGVmdCIsImhhc0dsYXNzIiwibGVmdEJlYW1Ob2RlIiwiZmlsbCIsInJpZ2h0QmVhbU5vZGUiLCJsaW5rIiwib24iLCJ2aXNpYmxlIiwiY2hpbGRyZW4iXSwic291cmNlcyI6WyJkZW1vTGFzZXJQb2ludGVyTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEZW1vIGZvciBMYXNlclBvaW50ZXJOb2RlXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSwgUmVjdGFuZ2xlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgTGFzZXJQb2ludGVyTm9kZSBmcm9tICcuLi8uLi9MYXNlclBvaW50ZXJOb2RlLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVtb0xhc2VyUG9pbnRlck5vZGUoIGxheW91dEJvdW5kczogQm91bmRzMiApOiBOb2RlIHtcclxuXHJcblxyXG4gIGNvbnN0IGxlZnRPblByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCBmYWxzZSApO1xyXG4gIGNvbnN0IHJpZ2h0T25Qcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggZmFsc2UgKTtcclxuXHJcbiAgLy8gRGVtb25zdHJhdGUgaG93IHRvIGFkanVzdCBsaWdodGluZ1xyXG4gIGNvbnN0IGxlZnRMYXNlck5vZGUgPSBuZXcgTGFzZXJQb2ludGVyTm9kZSggbGVmdE9uUHJvcGVydHksIHtcclxuXHJcbiAgICAvLyB0aGVzZSBvcHRpb25zIGFkanVzdCB0aGUgbGlnaHRpbmdcclxuICAgIHRvcENvbG9yOiBMYXNlclBvaW50ZXJOb2RlLkRFRkFVTFRfTEFTRVJfTk9ERV9PUFRJT05TLmJvdHRvbUNvbG9yLFxyXG4gICAgYm90dG9tQ29sb3I6IExhc2VyUG9pbnRlck5vZGUuREVGQVVMVF9MQVNFUl9OT0RFX09QVElPTlMudG9wQ29sb3IsXHJcbiAgICBoaWdobGlnaHRDb2xvclN0b3A6IDEgLSBMYXNlclBvaW50ZXJOb2RlLkRFRkFVTFRfTEFTRVJfTk9ERV9PUFRJT05TLmhpZ2hsaWdodENvbG9yU3RvcCxcclxuICAgIGJ1dHRvblJvdGF0aW9uOiBNYXRoLlBJLFxyXG5cclxuICAgIHJvdGF0aW9uOiBNYXRoLlBJLFxyXG4gICAgcmlnaHQ6IGxheW91dEJvdW5kcy5jZW50ZXJYIC0gMjAsXHJcbiAgICBjZW50ZXJZOiBsYXlvdXRCb3VuZHMuY2VudGVyWVxyXG4gIH0gKTtcclxuXHJcbiAgY29uc3QgcmlnaHRMYXNlck5vZGUgPSBuZXcgTGFzZXJQb2ludGVyTm9kZSggcmlnaHRPblByb3BlcnR5LCB7XHJcbiAgICBsZWZ0OiBsYXlvdXRCb3VuZHMuY2VudGVyWCArIDIwLFxyXG4gICAgY2VudGVyWTogbGF5b3V0Qm91bmRzLmNlbnRlclksXHJcbiAgICBoYXNHbGFzczogdHJ1ZVxyXG4gIH0gKTtcclxuXHJcbiAgY29uc3QgbGVmdEJlYW1Ob2RlID0gbmV3IFJlY3RhbmdsZSggMCwgMCwgMTAwMCwgNDAsIHtcclxuICAgIGZpbGw6ICd5ZWxsb3cnLFxyXG4gICAgcmlnaHQ6IGxlZnRMYXNlck5vZGUuY2VudGVyWCxcclxuICAgIGNlbnRlclk6IGxlZnRMYXNlck5vZGUuY2VudGVyWVxyXG4gIH0gKTtcclxuXHJcbiAgY29uc3QgcmlnaHRCZWFtTm9kZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDEwMDAsIDQwLCB7XHJcbiAgICBmaWxsOiAneWVsbG93JyxcclxuICAgIGxlZnQ6IHJpZ2h0TGFzZXJOb2RlLmNlbnRlclgsXHJcbiAgICBjZW50ZXJZOiByaWdodExhc2VyTm9kZS5jZW50ZXJZXHJcbiAgfSApO1xyXG5cclxuICBsZWZ0T25Qcm9wZXJ0eS5saW5rKCBvbiA9PiB7XHJcbiAgICBsZWZ0QmVhbU5vZGUudmlzaWJsZSA9IG9uO1xyXG4gIH0gKTtcclxuICByaWdodE9uUHJvcGVydHkubGluayggb24gPT4ge1xyXG4gICAgcmlnaHRCZWFtTm9kZS52aXNpYmxlID0gb247XHJcbiAgfSApO1xyXG5cclxuICByZXR1cm4gbmV3IE5vZGUoIHsgY2hpbGRyZW46IFsgbGVmdEJlYW1Ob2RlLCBsZWZ0TGFzZXJOb2RlLCByaWdodEJlYW1Ob2RlLCByaWdodExhc2VyTm9kZSBdIH0gKTtcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLEVBQUVDLFNBQVMsUUFBUSxtQ0FBbUM7QUFFbkUsT0FBT0MsZ0JBQWdCLE1BQU0sMkJBQTJCO0FBQ3hELE9BQU9DLFFBQVEsTUFBTSxpQ0FBaUM7QUFFdEQsZUFBZSxTQUFTQyxvQkFBb0JBLENBQUVDLFlBQXFCLEVBQVM7RUFHMUUsTUFBTUMsY0FBYyxHQUFHLElBQUlILFFBQVEsQ0FBRSxLQUFNLENBQUM7RUFDNUMsTUFBTUksZUFBZSxHQUFHLElBQUlKLFFBQVEsQ0FBRSxLQUFNLENBQUM7O0VBRTdDO0VBQ0EsTUFBTUssYUFBYSxHQUFHLElBQUlOLGdCQUFnQixDQUFFSSxjQUFjLEVBQUU7SUFFMUQ7SUFDQUcsUUFBUSxFQUFFUCxnQkFBZ0IsQ0FBQ1EsMEJBQTBCLENBQUNDLFdBQVc7SUFDakVBLFdBQVcsRUFBRVQsZ0JBQWdCLENBQUNRLDBCQUEwQixDQUFDRCxRQUFRO0lBQ2pFRyxrQkFBa0IsRUFBRSxDQUFDLEdBQUdWLGdCQUFnQixDQUFDUSwwQkFBMEIsQ0FBQ0Usa0JBQWtCO0lBQ3RGQyxjQUFjLEVBQUVDLElBQUksQ0FBQ0MsRUFBRTtJQUV2QkMsUUFBUSxFQUFFRixJQUFJLENBQUNDLEVBQUU7SUFDakJFLEtBQUssRUFBRVosWUFBWSxDQUFDYSxPQUFPLEdBQUcsRUFBRTtJQUNoQ0MsT0FBTyxFQUFFZCxZQUFZLENBQUNjO0VBQ3hCLENBQUUsQ0FBQztFQUVILE1BQU1DLGNBQWMsR0FBRyxJQUFJbEIsZ0JBQWdCLENBQUVLLGVBQWUsRUFBRTtJQUM1RGMsSUFBSSxFQUFFaEIsWUFBWSxDQUFDYSxPQUFPLEdBQUcsRUFBRTtJQUMvQkMsT0FBTyxFQUFFZCxZQUFZLENBQUNjLE9BQU87SUFDN0JHLFFBQVEsRUFBRTtFQUNaLENBQUUsQ0FBQztFQUVILE1BQU1DLFlBQVksR0FBRyxJQUFJdEIsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRTtJQUNsRHVCLElBQUksRUFBRSxRQUFRO0lBQ2RQLEtBQUssRUFBRVQsYUFBYSxDQUFDVSxPQUFPO0lBQzVCQyxPQUFPLEVBQUVYLGFBQWEsQ0FBQ1c7RUFDekIsQ0FBRSxDQUFDO0VBRUgsTUFBTU0sYUFBYSxHQUFHLElBQUl4QixTQUFTLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxJQUFJLEVBQUUsRUFBRSxFQUFFO0lBQ25EdUIsSUFBSSxFQUFFLFFBQVE7SUFDZEgsSUFBSSxFQUFFRCxjQUFjLENBQUNGLE9BQU87SUFDNUJDLE9BQU8sRUFBRUMsY0FBYyxDQUFDRDtFQUMxQixDQUFFLENBQUM7RUFFSGIsY0FBYyxDQUFDb0IsSUFBSSxDQUFFQyxFQUFFLElBQUk7SUFDekJKLFlBQVksQ0FBQ0ssT0FBTyxHQUFHRCxFQUFFO0VBQzNCLENBQUUsQ0FBQztFQUNIcEIsZUFBZSxDQUFDbUIsSUFBSSxDQUFFQyxFQUFFLElBQUk7SUFDMUJGLGFBQWEsQ0FBQ0csT0FBTyxHQUFHRCxFQUFFO0VBQzVCLENBQUUsQ0FBQztFQUVILE9BQU8sSUFBSTNCLElBQUksQ0FBRTtJQUFFNkIsUUFBUSxFQUFFLENBQUVOLFlBQVksRUFBRWYsYUFBYSxFQUFFaUIsYUFBYSxFQUFFTCxjQUFjO0VBQUcsQ0FBRSxDQUFDO0FBQ2pHIiwiaWdub3JlTGlzdCI6W119