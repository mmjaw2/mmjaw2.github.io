// Copyright 2022-2024, University of Colorado Boulder

/**
 * Demo for BicyclePumpNode
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { Node, Text } from '../../../../scenery/js/imports.js';
import Property from '../../../../axon/js/Property.js';
import Range from '../../../../dot/js/Range.js';
import PhetFont from '../../PhetFont.js';
import BicyclePumpNode from '../../BicyclePumpNode.js';
import ResetButton from '../../buttons/ResetButton.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Vector2 from '../../../../dot/js/Vector2.js';
export default function demoBicyclePumpNode(layoutBounds) {
  const numberOfParticlesProperty = new NumberProperty(0, {
    numberType: 'Integer',
    range: new Range(0, 100)
  });
  const rangeProperty = new Property(numberOfParticlesProperty.range);
  const bicyclePumpNode = new BicyclePumpNode(numberOfParticlesProperty, rangeProperty, {
    hoseAttachmentOffset: new Vector2(100, -100)
  });

  // Displays the number of particles, positioned next to the hose output
  const displayNode = new Text(numberOfParticlesProperty.value, {
    font: new PhetFont(24),
    left: bicyclePumpNode.x + bicyclePumpNode.hoseAttachmentOffset.x + 20,
    centerY: bicyclePumpNode.y + bicyclePumpNode.hoseAttachmentOffset.y
  });
  numberOfParticlesProperty.link(numberOfParticles => {
    displayNode.string = numberOfParticles;
  });
  const resetButton = new ResetButton({
    listener: () => {
      numberOfParticlesProperty.reset();
      bicyclePumpNode.reset();
    },
    scale: 0.75,
    centerX: bicyclePumpNode.x,
    top: bicyclePumpNode.bottom + 20
  });
  return new Node({
    children: [bicyclePumpNode, displayNode, resetButton],
    center: layoutBounds.center
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb2RlIiwiVGV4dCIsIlByb3BlcnR5IiwiUmFuZ2UiLCJQaGV0Rm9udCIsIkJpY3ljbGVQdW1wTm9kZSIsIlJlc2V0QnV0dG9uIiwiTnVtYmVyUHJvcGVydHkiLCJWZWN0b3IyIiwiZGVtb0JpY3ljbGVQdW1wTm9kZSIsImxheW91dEJvdW5kcyIsIm51bWJlck9mUGFydGljbGVzUHJvcGVydHkiLCJudW1iZXJUeXBlIiwicmFuZ2UiLCJyYW5nZVByb3BlcnR5IiwiYmljeWNsZVB1bXBOb2RlIiwiaG9zZUF0dGFjaG1lbnRPZmZzZXQiLCJkaXNwbGF5Tm9kZSIsInZhbHVlIiwiZm9udCIsImxlZnQiLCJ4IiwiY2VudGVyWSIsInkiLCJsaW5rIiwibnVtYmVyT2ZQYXJ0aWNsZXMiLCJzdHJpbmciLCJyZXNldEJ1dHRvbiIsImxpc3RlbmVyIiwicmVzZXQiLCJzY2FsZSIsImNlbnRlclgiLCJ0b3AiLCJib3R0b20iLCJjaGlsZHJlbiIsImNlbnRlciJdLCJzb3VyY2VzIjpbImRlbW9CaWN5Y2xlUHVtcE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGVtbyBmb3IgQmljeWNsZVB1bXBOb2RlXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgTm9kZSwgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCBCaWN5Y2xlUHVtcE5vZGUgZnJvbSAnLi4vLi4vQmljeWNsZVB1bXBOb2RlLmpzJztcclxuaW1wb3J0IFJlc2V0QnV0dG9uIGZyb20gJy4uLy4uL2J1dHRvbnMvUmVzZXRCdXR0b24uanMnO1xyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZGVtb0JpY3ljbGVQdW1wTm9kZSggbGF5b3V0Qm91bmRzOiBCb3VuZHMyICk6IE5vZGUge1xyXG5cclxuICBjb25zdCBudW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCAwLCB7XHJcbiAgICBudW1iZXJUeXBlOiAnSW50ZWdlcicsXHJcbiAgICByYW5nZTogbmV3IFJhbmdlKCAwLCAxMDAgKVxyXG4gIH0gKTtcclxuXHJcbiAgY29uc3QgcmFuZ2VQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggbnVtYmVyT2ZQYXJ0aWNsZXNQcm9wZXJ0eS5yYW5nZSApO1xyXG5cclxuICBjb25zdCBiaWN5Y2xlUHVtcE5vZGUgPSBuZXcgQmljeWNsZVB1bXBOb2RlKCBudW1iZXJPZlBhcnRpY2xlc1Byb3BlcnR5LCByYW5nZVByb3BlcnR5LCB7XHJcbiAgICBob3NlQXR0YWNobWVudE9mZnNldDogbmV3IFZlY3RvcjIoIDEwMCwgLTEwMCApXHJcbiAgfSApO1xyXG5cclxuICAvLyBEaXNwbGF5cyB0aGUgbnVtYmVyIG9mIHBhcnRpY2xlcywgcG9zaXRpb25lZCBuZXh0IHRvIHRoZSBob3NlIG91dHB1dFxyXG4gIGNvbnN0IGRpc3BsYXlOb2RlID0gbmV3IFRleHQoIG51bWJlck9mUGFydGljbGVzUHJvcGVydHkudmFsdWUsIHtcclxuICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggMjQgKSxcclxuICAgIGxlZnQ6IGJpY3ljbGVQdW1wTm9kZS54ICsgYmljeWNsZVB1bXBOb2RlLmhvc2VBdHRhY2htZW50T2Zmc2V0LnggKyAyMCxcclxuICAgIGNlbnRlclk6IGJpY3ljbGVQdW1wTm9kZS55ICsgYmljeWNsZVB1bXBOb2RlLmhvc2VBdHRhY2htZW50T2Zmc2V0LnlcclxuICB9ICk7XHJcblxyXG4gIG51bWJlck9mUGFydGljbGVzUHJvcGVydHkubGluayggbnVtYmVyT2ZQYXJ0aWNsZXMgPT4ge1xyXG4gICAgZGlzcGxheU5vZGUuc3RyaW5nID0gbnVtYmVyT2ZQYXJ0aWNsZXM7XHJcbiAgfSApO1xyXG5cclxuICBjb25zdCByZXNldEJ1dHRvbiA9IG5ldyBSZXNldEJ1dHRvbigge1xyXG4gICAgbGlzdGVuZXI6ICgpID0+IHtcclxuICAgICAgbnVtYmVyT2ZQYXJ0aWNsZXNQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgICBiaWN5Y2xlUHVtcE5vZGUucmVzZXQoKTtcclxuICAgIH0sXHJcbiAgICBzY2FsZTogMC43NSxcclxuICAgIGNlbnRlclg6IGJpY3ljbGVQdW1wTm9kZS54LFxyXG4gICAgdG9wOiBiaWN5Y2xlUHVtcE5vZGUuYm90dG9tICsgMjBcclxuICB9ICk7XHJcblxyXG4gIHJldHVybiBuZXcgTm9kZSgge1xyXG4gICAgY2hpbGRyZW46IFsgYmljeWNsZVB1bXBOb2RlLCBkaXNwbGF5Tm9kZSwgcmVzZXRCdXR0b24gXSxcclxuICAgIGNlbnRlcjogbGF5b3V0Qm91bmRzLmNlbnRlclxyXG4gIH0gKTtcclxufSJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUQsT0FBT0MsUUFBUSxNQUFNLGlDQUFpQztBQUN0RCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLFFBQVEsTUFBTSxtQkFBbUI7QUFDeEMsT0FBT0MsZUFBZSxNQUFNLDBCQUEwQjtBQUN0RCxPQUFPQyxXQUFXLE1BQU0sOEJBQThCO0FBQ3RELE9BQU9DLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUduRCxlQUFlLFNBQVNDLG1CQUFtQkEsQ0FBRUMsWUFBcUIsRUFBUztFQUV6RSxNQUFNQyx5QkFBeUIsR0FBRyxJQUFJSixjQUFjLENBQUUsQ0FBQyxFQUFFO0lBQ3ZESyxVQUFVLEVBQUUsU0FBUztJQUNyQkMsS0FBSyxFQUFFLElBQUlWLEtBQUssQ0FBRSxDQUFDLEVBQUUsR0FBSTtFQUMzQixDQUFFLENBQUM7RUFFSCxNQUFNVyxhQUFhLEdBQUcsSUFBSVosUUFBUSxDQUFFUyx5QkFBeUIsQ0FBQ0UsS0FBTSxDQUFDO0VBRXJFLE1BQU1FLGVBQWUsR0FBRyxJQUFJVixlQUFlLENBQUVNLHlCQUF5QixFQUFFRyxhQUFhLEVBQUU7SUFDckZFLG9CQUFvQixFQUFFLElBQUlSLE9BQU8sQ0FBRSxHQUFHLEVBQUUsQ0FBQyxHQUFJO0VBQy9DLENBQUUsQ0FBQzs7RUFFSDtFQUNBLE1BQU1TLFdBQVcsR0FBRyxJQUFJaEIsSUFBSSxDQUFFVSx5QkFBeUIsQ0FBQ08sS0FBSyxFQUFFO0lBQzdEQyxJQUFJLEVBQUUsSUFBSWYsUUFBUSxDQUFFLEVBQUcsQ0FBQztJQUN4QmdCLElBQUksRUFBRUwsZUFBZSxDQUFDTSxDQUFDLEdBQUdOLGVBQWUsQ0FBQ0Msb0JBQW9CLENBQUNLLENBQUMsR0FBRyxFQUFFO0lBQ3JFQyxPQUFPLEVBQUVQLGVBQWUsQ0FBQ1EsQ0FBQyxHQUFHUixlQUFlLENBQUNDLG9CQUFvQixDQUFDTztFQUNwRSxDQUFFLENBQUM7RUFFSFoseUJBQXlCLENBQUNhLElBQUksQ0FBRUMsaUJBQWlCLElBQUk7SUFDbkRSLFdBQVcsQ0FBQ1MsTUFBTSxHQUFHRCxpQkFBaUI7RUFDeEMsQ0FBRSxDQUFDO0VBRUgsTUFBTUUsV0FBVyxHQUFHLElBQUlyQixXQUFXLENBQUU7SUFDbkNzQixRQUFRLEVBQUVBLENBQUEsS0FBTTtNQUNkakIseUJBQXlCLENBQUNrQixLQUFLLENBQUMsQ0FBQztNQUNqQ2QsZUFBZSxDQUFDYyxLQUFLLENBQUMsQ0FBQztJQUN6QixDQUFDO0lBQ0RDLEtBQUssRUFBRSxJQUFJO0lBQ1hDLE9BQU8sRUFBRWhCLGVBQWUsQ0FBQ00sQ0FBQztJQUMxQlcsR0FBRyxFQUFFakIsZUFBZSxDQUFDa0IsTUFBTSxHQUFHO0VBQ2hDLENBQUUsQ0FBQztFQUVILE9BQU8sSUFBSWpDLElBQUksQ0FBRTtJQUNma0MsUUFBUSxFQUFFLENBQUVuQixlQUFlLEVBQUVFLFdBQVcsRUFBRVUsV0FBVyxDQUFFO0lBQ3ZEUSxNQUFNLEVBQUV6QixZQUFZLENBQUN5QjtFQUN2QixDQUFFLENBQUM7QUFDTCIsImlnbm9yZUxpc3QiOltdfQ==