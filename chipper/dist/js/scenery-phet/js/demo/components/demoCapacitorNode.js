// Copyright 2022-2023, University of Colorado Boulder

/**
 * Demo for CapacitorNode
 *
 * @author Sam Reid
 */

import CapacitorConstants from '../../capacitor/CapacitorConstants.js';
import YawPitchModelViewTransform3 from '../../capacitor/YawPitchModelViewTransform3.js';
import CapacitorNode from '../../capacitor/CapacitorNode.js';
import NumberControl from '../../NumberControl.js';
import Bounds3 from '../../../../dot/js/Bounds3.js';
import Range from '../../../../dot/js/Range.js';
import Property from '../../../../axon/js/Property.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import BooleanProperty from '../../../../axon/js/BooleanProperty.js';
import Tandem from '../../../../tandem/js/Tandem.js';
import { VBox } from '../../../../scenery/js/imports.js';
export default function demoCapacitorNode(layoutBounds) {
  const plateBounds = new Bounds3(0, 0, 0, 0.01414213562373095, CapacitorConstants.PLATE_HEIGHT, 0.01414213562373095);

  // An object literal is fine in a demo like this, but we probably wouldn't do this in production code.
  const circuit = {
    maxPlateCharge: 2.6562e-12,
    capacitor: {
      plateSizeProperty: new Property(plateBounds),
      plateSeparationProperty: new NumberProperty(0.006),
      plateVoltageProperty: new NumberProperty(1.5),
      plateChargeProperty: new NumberProperty(4.426999999999999e-13 / 10 * 4),
      getEffectiveEField() {
        return 0;
      }
    }
  };
  const modelViewTransform = new YawPitchModelViewTransform3();
  const plateChargeVisibleProperty = new BooleanProperty(true);
  const electricFieldVisibleProperty = new BooleanProperty(true);
  const capacitorNode = new CapacitorNode(circuit, modelViewTransform, plateChargeVisibleProperty, electricFieldVisibleProperty, {
    tandem: Tandem.OPT_OUT
  });
  const controls = new VBox({
    children: [new NumberControl('separation', circuit.capacitor.plateSeparationProperty, new Range(0, 0.01), {
      delta: 0.0001,
      numberDisplayOptions: {
        decimalPlaces: 5
      }
    }), new NumberControl('charge', circuit.capacitor.plateChargeProperty, new Range(-4.426999999999999e-13 * 1.5, 4.426999999999999e-13 * 1.5), {
      delta: 4.426999999999999e-13 / 30,
      numberDisplayOptions: {
        decimalPlaces: 20
      }
    })]
  });
  return new VBox({
    spacing: 20,
    resize: false,
    children: [capacitorNode, controls],
    center: layoutBounds.center
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDYXBhY2l0b3JDb25zdGFudHMiLCJZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMiLCJDYXBhY2l0b3JOb2RlIiwiTnVtYmVyQ29udHJvbCIsIkJvdW5kczMiLCJSYW5nZSIsIlByb3BlcnR5IiwiTnVtYmVyUHJvcGVydHkiLCJCb29sZWFuUHJvcGVydHkiLCJUYW5kZW0iLCJWQm94IiwiZGVtb0NhcGFjaXRvck5vZGUiLCJsYXlvdXRCb3VuZHMiLCJwbGF0ZUJvdW5kcyIsIlBMQVRFX0hFSUdIVCIsImNpcmN1aXQiLCJtYXhQbGF0ZUNoYXJnZSIsImNhcGFjaXRvciIsInBsYXRlU2l6ZVByb3BlcnR5IiwicGxhdGVTZXBhcmF0aW9uUHJvcGVydHkiLCJwbGF0ZVZvbHRhZ2VQcm9wZXJ0eSIsInBsYXRlQ2hhcmdlUHJvcGVydHkiLCJnZXRFZmZlY3RpdmVFRmllbGQiLCJtb2RlbFZpZXdUcmFuc2Zvcm0iLCJwbGF0ZUNoYXJnZVZpc2libGVQcm9wZXJ0eSIsImVsZWN0cmljRmllbGRWaXNpYmxlUHJvcGVydHkiLCJjYXBhY2l0b3JOb2RlIiwidGFuZGVtIiwiT1BUX09VVCIsImNvbnRyb2xzIiwiY2hpbGRyZW4iLCJkZWx0YSIsIm51bWJlckRpc3BsYXlPcHRpb25zIiwiZGVjaW1hbFBsYWNlcyIsInNwYWNpbmciLCJyZXNpemUiLCJjZW50ZXIiXSwic291cmNlcyI6WyJkZW1vQ2FwYWNpdG9yTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEZW1vIGZvciBDYXBhY2l0b3JOb2RlXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWRcclxuICovXHJcblxyXG5pbXBvcnQgQ2FwYWNpdG9yQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NhcGFjaXRvci9DYXBhY2l0b3JDb25zdGFudHMuanMnO1xyXG5pbXBvcnQgWWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zIGZyb20gJy4uLy4uL2NhcGFjaXRvci9ZYXdQaXRjaE1vZGVsVmlld1RyYW5zZm9ybTMuanMnO1xyXG5pbXBvcnQgQ2FwYWNpdG9yTm9kZSBmcm9tICcuLi8uLi9jYXBhY2l0b3IvQ2FwYWNpdG9yTm9kZS5qcyc7XHJcbmltcG9ydCBOdW1iZXJDb250cm9sIGZyb20gJy4uLy4uL051bWJlckNvbnRyb2wuanMnO1xyXG5pbXBvcnQgQm91bmRzMyBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMy5qcyc7XHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IHsgTm9kZSwgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBmdW5jdGlvbiBkZW1vQ2FwYWNpdG9yTm9kZSggbGF5b3V0Qm91bmRzOiBCb3VuZHMyICk6IE5vZGUge1xyXG5cclxuICBjb25zdCBwbGF0ZUJvdW5kcyA9IG5ldyBCb3VuZHMzKCAwLCAwLCAwLCAwLjAxNDE0MjEzNTYyMzczMDk1LCBDYXBhY2l0b3JDb25zdGFudHMuUExBVEVfSEVJR0hULCAwLjAxNDE0MjEzNTYyMzczMDk1ICk7XHJcblxyXG4gIC8vIEFuIG9iamVjdCBsaXRlcmFsIGlzIGZpbmUgaW4gYSBkZW1vIGxpa2UgdGhpcywgYnV0IHdlIHByb2JhYmx5IHdvdWxkbid0IGRvIHRoaXMgaW4gcHJvZHVjdGlvbiBjb2RlLlxyXG4gIGNvbnN0IGNpcmN1aXQgPSB7XHJcbiAgICBtYXhQbGF0ZUNoYXJnZTogMi42NTYyZS0xMixcclxuICAgIGNhcGFjaXRvcjoge1xyXG4gICAgICBwbGF0ZVNpemVQcm9wZXJ0eTogbmV3IFByb3BlcnR5KCBwbGF0ZUJvdW5kcyApLFxyXG4gICAgICBwbGF0ZVNlcGFyYXRpb25Qcm9wZXJ0eTogbmV3IE51bWJlclByb3BlcnR5KCAwLjAwNiApLFxyXG4gICAgICBwbGF0ZVZvbHRhZ2VQcm9wZXJ0eTogbmV3IE51bWJlclByb3BlcnR5KCAxLjUgKSxcclxuICAgICAgcGxhdGVDaGFyZ2VQcm9wZXJ0eTogbmV3IE51bWJlclByb3BlcnR5KCA0LjQyNjk5OTk5OTk5OTk5OWUtMTMgLyAxMCAqIDQgKSxcclxuICAgICAgZ2V0RWZmZWN0aXZlRUZpZWxkKCkge1xyXG4gICAgICAgIHJldHVybiAwO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuICBjb25zdCBtb2RlbFZpZXdUcmFuc2Zvcm0gPSBuZXcgWWF3UGl0Y2hNb2RlbFZpZXdUcmFuc2Zvcm0zKCk7XHJcbiAgY29uc3QgcGxhdGVDaGFyZ2VWaXNpYmxlUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlICk7XHJcbiAgY29uc3QgZWxlY3RyaWNGaWVsZFZpc2libGVQcm9wZXJ0eSA9IG5ldyBCb29sZWFuUHJvcGVydHkoIHRydWUgKTtcclxuXHJcbiAgY29uc3QgY2FwYWNpdG9yTm9kZSA9IG5ldyBDYXBhY2l0b3JOb2RlKCBjaXJjdWl0LCBtb2RlbFZpZXdUcmFuc2Zvcm0sIHBsYXRlQ2hhcmdlVmlzaWJsZVByb3BlcnR5LCBlbGVjdHJpY0ZpZWxkVmlzaWJsZVByb3BlcnR5LCB7XHJcbiAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUXHJcbiAgfSApO1xyXG5cclxuICBjb25zdCBjb250cm9scyA9IG5ldyBWQm94KCB7XHJcbiAgICBjaGlsZHJlbjogW1xyXG4gICAgICBuZXcgTnVtYmVyQ29udHJvbCggJ3NlcGFyYXRpb24nLCBjaXJjdWl0LmNhcGFjaXRvci5wbGF0ZVNlcGFyYXRpb25Qcm9wZXJ0eSwgbmV3IFJhbmdlKCAwLCAwLjAxICksIHtcclxuICAgICAgICBkZWx0YTogMC4wMDAxLFxyXG4gICAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgICBkZWNpbWFsUGxhY2VzOiA1XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICksXHJcbiAgICAgIG5ldyBOdW1iZXJDb250cm9sKCAnY2hhcmdlJywgY2lyY3VpdC5jYXBhY2l0b3IucGxhdGVDaGFyZ2VQcm9wZXJ0eSwgbmV3IFJhbmdlKCAtKCA0LjQyNjk5OTk5OTk5OTk5OWUtMTMgKSAqIDEuNSwgKCA0LjQyNjk5OTk5OTk5OTk5OWUtMTMgKSAqIDEuNSApLCB7XHJcbiAgICAgICAgZGVsdGE6IDQuNDI2OTk5OTk5OTk5OTk5ZS0xMyAvIDMwLFxyXG4gICAgICAgIG51bWJlckRpc3BsYXlPcHRpb25zOiB7XHJcbiAgICAgICAgICBkZWNpbWFsUGxhY2VzOiAyMFxyXG4gICAgICAgIH1cclxuICAgICAgfSApXHJcbiAgICBdXHJcbiAgfSApO1xyXG5cclxuICByZXR1cm4gbmV3IFZCb3goIHtcclxuICAgIHNwYWNpbmc6IDIwLFxyXG4gICAgcmVzaXplOiBmYWxzZSxcclxuICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgIGNhcGFjaXRvck5vZGUsXHJcbiAgICAgIGNvbnRyb2xzXHJcbiAgICBdLFxyXG4gICAgY2VudGVyOiBsYXlvdXRCb3VuZHMuY2VudGVyXHJcbiAgfSApO1xyXG59Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGtCQUFrQixNQUFNLHVDQUF1QztBQUN0RSxPQUFPQywyQkFBMkIsTUFB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