// Copyright 2015-2024, University of Colorado Boulder

/**
 * This is the graphical representation of a stove that can be used to heat or cool things.  The HeaterCoolerNode is
 * composed of HeaterCoolerFront and HeaterCoolerBack so that objects can be layered inside of the heater to create a
 * 3D effect.  This is a convenience node that puts the back and the front together for cases where nothing other than
 * the flame and the ice needs to come out of the bucket.
 *
 * @author Siddhartha Chinthapally (Actual Concepts) on 20-11-2014.
 * @author Jesse Greenberg
 * @author Denzell Barnett (PhET Interactive Sims)
 * @author Chris Malley  (PixelZoom, Inc.)
 */

import InstanceRegistry from '../../phet-core/js/documentation/InstanceRegistry.js';
import optionize, { combineOptions } from '../../phet-core/js/optionize.js';
import { Node } from '../../scenery/js/imports.js';
import Tandem from '../../tandem/js/Tandem.js';
import HeaterCoolerBack from './HeaterCoolerBack.js';
import HeaterCoolerFront from './HeaterCoolerFront.js';
import sceneryPhet from './sceneryPhet.js';
export default class HeaterCoolerNode extends Node {
  // With public visibility annotation comes great power - use it wisely.
  // See https://github.com/phetsims/scenery-phet/issues/442

  /**
   * @param heatCoolAmountProperty +1 for max heating, -1 for max cooling, 0 for no change
   * @param providedOptions
   */
  constructor(heatCoolAmountProperty, providedOptions) {
    super();
    const options = optionize()({
      // SelfOptions
      baseColor: HeaterCoolerFront.DEFAULT_BASE_COLOR,
      // NodeOptions
      tandem: Tandem.REQUIRED,
      tandemNameSuffix: 'HeaterCoolerNode'
    }, providedOptions);
    this.heatCoolAmountProperty = heatCoolAmountProperty;

    // Add the HeaterCoolerBack which contains the heater opening and the fire/ice images
    assert && assert(!options.backOptions || !options.backOptions.baseColor, 'HeaterCoolerNode sets baseColor for HeaterCoolerBack');
    const heaterCoolerBack = new HeaterCoolerBack(heatCoolAmountProperty, combineOptions({
      baseColor: options.baseColor
    }, options.backOptions));

    // Add the HeaterCoolerFront which contains the labels, stove body, and control slider.
    assert && assert(!options.frontOptions || !options.frontOptions.baseColor, 'HeaterCoolerNode sets baseColor for HeaterCoolerFront');
    const heaterCoolerFront = new HeaterCoolerFront(heatCoolAmountProperty, combineOptions({
      baseColor: options.baseColor,
      leftTop: heaterCoolerBack.getHeaterFrontPosition(),
      heaterCoolerBack: heaterCoolerBack,
      // HeaterCoolerFront can be instrumented as a composite in some usages. Here, HeaterCoolerNode is the composite, so
      // don't instrument the HeaterCoolerFront.
      phetioInstrument: false,
      tandem: options.tandem // Keep the same tandem so that things like slider are instrumented directly underneat this Node.
    }, options.frontOptions));
    this.slider = heaterCoolerFront.slider;
    options.children = [heaterCoolerBack, heaterCoolerFront];
    this.mutate(options);
    this.disposeHeaterCoolerNode = function () {
      heaterCoolerBack.dispose();
      heaterCoolerFront.dispose();
    };

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet?.chipper?.queryParameters?.binder && InstanceRegistry.registerDataURL('scenery-phet', 'HeaterCoolerNode', this);
  }
  dispose() {
    this.disposeHeaterCoolerNode();
    super.dispose();
  }
}
sceneryPhet.register('HeaterCoolerNode', HeaterCoolerNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5Iiwib3B0aW9uaXplIiwiY29tYmluZU9wdGlvbnMiLCJOb2RlIiwiVGFuZGVtIiwiSGVhdGVyQ29vbGVyQmFjayIsIkhlYXRlckNvb2xlckZyb250Iiwic2NlbmVyeVBoZXQiLCJIZWF0ZXJDb29sZXJOb2RlIiwiY29uc3RydWN0b3IiLCJoZWF0Q29vbEFtb3VudFByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImJhc2VDb2xvciIsIkRFRkFVTFRfQkFTRV9DT0xPUiIsInRhbmRlbSIsIlJFUVVJUkVEIiwidGFuZGVtTmFtZVN1ZmZpeCIsImFzc2VydCIsImJhY2tPcHRpb25zIiwiaGVhdGVyQ29vbGVyQmFjayIsImZyb250T3B0aW9ucyIsImhlYXRlckNvb2xlckZyb250IiwibGVmdFRvcCIsImdldEhlYXRlckZyb250UG9zaXRpb24iLCJwaGV0aW9JbnN0cnVtZW50Iiwic2xpZGVyIiwiY2hpbGRyZW4iLCJtdXRhdGUiLCJkaXNwb3NlSGVhdGVyQ29vbGVyTm9kZSIsImRpc3Bvc2UiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsInJlZ2lzdGVyRGF0YVVSTCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiSGVhdGVyQ29vbGVyTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGlzIHRoZSBncmFwaGljYWwgcmVwcmVzZW50YXRpb24gb2YgYSBzdG92ZSB0aGF0IGNhbiBiZSB1c2VkIHRvIGhlYXQgb3IgY29vbCB0aGluZ3MuICBUaGUgSGVhdGVyQ29vbGVyTm9kZSBpc1xyXG4gKiBjb21wb3NlZCBvZiBIZWF0ZXJDb29sZXJGcm9udCBhbmQgSGVhdGVyQ29vbGVyQmFjayBzbyB0aGF0IG9iamVjdHMgY2FuIGJlIGxheWVyZWQgaW5zaWRlIG9mIHRoZSBoZWF0ZXIgdG8gY3JlYXRlIGFcclxuICogM0QgZWZmZWN0LiAgVGhpcyBpcyBhIGNvbnZlbmllbmNlIG5vZGUgdGhhdCBwdXRzIHRoZSBiYWNrIGFuZCB0aGUgZnJvbnQgdG9nZXRoZXIgZm9yIGNhc2VzIHdoZXJlIG5vdGhpbmcgb3RoZXIgdGhhblxyXG4gKiB0aGUgZmxhbWUgYW5kIHRoZSBpY2UgbmVlZHMgdG8gY29tZSBvdXQgb2YgdGhlIGJ1Y2tldC5cclxuICpcclxuICogQGF1dGhvciBTaWRkaGFydGhhIENoaW50aGFwYWxseSAoQWN0dWFsIENvbmNlcHRzKSBvbiAyMC0xMS0yMDE0LlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZ1xyXG4gKiBAYXV0aG9yIERlbnplbGwgQmFybmV0dCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW1zKVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgTnVtYmVyUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IEluc3RhbmNlUmVnaXN0cnkgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL2RvY3VtZW50YXRpb24vSW5zdGFuY2VSZWdpc3RyeS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMgfSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgQ29sb3IsIE5vZGUsIE5vZGVPcHRpb25zIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFZTbGlkZXIgZnJvbSAnLi4vLi4vc3VuL2pzL1ZTbGlkZXIuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgSGVhdGVyQ29vbGVyQmFjaywgeyBIZWF0ZXJDb29sZXJCYWNrT3B0aW9ucyB9IGZyb20gJy4vSGVhdGVyQ29vbGVyQmFjay5qcyc7XHJcbmltcG9ydCBIZWF0ZXJDb29sZXJGcm9udCwgeyBIZWF0ZXJDb29sZXJGcm9udE9wdGlvbnMgfSBmcm9tICcuL0hlYXRlckNvb2xlckZyb250LmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4vc2NlbmVyeVBoZXQuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gY29sb3Igb2YgdGhlIHN0b3ZlIGJvZHksIGFwcGxpZWQgdG8gSGVhdGVyQ29vbGVyRnJvbnQgYW5kIEhlYXRlckNvb2xlckJhY2tcclxuICBiYXNlQ29sb3I/OiBDb2xvciB8IHN0cmluZztcclxuXHJcbiAgLy8gb3B0aW9ucyBwYXNzZWQgdG8gSGVhdGVyQ29vbGVyRnJvbnRcclxuICBmcm9udE9wdGlvbnM/OiBIZWF0ZXJDb29sZXJGcm9udE9wdGlvbnM7XHJcblxyXG4gIC8vIG9wdGlvbnMgcGFzc2VkIHRvIEhlYXRlckNvb2xlckJhY2tcclxuICBiYWNrT3B0aW9ucz86IEhlYXRlckNvb2xlckJhY2tPcHRpb25zO1xyXG59O1xyXG5cclxuZXhwb3J0IHR5cGUgSGVhdGVyQ29vbGVyTm9kZU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFN0cmljdE9taXQ8Tm9kZU9wdGlvbnMsICdjaGlsZHJlbic+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgSGVhdGVyQ29vbGVyTm9kZSBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgcmVhZG9ubHkgaGVhdENvb2xBbW91bnRQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7XHJcblxyXG4gIC8vIFdpdGggcHVibGljIHZpc2liaWxpdHkgYW5ub3RhdGlvbiBjb21lcyBncmVhdCBwb3dlciAtIHVzZSBpdCB3aXNlbHkuXHJcbiAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5LXBoZXQvaXNzdWVzLzQ0MlxyXG4gIHB1YmxpYyByZWFkb25seSBzbGlkZXI6IFZTbGlkZXI7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUhlYXRlckNvb2xlck5vZGU6ICgpID0+IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBoZWF0Q29vbEFtb3VudFByb3BlcnR5ICsxIGZvciBtYXggaGVhdGluZywgLTEgZm9yIG1heCBjb29saW5nLCAwIGZvciBubyBjaGFuZ2VcclxuICAgKiBAcGFyYW0gcHJvdmlkZWRPcHRpb25zXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBoZWF0Q29vbEFtb3VudFByb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eSwgcHJvdmlkZWRPcHRpb25zPzogSGVhdGVyQ29vbGVyTm9kZU9wdGlvbnMgKSB7XHJcbiAgICBzdXBlcigpO1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8SGVhdGVyQ29vbGVyTm9kZU9wdGlvbnMsIFN0cmljdE9taXQ8U2VsZk9wdGlvbnMsICdmcm9udE9wdGlvbnMnIHwgJ2JhY2tPcHRpb25zJz4sIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICBiYXNlQ29sb3I6IEhlYXRlckNvb2xlckZyb250LkRFRkFVTFRfQkFTRV9DT0xPUixcclxuXHJcbiAgICAgIC8vIE5vZGVPcHRpb25zXHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLlJFUVVJUkVELFxyXG4gICAgICB0YW5kZW1OYW1lU3VmZml4OiAnSGVhdGVyQ29vbGVyTm9kZSdcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuaGVhdENvb2xBbW91bnRQcm9wZXJ0eSA9IGhlYXRDb29sQW1vdW50UHJvcGVydHk7XHJcblxyXG4gICAgLy8gQWRkIHRoZSBIZWF0ZXJDb29sZXJCYWNrIHdoaWNoIGNvbnRhaW5zIHRoZSBoZWF0ZXIgb3BlbmluZyBhbmQgdGhlIGZpcmUvaWNlIGltYWdlc1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuYmFja09wdGlvbnMgfHwgIW9wdGlvbnMuYmFja09wdGlvbnMuYmFzZUNvbG9yLFxyXG4gICAgICAnSGVhdGVyQ29vbGVyTm9kZSBzZXRzIGJhc2VDb2xvciBmb3IgSGVhdGVyQ29vbGVyQmFjaycgKTtcclxuICAgIGNvbnN0IGhlYXRlckNvb2xlckJhY2sgPSBuZXcgSGVhdGVyQ29vbGVyQmFjayggaGVhdENvb2xBbW91bnRQcm9wZXJ0eSwgY29tYmluZU9wdGlvbnM8SGVhdGVyQ29vbGVyQmFja09wdGlvbnM+KCB7XHJcbiAgICAgIGJhc2VDb2xvcjogb3B0aW9ucy5iYXNlQ29sb3JcclxuICAgIH0sIG9wdGlvbnMuYmFja09wdGlvbnMgKSApO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgSGVhdGVyQ29vbGVyRnJvbnQgd2hpY2ggY29udGFpbnMgdGhlIGxhYmVscywgc3RvdmUgYm9keSwgYW5kIGNvbnRyb2wgc2xpZGVyLlxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggIW9wdGlvbnMuZnJvbnRPcHRpb25zIHx8ICFvcHRpb25zLmZyb250T3B0aW9ucy5iYXNlQ29sb3IsXHJcbiAgICAgICdIZWF0ZXJDb29sZXJOb2RlIHNldHMgYmFzZUNvbG9yIGZvciBIZWF0ZXJDb29sZXJGcm9udCcgKTtcclxuICAgIGNvbnN0IGhlYXRlckNvb2xlckZyb250ID0gbmV3IEhlYXRlckNvb2xlckZyb250KCBoZWF0Q29vbEFtb3VudFByb3BlcnR5LCBjb21iaW5lT3B0aW9uczxIZWF0ZXJDb29sZXJGcm9udE9wdGlvbnM+KCB7XHJcbiAgICAgIGJhc2VDb2xvcjogb3B0aW9ucy5iYXNlQ29sb3IsXHJcbiAgICAgIGxlZnRUb3A6IGhlYXRlckNvb2xlckJhY2suZ2V0SGVhdGVyRnJvbnRQb3NpdGlvbigpLFxyXG4gICAgICBoZWF0ZXJDb29sZXJCYWNrOiBoZWF0ZXJDb29sZXJCYWNrLFxyXG5cclxuICAgICAgLy8gSGVhdGVyQ29vbGVyRnJvbnQgY2FuIGJlIGluc3RydW1lbnRlZCBhcyBhIGNvbXBvc2l0ZSBpbiBzb21lIHVzYWdlcy4gSGVyZSwgSGVhdGVyQ29vbGVyTm9kZSBpcyB0aGUgY29tcG9zaXRlLCBzb1xyXG4gICAgICAvLyBkb24ndCBpbnN0cnVtZW50IHRoZSBIZWF0ZXJDb29sZXJGcm9udC5cclxuICAgICAgcGhldGlvSW5zdHJ1bWVudDogZmFsc2UsXHJcbiAgICAgIHRhbmRlbTogb3B0aW9ucy50YW5kZW0gLy8gS2VlcCB0aGUgc2FtZSB0YW5kZW0gc28gdGhhdCB0aGluZ3MgbGlrZSBzbGlkZXIgYXJlIGluc3RydW1lbnRlZCBkaXJlY3RseSB1bmRlcm5lYXQgdGhpcyBOb2RlLlxyXG4gICAgfSwgb3B0aW9ucy5mcm9udE9wdGlvbnMgKSApO1xyXG5cclxuICAgIHRoaXMuc2xpZGVyID0gaGVhdGVyQ29vbGVyRnJvbnQuc2xpZGVyO1xyXG5cclxuICAgIG9wdGlvbnMuY2hpbGRyZW4gPSBbIGhlYXRlckNvb2xlckJhY2ssIGhlYXRlckNvb2xlckZyb250IF07XHJcblxyXG4gICAgdGhpcy5tdXRhdGUoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VIZWF0ZXJDb29sZXJOb2RlID0gZnVuY3Rpb24oKSB7XHJcbiAgICAgIGhlYXRlckNvb2xlckJhY2suZGlzcG9zZSgpO1xyXG4gICAgICBoZWF0ZXJDb29sZXJGcm9udC5kaXNwb3NlKCk7XHJcbiAgICB9O1xyXG5cclxuICAgIC8vIHN1cHBvcnQgZm9yIGJpbmRlciBkb2N1bWVudGF0aW9uLCBzdHJpcHBlZCBvdXQgaW4gYnVpbGRzIGFuZCBvbmx5IHJ1bnMgd2hlbiA/YmluZGVyIGlzIHNwZWNpZmllZFxyXG4gICAgYXNzZXJ0ICYmIHBoZXQ/LmNoaXBwZXI/LnF1ZXJ5UGFyYW1ldGVycz8uYmluZGVyICYmIEluc3RhbmNlUmVnaXN0cnkucmVnaXN0ZXJEYXRhVVJMKCAnc2NlbmVyeS1waGV0JywgJ0hlYXRlckNvb2xlck5vZGUnLCB0aGlzICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUhlYXRlckNvb2xlck5vZGUoKTtcclxuICAgIHN1cGVyLmRpc3Bvc2UoKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnlQaGV0LnJlZ2lzdGVyKCAnSGVhdGVyQ29vbGVyTm9kZScsIEhlYXRlckNvb2xlck5vZGUgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBSUEsT0FBT0EsZ0JBQWdCLE1BQU0sc0RBQXNEO0FBQ25GLE9BQU9DLFNBQVMsSUFBSUMsY0FBYyxRQUFRLGlDQUFpQztBQUMzRSxTQUFnQkMsSUFBSSxRQUFxQiw2QkFBNkI7QUFFdEUsT0FBT0MsTUFBTSxNQUFNLDJCQUEyQjtBQUM5QyxPQUFPQyxnQkFBZ0IsTUFBbUMsdUJBQXVCO0FBQ2pGLE9BQU9DLGlCQUFpQixNQUFvQyx3QkFBd0I7QUFDcEYsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQWdCMUMsZUFBZSxNQUFNQyxnQkFBZ0IsU0FBU0wsSUFBSSxDQUFDO0VBSWpEO0VBQ0E7O0VBS0E7QUFDRjtBQUNBO0FBQ0E7RUFDU00sV0FBV0EsQ0FBRUMsc0JBQXNDLEVBQUVDLGVBQXlDLEVBQUc7SUFDdEcsS0FBSyxDQUFDLENBQUM7SUFFUCxNQUFNQyxPQUFPLEdBQUdYLFNBQVMsQ0FBZ0csQ0FBQyxDQUFFO01BRTFIO01BQ0FZLFNBQVMsRUFBRVAsaUJBQWlCLENBQUNRLGtCQUFrQjtNQUUvQztNQUNBQyxNQUFNLEVBQUVYLE1BQU0sQ0FBQ1ksUUFBUTtNQUN2QkMsZ0JBQWdCLEVBQUU7SUFDcEIsQ0FBQyxFQUFFTixlQUFnQixDQUFDO0lBRXBCLElBQUksQ0FBQ0Qsc0JBQXNCLEdBQUdBLHNCQUFzQjs7SUFFcEQ7SUFDQVEsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQ04sT0FBTyxDQUFDTyxXQUFXLElBQUksQ0FBQ1AsT0FBTyxDQUFDTyxXQUFXLENBQUNOLFNBQVMsRUFDdEUsc0RBQXVELENBQUM7SUFDMUQsTUFBTU8sZ0JBQWdCLEdBQUcsSUFBSWYsZ0JBQWdCLENBQUVLLHNCQUFzQixFQUFFUixjQUFjLENBQTJCO01BQzlHVyxTQUFTLEVBQUVELE9BQU8sQ0FBQ0M7SUFDckIsQ0FBQyxFQUFFRCxPQUFPLENBQUNPLFdBQVksQ0FBRSxDQUFDOztJQUUxQjtJQUNBRCxNQUFNLElBQUlBLE1BQU0sQ0FBRSxDQUFDTixPQUFPLENBQUNTLFlBQVksSUFBSSxDQUFDVCxPQUFPLENBQUNTLFlBQVksQ0FBQ1IsU0FBUyxFQUN4RSx1REFBd0QsQ0FBQztJQUMzRCxNQUFNUyxpQkFBaUIsR0FBRyxJQUFJaEIsaUJBQWlCLENBQUVJLHNCQUFzQixFQUFFUixjQUFjLENBQTRCO01BQ2pIVyxTQUFTLEVBQUVELE9BQU8sQ0FBQ0MsU0FBUztNQUM1QlUsT0FBTyxFQUFFSCxnQkFBZ0IsQ0FBQ0ksc0JBQXNCLENBQUMsQ0FBQztNQUNsREosZ0JBQWdCLEVBQUVBLGdCQUFnQjtNQUVsQztNQUNBO01BQ0FLLGdCQUFnQixFQUFFLEtBQUs7TUFDdkJWLE1BQU0sRUFBRUgsT0FBTyxDQUFDRyxNQUFNLENBQUM7SUFDekIsQ0FBQyxFQUFFSCxPQUFPLENBQUNTLFlBQWEsQ0FBRSxDQUFDO0lBRTNCLElBQUksQ0FBQ0ssTUFBTSxHQUFHSixpQkFBaUIsQ0FBQ0ksTUFBTTtJQUV0Q2QsT0FBTyxDQUFDZSxRQUFRLEdBQUcsQ0FBRVAsZ0JBQWdCLEVBQUVFLGlCQUFpQixDQUFFO0lBRTFELElBQUksQ0FBQ00sTUFBTSxDQUFFaEIsT0FBUSxDQUFDO0lBRXRCLElBQUksQ0FBQ2lCLHVCQUF1QixHQUFHLFlBQVc7TUFDeENULGdCQUFnQixDQUFDVSxPQUFPLENBQUMsQ0FBQztNQUMxQlIsaUJBQWlCLENBQUNRLE9BQU8sQ0FBQyxDQUFDO0lBQzdCLENBQUM7O0lBRUQ7SUFDQVosTUFBTSxJQUFJYSxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsZUFBZSxFQUFFQyxNQUFNLElBQUlsQyxnQkFBZ0IsQ0FBQ21DLGVBQWUsQ0FBRSxjQUFjLEVBQUUsa0JBQWtCLEVBQUUsSUFBSyxDQUFDO0VBQ2xJO0VBRWdCTCxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDRCx1QkFBdUIsQ0FBQyxDQUFDO0lBQzlCLEtBQUssQ0FBQ0MsT0FBTyxDQUFDLENBQUM7RUFDakI7QUFDRjtBQUVBdkIsV0FBVyxDQUFDNkIsUUFBUSxDQUFFLGtCQUFrQixFQUFFNUIsZ0JBQWlCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=