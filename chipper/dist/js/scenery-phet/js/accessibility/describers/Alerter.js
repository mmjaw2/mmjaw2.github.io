// Copyright 2022-2023, University of Colorado Boulder

/**
 * Generic base class responsible for interfacing between a Node to alert description.
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Voicing } from '../../../../scenery/js/imports.js';
import Utterance from '../../../../utterance-queue/js/Utterance.js';
import sceneryPhet from '../../sceneryPhet.js';
import EnabledComponent from '../../../../axon/js/EnabledComponent.js';
class Alerter extends EnabledComponent {
  constructor(providedOptions) {
    const options = optionize()({
      alertToVoicing: true,
      descriptionAlertNode: null
    }, providedOptions);
    super(options);
    this.alertToVoicing = options.alertToVoicing;
    this.descriptionAlertNode = options.descriptionAlertNode;
  }

  /**
   * Alert to both description and voicing utteranceQueues, depending on if both are supported by this instance
   */
  alert(alertable) {
    if (this.enabled) {
      if (this.alertToVoicing) {
        assert && assert(alertable instanceof Utterance, 'If alerting to Voicing, the alertable needs to be an Utterance'); // eslint-disable-line no-simple-type-checking-assertions
        Voicing.alertUtterance(alertable);
      }
      this.alertDescriptionUtterance(alertable);
    }
  }

  /**
   * Forward to provided Node for UtteranceQueue alerting logic. See ParallelDOM.alertDescriptionUtterance() for details.
   */
  alertDescriptionUtterance(alertable) {
    this.enabled && this.descriptionAlertNode && this.descriptionAlertNode.alertDescriptionUtterance(alertable);
  }

  /**
   * Forward to provided Node for UtteranceQueue alerting logic. See ParallelDOM.forEachUtteranceQueue() for details.
   */
  forEachUtteranceQueue(utteranceQueueCallback) {
    this.enabled && this.descriptionAlertNode && this.descriptionAlertNode.forEachUtteranceQueue(utteranceQueueCallback);
  }
}
sceneryPhet.register('Alerter', Alerter);
export default Alerter;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJWb2ljaW5nIiwiVXR0ZXJhbmNlIiwic2NlbmVyeVBoZXQiLCJFbmFibGVkQ29tcG9uZW50IiwiQWxlcnRlciIsImNvbnN0cnVjdG9yIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsImFsZXJ0VG9Wb2ljaW5nIiwiZGVzY3JpcHRpb25BbGVydE5vZGUiLCJhbGVydCIsImFsZXJ0YWJsZSIsImVuYWJsZWQiLCJhc3NlcnQiLCJhbGVydFV0dGVyYW5jZSIsImFsZXJ0RGVzY3JpcHRpb25VdHRlcmFuY2UiLCJmb3JFYWNoVXR0ZXJhbmNlUXVldWUiLCJ1dHRlcmFuY2VRdWV1ZUNhbGxiYWNrIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBbGVydGVyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEdlbmVyaWMgYmFzZSBjbGFzcyByZXNwb25zaWJsZSBmb3IgaW50ZXJmYWNpbmcgYmV0d2VlbiBhIE5vZGUgdG8gYWxlcnQgZGVzY3JpcHRpb24uXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBWb2ljaW5nIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFV0dGVyYW5jZSwgeyBUQWxlcnRhYmxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXR0ZXJhbmNlLXF1ZXVlL2pzL1V0dGVyYW5jZS5qcyc7XHJcbmltcG9ydCBVdHRlcmFuY2VRdWV1ZSBmcm9tICcuLi8uLi8uLi8uLi91dHRlcmFuY2UtcXVldWUvanMvVXR0ZXJhbmNlUXVldWUuanMnO1xyXG5pbXBvcnQgc2NlbmVyeVBoZXQgZnJvbSAnLi4vLi4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgRW5hYmxlZENvbXBvbmVudCwgeyBFbmFibGVkQ29tcG9uZW50T3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW5hYmxlZENvbXBvbmVudC5qcyc7XHJcblxyXG50eXBlIFV0dGVyYW5jZVF1ZXVlQ2FsbGJhY2sgPSAoIHF1ZXVlOiBVdHRlcmFuY2VRdWV1ZSApID0+IHZvaWQ7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG5cclxuICAvLyBXaGVuIHRydWUsIGFsZXJ0cyB3aWxsIGJlIHNlbnQgdG8gdGhlIHZvaWNpbmdVdHRlcmFuY2VRdWV1ZS4gVGhpcyBzaHV0b2ZmIHZhbHZlIGlzIHNpbWlsYXIgdG9cclxuICAvLyBkZXNjcmlwdGlvbkFsZXJ0Tm9kZSwgYnV0IGZvciB2b2ljaW5nLlxyXG4gIGFsZXJ0VG9Wb2ljaW5nPzogYm9vbGVhbjtcclxuXHJcbiAgLy8gSWYgcHJvdmlkZWQsIHVzZSB0aGlzIE5vZGUgdG8gc2VuZCBkZXNjcmlwdGlvbiBhbGVydHMgdG8gb25lIG9yIG1vcmUgRGlzcGxheSdzIFV0dGVyYW5jZVF1ZXVlLiBVbmxpa2UgZm9yXHJcbiAgLy8gVm9pY2luZywgZGVzY3JpcHRpb24gYWxlcnRzIG11c3Qgb2NjdXIgdGhyb3VnaCBhIE5vZGUgY29ubmVjdGVkIHRvIGEgRGlzcGxheSB0aHJvdWdoIHRoZSBzY2VuZSBncmFwaC4gSWYgbnVsbCxcclxuICAvLyBkbyBub3QgYWxlcnQgZm9yIGRlc2NyaXB0aW9uIChzYW1lIGFzIGFsZXJ0VG9Wb2ljaW5nOmZhbHNlKS4gTk9URTogTm8gZGVzY3JpcHRpb24gd2lsbCBhbGVydCB3aXRob3V0IHRoaXMgb3B0aW9uIVxyXG4gIGRlc2NyaXB0aW9uQWxlcnROb2RlPzogTm9kZSB8IG51bGw7XHJcbn07XHJcbmV4cG9ydCB0eXBlIEFsZXJ0ZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBFbmFibGVkQ29tcG9uZW50T3B0aW9ucztcclxuXHJcbmNsYXNzIEFsZXJ0ZXIgZXh0ZW5kcyBFbmFibGVkQ29tcG9uZW50IHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGFsZXJ0VG9Wb2ljaW5nOiBib29sZWFuO1xyXG4gIHB1YmxpYyByZWFkb25seSBkZXNjcmlwdGlvbkFsZXJ0Tm9kZTogTm9kZSB8IG51bGw7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogQWxlcnRlck9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxBbGVydGVyT3B0aW9ucywgU2VsZk9wdGlvbnMsIEVuYWJsZWRDb21wb25lbnRPcHRpb25zPigpKCB7XHJcbiAgICAgIGFsZXJ0VG9Wb2ljaW5nOiB0cnVlLFxyXG4gICAgICBkZXNjcmlwdGlvbkFsZXJ0Tm9kZTogbnVsbFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuICAgIHRoaXMuYWxlcnRUb1ZvaWNpbmcgPSBvcHRpb25zLmFsZXJ0VG9Wb2ljaW5nO1xyXG4gICAgdGhpcy5kZXNjcmlwdGlvbkFsZXJ0Tm9kZSA9IG9wdGlvbnMuZGVzY3JpcHRpb25BbGVydE5vZGU7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBbGVydCB0byBib3RoIGRlc2NyaXB0aW9uIGFuZCB2b2ljaW5nIHV0dGVyYW5jZVF1ZXVlcywgZGVwZW5kaW5nIG9uIGlmIGJvdGggYXJlIHN1cHBvcnRlZCBieSB0aGlzIGluc3RhbmNlXHJcbiAgICovXHJcbiAgcHVibGljIGFsZXJ0KCBhbGVydGFibGU6IFRBbGVydGFibGUgKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMuZW5hYmxlZCApIHtcclxuICAgICAgaWYgKCB0aGlzLmFsZXJ0VG9Wb2ljaW5nICkge1xyXG4gICAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGFsZXJ0YWJsZSBpbnN0YW5jZW9mIFV0dGVyYW5jZSwgJ0lmIGFsZXJ0aW5nIHRvIFZvaWNpbmcsIHRoZSBhbGVydGFibGUgbmVlZHMgdG8gYmUgYW4gVXR0ZXJhbmNlJyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNpbXBsZS10eXBlLWNoZWNraW5nLWFzc2VydGlvbnNcclxuICAgICAgICBWb2ljaW5nLmFsZXJ0VXR0ZXJhbmNlKCBhbGVydGFibGUgYXMgVXR0ZXJhbmNlICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHRoaXMuYWxlcnREZXNjcmlwdGlvblV0dGVyYW5jZSggYWxlcnRhYmxlICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGb3J3YXJkIHRvIHByb3ZpZGVkIE5vZGUgZm9yIFV0dGVyYW5jZVF1ZXVlIGFsZXJ0aW5nIGxvZ2ljLiBTZWUgUGFyYWxsZWxET00uYWxlcnREZXNjcmlwdGlvblV0dGVyYW5jZSgpIGZvciBkZXRhaWxzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhbGVydERlc2NyaXB0aW9uVXR0ZXJhbmNlKCBhbGVydGFibGU6IFRBbGVydGFibGUgKTogdm9pZCB7XHJcbiAgICB0aGlzLmVuYWJsZWQgJiYgdGhpcy5kZXNjcmlwdGlvbkFsZXJ0Tm9kZSAmJiB0aGlzLmRlc2NyaXB0aW9uQWxlcnROb2RlLmFsZXJ0RGVzY3JpcHRpb25VdHRlcmFuY2UoIGFsZXJ0YWJsZSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRm9yd2FyZCB0byBwcm92aWRlZCBOb2RlIGZvciBVdHRlcmFuY2VRdWV1ZSBhbGVydGluZyBsb2dpYy4gU2VlIFBhcmFsbGVsRE9NLmZvckVhY2hVdHRlcmFuY2VRdWV1ZSgpIGZvciBkZXRhaWxzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBmb3JFYWNoVXR0ZXJhbmNlUXVldWUoIHV0dGVyYW5jZVF1ZXVlQ2FsbGJhY2s6IFV0dGVyYW5jZVF1ZXVlQ2FsbGJhY2sgKTogdm9pZCB7XHJcbiAgICB0aGlzLmVuYWJsZWQgJiYgdGhpcy5kZXNjcmlwdGlvbkFsZXJ0Tm9kZSAmJiB0aGlzLmRlc2NyaXB0aW9uQWxlcnROb2RlLmZvckVhY2hVdHRlcmFuY2VRdWV1ZSggdXR0ZXJhbmNlUXVldWVDYWxsYmFjayApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdBbGVydGVyJywgQWxlcnRlciApO1xyXG5leHBvcnQgZGVmYXVsdCBBbGVydGVyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLHVDQUF1QztBQUM3RCxTQUFlQyxPQUFPLFFBQVEsbUNBQW1DO0FBQ2pFLE9BQU9DLFNBQVMsTUFBc0IsNkNBQTZDO0FBRW5GLE9BQU9DLFdBQVcsTUFBTSxzQkFBc0I7QUFDOUMsT0FBT0MsZ0JBQWdCLE1BQW1DLHlDQUF5QztBQWlCbkcsTUFBTUMsT0FBTyxTQUFTRCxnQkFBZ0IsQ0FBQztFQUs5QkUsV0FBV0EsQ0FBRUMsZUFBZ0MsRUFBRztJQUVyRCxNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBdUQsQ0FBQyxDQUFFO01BQ2pGUyxjQUFjLEVBQUUsSUFBSTtNQUNwQkMsb0JBQW9CLEVBQUU7SUFDeEIsQ0FBQyxFQUFFSCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUMsT0FBUSxDQUFDO0lBQ2hCLElBQUksQ0FBQ0MsY0FBYyxHQUFHRCxPQUFPLENBQUNDLGNBQWM7SUFDNUMsSUFBSSxDQUFDQyxvQkFBb0IsR0FBR0YsT0FBTyxDQUFDRSxvQkFBb0I7RUFDMUQ7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLEtBQUtBLENBQUVDLFNBQXFCLEVBQVM7SUFDMUMsSUFBSyxJQUFJLENBQUNDLE9BQU8sRUFBRztNQUNsQixJQUFLLElBQUksQ0FBQ0osY0FBYyxFQUFHO1FBQ3pCSyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsU0FBUyxZQUFZVixTQUFTLEVBQUUsZ0VBQWlFLENBQUMsQ0FBQyxDQUFDO1FBQ3RIRCxPQUFPLENBQUNjLGNBQWMsQ0FBRUgsU0FBdUIsQ0FBQztNQUNsRDtNQUVBLElBQUksQ0FBQ0kseUJBQXlCLENBQUVKLFNBQVUsQ0FBQztJQUM3QztFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNTSSx5QkFBeUJBLENBQUVKLFNBQXFCLEVBQVM7SUFDOUQsSUFBSSxDQUFDQyxPQUFPLElBQUksSUFBSSxDQUFDSCxvQkFBb0IsSUFBSSxJQUFJLENBQUNBLG9CQUFvQixDQUFDTSx5QkFBeUIsQ0FBRUosU0FBVSxDQUFDO0VBQy9HOztFQUVBO0FBQ0Y7QUFDQTtFQUNTSyxxQkFBcUJBLENBQUVDLHNCQUE4QyxFQUFTO0lBQ25GLElBQUksQ0FBQ0wsT0FBTyxJQUFJLElBQUksQ0FBQ0gsb0JBQW9CLElBQUksSUFBSSxDQUFDQSxvQkFBb0IsQ0FBQ08scUJBQXFCLENBQUVDLHNCQUF1QixDQUFDO0VBQ3hIO0FBQ0Y7QUFFQWYsV0FBVyxDQUFDZ0IsUUFBUSxDQUFFLFNBQVMsRUFBRWQsT0FBUSxDQUFDO0FBQzFDLGVBQWVBLE9BQU8iLCJpZ25vcmVMaXN0IjpbXX0=