// Copyright 2015-2024, University of Colorado Boulder

/**
 * Light bulb, made to 'glow' by modulating opacity of the 'on' image.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from '../../dot/js/Utils.js';
import InstanceRegistry from '../../phet-core/js/documentation/InstanceRegistry.js';
import optionize from '../../phet-core/js/optionize.js';
import { Image, Node } from '../../scenery/js/imports.js';
import lightBulbOff_png from '../mipmaps/lightBulbOff_png.js';
import lightBulbOn_png from '../mipmaps/lightBulbOn_png.js';
import LightRaysNode from './LightRaysNode.js';
import sceneryPhet from './sceneryPhet.js';
export default class LightBulbNode extends Node {
  /**
   * @param brightnessProperty - brightness of the bulb, 0 (off) to 1 (full brightness)
   * @param [providedOptions]
   */
  constructor(brightnessProperty, providedOptions) {
    const options = optionize()({
      bulbImageScale: 0.33,
      lightBulbOnImage: lightBulbOn_png,
      lightBulbOffImage: lightBulbOff_png
    }, providedOptions);
    const onNode = new Image(options.lightBulbOnImage, {
      scale: options.bulbImageScale,
      centerX: 0,
      bottom: 0
    });
    const offNode = new Image(options.lightBulbOffImage, {
      scale: options.bulbImageScale,
      centerX: onNode.centerX,
      bottom: onNode.bottom
    });

    // rays
    const bulbRadius = offNode.width / 2; // use 'off' node, the 'on' node is wider because it has a glow around it.
    const raysNode = new LightRaysNode(bulbRadius, optionize()({
      x: onNode.centerX,
      y: offNode.top + bulbRadius
    }, options.lightRaysNodeOptions));
    options.children = [raysNode, offNode, onNode];
    super(options);
    this.onNode = onNode;
    this.raysNode = raysNode;
    this.brightnessProperty = brightnessProperty;

    // Updates this Node when it becomes visible.
    this.visibleProperty.link(visible => visible && this.update());
    const brightnessObserver = brightness => this.update();
    brightnessProperty.link(brightnessObserver);
    this.disposeLightBulbNode = () => {
      brightnessProperty.unlink(brightnessObserver);
    };

    // support for binder documentation, stripped out in builds and only runs when ?binder is specified
    assert && phet?.chipper?.queryParameters?.binder && InstanceRegistry.registerDataURL('scenery-phet', 'LightBulbNode', this);
  }
  dispose() {
    this.disposeLightBulbNode();
    super.dispose();
  }

  /**
   * Updates the bulb. For performance, this is a no-op when the bulb is not visible.
   */
  update() {
    if (this.visible) {
      const brightness = this.brightnessProperty.value;
      assert && assert(brightness >= 0 && brightness <= 1);
      this.onNode.visible = brightness > 0;
      if (this.onNode.visible) {
        this.onNode.opacity = Utils.linear(0, 1, 0.3, 1, brightness);
      }
      this.raysNode.setBrightness(brightness);
    }
  }
}
sceneryPhet.register('LightBulbNode', LightBulbNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,