// Copyright 2014-2023, University of Colorado Boulder

/**
 * WavelengthSpectrumNode displays a rectangle of the visible spectrum.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import optionize from '../../phet-core/js/optionize.js';
import sceneryPhet from './sceneryPhet.js';
import SpectrumNode from './SpectrumNode.js';
import VisibleColor from './VisibleColor.js';
export default class WavelengthSpectrumNode extends SpectrumNode {
  constructor(providedOptions) {
    const options = optionize()({
      valueToColor: value => VisibleColor.wavelengthToColor(value),
      minWavelength: VisibleColor.MIN_WAVELENGTH,
      maxWavelength: VisibleColor.MAX_WAVELENGTH
    }, providedOptions);

    // validation
    assert && assert(options.minWavelength < options.maxWavelength);
    assert && assert(options.minWavelength >= VisibleColor.MIN_WAVELENGTH && options.minWavelength <= VisibleColor.MAX_WAVELENGTH);
    assert && assert(options.maxWavelength >= VisibleColor.MIN_WAVELENGTH && options.maxWavelength <= VisibleColor.MAX_WAVELENGTH);
    options.minValue = options.minWavelength;
    options.maxValue = options.maxWavelength;
    super(options);
  }
}
sceneryPhet.register('WavelengthSpectrumNode', WavelengthSpectrumNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJzY2VuZXJ5UGhldCIsIlNwZWN0cnVtTm9kZSIsIlZpc2libGVDb2xvciIsIldhdmVsZW5ndGhTcGVjdHJ1bU5vZGUiLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJ2YWx1ZVRvQ29sb3IiLCJ2YWx1ZSIsIndhdmVsZW5ndGhUb0NvbG9yIiwibWluV2F2ZWxlbmd0aCIsIk1JTl9XQVZFTEVOR1RIIiwibWF4V2F2ZWxlbmd0aCIsIk1BWF9XQVZFTEVOR1RIIiwiYXNzZXJ0IiwibWluVmFsdWUiLCJtYXhWYWx1ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiV2F2ZWxlbmd0aFNwZWN0cnVtTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXYXZlbGVuZ3RoU3BlY3RydW1Ob2RlIGRpc3BsYXlzIGEgcmVjdGFuZ2xlIG9mIHRoZSB2aXNpYmxlIHNwZWN0cnVtLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IHNjZW5lcnlQaGV0IGZyb20gJy4vc2NlbmVyeVBoZXQuanMnO1xyXG5pbXBvcnQgU3BlY3RydW1Ob2RlLCB7IFNwZWN0cnVtTm9kZU9wdGlvbnMgfSBmcm9tICcuL1NwZWN0cnVtTm9kZS5qcyc7XHJcbmltcG9ydCBWaXNpYmxlQ29sb3IgZnJvbSAnLi9WaXNpYmxlQ29sb3IuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBtaW5XYXZlbGVuZ3RoPzogbnVtYmVyO1xyXG4gIG1heFdhdmVsZW5ndGg/OiBudW1iZXI7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBXYXZlbGVuZ3RoU3BlY3RydW1Ob2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxTcGVjdHJ1bU5vZGVPcHRpb25zLCAnbWluVmFsdWUnIHwgJ21heFZhbHVlJz47XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBXYXZlbGVuZ3RoU3BlY3RydW1Ob2RlIGV4dGVuZHMgU3BlY3RydW1Ob2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBXYXZlbGVuZ3RoU3BlY3RydW1Ob2RlT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFdhdmVsZW5ndGhTcGVjdHJ1bU5vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgU3BlY3RydW1Ob2RlT3B0aW9ucz4oKSgge1xyXG4gICAgICB2YWx1ZVRvQ29sb3I6ICggdmFsdWU6IG51bWJlciApID0+IFZpc2libGVDb2xvci53YXZlbGVuZ3RoVG9Db2xvciggdmFsdWUgKSxcclxuICAgICAgbWluV2F2ZWxlbmd0aDogVmlzaWJsZUNvbG9yLk1JTl9XQVZFTEVOR1RILFxyXG4gICAgICBtYXhXYXZlbGVuZ3RoOiBWaXNpYmxlQ29sb3IuTUFYX1dBVkVMRU5HVEhcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIHZhbGlkYXRpb25cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIG9wdGlvbnMubWluV2F2ZWxlbmd0aCA8IG9wdGlvbnMubWF4V2F2ZWxlbmd0aCApO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aW9ucy5taW5XYXZlbGVuZ3RoID49IFZpc2libGVDb2xvci5NSU5fV0FWRUxFTkdUSCAmJiBvcHRpb25zLm1pbldhdmVsZW5ndGggPD0gVmlzaWJsZUNvbG9yLk1BWF9XQVZFTEVOR1RIICk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBvcHRpb25zLm1heFdhdmVsZW5ndGggPj0gVmlzaWJsZUNvbG9yLk1JTl9XQVZFTEVOR1RIICYmIG9wdGlvbnMubWF4V2F2ZWxlbmd0aCA8PSBWaXNpYmxlQ29sb3IuTUFYX1dBVkVMRU5HVEggKTtcclxuXHJcbiAgICBvcHRpb25zLm1pblZhbHVlID0gb3B0aW9ucy5taW5XYXZlbGVuZ3RoO1xyXG4gICAgb3B0aW9ucy5tYXhWYWx1ZSA9IG9wdGlvbnMubWF4V2F2ZWxlbmd0aDtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeVBoZXQucmVnaXN0ZXIoICdXYXZlbGVuZ3RoU3BlY3RydW1Ob2RlJywgV2F2ZWxlbmd0aFNwZWN0cnVtTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBTSxpQ0FBaUM7QUFFdkQsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxZQUFZLE1BQStCLG1CQUFtQjtBQUNyRSxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBUzVDLGVBQWUsTUFBTUMsc0JBQXNCLFNBQVNGLFlBQVksQ0FBQztFQUV4REcsV0FBV0EsQ0FBRUMsZUFBK0MsRUFBRztJQUVwRSxNQUFNQyxPQUFPLEdBQUdQLFNBQVMsQ0FBa0UsQ0FBQyxDQUFFO01BQzVGUSxZQUFZLEVBQUlDLEtBQWEsSUFBTU4sWUFBWSxDQUFDTyxpQkFBaUIsQ0FBRUQsS0FBTSxDQUFDO01BQzFFRSxhQUFhLEVBQUVSLFlBQVksQ0FBQ1MsY0FBYztNQUMxQ0MsYUFBYSxFQUFFVixZQUFZLENBQUNXO0lBQzlCLENBQUMsRUFBRVIsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQVMsTUFBTSxJQUFJQSxNQUFNLENBQUVSLE9BQU8sQ0FBQ0ksYUFBYSxHQUFHSixPQUFPLENBQUNNLGFBQWMsQ0FBQztJQUNqRUUsTUFBTSxJQUFJQSxNQUFNLENBQUVSLE9BQU8sQ0FBQ0ksYUFBYSxJQUFJUixZQUFZLENBQUNTLGNBQWMsSUFBSUwsT0FBTyxDQUFDSSxhQUFhLElBQUlSLFlBQVksQ0FBQ1csY0FBZSxDQUFDO0lBQ2hJQyxNQUFNLElBQUlBLE1BQU0sQ0FBRVIsT0FBTyxDQUFDTSxhQUFhLElBQUlWLFlBQVksQ0FBQ1MsY0FBYyxJQUFJTCxPQUFPLENBQUNNLGFBQWEsSUFBSVYsWUFBWSxDQUFDVyxjQUFlLENBQUM7SUFFaElQLE9BQU8sQ0FBQ1MsUUFBUSxHQUFHVCxPQUFPLENBQUNJLGFBQWE7SUFDeENKLE9BQU8sQ0FBQ1UsUUFBUSxHQUFHVixPQUFPLENBQUNNLGFBQWE7SUFFeEMsS0FBSyxDQUFFTixPQUFRLENBQUM7RUFDbEI7QUFDRjtBQUVBTixXQUFXLENBQUNpQixRQUFRLENBQUUsd0JBQXdCLEVBQUVkLHNCQUF1QixDQUFDIiwiaWdub3JlTGlzdCI6W119