// Copyright 2021-2023, University of Colorado Boulder

/**
 * A singleton with an instance of an AnimatedPanZoomListener that can be easily accessed for an application.
 * The AnimatedPanZoomListener adds global key press listeners and it is reasonable that you would only want
 * one for a document/application.
 *
 * @author Jesse Greenberg
 */

import { AnimatedPanZoomListener, scenery } from '../imports.js';
class AnimatedPanZoomSingleton {
  // A reference to the instance of the listener, null until initialized.
  _listener = null;
  initialize(targetNode, options) {
    this._listener = new AnimatedPanZoomListener(targetNode, options);
  }
  dispose() {
    assert && assert(this._listener, 'No listener, call initialize first.');
    this._listener.dispose();
    this._listener = null;
  }

  /**
   * Returns the AnimatedPanZoomListener.
   */
  get listener() {
    assert && assert(this._listener, 'No listener, call initialize first.');
    return this._listener;
  }

  /**
   * Returns true if the animatedPanZoomSingleton has been initialized.
   */
  get initialized() {
    return !!this._listener;
  }
}
const animatedPanZoomSingleton = new AnimatedPanZoomSingleton();
scenery.register('animatedPanZoomSingleton', animatedPanZoomSingleton);
export default animatedPanZoomSingleton;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmltYXRlZFBhblpvb21MaXN0ZW5lciIsInNjZW5lcnkiLCJBbmltYXRlZFBhblpvb21TaW5nbGV0b24iLCJfbGlzdGVuZXIiLCJpbml0aWFsaXplIiwidGFyZ2V0Tm9kZSIsIm9wdGlvbnMiLCJkaXNwb3NlIiwiYXNzZXJ0IiwibGlzdGVuZXIiLCJpbml0aWFsaXplZCIsImFuaW1hdGVkUGFuWm9vbVNpbmdsZXRvbiIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiYW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgc2luZ2xldG9uIHdpdGggYW4gaW5zdGFuY2Ugb2YgYW4gQW5pbWF0ZWRQYW5ab29tTGlzdGVuZXIgdGhhdCBjYW4gYmUgZWFzaWx5IGFjY2Vzc2VkIGZvciBhbiBhcHBsaWNhdGlvbi5cclxuICogVGhlIEFuaW1hdGVkUGFuWm9vbUxpc3RlbmVyIGFkZHMgZ2xvYmFsIGtleSBwcmVzcyBsaXN0ZW5lcnMgYW5kIGl0IGlzIHJlYXNvbmFibGUgdGhhdCB5b3Ugd291bGQgb25seSB3YW50XHJcbiAqIG9uZSBmb3IgYSBkb2N1bWVudC9hcHBsaWNhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgeyBBbmltYXRlZFBhblpvb21MaXN0ZW5lciwgTm9kZSwgUGFuWm9vbUxpc3RlbmVyT3B0aW9ucywgc2NlbmVyeSB9IGZyb20gJy4uL2ltcG9ydHMuanMnO1xyXG5cclxuY2xhc3MgQW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uIHtcclxuXHJcbiAgLy8gQSByZWZlcmVuY2UgdG8gdGhlIGluc3RhbmNlIG9mIHRoZSBsaXN0ZW5lciwgbnVsbCB1bnRpbCBpbml0aWFsaXplZC5cclxuICBwcml2YXRlIF9saXN0ZW5lcjogQW5pbWF0ZWRQYW5ab29tTGlzdGVuZXIgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgcHVibGljIGluaXRpYWxpemUoIHRhcmdldE5vZGU6IE5vZGUsIG9wdGlvbnM/OiBQYW5ab29tTGlzdGVuZXJPcHRpb25zICk6IHZvaWQge1xyXG4gICAgdGhpcy5fbGlzdGVuZXIgPSBuZXcgQW5pbWF0ZWRQYW5ab29tTGlzdGVuZXIoIHRhcmdldE5vZGUsIG9wdGlvbnMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5fbGlzdGVuZXIsICdObyBsaXN0ZW5lciwgY2FsbCBpbml0aWFsaXplIGZpcnN0LicgKTtcclxuICAgIHRoaXMuX2xpc3RlbmVyIS5kaXNwb3NlKCk7XHJcbiAgICB0aGlzLl9saXN0ZW5lciA9IG51bGw7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRoZSBBbmltYXRlZFBhblpvb21MaXN0ZW5lci5cclxuICAgKi9cclxuICBwdWJsaWMgZ2V0IGxpc3RlbmVyKCk6IEFuaW1hdGVkUGFuWm9vbUxpc3RlbmVyIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHRoaXMuX2xpc3RlbmVyLCAnTm8gbGlzdGVuZXIsIGNhbGwgaW5pdGlhbGl6ZSBmaXJzdC4nICk7XHJcbiAgICByZXR1cm4gdGhpcy5fbGlzdGVuZXIhO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyB0cnVlIGlmIHRoZSBhbmltYXRlZFBhblpvb21TaW5nbGV0b24gaGFzIGJlZW4gaW5pdGlhbGl6ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIGdldCBpbml0aWFsaXplZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAhIXRoaXMuX2xpc3RlbmVyO1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgYW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uID0gbmV3IEFuaW1hdGVkUGFuWm9vbVNpbmdsZXRvbigpO1xyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnYW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uJywgYW5pbWF0ZWRQYW5ab29tU2luZ2xldG9uICk7XHJcbmV4cG9ydCBkZWZhdWx0IGFuaW1hdGVkUGFuWm9vbVNpbmdsZXRvbjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLHVCQUF1QixFQUFnQ0MsT0FBTyxRQUFRLGVBQWU7QUFFOUYsTUFBTUMsd0JBQXdCLENBQUM7RUFFN0I7RUFDUUMsU0FBUyxHQUFtQyxJQUFJO0VBRWpEQyxVQUFVQSxDQUFFQyxVQUFnQixFQUFFQyxPQUFnQyxFQUFTO0lBQzVFLElBQUksQ0FBQ0gsU0FBUyxHQUFHLElBQUlILHVCQUF1QixDQUFFSyxVQUFVLEVBQUVDLE9BQVEsQ0FBQztFQUNyRTtFQUVPQyxPQUFPQSxDQUFBLEVBQVM7SUFDckJDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0wsU0FBUyxFQUFFLHFDQUFzQyxDQUFDO0lBQ3pFLElBQUksQ0FBQ0EsU0FBUyxDQUFFSSxPQUFPLENBQUMsQ0FBQztJQUN6QixJQUFJLENBQUNKLFNBQVMsR0FBRyxJQUFJO0VBQ3ZCOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLElBQVdNLFFBQVFBLENBQUEsRUFBNEI7SUFDN0NELE1BQU0sSUFBSUEsTUFBTSxDQUFFLElBQUksQ0FBQ0wsU0FBUyxFQUFFLHFDQUFzQyxDQUFDO0lBQ3pFLE9BQU8sSUFBSSxDQUFDQSxTQUFTO0VBQ3ZCOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLElBQVdPLFdBQVdBLENBQUEsRUFBWTtJQUNoQyxPQUFPLENBQUMsQ0FBQyxJQUFJLENBQUNQLFNBQVM7RUFDekI7QUFDRjtBQUVBLE1BQU1RLHdCQUF3QixHQUFHLElBQUlULHdCQUF3QixDQUFDLENBQUM7QUFDL0RELE9BQU8sQ0FBQ1csUUFBUSxDQUFFLDBCQUEwQixFQUFFRCx3QkFBeUIsQ0FBQztBQUN4RSxlQUFlQSx3QkFBd0IiLCJpZ25vcmVMaXN0IjpbXX0=