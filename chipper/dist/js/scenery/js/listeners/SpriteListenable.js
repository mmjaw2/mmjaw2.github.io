// Copyright 2022-2024, University of Colorado Boulder

/**
 * A trait to be mixed into PressListeners for identifying which SpriteInstance of a given Sprites node was interacted
 * with, AND will prevent interactions that are NOT over any SpriteInstances.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import inheritance from '../../../phet-core/js/inheritance.js';
import memoize from '../../../phet-core/js/memoize.js';
import { PressListener, scenery, Sprites } from '../imports.js';
/**
 * @param type - Should be a PressListener-based type
 */
const SpriteListenable = memoize(type => {
  assert && assert(_.includes(inheritance(type), PressListener), 'Only PressListener subtypes should mix SpriteListenable');
  return class extends type {
    spriteInstance = null;
    constructor(...args) {
      super(...args);
    }

    /**
     * @override - see PressListener
     */
    press(event, targetNode, callback) {
      // If pressed, then the press would be exited later AND we wouldn't want to override our spriteInstance anyway.
      if (this.isPressed) {
        return false;
      }

      // Zero it out, so we only respond to Sprites instances.
      this.spriteInstance = null;
      if (event.currentTarget instanceof Sprites) {
        const sprites = event.currentTarget;
        this.spriteInstance = sprites.getSpriteInstanceFromPoint(sprites.globalToLocalPoint(event.pointer.point));
      }

      // If we have no instance, don't super-call (same behavior for never starting a press)
      if (this.spriteInstance) {
        return super.press(event, targetNode, callback);
      } else {
        return false;
      }
    }
  };
});
scenery.register('SpriteListenable', SpriteListenable);
export default SpriteListenable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbmhlcml0YW5jZSIsIm1lbW9pemUiLCJQcmVzc0xpc3RlbmVyIiwic2NlbmVyeSIsIlNwcml0ZXMiLCJTcHJpdGVMaXN0ZW5hYmxlIiwidHlwZSIsImFzc2VydCIsIl8iLCJpbmNsdWRlcyIsInNwcml0ZUluc3RhbmNlIiwiY29uc3RydWN0b3IiLCJhcmdzIiwicHJlc3MiLCJldmVudCIsInRhcmdldE5vZGUiLCJjYWxsYmFjayIsImlzUHJlc3NlZCIsImN1cnJlbnRUYXJnZXQiLCJzcHJpdGVzIiwiZ2V0U3ByaXRlSW5zdGFuY2VGcm9tUG9pbnQiLCJnbG9iYWxUb0xvY2FsUG9pbnQiLCJwb2ludGVyIiwicG9pbnQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlNwcml0ZUxpc3RlbmFibGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSB0cmFpdCB0byBiZSBtaXhlZCBpbnRvIFByZXNzTGlzdGVuZXJzIGZvciBpZGVudGlmeWluZyB3aGljaCBTcHJpdGVJbnN0YW5jZSBvZiBhIGdpdmVuIFNwcml0ZXMgbm9kZSB3YXMgaW50ZXJhY3RlZFxyXG4gKiB3aXRoLCBBTkQgd2lsbCBwcmV2ZW50IGludGVyYWN0aW9ucyB0aGF0IGFyZSBOT1Qgb3ZlciBhbnkgU3ByaXRlSW5zdGFuY2VzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IGluaGVyaXRhbmNlIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9pbmhlcml0YW5jZS5qcyc7XHJcbmltcG9ydCBtZW1vaXplIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZW1vaXplLmpzJztcclxuaW1wb3J0IENvbnN0cnVjdG9yIGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9Db25zdHJ1Y3Rvci5qcyc7XHJcbmltcG9ydCB7IFByZXNzTGlzdGVuZXIsIFByZXNzTGlzdGVuZXJFdmVudCwgc2NlbmVyeSwgU3ByaXRlSW5zdGFuY2UsIFNwcml0ZXMsIE5vZGUgfSBmcm9tICcuLi9pbXBvcnRzLmpzJztcclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XHJcblxyXG50eXBlIFRTcHJpdGVMaXN0ZW5hYmxlID0ge1xyXG4gIHNwcml0ZUluc3RhbmNlOiBTcHJpdGVJbnN0YW5jZSB8IG51bGw7XHJcbn07XHJcblxyXG4vKipcclxuICogQHBhcmFtIHR5cGUgLSBTaG91bGQgYmUgYSBQcmVzc0xpc3RlbmVyLWJhc2VkIHR5cGVcclxuICovXHJcbmNvbnN0IFNwcml0ZUxpc3RlbmFibGUgPSBtZW1vaXplKCA8U3VwZXJUeXBlIGV4dGVuZHMgQ29uc3RydWN0b3I8UHJlc3NMaXN0ZW5lcj4+KCB0eXBlOiBTdXBlclR5cGUgKTogU3VwZXJUeXBlICYgQ29uc3RydWN0b3I8VFNwcml0ZUxpc3RlbmFibGU+ID0+IHtcclxuICBhc3NlcnQgJiYgYXNzZXJ0KCBfLmluY2x1ZGVzKCBpbmhlcml0YW5jZSggdHlwZSApLCBQcmVzc0xpc3RlbmVyICksICdPbmx5IFByZXNzTGlzdGVuZXIgc3VidHlwZXMgc2hvdWxkIG1peCBTcHJpdGVMaXN0ZW5hYmxlJyApO1xyXG5cclxuICByZXR1cm4gY2xhc3MgZXh0ZW5kcyB0eXBlIGltcGxlbWVudHMgVFNwcml0ZUxpc3RlbmFibGUge1xyXG5cclxuICAgIHB1YmxpYyBzcHJpdGVJbnN0YW5jZTogU3ByaXRlSW5zdGFuY2UgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgICBwdWJsaWMgY29uc3RydWN0b3IoIC4uLmFyZ3M6IEludGVudGlvbmFsQW55W10gKSB7XHJcbiAgICAgIHN1cGVyKCAuLi5hcmdzICk7XHJcbiAgICB9XHJcblxyXG4gICAgLyoqXHJcbiAgICAgKiBAb3ZlcnJpZGUgLSBzZWUgUHJlc3NMaXN0ZW5lclxyXG4gICAgICovXHJcbiAgICBwdWJsaWMgb3ZlcnJpZGUgcHJlc3MoIGV2ZW50OiBQcmVzc0xpc3RlbmVyRXZlbnQsIHRhcmdldE5vZGU/OiBOb2RlLCBjYWxsYmFjaz86ICgpID0+IHZvaWQgKTogYm9vbGVhbiB7XHJcbiAgICAgIC8vIElmIHByZXNzZWQsIHRoZW4gdGhlIHByZXNzIHdvdWxkIGJlIGV4aXRlZCBsYXRlciBBTkQgd2Ugd291bGRuJ3Qgd2FudCB0byBvdmVycmlkZSBvdXIgc3ByaXRlSW5zdGFuY2UgYW55d2F5LlxyXG4gICAgICBpZiAoICggdGhpcyBhcyB1bmtub3duIGFzIFByZXNzTGlzdGVuZXIgKS5pc1ByZXNzZWQgKSB7IHJldHVybiBmYWxzZTsgfVxyXG5cclxuICAgICAgLy8gWmVybyBpdCBvdXQsIHNvIHdlIG9ubHkgcmVzcG9uZCB0byBTcHJpdGVzIGluc3RhbmNlcy5cclxuICAgICAgdGhpcy5zcHJpdGVJbnN0YW5jZSA9IG51bGw7XHJcblxyXG4gICAgICBpZiAoIGV2ZW50LmN1cnJlbnRUYXJnZXQgaW5zdGFuY2VvZiBTcHJpdGVzICkge1xyXG4gICAgICAgIGNvbnN0IHNwcml0ZXMgPSBldmVudC5jdXJyZW50VGFyZ2V0O1xyXG5cclxuICAgICAgICB0aGlzLnNwcml0ZUluc3RhbmNlID0gc3ByaXRlcy5nZXRTcHJpdGVJbnN0YW5jZUZyb21Qb2ludCggc3ByaXRlcy5nbG9iYWxUb0xvY2FsUG9pbnQoIGV2ZW50LnBvaW50ZXIucG9pbnQgKSApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBJZiB3ZSBoYXZlIG5vIGluc3RhbmNlLCBkb24ndCBzdXBlci1jYWxsIChzYW1lIGJlaGF2aW9yIGZvciBuZXZlciBzdGFydGluZyBhIHByZXNzKVxyXG4gICAgICBpZiAoIHRoaXMuc3ByaXRlSW5zdGFuY2UgKSB7XHJcbiAgICAgICAgcmV0dXJuIHN1cGVyLnByZXNzKCBldmVudCwgdGFyZ2V0Tm9kZSwgY2FsbGJhY2sgKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9O1xyXG59ICk7XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnU3ByaXRlTGlzdGVuYWJsZScsIFNwcml0ZUxpc3RlbmFibGUgKTtcclxuZXhwb3J0IGRlZmF1bHQgU3ByaXRlTGlzdGVuYWJsZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sc0NBQXNDO0FBQzlELE9BQU9DLE9BQU8sTUFBTSxrQ0FBa0M7QUFFdEQsU0FBU0MsYUFBYSxFQUFzQkMsT0FBTyxFQUFrQkMsT0FBTyxRQUFjLGVBQWU7QUFPekc7QUFDQTtBQUNBO0FBQ0EsTUFBTUMsZ0JBQWdCLEdBQUdKLE9BQU8sQ0FBa0RLLElBQWUsSUFBa0Q7RUFDakpDLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxDQUFDLENBQUNDLFFBQVEsQ0FBRVQsV0FBVyxDQUFFTSxJQUFLLENBQUMsRUFBRUosYUFBYyxDQUFDLEVBQUUseURBQTBELENBQUM7RUFFL0gsT0FBTyxjQUFjSSxJQUFJLENBQThCO0lBRTlDSSxjQUFjLEdBQTBCLElBQUk7SUFFNUNDLFdBQVdBLENBQUUsR0FBR0MsSUFBc0IsRUFBRztNQUM5QyxLQUFLLENBQUUsR0FBR0EsSUFBSyxDQUFDO0lBQ2xCOztJQUVBO0FBQ0o7QUFDQTtJQUNvQkMsS0FBS0EsQ0FBRUMsS0FBeUIsRUFBRUMsVUFBaUIsRUFBRUMsUUFBcUIsRUFBWTtNQUNwRztNQUNBLElBQU8sSUFBSSxDQUErQkMsU0FBUyxFQUFHO1FBQUUsT0FBTyxLQUFLO01BQUU7O01BRXRFO01BQ0EsSUFBSSxDQUFDUCxjQUFjLEdBQUcsSUFBSTtNQUUxQixJQUFLSSxLQUFLLENBQUNJLGFBQWEsWUFBWWQsT0FBTyxFQUFHO1FBQzVDLE1BQU1lLE9BQU8sR0FBR0wsS0FBSyxDQUFDSSxhQUFhO1FBRW5DLElBQUksQ0FBQ1IsY0FBYyxHQUFHUyxPQUFPLENBQUNDLDBCQUEwQixDQUFFRCxPQUFPLENBQUNFLGtCQUFrQixDQUFFUCxLQUFLLENBQUNRLE9BQU8sQ0FBQ0MsS0FBTSxDQUFFLENBQUM7TUFDL0c7O01BRUE7TUFDQSxJQUFLLElBQUksQ0FBQ2IsY0FBYyxFQUFHO1FBQ3pCLE9BQU8sS0FBSyxDQUFDRyxLQUFLLENBQUVDLEtBQUssRUFBRUMsVUFBVSxFQUFFQyxRQUFTLENBQUM7TUFDbkQsQ0FBQyxNQUNJO1FBQ0gsT0FBTyxLQUFLO01BQ2Q7SUFDRjtFQUNGLENBQUM7QUFDSCxDQUFFLENBQUM7QUFFSGIsT0FBTyxDQUFDcUIsUUFBUSxDQUFFLGtCQUFrQixFQUFFbkIsZ0JBQWlCLENBQUM7QUFDeEQsZUFBZUEsZ0JBQWdCIiwiaWdub3JlTGlzdCI6W119