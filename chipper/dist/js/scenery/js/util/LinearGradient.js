// Copyright 2022-2024, University of Colorado Boulder

/**
 * A linear gradient that can be passed into the 'fill' or 'stroke' parameters.
 *
 * SVG gradients, see http://www.w3.org/TR/SVG/pservers.html
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Vector2 from '../../../dot/js/Vector2.js';
import { ColorDef, Gradient, scenery, SVGLinearGradient } from '../imports.js';
export default class LinearGradient extends Gradient {
  /**
   * TODO: add the ability to specify the color-stops inline. possibly [ [0,color1], [0.5,color2], [1,color3] ] https://github.com/phetsims/scenery/issues/1581
   *
   * @param x0 - X coordinate of the start point (ratio 0) in the local coordinate frame
   * @param y0 - Y coordinate of the start point (ratio 0) in the local coordinate frame
   * @param x1 - X coordinate of the end point (ratio 1) in the local coordinate frame
   * @param y1 - Y coordinate of the end point (ratio 1) in the local coordinate frame
   */
  constructor(x0, y0, x1, y1) {
    assert && assert(isFinite(x0) && isFinite(y0) && isFinite(x1) && isFinite(y1));
    super();
    this.start = new Vector2(x0, y0);
    this.end = new Vector2(x1, y1);
  }

  /**
   * Returns a fresh gradient given the starting parameters
   */
  createCanvasGradient() {
    // use the global scratch canvas instead of creating a new Canvas
    // @ts-expect-error TODO scenery namespace https://github.com/phetsims/scenery/issues/1581
    return scenery.scratchContext.createLinearGradient(this.start.x, this.start.y, this.end.x, this.end.y);
  }

  /**
   * Creates an SVG paint object for creating/updating the SVG equivalent definition.
   */
  createSVGPaint(svgBlock) {
    return SVGLinearGradient.pool.create(svgBlock, this);
  }

  /**
   * Returns a string form of this object
   */
  toString() {
    let result = `new phet.scenery.LinearGradient( ${this.start.x}, ${this.start.y}, ${this.end.x}, ${this.end.y} )`;
    _.each(this.stops, stop => {
      result += `.addColorStop( ${stop.ratio}, ${ColorDef.scenerySerialize(stop.color)} )`;
    });
    return result;
  }
}
LinearGradient.prototype.isLinearGradient = true;
scenery.register('LinearGradient', LinearGradient);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiQ29sb3JEZWYiLCJHcmFkaWVudCIsInNjZW5lcnkiLCJTVkdMaW5lYXJHcmFkaWVudCIsIkxpbmVhckdyYWRpZW50IiwiY29uc3RydWN0b3IiLCJ4MCIsInkwIiwieDEiLCJ5MSIsImFzc2VydCIsImlzRmluaXRlIiwic3RhcnQiLCJlbmQiLCJjcmVhdGVDYW52YXNHcmFkaWVudCIsInNjcmF0Y2hDb250ZXh0IiwiY3JlYXRlTGluZWFyR3JhZGllbnQiLCJ4IiwieSIsImNyZWF0ZVNWR1BhaW50Iiwic3ZnQmxvY2siLCJwb29sIiwiY3JlYXRlIiwidG9TdHJpbmciLCJyZXN1bHQiLCJfIiwiZWFjaCIsInN0b3BzIiwic3RvcCIsInJhdGlvIiwic2NlbmVyeVNlcmlhbGl6ZSIsImNvbG9yIiwicHJvdG90eXBlIiwiaXNMaW5lYXJHcmFkaWVudCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGluZWFyR3JhZGllbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBsaW5lYXIgZ3JhZGllbnQgdGhhdCBjYW4gYmUgcGFzc2VkIGludG8gdGhlICdmaWxsJyBvciAnc3Ryb2tlJyBwYXJhbWV0ZXJzLlxyXG4gKlxyXG4gKiBTVkcgZ3JhZGllbnRzLCBzZWUgaHR0cDovL3d3dy53My5vcmcvVFIvU1ZHL3BzZXJ2ZXJzLmh0bWxcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IHsgQ29sb3JEZWYsIEdyYWRpZW50LCBzY2VuZXJ5LCBTVkdCbG9jaywgU1ZHTGluZWFyR3JhZGllbnQgfSBmcm9tICcuLi9pbXBvcnRzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIExpbmVhckdyYWRpZW50IGV4dGVuZHMgR3JhZGllbnQge1xyXG5cclxuICBwdWJsaWMgc3RhcnQ6IFZlY3RvcjI7XHJcbiAgcHVibGljIGVuZDogVmVjdG9yMjtcclxuXHJcbiAgLyoqXHJcbiAgICogVE9ETzogYWRkIHRoZSBhYmlsaXR5IHRvIHNwZWNpZnkgdGhlIGNvbG9yLXN0b3BzIGlubGluZS4gcG9zc2libHkgWyBbMCxjb2xvcjFdLCBbMC41LGNvbG9yMl0sIFsxLGNvbG9yM10gXSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc2NlbmVyeS9pc3N1ZXMvMTU4MVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHgwIC0gWCBjb29yZGluYXRlIG9mIHRoZSBzdGFydCBwb2ludCAocmF0aW8gMCkgaW4gdGhlIGxvY2FsIGNvb3JkaW5hdGUgZnJhbWVcclxuICAgKiBAcGFyYW0geTAgLSBZIGNvb3JkaW5hdGUgb2YgdGhlIHN0YXJ0IHBvaW50IChyYXRpbyAwKSBpbiB0aGUgbG9jYWwgY29vcmRpbmF0ZSBmcmFtZVxyXG4gICAqIEBwYXJhbSB4MSAtIFggY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHBvaW50IChyYXRpbyAxKSBpbiB0aGUgbG9jYWwgY29vcmRpbmF0ZSBmcmFtZVxyXG4gICAqIEBwYXJhbSB5MSAtIFkgY29vcmRpbmF0ZSBvZiB0aGUgZW5kIHBvaW50IChyYXRpbyAxKSBpbiB0aGUgbG9jYWwgY29vcmRpbmF0ZSBmcmFtZVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggeDA6IG51bWJlciwgeTA6IG51bWJlciwgeDE6IG51bWJlciwgeTE6IG51bWJlciApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGlzRmluaXRlKCB4MCApICYmIGlzRmluaXRlKCB5MCApICYmIGlzRmluaXRlKCB4MSApICYmIGlzRmluaXRlKCB5MSApICk7XHJcblxyXG4gICAgc3VwZXIoKTtcclxuXHJcbiAgICB0aGlzLnN0YXJ0ID0gbmV3IFZlY3RvcjIoIHgwLCB5MCApO1xyXG4gICAgdGhpcy5lbmQgPSBuZXcgVmVjdG9yMiggeDEsIHkxICk7XHJcbiAgfVxyXG5cclxuXHJcbiAgLyoqXHJcbiAgICogUmV0dXJucyBhIGZyZXNoIGdyYWRpZW50IGdpdmVuIHRoZSBzdGFydGluZyBwYXJhbWV0ZXJzXHJcbiAgICovXHJcbiAgcHVibGljIGNyZWF0ZUNhbnZhc0dyYWRpZW50KCk6IENhbnZhc0dyYWRpZW50IHtcclxuICAgIC8vIHVzZSB0aGUgZ2xvYmFsIHNjcmF0Y2ggY2FudmFzIGluc3RlYWQgb2YgY3JlYXRpbmcgYSBuZXcgQ2FudmFzXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIFRPRE8gc2NlbmVyeSBuYW1lc3BhY2UgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3NjZW5lcnkvaXNzdWVzLzE1ODFcclxuICAgIHJldHVybiBzY2VuZXJ5LnNjcmF0Y2hDb250ZXh0LmNyZWF0ZUxpbmVhckdyYWRpZW50KCB0aGlzLnN0YXJ0LngsIHRoaXMuc3RhcnQueSwgdGhpcy5lbmQueCwgdGhpcy5lbmQueSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhbiBTVkcgcGFpbnQgb2JqZWN0IGZvciBjcmVhdGluZy91cGRhdGluZyB0aGUgU1ZHIGVxdWl2YWxlbnQgZGVmaW5pdGlvbi5cclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlU1ZHUGFpbnQoIHN2Z0Jsb2NrOiBTVkdCbG9jayApOiBTVkdMaW5lYXJHcmFkaWVudCB7XHJcbiAgICByZXR1cm4gU1ZHTGluZWFyR3JhZGllbnQucG9vbC5jcmVhdGUoIHN2Z0Jsb2NrLCB0aGlzICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgc3RyaW5nIGZvcm0gb2YgdGhpcyBvYmplY3RcclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIGxldCByZXN1bHQgPSBgbmV3IHBoZXQuc2NlbmVyeS5MaW5lYXJHcmFkaWVudCggJHt0aGlzLnN0YXJ0Lnh9LCAke3RoaXMuc3RhcnQueX0sICR7dGhpcy5lbmQueH0sICR7dGhpcy5lbmQueX0gKWA7XHJcblxyXG4gICAgXy5lYWNoKCB0aGlzLnN0b3BzLCBzdG9wID0+IHtcclxuICAgICAgcmVzdWx0ICs9IGAuYWRkQ29sb3JTdG9wKCAke3N0b3AucmF0aW99LCAke0NvbG9yRGVmLnNjZW5lcnlTZXJpYWxpemUoIHN0b3AuY29sb3IgKX0gKWA7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpc0xpbmVhckdyYWRpZW50ITogYm9vbGVhbjtcclxufVxyXG5cclxuTGluZWFyR3JhZGllbnQucHJvdG90eXBlLmlzTGluZWFyR3JhZGllbnQgPSB0cnVlO1xyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ0xpbmVhckdyYWRpZW50JywgTGluZWFyR3JhZGllbnQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSw0QkFBNEI7QUFDaEQsU0FBU0MsUUFBUSxFQUFFQyxRQUFRLEVBQUVDLE9BQU8sRUFBWUMsaUJBQWlCLFFBQVEsZUFBZTtBQUV4RixlQUFlLE1BQU1DLGNBQWMsU0FBU0gsUUFBUSxDQUFDO0VBS25EO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0ksV0FBV0EsQ0FBRUMsRUFBVSxFQUFFQyxFQUFVLEVBQUVDLEVBQVUsRUFBRUMsRUFBVSxFQUFHO0lBQ25FQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsUUFBUSxDQUFFTCxFQUFHLENBQUMsSUFBSUssUUFBUSxDQUFFSixFQUFHLENBQUMsSUFBSUksUUFBUSxDQUFFSCxFQUFHLENBQUMsSUFBSUcsUUFBUSxDQUFFRixFQUFHLENBQUUsQ0FBQztJQUV4RixLQUFLLENBQUMsQ0FBQztJQUVQLElBQUksQ0FBQ0csS0FBSyxHQUFHLElBQUliLE9BQU8sQ0FBRU8sRUFBRSxFQUFFQyxFQUFHLENBQUM7SUFDbEMsSUFBSSxDQUFDTSxHQUFHLEdBQUcsSUFBSWQsT0FBTyxDQUFFUyxFQUFFLEVBQUVDLEVBQUcsQ0FBQztFQUNsQzs7RUFHQTtBQUNGO0FBQ0E7RUFDU0ssb0JBQW9CQSxDQUFBLEVBQW1CO0lBQzVDO0lBQ0E7SUFDQSxPQUFPWixPQUFPLENBQUNhLGNBQWMsQ0FBQ0Msb0JBQW9CLENBQUUsSUFBSSxDQUFDSixLQUFLLENBQUNLLENBQUMsRUFBRSxJQUFJLENBQUNMLEtBQUssQ0FBQ00sQ0FBQyxFQUFFLElBQUksQ0FBQ0wsR0FBRyxDQUFDSSxDQUFDLEVBQUUsSUFBSSxDQUFDSixHQUFHLENBQUNLLENBQUUsQ0FBQztFQUMxRzs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsY0FBY0EsQ0FBRUMsUUFBa0IsRUFBc0I7SUFDN0QsT0FBT2pCLGlCQUFpQixDQUFDa0IsSUFBSSxDQUFDQyxNQUFNLENBQUVGLFFBQVEsRUFBRSxJQUFLLENBQUM7RUFDeEQ7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCRyxRQUFRQSxDQUFBLEVBQVc7SUFDakMsSUFBSUMsTUFBTSxHQUFJLG9DQUFtQyxJQUFJLENBQUNaLEtBQUssQ0FBQ0ssQ0FBRSxLQUFJLElBQUksQ0FBQ0wsS0FBSyxDQUFDTSxDQUFFLEtBQUksSUFBSSxDQUFDTCxHQUFHLENBQUNJLENBQUUsS0FBSSxJQUFJLENBQUNKLEdBQUcsQ0FBQ0ssQ0FBRSxJQUFHO0lBRWhITyxDQUFDLENBQUNDLElBQUksQ0FBRSxJQUFJLENBQUNDLEtBQUssRUFBRUMsSUFBSSxJQUFJO01BQzFCSixNQUFNLElBQUssa0JBQWlCSSxJQUFJLENBQUNDLEtBQU0sS0FBSTdCLFFBQVEsQ0FBQzhCLGdCQUFnQixDQUFFRixJQUFJLENBQUNHLEtBQU0sQ0FBRSxJQUFHO0lBQ3hGLENBQUUsQ0FBQztJQUVILE9BQU9QLE1BQU07RUFDZjtBQUdGO0FBRUFwQixjQUFjLENBQUM0QixTQUFTLENBQUNDLGdCQUFnQixHQUFHLElBQUk7QUFFaEQvQixPQUFPLENBQUNnQyxRQUFRLENBQUUsZ0JBQWdCLEVBQUU5QixjQUFlLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=