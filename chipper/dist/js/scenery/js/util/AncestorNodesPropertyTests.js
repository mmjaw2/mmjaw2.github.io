// Copyright 2023-2024, University of Colorado Boulder

/**
 * QUnit tests for AncestorNodesPropertyTests
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { AncestorNodesProperty, Node } from '../imports.js';
QUnit.module('AncestorNodesProperty');
QUnit.test('AncestorNodesProperty', assert => {
  const a = new Node();
  const b = new Node();
  const c = new Node();
  const d = new Node();
  b.addChild(a);
  const ancestorNodesProperty = new AncestorNodesProperty(a);
  assert.ok(ancestorNodesProperty.valueComparisonStrategy !== 'reference', 'uses custom comparison');
  const checkAncestors = (nodes, message) => {
    assert.ok(ancestorNodesProperty.value.size === nodes.length, message);
    nodes.forEach(node => {
      assert.ok(ancestorNodesProperty.value.has(node), message);
    });
  };

  // b -> a
  checkAncestors([b], 'initial');

  // a
  b.removeChild(a);
  checkAncestors([], 'removed from b');

  // c -> b -> a
  c.addChild(b);
  b.addChild(a);
  checkAncestors([b, c], 'added two at a time');

  //    b
  //  /   \
  // c ->  a
  c.addChild(a);
  checkAncestors([b, c], 'DAG, still the same');

  //    b
  //  /
  // c ->  a
  b.removeChild(a);
  checkAncestors([c], 'only c directly');

  //         b
  //       /
  // d -> c ->  a
  d.addChild(c);
  checkAncestors([c, d], 'added ancestor!');

  //    b
  //     \
  // d -> c ->  a
  c.removeChild(b);
  b.addChild(c);
  checkAncestors([b, c, d], 'moved b to ancestor');

  // a
  c.removeChild(a);
  checkAncestors([], 'nothing');

  //    b
  //     \
  // d -> c ->  a
  c.addChild(a);
  checkAncestors([b, c, d], 'back');
  ancestorNodesProperty.dispose();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbmNlc3Rvck5vZGVzUHJvcGVydHkiLCJOb2RlIiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0IiwiYSIsImIiLCJjIiwiZCIsImFkZENoaWxkIiwiYW5jZXN0b3JOb2Rlc1Byb3BlcnR5Iiwib2siLCJ2YWx1ZUNvbXBhcmlzb25TdHJhdGVneSIsImNoZWNrQW5jZXN0b3JzIiwibm9kZXMiLCJtZXNzYWdlIiwidmFsdWUiLCJzaXplIiwibGVuZ3RoIiwiZm9yRWFjaCIsIm5vZGUiLCJoYXMiLCJyZW1vdmVDaGlsZCIsImRpc3Bvc2UiXSwic291cmNlcyI6WyJBbmNlc3Rvck5vZGVzUHJvcGVydHlUZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBRVW5pdCB0ZXN0cyBmb3IgQW5jZXN0b3JOb2Rlc1Byb3BlcnR5VGVzdHNcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IEFuY2VzdG9yTm9kZXNQcm9wZXJ0eSwgTm9kZSB9IGZyb20gJy4uL2ltcG9ydHMuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnQW5jZXN0b3JOb2Rlc1Byb3BlcnR5JyApO1xyXG5cclxuUVVuaXQudGVzdCggJ0FuY2VzdG9yTm9kZXNQcm9wZXJ0eScsIGFzc2VydCA9PiB7XHJcblxyXG4gIGNvbnN0IGEgPSBuZXcgTm9kZSgpO1xyXG4gIGNvbnN0IGIgPSBuZXcgTm9kZSgpO1xyXG4gIGNvbnN0IGMgPSBuZXcgTm9kZSgpO1xyXG4gIGNvbnN0IGQgPSBuZXcgTm9kZSgpO1xyXG5cclxuICBiLmFkZENoaWxkKCBhICk7XHJcblxyXG4gIGNvbnN0IGFuY2VzdG9yTm9kZXNQcm9wZXJ0eSA9IG5ldyBBbmNlc3Rvck5vZGVzUHJvcGVydHkoIGEgKTtcclxuXHJcbiAgYXNzZXJ0Lm9rKCBhbmNlc3Rvck5vZGVzUHJvcGVydHkudmFsdWVDb21wYXJpc29uU3RyYXRlZ3kgIT09ICdyZWZlcmVuY2UnLCAndXNlcyBjdXN0b20gY29tcGFyaXNvbicgKTtcclxuXHJcbiAgY29uc3QgY2hlY2tBbmNlc3RvcnMgPSAoIG5vZGVzOiBOb2RlW10sIG1lc3NhZ2U6IHN0cmluZyApID0+IHtcclxuICAgIGFzc2VydC5vayggYW5jZXN0b3JOb2Rlc1Byb3BlcnR5LnZhbHVlLnNpemUgPT09IG5vZGVzLmxlbmd0aCwgbWVzc2FnZSApO1xyXG5cclxuICAgIG5vZGVzLmZvckVhY2goIG5vZGUgPT4ge1xyXG4gICAgICBhc3NlcnQub2soIGFuY2VzdG9yTm9kZXNQcm9wZXJ0eS52YWx1ZS5oYXMoIG5vZGUgKSwgbWVzc2FnZSApO1xyXG4gICAgfSApO1xyXG4gIH07XHJcblxyXG4gIC8vIGIgLT4gYVxyXG4gIGNoZWNrQW5jZXN0b3JzKCBbIGIgXSwgJ2luaXRpYWwnICk7XHJcblxyXG4gIC8vIGFcclxuICBiLnJlbW92ZUNoaWxkKCBhICk7XHJcbiAgY2hlY2tBbmNlc3RvcnMoIFtdLCAncmVtb3ZlZCBmcm9tIGInICk7XHJcblxyXG4gIC8vIGMgLT4gYiAtPiBhXHJcbiAgYy5hZGRDaGlsZCggYiApO1xyXG4gIGIuYWRkQ2hpbGQoIGEgKTtcclxuICBjaGVja0FuY2VzdG9ycyggWyBiLCBjIF0sICdhZGRlZCB0d28gYXQgYSB0aW1lJyApO1xyXG5cclxuICAvLyAgICBiXHJcbiAgLy8gIC8gICBcXFxyXG4gIC8vIGMgLT4gIGFcclxuICBjLmFkZENoaWxkKCBhICk7XHJcbiAgY2hlY2tBbmNlc3RvcnMoIFsgYiwgYyBdLCAnREFHLCBzdGlsbCB0aGUgc2FtZScgKTtcclxuXHJcbiAgLy8gICAgYlxyXG4gIC8vICAvXHJcbiAgLy8gYyAtPiAgYVxyXG4gIGIucmVtb3ZlQ2hpbGQoIGEgKTtcclxuICBjaGVja0FuY2VzdG9ycyggWyBjIF0sICdvbmx5IGMgZGlyZWN0bHknICk7XHJcblxyXG4gIC8vICAgICAgICAgYlxyXG4gIC8vICAgICAgIC9cclxuICAvLyBkIC0+IGMgLT4gIGFcclxuICBkLmFkZENoaWxkKCBjICk7XHJcbiAgY2hlY2tBbmNlc3RvcnMoIFsgYywgZCBdLCAnYWRkZWQgYW5jZXN0b3IhJyApO1xyXG5cclxuICAvLyAgICBiXHJcbiAgLy8gICAgIFxcXHJcbiAgLy8gZCAtPiBjIC0+ICBhXHJcbiAgYy5yZW1vdmVDaGlsZCggYiApO1xyXG4gIGIuYWRkQ2hpbGQoIGMgKTtcclxuICBjaGVja0FuY2VzdG9ycyggWyBiLCBjLCBkIF0sICdtb3ZlZCBiIHRvIGFuY2VzdG9yJyApO1xyXG5cclxuICAvLyBhXHJcbiAgYy5yZW1vdmVDaGlsZCggYSApO1xyXG4gIGNoZWNrQW5jZXN0b3JzKCBbXSwgJ25vdGhpbmcnICk7XHJcblxyXG4gIC8vICAgIGJcclxuICAvLyAgICAgXFxcclxuICAvLyBkIC0+IGMgLT4gIGFcclxuICBjLmFkZENoaWxkKCBhICk7XHJcbiAgY2hlY2tBbmNlc3RvcnMoIFsgYiwgYywgZCBdLCAnYmFjaycgKTtcclxuXHJcbiAgYW5jZXN0b3JOb2Rlc1Byb3BlcnR5LmRpc3Bvc2UoKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxxQkFBcUIsRUFBRUMsSUFBSSxRQUFRLGVBQWU7QUFFM0RDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLHVCQUF3QixDQUFDO0FBRXZDRCxLQUFLLENBQUNFLElBQUksQ0FBRSx1QkFBdUIsRUFBRUMsTUFBTSxJQUFJO0VBRTdDLE1BQU1DLENBQUMsR0FBRyxJQUFJTCxJQUFJLENBQUMsQ0FBQztFQUNwQixNQUFNTSxDQUFDLEdBQUcsSUFBSU4sSUFBSSxDQUFDLENBQUM7RUFDcEIsTUFBTU8sQ0FBQyxHQUFHLElBQUlQLElBQUksQ0FBQyxDQUFDO0VBQ3BCLE1BQU1RLENBQUMsR0FBRyxJQUFJUixJQUFJLENBQUMsQ0FBQztFQUVw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