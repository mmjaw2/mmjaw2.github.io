// Copyright 2022-2024, University of Colorado Boulder

/**
 * Creates a pattern based on a Node.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Matrix3 from '../../../dot/js/Matrix3.js';
import { Node, Pattern, scenery } from '../imports.js';
export default class NodePattern extends Pattern {
  constructor(node, resolution, x, y, width, height, matrix = Matrix3.IDENTITY) {
    assert && assert(resolution > 0 && Number.isInteger(resolution), 'Resolution should be a positive integer');
    assert && assert(Number.isInteger(width));
    assert && assert(Number.isInteger(height));
    const imageElement = document.createElement('img');

    // NOTE: This callback is executed SYNCHRONOUSLY
    function callback(canvas, x, y, width, height) {
      imageElement.src = canvas.toDataURL();
    }
    const tmpNode = new Node({
      scale: resolution,
      children: [node]
    });
    tmpNode.toCanvas(callback, -x * resolution, -y * resolution, width * resolution, height * resolution);
    super(imageElement);
    this.setTransformMatrix(matrix.timesMatrix(Matrix3.scaling(1 / resolution)));
  }
}
scenery.register('NodePattern', NodePattern);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiTm9kZSIsIlBhdHRlcm4iLCJzY2VuZXJ5IiwiTm9kZVBhdHRlcm4iLCJjb25zdHJ1Y3RvciIsIm5vZGUiLCJyZXNvbHV0aW9uIiwieCIsInkiLCJ3aWR0aCIsImhlaWdodCIsIm1hdHJpeCIsIklERU5USVRZIiwiYXNzZXJ0IiwiTnVtYmVyIiwiaXNJbnRlZ2VyIiwiaW1hZ2VFbGVtZW50IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwiY2FsbGJhY2siLCJjYW52YXMiLCJzcmMiLCJ0b0RhdGFVUkwiLCJ0bXBOb2RlIiwic2NhbGUiLCJjaGlsZHJlbiIsInRvQ2FudmFzIiwic2V0VHJhbnNmb3JtTWF0cml4IiwidGltZXNNYXRyaXgiLCJzY2FsaW5nIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJOb2RlUGF0dGVybi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBDcmVhdGVzIGEgcGF0dGVybiBiYXNlZCBvbiBhIE5vZGUuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgTWF0cml4MyBmcm9tICcuLi8uLi8uLi9kb3QvanMvTWF0cml4My5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIFBhdHRlcm4sIHNjZW5lcnkgfSBmcm9tICcuLi9pbXBvcnRzLmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIE5vZGVQYXR0ZXJuIGV4dGVuZHMgUGF0dGVybiB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBub2RlOiBOb2RlLCByZXNvbHV0aW9uOiBudW1iZXIsIHg6IG51bWJlciwgeTogbnVtYmVyLCB3aWR0aDogbnVtYmVyLCBoZWlnaHQ6IG51bWJlciwgbWF0cml4ID0gTWF0cml4My5JREVOVElUWSApIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHJlc29sdXRpb24gPiAwICYmIE51bWJlci5pc0ludGVnZXIoIHJlc29sdXRpb24gKSwgJ1Jlc29sdXRpb24gc2hvdWxkIGJlIGEgcG9zaXRpdmUgaW50ZWdlcicgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIE51bWJlci5pc0ludGVnZXIoIHdpZHRoICkgKTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIE51bWJlci5pc0ludGVnZXIoIGhlaWdodCApICk7XHJcblxyXG4gICAgY29uc3QgaW1hZ2VFbGVtZW50ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggJ2ltZycgKTtcclxuXHJcbiAgICAvLyBOT1RFOiBUaGlzIGNhbGxiYWNrIGlzIGV4ZWN1dGVkIFNZTkNIUk9OT1VTTFlcclxuICAgIGZ1bmN0aW9uIGNhbGxiYWNrKCBjYW52YXM6IEhUTUxDYW52YXNFbGVtZW50LCB4OiBudW1iZXIsIHk6IG51bWJlciwgd2lkdGg6IG51bWJlciwgaGVpZ2h0OiBudW1iZXIgKTogdm9pZCB7XHJcbiAgICAgIGltYWdlRWxlbWVudC5zcmMgPSBjYW52YXMudG9EYXRhVVJMKCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB0bXBOb2RlID0gbmV3IE5vZGUoIHtcclxuICAgICAgc2NhbGU6IHJlc29sdXRpb24sXHJcbiAgICAgIGNoaWxkcmVuOiBbIG5vZGUgXVxyXG4gICAgfSApO1xyXG4gICAgdG1wTm9kZS50b0NhbnZhcyggY2FsbGJhY2ssIC14ICogcmVzb2x1dGlvbiwgLXkgKiByZXNvbHV0aW9uLCB3aWR0aCAqIHJlc29sdXRpb24sIGhlaWdodCAqIHJlc29sdXRpb24gKTtcclxuXHJcbiAgICBzdXBlciggaW1hZ2VFbGVtZW50ICk7XHJcblxyXG4gICAgdGhpcy5zZXRUcmFuc2Zvcm1NYXRyaXgoIG1hdHJpeC50aW1lc01hdHJpeCggTWF0cml4My5zY2FsaW5nKCAxIC8gcmVzb2x1dGlvbiApICkgKTtcclxuICB9XHJcbn1cclxuXHJcbnNjZW5lcnkucmVnaXN0ZXIoICdOb2RlUGF0dGVybicsIE5vZGVQYXR0ZXJuICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLE9BQU8sTUFBTSw0QkFBNEI7QUFDaEQsU0FBU0MsSUFBSSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sUUFBUSxlQUFlO0FBRXRELGVBQWUsTUFBTUMsV0FBVyxTQUFTRixPQUFPLENBQUM7RUFDeENHLFdBQVdBLENBQUVDLElBQVUsRUFBRUMsVUFBa0IsRUFBRUMsQ0FBUyxFQUFFQyxDQUFTLEVBQUVDLEtBQWEsRUFBRUMsTUFBYyxFQUFFQyxNQUFNLEdBQUdaLE9BQU8sQ0FBQ2EsUUFBUSxFQUFHO0lBQ25JQyxNQUFNLElBQUlBLE1BQU0sQ0FBRVAsVUFBVSxHQUFHLENBQUMsSUFBSVEsTUFBTSxDQUFDQyxTQUFTLENBQUVULFVBQVcsQ0FBQyxFQUFFLHlDQUEwQyxDQUFDO0lBQy9HTyxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsTUFBTSxDQUFDQyxTQUFTLENBQUVOLEtBQU0sQ0FBRSxDQUFDO0lBQzdDSSxNQUFNLElBQUlBLE1BQU0sQ0FBRUMsTUFBTSxDQUFDQyxTQUFTLENBQUVMLE1BQU8sQ0FBRSxDQUFDO0lBRTlDLE1BQU1NLFlBQVksR0FBR0MsUUFBUSxDQUFDQyxhQUFhLENBQUUsS0FBTSxDQUFDOztJQUVwRDtJQUNBLFNBQVNDLFFBQVFBLENBQUVDLE1BQXlCLEVBQUViLENBQVMsRUFBRUMsQ0FBUyxFQUFFQyxLQUFhLEVBQUVDLE1BQWMsRUFBUztNQUN4R00sWUFBWSxDQUFDSyxHQUFHLEdBQUdELE1BQU0sQ0FBQ0UsU0FBUyxDQUFDLENBQUM7SUFDdkM7SUFDQSxNQUFNQyxPQUFPLEdBQUcsSUFBSXZCLElBQUksQ0FBRTtNQUN4QndCLEtBQUssRUFBRWxCLFVBQVU7TUFDakJtQixRQUFRLEVBQUUsQ0FBRXBCLElBQUk7SUFDbEIsQ0FBRSxDQUFDO0lBQ0hrQixPQUFPLENBQUNHLFFBQVEsQ0FBRVAsUUFBUSxFQUFFLENBQUNaLENBQUMsR0FBR0QsVUFBVSxFQUFFLENBQUNFLENBQUMsR0FBR0YsVUFBVSxFQUFFRyxLQUFLLEdBQUdILFVBQVUsRUFBRUksTUFBTSxHQUFHSixVQUFXLENBQUM7SUFFdkcsS0FBSyxDQUFFVSxZQUFhLENBQUM7SUFFckIsSUFBSSxDQUFDVyxrQkFBa0IsQ0FBRWhCLE1BQU0sQ0FBQ2lCLFdBQVcsQ0FBRTdCLE9BQU8sQ0FBQzhCLE9BQU8sQ0FBRSxDQUFDLEdBQUd2QixVQUFXLENBQUUsQ0FBRSxDQUFDO0VBQ3BGO0FBQ0Y7QUFFQUosT0FBTyxDQUFDNEIsUUFBUSxDQUFFLGFBQWEsRUFBRTNCLFdBQVksQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==