// Copyright 2018-2024, University of Colorado Boulder

/**
 * "definition" type for generalized color paints (anything that can be given to a fill/stroke that represents just a
 * solid color). Does NOT include any type of gradient or pattern.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../../axon/js/Property.js';
import IOType from '../../../tandem/js/types/IOType.js';
import NullableIO from '../../../tandem/js/types/NullableIO.js';
import OrIO from '../../../tandem/js/types/OrIO.js';
import ReferenceIO from '../../../tandem/js/types/ReferenceIO.js';
import StringIO from '../../../tandem/js/types/StringIO.js';
import { Color, scenery } from '../imports.js';
import { isTReadOnlyProperty } from '../../../axon/js/TReadOnlyProperty.js';
const ColorDef = {
  /**
   * Returns whether the parameter is considered to be a ColorDef.
   */
  isColorDef(color) {
    return color === null || typeof color === 'string' || color instanceof Color || isTReadOnlyProperty(color) && (color.value === null || typeof color.value === 'string' || color.value instanceof Color);
  },
  scenerySerialize(color) {
    if (color === null) {
      return 'null';
    } else if (color instanceof Color) {
      return `'${color.toCSS()}'`;
    } else if (typeof color === 'string') {
      return `'${color}'`;
    } else {
      // Property fallback
      return ColorDef.scenerySerialize(color.value);
    }
  },
  // phet-io IOType for serialization and documentation
  ColorDefIO: null // Defined below, typed here
};
ColorDef.ColorDefIO = new IOType('ColorDefIO', {
  isValidValue: ColorDef.isColorDef,
  supertype: NullableIO(OrIO([StringIO, Color.ColorIO, ReferenceIO(Property.PropertyIO(NullableIO(OrIO([StringIO, Color.ColorIO]))))]))
});
scenery.register('ColorDef', ColorDef);
export default ColorDef;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIklPVHlwZSIsIk51bGxhYmxlSU8iLCJPcklPIiwiUmVmZXJlbmNlSU8iLCJTdHJpbmdJTyIsIkNvbG9yIiwic2NlbmVyeSIsImlzVFJlYWRPbmx5UHJvcGVydHkiLCJDb2xvckRlZiIsImlzQ29sb3JEZWYiLCJjb2xvciIsInZhbHVlIiwic2NlbmVyeVNlcmlhbGl6ZSIsInRvQ1NTIiwiQ29sb3JEZWZJTyIsImlzVmFsaWRWYWx1ZSIsInN1cGVydHlwZSIsIkNvbG9ySU8iLCJQcm9wZXJ0eUlPIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb2xvckRlZi50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBcImRlZmluaXRpb25cIiB0eXBlIGZvciBnZW5lcmFsaXplZCBjb2xvciBwYWludHMgKGFueXRoaW5nIHRoYXQgY2FuIGJlIGdpdmVuIHRvIGEgZmlsbC9zdHJva2UgdGhhdCByZXByZXNlbnRzIGp1c3QgYVxyXG4gKiBzb2xpZCBjb2xvcikuIERvZXMgTk9UIGluY2x1ZGUgYW55IHR5cGUgb2YgZ3JhZGllbnQgb3IgcGF0dGVybi5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IE51bGxhYmxlSU8gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bGxhYmxlSU8uanMnO1xyXG5pbXBvcnQgT3JJTyBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvT3JJTy5qcyc7XHJcbmltcG9ydCBSZWZlcmVuY2VJTyBmcm9tICcuLi8uLi8uLi90YW5kZW0vanMvdHlwZXMvUmVmZXJlbmNlSU8uanMnO1xyXG5pbXBvcnQgU3RyaW5nSU8gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1N0cmluZ0lPLmpzJztcclxuaW1wb3J0IHsgQ29sb3IsIHNjZW5lcnksIFRDb2xvciB9IGZyb20gJy4uL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgeyBpc1RSZWFkT25seVByb3BlcnR5IH0gZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcblxyXG5jb25zdCBDb2xvckRlZiA9IHtcclxuICAvKipcclxuICAgKiBSZXR1cm5zIHdoZXRoZXIgdGhlIHBhcmFtZXRlciBpcyBjb25zaWRlcmVkIHRvIGJlIGEgQ29sb3JEZWYuXHJcbiAgICovXHJcbiAgaXNDb2xvckRlZiggY29sb3I6IHVua25vd24gKTogY29sb3IgaXMgVENvbG9yIHtcclxuICAgIHJldHVybiBjb2xvciA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgIHR5cGVvZiBjb2xvciA9PT0gJ3N0cmluZycgfHxcclxuICAgICAgICAgICBjb2xvciBpbnN0YW5jZW9mIENvbG9yIHx8XHJcbiAgICAgICAgICAgKCAoIGlzVFJlYWRPbmx5UHJvcGVydHkoIGNvbG9yICkgKSAmJiAoXHJcbiAgICAgICAgICAgICBjb2xvci52YWx1ZSA9PT0gbnVsbCB8fFxyXG4gICAgICAgICAgICAgdHlwZW9mIGNvbG9yLnZhbHVlID09PSAnc3RyaW5nJyB8fFxyXG4gICAgICAgICAgICAgY29sb3IudmFsdWUgaW5zdGFuY2VvZiBDb2xvclxyXG4gICAgICAgICAgICkgKTtcclxuICB9LFxyXG5cclxuICBzY2VuZXJ5U2VyaWFsaXplKCBjb2xvcjogVENvbG9yICk6IHN0cmluZyB7XHJcbiAgICBpZiAoIGNvbG9yID09PSBudWxsICkge1xyXG4gICAgICByZXR1cm4gJ251bGwnO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIGNvbG9yIGluc3RhbmNlb2YgQ29sb3IgKSB7XHJcbiAgICAgIHJldHVybiBgJyR7Y29sb3IudG9DU1MoKX0nYDtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB0eXBlb2YgY29sb3IgPT09ICdzdHJpbmcnICkge1xyXG4gICAgICByZXR1cm4gYCcke2NvbG9yfSdgO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIC8vIFByb3BlcnR5IGZhbGxiYWNrXHJcbiAgICAgIHJldHVybiBDb2xvckRlZi5zY2VuZXJ5U2VyaWFsaXplKCBjb2xvci52YWx1ZSApO1xyXG4gICAgfVxyXG4gIH0sXHJcblxyXG4gIC8vIHBoZXQtaW8gSU9UeXBlIGZvciBzZXJpYWxpemF0aW9uIGFuZCBkb2N1bWVudGF0aW9uXHJcbiAgQ29sb3JEZWZJTzogbnVsbCBhcyB1bmtub3duIGFzIElPVHlwZSAvLyBEZWZpbmVkIGJlbG93LCB0eXBlZCBoZXJlXHJcbn07XHJcblxyXG5Db2xvckRlZi5Db2xvckRlZklPID0gbmV3IElPVHlwZSggJ0NvbG9yRGVmSU8nLCB7XHJcbiAgaXNWYWxpZFZhbHVlOiBDb2xvckRlZi5pc0NvbG9yRGVmLFxyXG4gIHN1cGVydHlwZTogTnVsbGFibGVJTyggT3JJTyggWyBTdHJpbmdJTywgQ29sb3IuQ29sb3JJTywgUmVmZXJlbmNlSU8oIFByb3BlcnR5LlByb3BlcnR5SU8oIE51bGxhYmxlSU8oIE9ySU8oIFsgU3RyaW5nSU8sIENvbG9yLkNvbG9ySU8gXSApICkgKSApIF0gKSApXHJcbn0gKTtcclxuXHJcbnNjZW5lcnkucmVnaXN0ZXIoICdDb2xvckRlZicsIENvbG9yRGVmICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBDb2xvckRlZjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sOEJBQThCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSxvQ0FBb0M7QUFDdkQsT0FBT0MsVUFBVSxNQUFNLHdDQUF3QztBQUMvRCxPQUFPQyxJQUFJLE1BQU0sa0NBQWtDO0FBQ25ELE9BQU9DLFdBQVcsTUFBTSx5Q0FBeUM7QUFDakUsT0FBT0MsUUFBUSxNQUFNLHNDQUFzQztBQUMzRCxTQUFTQyxLQUFLLEVBQUVDLE9BQU8sUUFBZ0IsZUFBZTtBQUN0RCxTQUFTQyxtQkFBbUIsUUFBUSx1Q0FBdUM7QUFFM0UsTUFBTUMsUUFBUSxHQUFHO0VBQ2Y7QUFDRjtBQUNBO0VBQ0VDLFVBQVVBLENBQUVDLEtBQWMsRUFBb0I7SUFDNUMsT0FBT0EsS0FBSyxLQUFLLElBQUksSUFDZCxPQUFPQSxLQUFLLEtBQUssUUFBUSxJQUN6QkEsS0FBSyxZQUFZTCxLQUFLLElBQ2xCRSxtQkFBbUIsQ0FBRUcsS0FBTSxDQUFDLEtBQzlCQSxLQUFLLENBQUNDLEtBQUssS0FBSyxJQUFJLElBQ3BCLE9BQU9ELEtBQUssQ0FBQ0MsS0FBSyxLQUFLLFFBQVEsSUFDL0JELEtBQUssQ0FBQ0MsS0FBSyxZQUFZTixLQUFLLENBQzNCO0VBQ1osQ0FBQztFQUVETyxnQkFBZ0JBLENBQUVGLEtBQWEsRUFBVztJQUN4QyxJQUFLQSxLQUFLLEtBQUssSUFBSSxFQUFHO01BQ3BCLE9BQU8sTUFBTTtJQUNmLENBQUMsTUFDSSxJQUFLQSxLQUFLLFlBQVlMLEtBQUssRUFBRztNQUNqQyxPQUFRLElBQUdLLEtBQUssQ0FBQ0csS0FBSyxDQUFDLENBQUUsR0FBRTtJQUM3QixDQUFDLE1BQ0ksSUFBSyxPQUFPSCxLQUFLLEtBQUssUUFBUSxFQUFHO01BQ3BDLE9BQVEsSUFBR0EsS0FBTSxHQUFFO0lBQ3JCLENBQUMsTUFDSTtNQUNIO01BQ0EsT0FBT0YsUUFBUSxDQUFDSSxnQkFBZ0IsQ0FBRUYsS0FBSyxDQUFDQyxLQUFNLENBQUM7SUFDakQ7RUFDRixDQUFDO0VBRUQ7RUFDQUcsVUFBVSxFQUFFLElBQXlCLENBQUM7QUFDeEMsQ0FBQztBQUVETixRQUFRLENBQUNNLFVBQVUsR0FBRyxJQUFJZCxNQUFNLENBQUUsWUFBWSxFQUFFO0VBQzlDZSxZQUFZLEVBQUVQLFFBQVEsQ0FBQ0MsVUFBVTtFQUNqQ08sU0FBUyxFQUFFZixVQUFVLENBQUVDLElBQUksQ0FBRSxDQUFFRSxRQUFRLEVBQUVDLEtBQUssQ0FBQ1ksT0FBTyxFQUFFZCxXQUFXLENBQUVKLFFBQVEsQ0FBQ21CLFVBQVUsQ0FBRWpCLFVBQVUsQ0FBRUMsSUFBSSxDQUFFLENBQUVFLFFBQVEsRUFBRUMsS0FBSyxDQUFDWSxPQUFPLENBQUcsQ0FBRSxDQUFFLENBQUUsQ0FBQyxDQUFHLENBQUU7QUFDdEosQ0FBRSxDQUFDO0FBRUhYLE9BQU8sQ0FBQ2EsUUFBUSxDQUFFLFVBQVUsRUFBRVgsUUFBUyxDQUFDO0FBRXhDLGVBQWVBLFFBQVEiLCJpZ25vcmVMaXN0IjpbXX0=