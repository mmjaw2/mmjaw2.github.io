// Copyright 2023-2024, University of Colorado Boulder

/**
 * A leaf (text) element in the RichText, which will display a snippet of Text.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */
import Pool from '../../../../phet-core/js/Pool.js';
import { RichText, RichTextCleanable, RichTextUtils, scenery, Text } from '../../imports.js';
export default class RichTextLeaf extends RichTextCleanable(Text) {
  constructor(content, isLTR, font, boundsMethod, fill, stroke, lineWidth) {
    super('');
    this.initialize(content, isLTR, font, boundsMethod, fill, stroke, lineWidth);
  }
  initialize(content, isLTR, font, boundsMethod, fill, stroke, lineWidth) {
    // Grab all spaces at the (logical) start
    let whitespaceBefore = '';
    while (content.startsWith(' ')) {
      whitespaceBefore += ' ';
      content = content.slice(1);
    }

    // Grab all spaces at the (logical) end
    let whitespaceAfter = '';
    while (content.endsWith(' ')) {
      whitespaceAfter = ' ';
      content = content.slice(0, content.length - 1);
    }
    this.string = RichText.contentToString(content, isLTR);
    this.boundsMethod = boundsMethod;
    this.font = font;
    this.fill = fill;
    this.stroke = stroke;
    this.lineWidth = lineWidth;
    const spacingBefore = whitespaceBefore.length ? RichTextUtils.scratchText.setString(whitespaceBefore).setFont(font).width : 0;
    const spacingAfter = whitespaceAfter.length ? RichTextUtils.scratchText.setString(whitespaceAfter).setFont(font).width : 0;

    // Turn logical spacing into directional
    this.leftSpacing = isLTR ? spacingBefore : spacingAfter;
    this.rightSpacing = isLTR ? spacingAfter : spacingBefore;
    return this;
  }

  /**
   * Cleans references that could cause memory leaks (as those things may contain other references).
   */
  clean() {
    super.clean();
    this.fill = null;
    this.stroke = null;
  }

  /**
   * Whether this leaf will fit in the specified amount of space (including, if required, the amount of spacing on
   * the side).
   */
  fitsIn(widthAvailable, hasAddedLeafToLine, isContainerLTR) {
    return this.width + (hasAddedLeafToLine ? isContainerLTR ? this.leftSpacing : this.rightSpacing : 0) <= widthAvailable;
  }
  freeToPool() {
    RichTextLeaf.pool.freeToPool(this);
  }
  static pool = new Pool(RichTextLeaf);
}
scenery.register('RichTextLeaf', RichTextLeaf);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQb29sIiwiUmljaFRleHQiLCJSaWNoVGV4dENsZWFuYWJsZSIsIlJpY2hUZXh0VXRpbHMiLCJzY2VuZXJ5IiwiVGV4dCIsIlJpY2hUZXh0TGVhZiIsImNvbnN0cnVjdG9yIiwiY29udGVudCIsImlzTFRSIiwiZm9udCIsImJvdW5kc01ldGhvZCIsImZpbGwiLCJzdHJva2UiLCJsaW5lV2lkdGgiLCJpbml0aWFsaXplIiwid2hpdGVzcGFjZUJlZm9yZSIsInN0YXJ0c1dpdGgiLCJzbGljZSIsIndoaXRlc3BhY2VBZnRlciIsImVuZHNXaXRoIiwibGVuZ3RoIiwic3RyaW5nIiwiY29udGVudFRvU3RyaW5nIiwic3BhY2luZ0JlZm9yZSIsInNjcmF0Y2hUZXh0Iiwic2V0U3RyaW5nIiwic2V0Rm9udCIsIndpZHRoIiwic3BhY2luZ0FmdGVyIiwibGVmdFNwYWNpbmciLCJyaWdodFNwYWNpbmciLCJjbGVhbiIsImZpdHNJbiIsIndpZHRoQXZhaWxhYmxlIiwiaGFzQWRkZWRMZWFmVG9MaW5lIiwiaXNDb250YWluZXJMVFIiLCJmcmVlVG9Qb29sIiwicG9vbCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmljaFRleHRMZWFmLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEEgbGVhZiAodGV4dCkgZWxlbWVudCBpbiB0aGUgUmljaFRleHQsIHdoaWNoIHdpbGwgZGlzcGxheSBhIHNuaXBwZXQgb2YgVGV4dC5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuaW1wb3J0IFBvb2wsIHsgVFBvb2xhYmxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL1Bvb2wuanMnO1xyXG5pbXBvcnQgeyBGb250LCBSaWNoVGV4dCwgUmljaFRleHRDbGVhbmFibGUsIFJpY2hUZXh0VXRpbHMsIHNjZW5lcnksIFRleHQsIFRleHRCb3VuZHNNZXRob2QsIFRQYWludCB9IGZyb20gJy4uLy4uL2ltcG9ydHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUmljaFRleHRMZWFmIGV4dGVuZHMgUmljaFRleHRDbGVhbmFibGUoIFRleHQgKSBpbXBsZW1lbnRzIFRQb29sYWJsZSB7XHJcblxyXG4gIHB1YmxpYyBsZWZ0U3BhY2luZyE6IG51bWJlcjtcclxuICBwdWJsaWMgcmlnaHRTcGFjaW5nITogbnVtYmVyO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvbnRlbnQ6IHN0cmluZywgaXNMVFI6IGJvb2xlYW4sIGZvbnQ6IEZvbnQgfCBzdHJpbmcsIGJvdW5kc01ldGhvZDogVGV4dEJvdW5kc01ldGhvZCwgZmlsbDogVFBhaW50LCBzdHJva2U6IFRQYWludCwgbGluZVdpZHRoOiBudW1iZXIgKSB7XHJcbiAgICBzdXBlciggJycgKTtcclxuXHJcbiAgICB0aGlzLmluaXRpYWxpemUoIGNvbnRlbnQsIGlzTFRSLCBmb250LCBib3VuZHNNZXRob2QsIGZpbGwsIHN0cm9rZSwgbGluZVdpZHRoICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgaW5pdGlhbGl6ZSggY29udGVudDogc3RyaW5nLCBpc0xUUjogYm9vbGVhbiwgZm9udDogRm9udCB8IHN0cmluZywgYm91bmRzTWV0aG9kOiBUZXh0Qm91bmRzTWV0aG9kLCBmaWxsOiBUUGFpbnQsIHN0cm9rZTogVFBhaW50LCBsaW5lV2lkdGg6IG51bWJlciApOiB0aGlzIHtcclxuXHJcbiAgICAvLyBHcmFiIGFsbCBzcGFjZXMgYXQgdGhlIChsb2dpY2FsKSBzdGFydFxyXG4gICAgbGV0IHdoaXRlc3BhY2VCZWZvcmUgPSAnJztcclxuICAgIHdoaWxlICggY29udGVudC5zdGFydHNXaXRoKCAnICcgKSApIHtcclxuICAgICAgd2hpdGVzcGFjZUJlZm9yZSArPSAnICc7XHJcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKCAxICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gR3JhYiBhbGwgc3BhY2VzIGF0IHRoZSAobG9naWNhbCkgZW5kXHJcbiAgICBsZXQgd2hpdGVzcGFjZUFmdGVyID0gJyc7XHJcbiAgICB3aGlsZSAoIGNvbnRlbnQuZW5kc1dpdGgoICcgJyApICkge1xyXG4gICAgICB3aGl0ZXNwYWNlQWZ0ZXIgPSAnICc7XHJcbiAgICAgIGNvbnRlbnQgPSBjb250ZW50LnNsaWNlKCAwLCBjb250ZW50Lmxlbmd0aCAtIDEgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN0cmluZyA9IFJpY2hUZXh0LmNvbnRlbnRUb1N0cmluZyggY29udGVudCwgaXNMVFIgKTtcclxuICAgIHRoaXMuYm91bmRzTWV0aG9kID0gYm91bmRzTWV0aG9kO1xyXG4gICAgdGhpcy5mb250ID0gZm9udDtcclxuICAgIHRoaXMuZmlsbCA9IGZpbGw7XHJcbiAgICB0aGlzLnN0cm9rZSA9IHN0cm9rZTtcclxuICAgIHRoaXMubGluZVdpZHRoID0gbGluZVdpZHRoO1xyXG5cclxuICAgIGNvbnN0IHNwYWNpbmdCZWZvcmUgPSB3aGl0ZXNwYWNlQmVmb3JlLmxlbmd0aCA/IFJpY2hUZXh0VXRpbHMuc2NyYXRjaFRleHQuc2V0U3RyaW5nKCB3aGl0ZXNwYWNlQmVmb3JlICkuc2V0Rm9udCggZm9udCApLndpZHRoIDogMDtcclxuICAgIGNvbnN0IHNwYWNpbmdBZnRlciA9IHdoaXRlc3BhY2VBZnRlci5sZW5ndGggPyBSaWNoVGV4dFV0aWxzLnNjcmF0Y2hUZXh0LnNldFN0cmluZyggd2hpdGVzcGFjZUFmdGVyICkuc2V0Rm9udCggZm9udCApLndpZHRoIDogMDtcclxuXHJcbiAgICAvLyBUdXJuIGxvZ2ljYWwgc3BhY2luZyBpbnRvIGRpcmVjdGlvbmFsXHJcbiAgICB0aGlzLmxlZnRTcGFjaW5nID0gaXNMVFIgPyBzcGFjaW5nQmVmb3JlIDogc3BhY2luZ0FmdGVyO1xyXG4gICAgdGhpcy5yaWdodFNwYWNpbmcgPSBpc0xUUiA/IHNwYWNpbmdBZnRlciA6IHNwYWNpbmdCZWZvcmU7XHJcblxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBDbGVhbnMgcmVmZXJlbmNlcyB0aGF0IGNvdWxkIGNhdXNlIG1lbW9yeSBsZWFrcyAoYXMgdGhvc2UgdGhpbmdzIG1heSBjb250YWluIG90aGVyIHJlZmVyZW5jZXMpLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBjbGVhbigpOiB2b2lkIHtcclxuICAgIHN1cGVyLmNsZWFuKCk7XHJcblxyXG4gICAgdGhpcy5maWxsID0gbnVsbDtcclxuICAgIHRoaXMuc3Ryb2tlID0gbnVsbDtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIFdoZXRoZXIgdGhpcyBsZWFmIHdpbGwgZml0IGluIHRoZSBzcGVjaWZpZWQgYW1vdW50IG9mIHNwYWNlIChpbmNsdWRpbmcsIGlmIHJlcXVpcmVkLCB0aGUgYW1vdW50IG9mIHNwYWNpbmcgb25cclxuICAgKiB0aGUgc2lkZSkuXHJcbiAgICovXHJcbiAgcHVibGljIGZpdHNJbiggd2lkdGhBdmFpbGFibGU6IG51bWJlciwgaGFzQWRkZWRMZWFmVG9MaW5lOiBib29sZWFuLCBpc0NvbnRhaW5lckxUUjogYm9vbGVhbiApOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLndpZHRoICsgKCBoYXNBZGRlZExlYWZUb0xpbmUgPyAoIGlzQ29udGFpbmVyTFRSID8gdGhpcy5sZWZ0U3BhY2luZyA6IHRoaXMucmlnaHRTcGFjaW5nICkgOiAwICkgPD0gd2lkdGhBdmFpbGFibGU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZnJlZVRvUG9vbCgpOiB2b2lkIHtcclxuICAgIFJpY2hUZXh0TGVhZi5wb29sLmZyZWVUb1Bvb2woIHRoaXMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgcG9vbCA9IG5ldyBQb29sKCBSaWNoVGV4dExlYWYgKTtcclxufVxyXG5cclxuc2NlbmVyeS5y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