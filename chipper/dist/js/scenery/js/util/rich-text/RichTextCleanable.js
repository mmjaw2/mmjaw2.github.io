// Copyright 2023-2024, University of Colorado Boulder

/**
 * Mixin for RichText elements in the hierarchy that should be pooled with a clean() method.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */
import Matrix3 from '../../../../dot/js/Matrix3.js';
import inheritance from '../../../../phet-core/js/inheritance.js';
import memoize from '../../../../phet-core/js/memoize.js';
import { Node, scenery } from '../../imports.js';
const RichTextCleanable = memoize(type => {
  assert && assert(_.includes(inheritance(type), Node), 'Only Node subtypes should mix Paintable');
  return class RichTextCleanableMixin extends type {
    get isCleanable() {
      return true;
    }

    /**
     * Releases references
     */
    clean() {
      const thisNode = this;

      // Remove all children (and recursively clean)
      for (let i = thisNode._children.length - 1; i >= 0; i--) {
        const child = thisNode._children[i];
        if (child.isCleanable) {
          thisNode.removeChild(child);
          child.clean();
        }
      }
      thisNode.matrix = Matrix3.IDENTITY;
      thisNode.freeToPool();
    }
  };
});
scenery.register('RichTextCleanable', RichTextCleanable);
export default RichTextCleanable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRyaXgzIiwiaW5oZXJpdGFuY2UiLCJtZW1vaXplIiwiTm9kZSIsInNjZW5lcnkiLCJSaWNoVGV4dENsZWFuYWJsZSIsInR5cGUiLCJhc3NlcnQiLCJfIiwiaW5jbHVkZXMiLCJSaWNoVGV4dENsZWFuYWJsZU1peGluIiwiaXNDbGVhbmFibGUiLCJjbGVhbiIsInRoaXNOb2RlIiwiaSIsIl9jaGlsZHJlbiIsImxlbmd0aCIsImNoaWxkIiwicmVtb3ZlQ2hpbGQiLCJtYXRyaXgiLCJJREVOVElUWSIsImZyZWVUb1Bvb2wiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJpY2hUZXh0Q2xlYW5hYmxlLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIzLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1peGluIGZvciBSaWNoVGV4dCBlbGVtZW50cyBpbiB0aGUgaGllcmFyY2h5IHRoYXQgc2hvdWxkIGJlIHBvb2xlZCB3aXRoIGEgY2xlYW4oKSBtZXRob2QuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcbmltcG9ydCBNYXRyaXgzIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9NYXRyaXgzLmpzJztcclxuaW1wb3J0IGluaGVyaXRhbmNlIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9pbmhlcml0YW5jZS5qcyc7XHJcbmltcG9ydCBtZW1vaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9tZW1vaXplLmpzJztcclxuaW1wb3J0IENvbnN0cnVjdG9yIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9Db25zdHJ1Y3Rvci5qcyc7XHJcbmltcG9ydCB7IE5vZGUsIHNjZW5lcnkgfSBmcm9tICcuLi8uLi9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHsgVFBvb2xhYmxlIH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL1Bvb2wuanMnO1xyXG5cclxudHlwZSBUUmljaFRleHRDbGVhbmFibGUgPSB7XHJcbiAgcmVhZG9ubHkgaXNDbGVhbmFibGU6IGJvb2xlYW47XHJcbiAgY2xlYW4oKTogdm9pZDtcclxufTtcclxuXHJcbmNvbnN0IFJpY2hUZXh0Q2xlYW5hYmxlID0gbWVtb2l6ZSggPFN1cGVyVHlwZSBleHRlbmRzIENvbnN0cnVjdG9yPiggdHlwZTogU3VwZXJUeXBlICk6IFN1cGVyVHlwZSAmIENvbnN0cnVjdG9yPFRSaWNoVGV4dENsZWFuYWJsZT4gPT4ge1xyXG4gIGFzc2VydCAmJiBhc3NlcnQoIF8uaW5jbHVkZXMoIGluaGVyaXRhbmNlKCB0eXBlICksIE5vZGUgKSwgJ09ubHkgTm9kZSBzdWJ0eXBlcyBzaG91bGQgbWl4IFBhaW50YWJsZScgKTtcclxuXHJcbiAgcmV0dXJuIGNsYXNzIFJpY2hUZXh0Q2xlYW5hYmxlTWl4aW4gZXh0ZW5kcyB0eXBlIGltcGxlbWVudHMgVFJpY2hUZXh0Q2xlYW5hYmxlIHtcclxuICAgIHB1YmxpYyBnZXQgaXNDbGVhbmFibGUoKTogYm9vbGVhbiB7XHJcbiAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgfVxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVsZWFzZXMgcmVmZXJlbmNlc1xyXG4gICAgICovXHJcbiAgICBwdWJsaWMgY2xlYW4oKTogdm9pZCB7XHJcbiAgICAgIGNvbnN0IHRoaXNOb2RlID0gdGhpcyBhcyB1bmtub3duIGFzIFJpY2hUZXh0Q2xlYW5hYmxlTm9kZTtcclxuXHJcbiAgICAgIC8vIFJlbW92ZSBhbGwgY2hpbGRyZW4gKGFuZCByZWN1cnNpdmVseSBjbGVhbilcclxuICAgICAgZm9yICggbGV0IGkgPSB0aGlzTm9kZS5fY2hpbGRyZW4ubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XHJcbiAgICAgICAgY29uc3QgY2hpbGQgPSB0aGlzTm9kZS5fY2hpbGRyZW5bIGkgXSBhcyBSaWNoVGV4dENsZWFuYWJsZU5vZGU7XHJcblxyXG4gICAgICAgIGlmICggY2hpbGQuaXNDbGVhbmFibGUgKSB7XHJcbiAgICAgICAgICB0aGlzTm9kZS5yZW1vdmVDaGlsZCggY2hpbGQgKTtcclxuICAgICAgICAgIGNoaWxkLmNsZWFuKCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcblxyXG4gICAgICB0aGlzTm9kZS5tYXRyaXggPSBNYXRyaXgzLklERU5USVRZO1xyXG5cclxuICAgICAgdGhpc05vZGUuZnJlZVRvUG9vbCgpO1xyXG4gICAgfVxyXG4gIH07XHJcbn0gKTtcclxuZXhwb3J0IHR5cGUgUmljaFRleHRDbGVhbmFibGVOb2RlID0gTm9kZSAmIFRQb29sYWJsZSAmIFRSaWNoVGV4dENsZWFuYWJsZTtcclxuXHJcbnNjZW5lcnkucmVnaXN0ZXIoICdSaWNoVGV4dENsZWFuYWJsZScsIFJpY2hUZXh0Q2xlYW5hYmxlICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBSaWNoVGV4dENsZWFuYWJsZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLFdBQVcsTUFBTSx5Q0FBeUM7QUFDakUsT0FBT0MsT0FBTyxNQUFNLHFDQUFxQztBQUV6RCxTQUFTQyxJQUFJLEVBQUVDLE9BQU8sUUFBUSxrQkFBa0I7QUFRaEQsTUFBTUMsaUJBQWlCLEdBQUdILE9BQU8sQ0FBbUNJLElBQWUsSUFBbUQ7RUFDcElDLE1BQU0sSUFBSUEsTUFBTSxDQUFFQyxDQUFDLENBQUNDLFFBQVEsQ0FBRVIsV0FBVyxDQUFFSyxJQUFLLENBQUMsRUFBRUgsSUFBSyxDQUFDLEVBQUUseUNBQTBDLENBQUM7RUFFdEcsT0FBTyxNQUFNTyxzQkFBc0IsU0FBU0osSUFBSSxDQUErQjtJQUM3RSxJQUFXSyxXQUFXQSxDQUFBLEVBQVk7TUFDaEMsT0FBTyxJQUFJO0lBQ2I7O0lBRUE7QUFDSjtBQUNBO0lBQ1dDLEtBQUtBLENBQUEsRUFBUztNQUNuQixNQUFNQyxRQUFRLEdBQUcsSUFBd0M7O01BRXpEO01BQ0EsS0FBTSxJQUFJQyxDQUFDLEdBQUdELFFBQVEsQ0FBQ0UsU0FBUyxDQUFDQyxNQUFNLEdBQUcsQ0FBQyxFQUFFRixDQUFDLElBQUksQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRztRQUN6RCxNQUFNRyxLQUFLLEdBQUdKLFFBQVEsQ0FBQ0UsU0FBUyxDQUFFRCxDQUFDLENBQTJCO1FBRTlELElBQUtHLEtBQUssQ0FBQ04sV0FBVyxFQUFHO1VBQ3ZCRSxRQUFRLENBQUNLLFdBQVcsQ0FBRUQsS0FBTSxDQUFDO1VBQzdCQSxLQUFLLENBQUNMLEtBQUssQ0FBQyxDQUFDO1FBQ2Y7TUFDRjtNQUVBQyxRQUFRLENBQUNNLE1BQU0sR0FBR25CLE9BQU8sQ0FBQ29CLFFBQVE7TUFFbENQLFFBQVEsQ0FBQ1EsVUFBVSxDQUFDLENBQUM7SUFDdkI7RUFDRixDQUFDO0FBQ0gsQ0FBRSxDQUFDO0FBR0hqQixPQUFPLENBQUNrQixRQUFRLENBQUUsbUJBQW1CLEVBQUVqQixpQkFBa0IsQ0FBQztBQUUxRCxlQUFlQSxpQkFBaUIiLCJpZ25vcmVMaXN0IjpbXX0=