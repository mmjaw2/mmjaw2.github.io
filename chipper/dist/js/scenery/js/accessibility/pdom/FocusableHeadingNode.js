// Copyright 2022-2024, University of Colorado Boulder

/**
 * A Node represented by a heading in the parallel dom that can receive focus. Typically
 * headings are not focusable and not interactive. But it may be desirable to put focus
 * on a heading to orient the user or control where the traversal order starts without
 * focusing an interactive component.
 *
 * When a screen reader is focused on a heading it will read the name of the heading and
 * possibly the content below it.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import optionize from '../../../../phet-core/js/optionize.js';
import { Node, scenery } from '../../imports.js';

// Available heading levels, according to DOM spec.

class FocusableHeadingNode extends Node {
  // Removes listeners and makes eligible for garbage collection.

  constructor(providedOptions) {
    const options = optionize()({
      headingLevel: 1
    }, providedOptions);
    super(options);
    this.tagName = `h${options.headingLevel}`;

    // This Node is focusable but there is no interactive component to surround with a highlight.
    this.focusHighlight = 'invisible';

    // After losing focus, this element is removed from the traversal order. It can only receive
    // focus again after calling focus() directly.
    const blurListener = {
      blur: () => {
        this.focusable = false;
      }
    };
    this.addInputListener(blurListener);
    this.disposeFocusableHeadingNode = () => {
      this.removeInputListener(blurListener);
    };
  }

  /**
   * Focus this heading in the Parallel DOM. The screen reader will read its name and possibly
   * content below it. Traversal with alternative input will continue from wherever this element
   * is located in the PDOM order.
   *
   * Once the heading loses focus, it is removed from the traversal order until this is called
   * explicitly again.
   */
  focus() {
    this.focusable = true;
    super.focus();
  }
  dispose() {
    this.disposeFocusableHeadingNode();
    super.dispose();
  }
}
scenery.register('FocusableHeadingNode', FocusableHeadingNode);
export default FocusableHeadingNode;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJOb2RlIiwic2NlbmVyeSIsIkZvY3VzYWJsZUhlYWRpbmdOb2RlIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaGVhZGluZ0xldmVsIiwidGFnTmFtZSIsImZvY3VzSGlnaGxpZ2h0IiwiYmx1ckxpc3RlbmVyIiwiYmx1ciIsImZvY3VzYWJsZSIsImFkZElucHV0TGlzdGVuZXIiLCJkaXNwb3NlRm9jdXNhYmxlSGVhZGluZ05vZGUiLCJyZW1vdmVJbnB1dExpc3RlbmVyIiwiZm9jdXMiLCJkaXNwb3NlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGb2N1c2FibGVIZWFkaW5nTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIE5vZGUgcmVwcmVzZW50ZWQgYnkgYSBoZWFkaW5nIGluIHRoZSBwYXJhbGxlbCBkb20gdGhhdCBjYW4gcmVjZWl2ZSBmb2N1cy4gVHlwaWNhbGx5XHJcbiAqIGhlYWRpbmdzIGFyZSBub3QgZm9jdXNhYmxlIGFuZCBub3QgaW50ZXJhY3RpdmUuIEJ1dCBpdCBtYXkgYmUgZGVzaXJhYmxlIHRvIHB1dCBmb2N1c1xyXG4gKiBvbiBhIGhlYWRpbmcgdG8gb3JpZW50IHRoZSB1c2VyIG9yIGNvbnRyb2wgd2hlcmUgdGhlIHRyYXZlcnNhbCBvcmRlciBzdGFydHMgd2l0aG91dFxyXG4gKiBmb2N1c2luZyBhbiBpbnRlcmFjdGl2ZSBjb21wb25lbnQuXHJcbiAqXHJcbiAqIFdoZW4gYSBzY3JlZW4gcmVhZGVyIGlzIGZvY3VzZWQgb24gYSBoZWFkaW5nIGl0IHdpbGwgcmVhZCB0aGUgbmFtZSBvZiB0aGUgaGVhZGluZyBhbmRcclxuICogcG9zc2libHkgdGhlIGNvbnRlbnQgYmVsb3cgaXQuXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBTdHJpY3RPbWl0IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9TdHJpY3RPbWl0LmpzJztcclxuaW1wb3J0IHsgTm9kZSwgTm9kZU9wdGlvbnMsIHNjZW5lcnkgfSBmcm9tICcuLi8uLi9pbXBvcnRzLmpzJztcclxuXHJcbi8vIEF2YWlsYWJsZSBoZWFkaW5nIGxldmVscywgYWNjb3JkaW5nIHRvIERPTSBzcGVjLlxyXG50eXBlIEhlYWRpbmdMZXZlbE51bWJlciA9IDEgfCAyIHwgMyB8IDQgfCA1IHwgNjtcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcblxyXG4gIC8vIFRoZSBoZWFkaW5nIGxldmVsIGZvciB0aGlzIGZvY3VzYWJsZSBoZWFkaW5nIGluIHRoZSBQRE9NLCAxLTYgYWNjb3JkaW5nIHRvIERPTSBzcGVjLlxyXG4gIGhlYWRpbmdMZXZlbD86IEhlYWRpbmdMZXZlbE51bWJlcjtcclxufTtcclxudHlwZSBQYXJlbnRPcHRpb25zID0gU3RyaWN0T21pdDxOb2RlT3B0aW9ucywgJ3RhZ05hbWUnIHwgJ2ZvY3VzSGlnaGxpZ2h0Jz47XHJcbmV4cG9ydCB0eXBlIEZvY3VzYWJsZUhlYWRpbmdOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGFyZW50T3B0aW9ucztcclxuXHJcbmNsYXNzIEZvY3VzYWJsZUhlYWRpbmdOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIC8vIFJlbW92ZXMgbGlzdGVuZXJzIGFuZCBtYWtlcyBlbGlnaWJsZSBmb3IgZ2FyYmFnZSBjb2xsZWN0aW9uLlxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZUZvY3VzYWJsZUhlYWRpbmdOb2RlOiAoKSA9PiB2b2lkO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHByb3ZpZGVkT3B0aW9ucz86IEZvY3VzYWJsZUhlYWRpbmdOb2RlT3B0aW9ucyApIHtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Rm9jdXNhYmxlSGVhZGluZ05vZGVPcHRpb25zLCBTZWxmT3B0aW9ucywgUGFyZW50T3B0aW9ucz4oKSgge1xyXG4gICAgICBoZWFkaW5nTGV2ZWw6IDFcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcblxyXG4gICAgdGhpcy50YWdOYW1lID0gYGgke29wdGlvbnMuaGVhZGluZ0xldmVsfWA7XHJcblxyXG4gICAgLy8gVGhpcyBOb2RlIGlzIGZvY3VzYWJsZSBidXQgdGhlcmUgaXMgbm8gaW50ZXJhY3RpdmUgY29tcG9uZW50IHRvIHN1cnJvdW5kIHdpdGggYSBoaWdobGlnaHQuXHJcbiAgICB0aGlzLmZvY3VzSGlnaGxpZ2h0ID0gJ2ludmlzaWJsZSc7XHJcblxyXG4gICAgLy8gQWZ0ZXIgbG9zaW5nIGZvY3VzLCB0aGlzIGVsZW1lbnQgaXMgcmVtb3ZlZCBmcm9tIHRoZSB0cmF2ZXJzYWwgb3JkZXIuIEl0IGNhbiBvbmx5IHJlY2VpdmVcclxuICAgIC8vIGZvY3VzIGFnYWluIGFmdGVyIGNhbGxpbmcgZm9jdXMoKSBkaXJlY3RseS5cclxuICAgIGNvbnN0IGJsdXJMaXN0ZW5lciA9IHtcclxuICAgICAgYmx1cjogKCkgPT4geyB0aGlzLmZvY3VzYWJsZSA9IGZhbHNlOyB9XHJcbiAgICB9O1xyXG4gICAgdGhpcy5hZGRJbnB1dExpc3RlbmVyKCBibHVyTGlzdGVuZXIgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VGb2N1c2FibGVIZWFkaW5nTm9kZSA9ICgpID0+IHtcclxuICAgICAgdGhpcy5yZW1vdmVJbnB1dExpc3RlbmVyKCBibHVyTGlzdGVuZXIgKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBGb2N1cyB0aGlzIGhlYWRpbmcgaW4gdGhlIFBhcmFsbGVsIERPTS4gVGhlIHNjcmVlbiByZWFkZXIgd2lsbCByZWFkIGl0cyBuYW1lIGFuZCBwb3NzaWJseVxyXG4gICAqIGNvbnRlbnQgYmVsb3cgaXQuIFRyYXZlcnNhbCB3aXRoIGFsdGVybmF0aXZlIGlucHV0IHdpbGwgY29udGludWUgZnJvbSB3aGVyZXZlciB0aGlzIGVsZW1lbnRcclxuICAgKiBpcyBsb2NhdGVkIGluIHRoZSBQRE9NIG9yZGVyLlxyXG4gICAqXHJcbiAgICogT25jZSB0aGUgaGVhZGluZyBsb3NlcyBmb2N1cywgaXQgaXMgcmVtb3ZlZCBmcm9tIHRoZSB0cmF2ZXJzYWwgb3JkZXIgdW50aWwgdGhpcyBpcyBjYWxsZWRcclxuICAgKiBleHBsaWNpdGx5IGFnYWluLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBmb2N1cygpOiB2b2lkIHtcclxuICAgIHRoaXMuZm9jdXNhYmxlID0gdHJ1ZTtcclxuICAgIHN1cGVyLmZvY3VzKCk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZUZvY3VzYWJsZUhlYWRpbmdOb2RlKCk7XHJcbiAgICBzdXBlci5kaXNwb3NlKCk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnRm9jdXNhYmxlSGVhZGluZ05vZGUnLCBGb2N1c2FibGVIZWFkaW5nTm9kZSApO1xyXG5leHBvcnQgZGVmYXVsdCBGb2N1c2FibGVIZWFkaW5nTm9kZTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLHVDQUF1QztBQUU3RCxTQUFTQyxJQUFJLEVBQWVDLE9BQU8sUUFBUSxrQkFBa0I7O0FBRTdEOztBQVdBLE1BQU1DLG9CQUFvQixTQUFTRixJQUFJLENBQUM7RUFFdEM7O0VBR09HLFdBQVdBLENBQUVDLGVBQTZDLEVBQUc7SUFDbEUsTUFBTUMsT0FBTyxHQUFHTixTQUFTLENBQTBELENBQUMsQ0FBRTtNQUNwRk8sWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFBRUYsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztJQUVoQixJQUFJLENBQUNFLE9BQU8sR0FBSSxJQUFHRixPQUFPLENBQUNDLFlBQWEsRUFBQzs7SUFFekM7SUFDQSxJQUFJLENBQUNFLGNBQWMsR0FBRyxXQUFXOztJQUVqQztJQUNBO0lBQ0EsTUFBTUMsWUFBWSxHQUFHO01BQ25CQyxJQUFJLEVBQUVBLENBQUEsS0FBTTtRQUFFLElBQUksQ0FBQ0MsU0FBUyxHQUFHLEtBQUs7TUFBRTtJQUN4QyxDQUFDO0lBQ0QsSUFBSSxDQUFDQyxnQkFBZ0IsQ0FBRUgsWUFBYSxDQUFDO0lBRXJDLElBQUksQ0FBQ0ksMkJBQTJCLEdBQUcsTUFBTTtNQUN2QyxJQUFJLENBQUNDLG1CQUFtQixDQUFFTCxZQUFhLENBQUM7SUFDMUMsQ0FBQztFQUNIOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDa0JNLEtBQUtBLENBQUEsRUFBUztJQUM1QixJQUFJLENBQUNKLFNBQVMsR0FBRyxJQUFJO0lBQ3JCLEtBQUssQ0FBQ0ksS0FBSyxDQUFDLENBQUM7RUFDZjtFQUVnQkMsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUksQ0FBQ0gsMkJBQTJCLENBQUMsQ0FBQztJQUNsQyxLQUFLLENBQUNHLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCO0FBQ0Y7QUFFQWYsT0FBTyxDQUFDZ0IsUUFBUSxDQUFFLHNCQUFzQixFQUFFZixvQkFBcUIsQ0FBQztBQUNoRSxlQUFlQSxvQkFBb0IiLCJpZ25vcmVMaXN0IjpbXX0=