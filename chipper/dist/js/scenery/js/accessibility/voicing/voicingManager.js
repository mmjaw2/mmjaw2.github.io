// Copyright 2020-2024, University of Colorado Boulder

/**
 * Uses the Web Speech API to produce speech from the browser. This is a prototype, DO NOT USE IN PRODUCTION CODE.
 * There is no speech output until the voicingManager has been initialized. Supported voices will depend on platform.
 * For each voice, you can customize the rate and pitch. Only one voicingManager should be active at a time and so this
 * type is a singleton.
 *
 * @author Jesse Greenberg
 */

import SpeechSynthesisAnnouncer from '../../../../utterance-queue/js/SpeechSynthesisAnnouncer.js';
import { globalKeyStateTracker, KeyboardUtils, scenery } from '../../imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
class VoicingManager extends SpeechSynthesisAnnouncer {
  constructor(providedOptions) {
    const options = optionize()({
      // All VoicingManager instances should respect responseCollector's current state.
      respectResponseCollectorProperties: true,
      // phet-io
      phetioDocumentation: 'Announcer that manages the voicing feature, providing audio responses via WebAudio.'
    }, providedOptions);
    super(options);
  }

  /**
   * The initialization with some additional scenery-specific work for voicingManager.
   */
  initialize(userGestureEmitter, options) {
    super.initialize(userGestureEmitter, options);

    // The control key will stop the synth from speaking if there is an active utterance. This key was decided because
    // most major screen readers will stop speech when this key is pressed
    globalKeyStateTracker.keyupEmitter.addListener(domEvent => {
      if (KeyboardUtils.isControlKey(domEvent)) {
        this.cancel();
      }
    });
  }

  /**
   * Returns true if voicing is supported for the provided locale. Currently, only English is supported.
   * @param locale - the locale string
   */
  voicingSupportedForLocale(locale) {
    return locale.startsWith('en');
  }
}
const voicingManager = new VoicingManager();
scenery.register('voicingManager', voicingManager);
export default voicingManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIiLCJnbG9iYWxLZXlTdGF0ZVRyYWNrZXIiLCJLZXlib2FyZFV0aWxzIiwic2NlbmVyeSIsIm9wdGlvbml6ZSIsIlZvaWNpbmdNYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicmVzcGVjdFJlc3BvbnNlQ29sbGVjdG9yUHJvcGVydGllcyIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJpbml0aWFsaXplIiwidXNlckdlc3R1cmVFbWl0dGVyIiwia2V5dXBFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJkb21FdmVudCIsImlzQ29udHJvbEtleSIsImNhbmNlbCIsInZvaWNpbmdTdXBwb3J0ZWRGb3JMb2NhbGUiLCJsb2NhbGUiLCJzdGFydHNXaXRoIiwidm9pY2luZ01hbmFnZXIiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbInZvaWNpbmdNYW5hZ2VyLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFVzZXMgdGhlIFdlYiBTcGVlY2ggQVBJIHRvIHByb2R1Y2Ugc3BlZWNoIGZyb20gdGhlIGJyb3dzZXIuIFRoaXMgaXMgYSBwcm90b3R5cGUsIERPIE5PVCBVU0UgSU4gUFJPRFVDVElPTiBDT0RFLlxyXG4gKiBUaGVyZSBpcyBubyBzcGVlY2ggb3V0cHV0IHVudGlsIHRoZSB2b2ljaW5nTWFuYWdlciBoYXMgYmVlbiBpbml0aWFsaXplZC4gU3VwcG9ydGVkIHZvaWNlcyB3aWxsIGRlcGVuZCBvbiBwbGF0Zm9ybS5cclxuICogRm9yIGVhY2ggdm9pY2UsIHlvdSBjYW4gY3VzdG9taXplIHRoZSByYXRlIGFuZCBwaXRjaC4gT25seSBvbmUgdm9pY2luZ01hbmFnZXIgc2hvdWxkIGJlIGFjdGl2ZSBhdCBhIHRpbWUgYW5kIHNvIHRoaXNcclxuICogdHlwZSBpcyBhIHNpbmdsZXRvbi5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgU3BlZWNoU3ludGhlc2lzQW5ub3VuY2VyLCB7IFNwZWVjaFN5bnRoZXNpc0Fubm91bmNlck9wdGlvbnMsIFNwZWVjaFN5bnRoZXNpc0luaXRpYWxpemVPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vLi4vdXR0ZXJhbmNlLXF1ZXVlL2pzL1NwZWVjaFN5bnRoZXNpc0Fubm91bmNlci5qcyc7XHJcbmltcG9ydCB7IGdsb2JhbEtleVN0YXRlVHJhY2tlciwgS2V5Ym9hcmRVdGlscywgc2NlbmVyeSB9IGZyb20gJy4uLy4uL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgVFJlYWRPbmx5RW1pdHRlciB9IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVEVtaXR0ZXIuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbnR5cGUgVm9pY2luZ01hbmFnZXJPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXJPcHRpb25zO1xyXG5cclxuY2xhc3MgVm9pY2luZ01hbmFnZXIgZXh0ZW5kcyBTcGVlY2hTeW50aGVzaXNBbm5vdW5jZXIge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogVm9pY2luZ01hbmFnZXJPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8Vm9pY2luZ01hbmFnZXJPcHRpb25zLCBTZWxmT3B0aW9ucywgU3BlZWNoU3ludGhlc2lzQW5ub3VuY2VyT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gQWxsIFZvaWNpbmdNYW5hZ2VyIGluc3RhbmNlcyBzaG91bGQgcmVzcGVjdCByZXNwb25zZUNvbGxlY3RvcidzIGN1cnJlbnQgc3RhdGUuXHJcbiAgICAgIHJlc3BlY3RSZXNwb25zZUNvbGxlY3RvclByb3BlcnRpZXM6IHRydWUsXHJcblxyXG4gICAgICAvLyBwaGV0LWlvXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdBbm5vdW5jZXIgdGhhdCBtYW5hZ2VzIHRoZSB2b2ljaW5nIGZlYXR1cmUsIHByb3ZpZGluZyBhdWRpbyByZXNwb25zZXMgdmlhIFdlYkF1ZGlvLidcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBUaGUgaW5pdGlhbGl6YXRpb24gd2l0aCBzb21lIGFkZGl0aW9uYWwgc2NlbmVyeS1zcGVjaWZpYyB3b3JrIGZvciB2b2ljaW5nTWFuYWdlci5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgaW5pdGlhbGl6ZSggdXNlckdlc3R1cmVFbWl0dGVyOiBUUmVhZE9ubHlFbWl0dGVyLCBvcHRpb25zPzogU3BlZWNoU3ludGhlc2lzSW5pdGlhbGl6ZU9wdGlvbnMgKTogdm9pZCB7XHJcbiAgICBzdXBlci5pbml0aWFsaXplKCB1c2VyR2VzdHVyZUVtaXR0ZXIsIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBUaGUgY29udHJvbCBrZXkgd2lsbCBzdG9wIHRoZSBzeW50aCBmcm9tIHNwZWFraW5nIGlmIHRoZXJlIGlzIGFuIGFjdGl2ZSB1dHRlcmFuY2UuIFRoaXMga2V5IHdhcyBkZWNpZGVkIGJlY2F1c2VcclxuICAgIC8vIG1vc3QgbWFqb3Igc2NyZWVuIHJlYWRlcnMgd2lsbCBzdG9wIHNwZWVjaCB3aGVuIHRoaXMga2V5IGlzIHByZXNzZWRcclxuICAgIGdsb2JhbEtleVN0YXRlVHJhY2tlci5rZXl1cEVtaXR0ZXIuYWRkTGlzdGVuZXIoIGRvbUV2ZW50ID0+IHtcclxuICAgICAgaWYgKCBLZXlib2FyZFV0aWxzLmlzQ29udHJvbEtleSggZG9tRXZlbnQgKSApIHtcclxuICAgICAgICB0aGlzLmNhbmNlbCgpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIHRydWUgaWYgdm9pY2luZyBpcyBzdXBwb3J0ZWQgZm9yIHRoZSBwcm92aWRlZCBsb2NhbGUuIEN1cnJlbnRseSwgb25seSBFbmdsaXNoIGlzIHN1cHBvcnRlZC5cclxuICAgKiBAcGFyYW0gbG9jYWxlIC0gdGhlIGxvY2FsZSBzdHJpbmdcclxuICAgKi9cclxuICBwdWJsaWMgdm9pY2luZ1N1cHBvcnRlZEZvckxvY2FsZSggbG9jYWxlOiBzdHJpbmcgKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gbG9jYWxlLnN0YXJ0c1dpdGgoICdlbicgKTtcclxuICB9XHJcbn1cclxuXHJcbmNvbnN0IHZvaWNpbmdNYW5hZ2VyID0gbmV3IFZvaWNpbmdNYW5hZ2VyKCk7XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAndm9pY2luZ01hbmFnZXInLCB2b2ljaW5nTWFuYWdlciApO1xyXG5leHBvcnQgZGVmYXVsdCB2b2ljaW5nTWFuYWdlcjsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0Esd0JBQXdCLE1BQTZFLDREQUE0RDtBQUN4SyxTQUFTQyxxQkFBcUIsRUFBRUMsYUFBYSxFQUFFQyxPQUFPLFFBQVEsa0JBQWtCO0FBQ2hGLE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBTW5GLE1BQU1DLGNBQWMsU0FBU0wsd0JBQXdCLENBQUM7RUFDN0NNLFdBQVdBLENBQUVDLGVBQXVDLEVBQUc7SUFFNUQsTUFBTUMsT0FBTyxHQUFHSixTQUFTLENBQXNFLENBQUMsQ0FBRTtNQUVoRztNQUNBSyxrQ0FBa0MsRUFBRSxJQUFJO01BRXhDO01BQ0FDLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQztJQUVwQixLQUFLLENBQUVDLE9BQVEsQ0FBQztFQUNsQjs7RUFFQTtBQUNGO0FBQ0E7RUFDa0JHLFVBQVVBLENBQUVDLGtCQUFvQyxFQUFFSixPQUEwQyxFQUFTO0lBQ25ILEtBQUssQ0FBQ0csVUFBVSxDQUFFQyxrQkFBa0IsRUFBRUosT0FBUSxDQUFDOztJQUUvQztJQUNBO0lBQ0FQLHFCQUFxQixDQUFDWSxZQUFZLENBQUNDLFdBQVcsQ0FBRUMsUUFBUSxJQUFJO01BQzFELElBQUtiLGFBQWEsQ0FBQ2MsWUFBWSxDQUFFRCxRQUFTLENBQUMsRUFBRztRQUM1QyxJQUFJLENBQUNFLE1BQU0sQ0FBQyxDQUFDO01BQ2Y7SUFDRixDQUFFLENBQUM7RUFDTDs7RUFFQTtBQUNGO0FBQ0E7QUFDQTtFQUNTQyx5QkFBeUJBLENBQUVDLE1BQWMsRUFBWTtJQUMxRCxPQUFPQSxNQUFNLENBQUNDLFVBQVUsQ0FBRSxJQUFLLENBQUM7RUFDbEM7QUFDRjtBQUVBLE1BQU1DLGNBQWMsR0FBRyxJQUFJaEIsY0FBYyxDQUFDLENBQUM7QUFFM0NGLE9BQU8sQ0FBQ21CLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRUQsY0FBZSxDQUFDO0FBQ3BELGVBQWVBLGNBQWMiLCJpZ25vcmVMaXN0IjpbXX0=