// Copyright 2021-2024, University of Colorado Boulder

/**
 * Like ManualConstraint, but permits layout when not all the nodes are connected (null will be passed through).
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { LayoutCell, LayoutConstraint, Node, scenery } from '../../imports.js';

// Turns a tuple of things into a tuple of LayoutProxies/null

export default class RelaxedManualConstraint extends LayoutConstraint {
  // Cells provide us LayoutProxy and connection tracking

  // The user-supplied callback that should be called to do layout

  constructor(ancestorNode, nodes, layoutCallback) {
    assert && assert(Array.isArray(nodes) && _.every(nodes, node => node instanceof Node));
    super(ancestorNode);

    // Don't churn updates during construction
    this.lock();
    this.nodes = nodes;

    // Having cells will give us proxy Properties and listening for when it's added for free
    this.cells = nodes.map(node => new LayoutCell(this, node, null));
    this.layoutCallback = layoutCallback;

    // Hook up to listen to these nodes (will be handled by LayoutConstraint disposal)
    this.nodes.forEach(node => this.addNode(node, false));

    // Run the layout manually at the start
    this.unlock();
    this.updateLayout();
  }

  /**
   * (scenery-internal)
   */
  layout() {
    super.layout();
    assert && assert(_.every(this.nodes, node => !node.isDisposed));

    // If a cell is disconnected, pass in null
    const proxies = this.cells.map(cell => cell.isConnected() ? cell.proxy : null);
    this.layoutCallback.apply(null, proxies);
    this.finishedLayoutEmitter.emit();
  }

  /**
   * Releases references
   */
  dispose() {
    this.cells.forEach(cell => cell.dispose());
    super.dispose();
  }
  static create(ancestorNode, nodes, layoutCallback) {
    return new RelaxedManualConstraint(ancestorNode, nodes, layoutCallback);
  }
}
scenery.register('RelaxedManualConstraint', RelaxedManualConstraint);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMYXlvdXRDZWxsIiwiTGF5b3V0Q29uc3RyYWludCIsIk5vZGUiLCJzY2VuZXJ5IiwiUmVsYXhlZE1hbnVhbENvbnN0cmFpbnQiLCJjb25zdHJ1Y3RvciIsImFuY2VzdG9yTm9kZSIsIm5vZGVzIiwibGF5b3V0Q2FsbGJhY2siLCJhc3NlcnQiLCJBcnJheSIsImlzQXJyYXkiLCJfIiwiZXZlcnkiLCJub2RlIiwibG9jayIsImNlbGxzIiwibWFwIiwiZm9yRWFjaCIsImFkZE5vZGUiLCJ1bmxvY2siLCJ1cGRhdGVMYXlvdXQiLCJsYXlvdXQiLCJpc0Rpc3Bvc2VkIiwicHJveGllcyIsImNlbGwiLCJpc0Nvbm5lY3RlZCIsInByb3h5IiwiYXBwbHkiLCJmaW5pc2hlZExheW91dEVtaXR0ZXIiLCJlbWl0IiwiZGlzcG9zZSIsImNyZWF0ZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVsYXhlZE1hbnVhbENvbnN0cmFpbnQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTGlrZSBNYW51YWxDb25zdHJhaW50LCBidXQgcGVybWl0cyBsYXlvdXQgd2hlbiBub3QgYWxsIHRoZSBub2RlcyBhcmUgY29ubmVjdGVkIChudWxsIHdpbGwgYmUgcGFzc2VkIHRocm91Z2gpLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XHJcbmltcG9ydCB7IExheW91dENlbGwsIExheW91dENvbnN0cmFpbnQsIExheW91dFByb3h5LCBOb2RlLCBzY2VuZXJ5IH0gZnJvbSAnLi4vLi4vaW1wb3J0cy5qcyc7XHJcblxyXG4vLyBUdXJucyBhIHR1cGxlIG9mIHRoaW5ncyBpbnRvIGEgdHVwbGUgb2YgTGF5b3V0UHJveGllcy9udWxsXHJcbnR5cGUgTGF5b3V0UHJveHlNYXA8VD4gPSB7XHJcbiAgW1Byb3BlcnR5IGluIGtleW9mIFRdOiBMYXlvdXRQcm94eSB8IG51bGxcclxufTtcclxudHlwZSBMYXlvdXRDYWxsYmFjazxUIGV4dGVuZHMgSW50ZW50aW9uYWxBbnlbXT4gPSAoIC4uLmFyZ3M6IExheW91dFByb3h5TWFwPFQ+ICkgPT4gdm9pZDtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFJlbGF4ZWRNYW51YWxDb25zdHJhaW50PFQgZXh0ZW5kcyBOb2RlW10+IGV4dGVuZHMgTGF5b3V0Q29uc3RyYWludCB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgbm9kZXM6IFQ7XHJcblxyXG4gIC8vIENlbGxzIHByb3ZpZGUgdXMgTGF5b3V0UHJveHkgYW5kIGNvbm5lY3Rpb24gdHJhY2tpbmdcclxuICBwcml2YXRlIHJlYWRvbmx5IGNlbGxzOiBMYXlvdXRDZWxsW107XHJcblxyXG4gIC8vIFRoZSB1c2VyLXN1cHBsaWVkIGNhbGxiYWNrIHRoYXQgc2hvdWxkIGJlIGNhbGxlZCB0byBkbyBsYXlvdXRcclxuICBwcml2YXRlIHJlYWRvbmx5IGxheW91dENhbGxiYWNrOiBMYXlvdXRDYWxsYmFjazxUPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBhbmNlc3Rvck5vZGU6IE5vZGUsIG5vZGVzOiBULCBsYXlvdXRDYWxsYmFjazogTGF5b3V0Q2FsbGJhY2s8VD4gKSB7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBBcnJheS5pc0FycmF5KCBub2RlcyApICYmIF8uZXZlcnkoIG5vZGVzLCBub2RlID0+IG5vZGUgaW5zdGFuY2VvZiBOb2RlICkgKTtcclxuXHJcbiAgICBzdXBlciggYW5jZXN0b3JOb2RlICk7XHJcblxyXG4gICAgLy8gRG9uJ3QgY2h1cm4gdXBkYXRlcyBkdXJpbmcgY29uc3RydWN0aW9uXHJcbiAgICB0aGlzLmxvY2soKTtcclxuXHJcbiAgICB0aGlzLm5vZGVzID0gbm9kZXM7XHJcblxyXG4gICAgLy8gSGF2aW5nIGNlbGxzIHdpbGwgZ2l2ZSB1cyBwcm94eSBQcm9wZXJ0aWVzIGFuZCBsaXN0ZW5pbmcgZm9yIHdoZW4gaXQncyBhZGRlZCBmb3IgZnJlZVxyXG4gICAgdGhpcy5jZWxscyA9IG5vZGVzLm1hcCggbm9kZSA9PiBuZXcgTGF5b3V0Q2VsbCggdGhpcywgbm9kZSwgbnVsbCApICk7XHJcblxyXG4gICAgdGhpcy5sYXlvdXRDYWxsYmFjayA9IGxheW91dENhbGxiYWNrO1xyXG5cclxuICAgIC8vIEhvb2sgdXAgdG8gbGlzdGVuIHRvIHRoZXNlIG5vZGVzICh3aWxsIGJlIGhhbmRsZWQgYnkgTGF5b3V0Q29uc3RyYWludCBkaXNwb3NhbClcclxuICAgIHRoaXMubm9kZXMuZm9yRWFjaCggbm9kZSA9PiB0aGlzLmFkZE5vZGUoIG5vZGUsIGZhbHNlICkgKTtcclxuXHJcbiAgICAvLyBSdW4gdGhlIGxheW91dCBtYW51YWxseSBhdCB0aGUgc3RhcnRcclxuICAgIHRoaXMudW5sb2NrKCk7XHJcbiAgICB0aGlzLnVwZGF0ZUxheW91dCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogKHNjZW5lcnktaW50ZXJuYWwpXHJcbiAgICovXHJcbiAgcHVibGljIG92ZXJyaWRlIGxheW91dCgpOiB2b2lkIHtcclxuICAgIHN1cGVyLmxheW91dCgpO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIF8uZXZlcnkoIHRoaXMubm9kZXMsIG5vZGUgPT4gIW5vZGUuaXNEaXNwb3NlZCApICk7XHJcblxyXG4gICAgLy8gSWYgYSBjZWxsIGlzIGRpc2Nvbm5lY3RlZCwgcGFzcyBpbiBudWxsXHJcbiAgICBjb25zdCBwcm94aWVzID0gdGhpcy5jZWxscy5tYXAoIGNlbGwgPT4gY2VsbC5pc0Nvbm5lY3RlZCgpID8gY2VsbC5wcm94eSA6IG51bGwgKTtcclxuXHJcbiAgICB0aGlzLmxheW91dENhbGxiYWNrLmFwcGx5KCBudWxsLCBwcm94aWVzIGFzIExheW91dFByb3h5TWFwPFQ+ICk7XHJcblxyXG4gICAgdGhpcy5maW5pc2hlZExheW91dEVtaXR0ZXIuZW1pdCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVsZWFzZXMgcmVmZXJlbmNlc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jZWxscy5mb3JFYWNoKCBjZWxsID0+IGNlbGwuZGlzcG9zZSgpICk7XHJcblxyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGU8VCBleHRlbmRzIE5vZGVbXT4oIGFuY2VzdG9yTm9kZTogTm9kZSwgbm9kZXM6IFQsIGxheW91dENhbGxiYWNrOiBMYXlvdXRDYWxsYmFjazxUPiApOiBSZWxheGVkTWFudWFsQ29uc3RyYWludDxUPiB7XHJcbiAgICByZXR1cm4gbmV3IFJlbGF4ZWRNYW51YWxDb25zdHJhaW50KCBhbmNlc3Rvck5vZGUsIG5vZGVzLCBsYXlvdXRDYWxsYmFjayApO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ1JlbGF4ZWRNYW51YWxDb25zdHJhaW50JywgUmVsYXhlZE1hbnVhbENvbnN0cmFpbnQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsU0FBU0EsVUFBVSxFQUFFQyxnQkFBZ0IsRUFBZUMsSUFBSSxFQUFFQyxPQUFPLFFBQVEsa0JBQWtCOztBQUUzRjs7QUFNQSxlQUFlLE1BQU1DLHVCQUF1QixTQUEyQkgsZ0JBQWdCLENBQUM7RUFJdEY7O0VBR0E7O0VBR09JLFdBQVdBLENBQUVDLFlBQWtCLEVBQUVDLEtBQVEsRUFBRUMsY0FBaUMsRUFBRztJQUNwRkMsTUFBTSxJQUFJQSxNQUFNLENBQUVDLEtBQUssQ0FBQ0MsT0FBTyxDQUFFSixLQUFNLENBQUMsSUFBSUssQ0FBQyxDQUFDQyxLQUFLLENBQUVOLEtBQUssRUFBRU8sSUFBSSxJQUFJQSxJQUFJLFlBQVlaLElBQUssQ0FBRSxDQUFDO0lBRTVGLEtBQUssQ0FBRUksWUFBYSxDQUFDOztJQUVyQjtJQUNBLElBQUksQ0FBQ1MsSUFBSSxDQUFDLENBQUM7SUFFWCxJQUFJLENBQUNSLEtBQUssR0FBR0EsS0FBSzs7SUFFbEI7SUFDQSxJQUFJLENBQUNTLEtBQUssR0FBR1QsS0FBSyxDQUFDVSxHQUFHLENBQUVILElBQUksSUFBSSxJQUFJZCxVQUFVLENBQUUsSUFBSSxFQUFFYyxJQUFJLEVBQUUsSUFBSyxDQUFFLENBQUM7SUFFcEUsSUFBSSxDQUFDTixjQUFjLEdBQUdBLGNBQWM7O0lBRXBDO0lBQ0EsSUFBSSxDQUFDRCxLQUFLLENBQUNXLE9BQU8sQ0FBRUosSUFBSSxJQUFJLElBQUksQ0FBQ0ssT0FBTyxDQUFFTCxJQUFJLEVBQUUsS0FBTSxDQUFFLENBQUM7O0lBRXpEO0lBQ0EsSUFBSSxDQUFDTSxNQUFNLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQ0MsWUFBWSxDQUFDLENBQUM7RUFDckI7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCQyxNQUFNQSxDQUFBLEVBQVM7SUFDN0IsS0FBSyxDQUFDQSxNQUFNLENBQUMsQ0FBQztJQUVkYixNQUFNLElBQUlBLE1BQU0sQ0FBRUcsQ0FBQyxDQUFDQyxLQUFLLENBQUUsSUFBSSxDQUFDTixLQUFLLEVBQUVPLElBQUksSUFBSSxDQUFDQSxJQUFJLENBQUNTLFVBQVcsQ0FBRSxDQUFDOztJQUVuRTtJQUNBLE1BQU1DLE9BQU8sR0FBRyxJQUFJLENBQUNSLEtBQUssQ0FBQ0MsR0FBRyxDQUFFUSxJQUFJLElBQUlBLElBQUksQ0FBQ0MsV0FBVyxDQUFDLENBQUMsR0FBR0QsSUFBSSxDQUFDRSxLQUFLLEdBQUcsSUFBSyxDQUFDO0lBRWhGLElBQUksQ0FBQ25CLGNBQWMsQ0FBQ29CLEtBQUssQ0FBRSxJQUFJLEVBQUVKLE9BQTZCLENBQUM7SUFFL0QsSUFBSSxDQUFDSyxxQkFBcUIsQ0FBQ0MsSUFBSSxDQUFDLENBQUM7RUFDbkM7O0VBRUE7QUFDRjtBQUNBO0VBQ2tCQyxPQUFPQSxDQUFBLEVBQVM7SUFDOUIsSUFBSSxDQUFDZixLQUFLLENBQUNFLE9BQU8sQ0FBRU8sSUFBSSxJQUFJQSxJQUFJLENBQUNNLE9BQU8sQ0FBQyxDQUFFLENBQUM7SUFFNUMsS0FBSyxDQUFDQSxPQUFPLENBQUMsQ0FBQztFQUNqQjtFQUVBLE9BQWNDLE1BQU1BLENBQW9CMUIsWUFBa0IsRUFBRUMsS0FBUSxFQUFFQyxjQUFpQyxFQUErQjtJQUNwSSxPQUFPLElBQUlKLHVCQUF1QixDQUFFRSxZQUFZLEVBQUVDLEtBQUssRUFBRUMsY0FBZSxDQUFDO0VBQzNFO0FBQ0Y7QUFFQUwsT0FBTyxDQUFDOEIsUUFBUSxDQUFFLHlCQUF5QixFQUFFN0IsdUJBQXdCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=