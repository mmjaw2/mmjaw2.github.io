// Copyright 2021-2024, University of Colorado Boulder

/**
 * A configurable cell containing a Node used for FlowConstraint layout
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { FLOW_CONFIGURABLE_OPTION_KEYS, FlowConfigurable, MarginLayoutCell, scenery } from '../../imports.js';
import optionize from '../../../../phet-core/js/optionize.js';
const FLOW_CELL_KEYS = [...FLOW_CONFIGURABLE_OPTION_KEYS, 'isSeparator'];
export default class FlowCell extends FlowConfigurable(MarginLayoutCell) {
  // (scenery-internal) Set during FlowConstraint layout
  size = 0;

  // (scenery-internal)
  _isSeparator = false;
  constructor(constraint, node, proxy) {
    super(constraint, node, proxy);
    this.flowConstraint = constraint;
    this.orientation = constraint.orientation;
    this.onLayoutOptionsChange();
  }

  // The used value, with this cell's value taking precedence over the constraint's default
  get effectiveAlign() {
    return this._align !== null ? this._align : this.flowConstraint._align;
  }

  // The used value, with this cell's value taking precedence over the constraint's default
  get effectiveStretch() {
    return this._stretch !== null ? this._stretch : this.flowConstraint._stretch;
  }

  // The used value, with this cell's value taking precedence over the constraint's default
  get effectiveGrow() {
    return this._grow !== null ? this._grow : this.flowConstraint._grow;
  }
  onLayoutOptionsChange() {
    if (this.node.layoutOptions) {
      this.setOptions(this.node.layoutOptions);
    }
    super.onLayoutOptionsChange();
  }
  setOptions(providedOptions) {
    const options = optionize()({
      isSeparator: false
    }, providedOptions);
    assert && Object.keys(options).forEach(key => {
      assert && assert(FLOW_CELL_KEYS.includes(key), `Cannot provide key ${key} to a FlowCell's layoutOptions. Perhaps this is a Grid-style layout option?`);
    });
    this._isSeparator = options.isSeparator;

    // Clear options that are not provided in the mutate options (but if they are present, do NOT clear, so we avoid
    // more potential for infinite loops)
    this.setConfigToInherit(options);
    this.mutateConfigurable(options);
  }
}
scenery.register('FlowCell', FlowCell);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJGTE9XX0NPTkZJR1VSQUJMRV9PUFRJT05fS0VZUyIsIkZsb3dDb25maWd1cmFibGUiLCJNYXJnaW5MYXlvdXRDZWxsIiwic2NlbmVyeSIsIm9wdGlvbml6ZSIsIkZMT1dfQ0VMTF9LRVlTIiwiRmxvd0NlbGwiLCJzaXplIiwiX2lzU2VwYXJhdG9yIiwiY29uc3RydWN0b3IiLCJjb25zdHJhaW50Iiwibm9kZSIsInByb3h5IiwiZmxvd0NvbnN0cmFpbnQiLCJvcmllbnRhdGlvbiIsIm9uTGF5b3V0T3B0aW9uc0NoYW5nZSIsImVmZmVjdGl2ZUFsaWduIiwiX2FsaWduIiwiZWZmZWN0aXZlU3RyZXRjaCIsIl9zdHJldGNoIiwiZWZmZWN0aXZlR3JvdyIsIl9ncm93IiwibGF5b3V0T3B0aW9ucyIsInNldE9wdGlvbnMiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiaXNTZXBhcmF0b3IiLCJhc3NlcnQiLCJPYmplY3QiLCJrZXlzIiwiZm9yRWFjaCIsImtleSIsImluY2x1ZGVzIiwic2V0Q29uZmlnVG9Jbmhlcml0IiwibXV0YXRlQ29uZmlndXJhYmxlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJGbG93Q2VsbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGNvbmZpZ3VyYWJsZSBjZWxsIGNvbnRhaW5pbmcgYSBOb2RlIHVzZWQgZm9yIEZsb3dDb25zdHJhaW50IGxheW91dFxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IHsgRXh0ZXJuYWxGbG93Q29uZmlndXJhYmxlT3B0aW9ucywgRkxPV19DT05GSUdVUkFCTEVfT1BUSU9OX0tFWVMsIEZsb3dDb25maWd1cmFibGUsIEZsb3dDb25zdHJhaW50LCBMYXlvdXRBbGlnbiwgTGF5b3V0UHJveHksIE1hcmdpbkxheW91dENlbGwsIE5vZGUsIHNjZW5lcnkgfSBmcm9tICcuLi8uLi9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxuY29uc3QgRkxPV19DRUxMX0tFWVMgPSBbXHJcbiAgLi4uRkxPV19DT05GSUdVUkFCTEVfT1BUSU9OX0tFWVMsXHJcbiAgJ2lzU2VwYXJhdG9yJ1xyXG5dO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICAvLyBBbGxvd3MgbWFya2luZyBhIGNlbGwgYXMgYSBcInNlcGFyYXRvclwiLCBzdWNoIHRoYXQgbXVsdGlwbGUgYWRqYWNlbnQgc2VwYXJhdG9ycyAoYW5kIHRob3NlIGF0IHRoZSBzdGFydC9lbmQpIGdldFxyXG4gIC8vIGNvbGxhcHNlZCAoYWxsIGJ1dCB0aGUgZmlyc3QgYXJlIG5vdCBpbmNsdWRlZCBpbiBsYXlvdXQgQU5EIG1hZGUgaW52aXNpYmxlKVxyXG4gIGlzU2VwYXJhdG9yPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEZsb3dDZWxsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgU3RyaWN0T21pdDxFeHRlcm5hbEZsb3dDb25maWd1cmFibGVPcHRpb25zLCAnb3JpZW50YXRpb24nPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEZsb3dDZWxsIGV4dGVuZHMgRmxvd0NvbmZpZ3VyYWJsZSggTWFyZ2luTGF5b3V0Q2VsbCApIHtcclxuXHJcbiAgLy8gKHNjZW5lcnktaW50ZXJuYWwpIFNldCBkdXJpbmcgRmxvd0NvbnN0cmFpbnQgbGF5b3V0XHJcbiAgcHVibGljIHNpemUgPSAwO1xyXG5cclxuICAvLyAoc2NlbmVyeS1pbnRlcm5hbClcclxuICBwdWJsaWMgX2lzU2VwYXJhdG9yID0gZmFsc2U7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZmxvd0NvbnN0cmFpbnQ6IEZsb3dDb25zdHJhaW50O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvbnN0cmFpbnQ6IEZsb3dDb25zdHJhaW50LCBub2RlOiBOb2RlLCBwcm94eTogTGF5b3V0UHJveHkgfCBudWxsICkge1xyXG4gICAgc3VwZXIoIGNvbnN0cmFpbnQsIG5vZGUsIHByb3h5ICk7XHJcblxyXG4gICAgdGhpcy5mbG93Q29uc3RyYWludCA9IGNvbnN0cmFpbnQ7XHJcblxyXG4gICAgdGhpcy5vcmllbnRhdGlvbiA9IGNvbnN0cmFpbnQub3JpZW50YXRpb247XHJcbiAgICB0aGlzLm9uTGF5b3V0T3B0aW9uc0NoYW5nZSgpO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhlIHVzZWQgdmFsdWUsIHdpdGggdGhpcyBjZWxsJ3MgdmFsdWUgdGFraW5nIHByZWNlZGVuY2Ugb3ZlciB0aGUgY29uc3RyYWludCdzIGRlZmF1bHRcclxuICBwdWJsaWMgZ2V0IGVmZmVjdGl2ZUFsaWduKCk6IExheW91dEFsaWduIHtcclxuICAgIHJldHVybiB0aGlzLl9hbGlnbiAhPT0gbnVsbCA/IHRoaXMuX2FsaWduIDogdGhpcy5mbG93Q29uc3RyYWludC5fYWxpZ24hO1xyXG4gIH1cclxuXHJcbiAgLy8gVGhlIHVzZWQgdmFsdWUsIHdpdGggdGhpcyBjZWxsJ3MgdmFsdWUgdGFraW5nIHByZWNlZGVuY2Ugb3ZlciB0aGUgY29uc3RyYWludCdzIGRlZmF1bHRcclxuICBwdWJsaWMgZ2V0IGVmZmVjdGl2ZVN0cmV0Y2goKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3RyZXRjaCAhPT0gbnVsbCA/IHRoaXMuX3N0cmV0Y2ggOiB0aGlzLmZsb3dDb25zdHJhaW50Ll9zdHJldGNoITtcclxuICB9XHJcblxyXG4gIC8vIFRoZSB1c2VkIHZhbHVlLCB3aXRoIHRoaXMgY2VsbCdzIHZhbHVlIHRha2luZyBwcmVjZWRlbmNlIG92ZXIgdGhlIGNvbnN0cmFpbnQncyBkZWZhdWx0XHJcbiAgcHVibGljIGdldCBlZmZlY3RpdmVHcm93KCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZ3JvdyAhPT0gbnVsbCA/IHRoaXMuX2dyb3cgOiB0aGlzLmZsb3dDb25zdHJhaW50Ll9ncm93ITtcclxuICB9XHJcblxyXG4gIHByb3RlY3RlZCBvdmVycmlkZSBvbkxheW91dE9wdGlvbnNDaGFuZ2UoKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMubm9kZS5sYXlvdXRPcHRpb25zICkge1xyXG4gICAgICB0aGlzLnNldE9wdGlvbnMoIHRoaXMubm9kZS5sYXlvdXRPcHRpb25zIGFzIEV4dGVybmFsRmxvd0NvbmZpZ3VyYWJsZU9wdGlvbnMgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBlci5vbkxheW91dE9wdGlvbnNDaGFuZ2UoKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc2V0T3B0aW9ucyggcHJvdmlkZWRPcHRpb25zPzogRXh0ZXJuYWxGbG93Q29uZmlndXJhYmxlT3B0aW9ucyApOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPEZsb3dDZWxsT3B0aW9ucywgU2VsZk9wdGlvbnMsIEV4dGVybmFsRmxvd0NvbmZpZ3VyYWJsZU9wdGlvbnM+KCkoIHtcclxuICAgICAgaXNTZXBhcmF0b3I6IGZhbHNlXHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBhc3NlcnQgJiYgT2JqZWN0LmtleXMoIG9wdGlvbnMgKS5mb3JFYWNoKCBrZXkgPT4ge1xyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBGTE9XX0NFTExfS0VZUy5pbmNsdWRlcygga2V5ICksIGBDYW5ub3QgcHJvdmlkZSBrZXkgJHtrZXl9IHRvIGEgRmxvd0NlbGwncyBsYXlvdXRPcHRpb25zLiBQZXJoYXBzIHRoaXMgaXMgYSBHcmlkLXN0eWxlIGxheW91dCBvcHRpb24/YCApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuX2lzU2VwYXJhdG9yID0gb3B0aW9ucy5pc1NlcGFyYXRvcjtcclxuXHJcbiAgICAvLyBDbGVhciBvcHRpb25zIHRoYXQgYXJlIG5vdCBwcm92aWRlZCBpbiB0aGUgbXV0YXRlIG9wdGlvbnMgKGJ1dCBpZiB0aGV5IGFyZSBwcmVzZW50LCBkbyBOT1QgY2xlYXIsIHNvIHdlIGF2b2lkXHJcbiAgICAvLyBtb3JlIHBvdGVudGlhbCBmb3IgaW5maW5pdGUgbG9vcHMpXHJcbiAgICB0aGlzLnNldENvbmZpZ1RvSW5oZXJpdCggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMubXV0YXRlQ29uZmlndXJhYmxlKCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG5zY2VuZXJ5LnJlZ2lzdGVyKCAnRmxvd0NlbGwnLCBGbG93Q2VsbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUEwQ0EsNkJBQTZCLEVBQUVDLGdCQUFnQixFQUE0Q0MsZ0JBQWdCLEVBQVFDLE9BQU8sUUFBUSxrQkFBa0I7QUFFOUwsT0FBT0MsU0FBUyxNQUFNLHVDQUF1QztBQUU3RCxNQUFNQyxjQUFjLEdBQUcsQ0FDckIsR0FBR0wsNkJBQTZCLEVBQ2hDLGFBQWEsQ0FDZDtBQVVELGVBQWUsTUFBTU0sUUFBUSxTQUFTTCxnQkFBZ0IsQ0FBRUMsZ0JBQWlCLENBQUMsQ0FBQztFQUV6RTtFQUNPSyxJQUFJLEdBQUcsQ0FBQzs7RUFFZjtFQUNPQyxZQUFZLEdBQUcsS0FBSztFQUlwQkMsV0FBV0EsQ0FBRUMsVUFBMEIsRUFBRUMsSUFBVSxFQUFFQyxLQUF5QixFQUFHO0lBQ3RGLEtBQUssQ0FBRUYsVUFBVSxFQUFFQyxJQUFJLEVBQUVDLEtBQU0sQ0FBQztJQUVoQyxJQUFJLENBQUNDLGNBQWMsR0FBR0gsVUFBVTtJQUVoQyxJQUFJLENBQUNJLFdBQVcsR0FBR0osVUFBVSxDQUFDSSxXQUFXO0lBQ3pDLElBQUksQ0FBQ0MscUJBQXFCLENBQUMsQ0FBQztFQUM5Qjs7RUFFQTtFQUNBLElBQVdDLGNBQWNBLENBQUEsRUFBZ0I7SUFDdkMsT0FBTyxJQUFJLENBQUNDLE1BQU0sS0FBSyxJQUFJLEdBQUcsSUFBSSxDQUFDQSxNQUFNLEdBQUcsSUFBSSxDQUFDSixjQUFjLENBQUNJLE1BQU87RUFDekU7O0VBRUE7RUFDQSxJQUFXQyxnQkFBZ0JBLENBQUEsRUFBWTtJQUNyQyxPQUFPLElBQUksQ0FBQ0MsUUFBUSxLQUFLLElBQUksR0FBRyxJQUFJLENBQUNBLFFBQVEsR0FBRyxJQUFJLENBQUNOLGNBQWMsQ0FBQ00sUUFBUztFQUMvRTs7RUFFQTtFQUNBLElBQVdDLGFBQWFBLENBQUEsRUFBVztJQUNqQyxPQUFPLElBQUksQ0FBQ0MsS0FBSyxLQUFLLElBQUksR0FBRyxJQUFJLENBQUNBLEtBQUssR0FBRyxJQUFJLENBQUNSLGNBQWMsQ0FBQ1EsS0FBTTtFQUN0RTtFQUVtQk4scUJBQXFCQSxDQUFBLEVBQVM7SUFDL0MsSUFBSyxJQUFJLENBQUNKLElBQUksQ0FBQ1csYUFBYSxFQUFHO01BQzdCLElBQUksQ0FBQ0MsVUFBVSxDQUFFLElBQUksQ0FBQ1osSUFBSSxDQUFDVyxhQUFpRCxDQUFDO0lBQy9FO0lBRUEsS0FBSyxDQUFDUCxxQkFBcUIsQ0FBQyxDQUFDO0VBQy9CO0VBRVFRLFVBQVVBLENBQUVDLGVBQWlELEVBQVM7SUFFNUUsTUFBTUMsT0FBTyxHQUFHckIsU0FBUyxDQUFnRSxDQUFDLENBQUU7TUFDMUZzQixXQUFXLEVBQUU7SUFDZixDQUFDLEVBQUVGLGVBQWdCLENBQUM7SUFFcEJHLE1BQU0sSUFBSUMsTUFBTSxDQUFDQyxJQUFJLENBQUVKLE9BQVEsQ0FBQyxDQUFDSyxPQUFPLENBQUVDLEdBQUcsSUFBSTtNQUMvQ0osTUFBTSxJQUFJQSxNQUFNLENBQUV0QixjQUFjLENBQUMyQixRQUFRLENBQUVELEdBQUksQ0FBQyxFQUFHLHNCQUFxQkEsR0FBSSw2RUFBNkUsQ0FBQztJQUM1SixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUN2QixZQUFZLEdBQUdpQixPQUFPLENBQUNDLFdBQVc7O0lBRXZDO0lBQ0E7SUFDQSxJQUFJLENBQUNPLGtCQUFrQixDQUFFUixPQUFRLENBQUM7SUFFbEMsSUFBSSxDQUFDUyxrQkFBa0IsQ0FBRVQsT0FBUSxDQUFDO0VBQ3BDO0FBQ0Y7QUFFQXRCLE9BQU8sQ0FBQ2dDLFFBQVEsQ0FBRSxVQUFVLEVBQUU3QixRQUFTLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=