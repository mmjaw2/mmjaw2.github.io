// Copyright 2023-2024, University of Colorado Boulder

/**
 * A collection of information about an event and the environment when it was fired
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import IOType from '../../../tandem/js/types/IOType.js';
import { EventIO, Input, scenery } from '../imports.js';
export default class EventContext {
  // Raw DOM InputEvent (TouchEvent, PointerEvent, MouseEvent,...)

  // The document.activeElement when the event was fired

  constructor(domEvent) {
    this.domEvent = domEvent;
    this.activeElement = document.activeElement;
  }
  static createSynthetic() {
    return new EventContext(new window.Event('synthetic'));
  }

  /**
   * DOM (Scenery) nodes set dataset.sceneryAllowInput on their container if they don't want preventDefault to be called,
   * or other effects that block input (e.g. setPointerCapture). We search up the tree to detect this.
   */
  allowsDOMInput() {
    const target = this.domEvent?.target;
    if (target instanceof Element) {
      let element = target;
      while (element) {
        // For DOM nodes, we can check for a data attribute
        if (element instanceof HTMLElement && element.dataset?.sceneryAllowInput === 'true') {
          return true;
        }
        element = element.parentNode;
      }
    }
    return false;
  }
}
export const EventContextIO = new IOType('EventContextIO', {
  valueType: EventContext,
  documentation: 'A DOM event and its context',
  toStateObject: eventContext => {
    return {
      domEvent: Input.serializeDomEvent(eventContext.domEvent)

      // Ignores the activeElement, since we don't have a good way of serializing that at this point?
    };
  },
  fromStateObject: stateObject => {
    return new EventContext(Input.deserializeDomEvent(stateObject.domEvent));
  },
  // This should remain the same as Input.domEventPropertiesToSerialize (local var). Each key can be null depending on
  // what Event interface is being serialized (which depends on what DOM Event the instance is).
  stateSchema: () => ({
    domEvent: EventIO

    // Ignores the activeElement, since we don't have a good way of serializing that at this point?
  })
});
scenery.register('EventContext', EventContext);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJT1R5cGUiLCJFdmVudElPIiwiSW5wdXQiLCJzY2VuZXJ5IiwiRXZlbnRDb250ZXh0IiwiY29uc3RydWN0b3IiLCJkb21FdmVudCIsImFjdGl2ZUVsZW1lbnQiLCJkb2N1bWVudCIsImNyZWF0ZVN5bnRoZXRpYyIsIndpbmRvdyIsIkV2ZW50IiwiYWxsb3dzRE9NSW5wdXQiLCJ0YXJnZXQiLCJFbGVtZW50IiwiZWxlbWVudCIsIkhUTUxFbGVtZW50IiwiZGF0YXNldCIsInNjZW5lcnlBbGxvd0lucHV0IiwicGFyZW50Tm9kZSIsIkV2ZW50Q29udGV4dElPIiwidmFsdWVUeXBlIiwiZG9jdW1lbnRhdGlvbiIsInRvU3RhdGVPYmplY3QiLCJldmVudENvbnRleHQiLCJzZXJpYWxpemVEb21FdmVudCIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0IiwiZGVzZXJpYWxpemVEb21FdmVudCIsInN0YXRlU2NoZW1hIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFdmVudENvbnRleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBjb2xsZWN0aW9uIG9mIGluZm9ybWF0aW9uIGFib3V0IGFuIGV2ZW50IGFuZCB0aGUgZW52aXJvbm1lbnQgd2hlbiBpdCB3YXMgZmlyZWRcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL3R5cGVzL0lPVHlwZS5qcyc7XHJcbmltcG9ydCB7IEV2ZW50SU8sIElucHV0LCBzY2VuZXJ5IH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFdmVudENvbnRleHQ8b3V0IERPTUV2ZW50IGV4dGVuZHMgRXZlbnQgPSBFdmVudD4ge1xyXG5cclxuICAvLyBSYXcgRE9NIElucHV0RXZlbnQgKFRvdWNoRXZlbnQsIFBvaW50ZXJFdmVudCwgTW91c2VFdmVudCwuLi4pXHJcbiAgcHVibGljIHJlYWRvbmx5IGRvbUV2ZW50OiBET01FdmVudDtcclxuXHJcbiAgLy8gVGhlIGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgd2hlbiB0aGUgZXZlbnQgd2FzIGZpcmVkXHJcbiAgcHVibGljIHJlYWRvbmx5IGFjdGl2ZUVsZW1lbnQ6IEVsZW1lbnQgfCBudWxsO1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGRvbUV2ZW50OiBET01FdmVudCApIHtcclxuICAgIHRoaXMuZG9tRXZlbnQgPSBkb21FdmVudDtcclxuICAgIHRoaXMuYWN0aXZlRWxlbWVudCA9IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQ7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGNyZWF0ZVN5bnRoZXRpYygpOiBFdmVudENvbnRleHQge1xyXG4gICAgcmV0dXJuIG5ldyBFdmVudENvbnRleHQoIG5ldyB3aW5kb3cuRXZlbnQoICdzeW50aGV0aWMnICkgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERPTSAoU2NlbmVyeSkgbm9kZXMgc2V0IGRhdGFzZXQuc2NlbmVyeUFsbG93SW5wdXQgb24gdGhlaXIgY29udGFpbmVyIGlmIHRoZXkgZG9uJ3Qgd2FudCBwcmV2ZW50RGVmYXVsdCB0byBiZSBjYWxsZWQsXHJcbiAgICogb3Igb3RoZXIgZWZmZWN0cyB0aGF0IGJsb2NrIGlucHV0IChlLmcuIHNldFBvaW50ZXJDYXB0dXJlKS4gV2Ugc2VhcmNoIHVwIHRoZSB0cmVlIHRvIGRldGVjdCB0aGlzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhbGxvd3NET01JbnB1dCgpOiBib29sZWFuIHtcclxuICAgIGNvbnN0IHRhcmdldCA9IHRoaXMuZG9tRXZlbnQ/LnRhcmdldDtcclxuXHJcblxyXG4gICAgaWYgKCB0YXJnZXQgaW5zdGFuY2VvZiBFbGVtZW50ICkge1xyXG4gICAgICBsZXQgZWxlbWVudDogTm9kZSB8IG51bGwgPSB0YXJnZXQ7XHJcblxyXG4gICAgICB3aGlsZSAoIGVsZW1lbnQgKSB7XHJcbiAgICAgICAgLy8gRm9yIERPTSBub2Rlcywgd2UgY2FuIGNoZWNrIGZvciBhIGRhdGEgYXR0cmlidXRlXHJcbiAgICAgICAgaWYgKCBlbGVtZW50IGluc3RhbmNlb2YgSFRNTEVsZW1lbnQgJiYgZWxlbWVudC5kYXRhc2V0Py5zY2VuZXJ5QWxsb3dJbnB1dCA9PT0gJ3RydWUnICkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBlbGVtZW50ID0gZWxlbWVudC5wYXJlbnROb2RlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIGZhbHNlO1xyXG4gIH1cclxufVxyXG5cclxuZXhwb3J0IGNvbnN0IEV2ZW50Q29udGV4dElPID0gbmV3IElPVHlwZSggJ0V2ZW50Q29udGV4dElPJywge1xyXG4gIHZhbHVlVHlwZTogRXZlbnRDb250ZXh0LFxyXG4gIGRvY3VtZW50YXRpb246ICdBIERPTSBldmVudCBhbmQgaXRzIGNvbnRleHQnLFxyXG4gIHRvU3RhdGVPYmplY3Q6IGV2ZW50Q29udGV4dCA9PiB7XHJcbiAgICByZXR1cm4ge1xyXG4gICAgICBkb21FdmVudDogSW5wdXQuc2VyaWFsaXplRG9tRXZlbnQoIGV2ZW50Q29udGV4dC5kb21FdmVudCApXHJcblxyXG4gICAgICAvLyBJZ25vcmVzIHRoZSBhY3RpdmVFbGVtZW50LCBzaW5jZSB3ZSBkb24ndCBoYXZlIGEgZ29vZCB3YXkgb2Ygc2VyaWFsaXppbmcgdGhhdCBhdCB0aGlzIHBvaW50P1xyXG4gICAgfTtcclxuICB9LFxyXG4gIGZyb21TdGF0ZU9iamVjdDogc3RhdGVPYmplY3QgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBFdmVudENvbnRleHQoIElucHV0LmRlc2VyaWFsaXplRG9tRXZlbnQoIHN0YXRlT2JqZWN0LmRvbUV2ZW50ICkgKTtcclxuICB9LFxyXG5cclxuICAvLyBUaGlzIHNob3VsZCByZW1haW4gdGhlIHNhbWUgYXMgSW5wdXQuZG9tRXZlbnRQcm9wZXJ0aWVzVG9TZXJpYWxpemUgKGxvY2FsIHZhcikuIEVhY2gga2V5IGNhbiBiZSBudWxsIGRlcGVuZGluZyBvblxyXG4gIC8vIHdoYXQgRXZlbnQgaW50ZXJmYWNlIGlzIGJlaW5nIHNlcmlhbGl6ZWQgKHdoaWNoIGRlcGVuZHMgb24gd2hhdCBET00gRXZlbnQgdGhlIGluc3RhbmNlIGlzKS5cclxuICBzdGF0ZVNjaGVtYTogKCkgPT4gKCB7XHJcbiAgICBkb21FdmVudDogRXZlbnRJT1xyXG5cclxuICAgIC8vIElnbm9yZXMgdGhlIGFjdGl2ZUVsZW1lbnQsIHNpbmNlIHdlIGRvbid0IGhhdmUgYSBnb29kIHdheSBvZiBzZXJpYWxpemluZyB0aGF0IGF0IHRoaXMgcG9pbnQ/XHJcbiAgfSApXHJcbn0gKTtcclxuXHJcbnNjZW5lcnkucmVnaXN0ZXIoICdFdmVudENvbnRleHQnLCBFdmVudENvbnRleHQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsTUFBTSxNQUFNLG9DQUFvQztBQUN2RCxTQUFTQyxPQUFPLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxRQUFRLGVBQWU7QUFFdkQsZUFBZSxNQUFNQyxZQUFZLENBQXFDO0VBRXBFOztFQUdBOztFQUdPQyxXQUFXQSxDQUFFQyxRQUFrQixFQUFHO0lBQ3ZDLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQUksQ0FBQ0MsYUFBYSxHQUFHQyxRQUFRLENBQUNELGFBQWE7RUFDN0M7RUFFQSxPQUFjRSxlQUFlQSxDQUFBLEVBQWlCO0lBQzVDLE9BQU8sSUFBSUwsWUFBWSxDQUFFLElBQUlNLE1BQU0sQ0FBQ0MsS0FBSyxDQUFFLFdBQVksQ0FBRSxDQUFDO0VBQzVEOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NDLGNBQWNBLENBQUEsRUFBWTtJQUMvQixNQUFNQyxNQUFNLEdBQUcsSUFBSSxDQUFDUCxRQUFRLEVBQUVPLE1BQU07SUFHcEMsSUFBS0EsTUFBTSxZQUFZQyxPQUFPLEVBQUc7TUFDL0IsSUFBSUMsT0FBb0IsR0FBR0YsTUFBTTtNQUVqQyxPQUFRRSxPQUFPLEVBQUc7UUFDaEI7UUFDQSxJQUFLQSxPQUFPLFlBQVlDLFdBQVcsSUFBSUQsT0FBTyxDQUFDRSxPQUFPLEVBQUVDLGlCQUFpQixLQUFLLE1BQU0sRUFBRztVQUNyRixPQUFPLElBQUk7UUFDYjtRQUVBSCxPQUFPLEdBQUdBLE9BQU8sQ0FBQ0ksVUFBVTtNQUM5QjtJQUNGO0lBRUEsT0FBTyxLQUFLO0VBQ2Q7QUFDRjtBQUVBLE9BQU8sTUFBTUMsY0FBYyxHQUFHLElBQUlwQixNQUFNLENBQUUsZ0JBQWdCLEVBQUU7RUFDMURxQixTQUFTLEVBQUVqQixZQUFZO0VBQ3ZCa0IsYUFBYSxFQUFFLDZCQUE2QjtFQUM1Q0MsYUFBYSxFQUFFQyxZQUFZLElBQUk7SUFDN0IsT0FBTztNQUNMbEIsUUFBUSxFQUFFSixLQUFLLENBQUN1QixpQkFBaUIsQ0FBRUQsWUFBWSxDQUFDbEIsUUFBUzs7TUFFekQ7SUFDRixDQUFDO0VBQ0gsQ0FBQztFQUNEb0IsZUFBZSxFQUFFQyxXQUFXLElBQUk7SUFDOUIsT0FBTyxJQUFJdkIsWUFBWSxDQUFFRixLQUFLLENBQUMwQixtQkFBbUIsQ0FBRUQsV0FBVyxDQUFDckIsUUFBUyxDQUFFLENBQUM7RUFDOUUsQ0FBQztFQUVEO0VBQ0E7RUFDQXVCLFdBQVcsRUFBRUEsQ0FBQSxNQUFRO0lBQ25CdkIsUUFBUSxFQUFFTDs7SUFFVjtFQUNGLENBQUM7QUFDSCxDQUFFLENBQUM7QUFFSEUsT0FBTyxDQUFDMkIsUUFBUSxDQUFFLGNBQWMsRUFBRTFCLFlBQWEsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==