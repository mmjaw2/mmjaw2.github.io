// Copyright 2016-2024, University of Colorado Boulder

/**
 * Hooks up listeners to a paint (fill or stroke) to determine when its represented value has changed.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { isTReadOnlyProperty } from '../../../axon/js/TReadOnlyProperty.js';
import { Color, Gradient, scenery } from '../imports.js';
class PaintObserver {
  /**
   * An observer for a paint (fill or stroke), that will be able to trigger notifications when it changes.
   *
   * @param {function} changeCallback - To be called on any change (with no arguments)
   */
  constructor(changeCallback) {
    // @private {PaintDef} - Our unwrapped fill/stroke value
    this.primary = null;

    // @private {function} - Our callback
    this.changeCallback = changeCallback;

    // @private {function} - To be called when a potential change is detected
    this.notifyChangeCallback = this.notifyChanged.bind(this);

    // @private {function} - To be called whenever our secondary fill/stroke value may have changed
    this.updateSecondaryListener = this.updateSecondary.bind(this);

    // @private {Object} - Maps {number} property.id => {number} count (number of times we would be listening to it)
    this.secondaryPropertyCountsMap = {};
  }

  /**
   * Should be called when our paint (fill/stroke) may have changed.
   * @public (scenery-internal)
   *
   * Should update any listeners (if necessary), and call the callback (if necessary).
   *
   * NOTE: To clean state, set this to null.
   *
   * @param {PaintDef} primary
   */
  setPrimary(primary) {
    if (primary !== this.primary) {
      sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] primary update');
      sceneryLog && sceneryLog.Paints && sceneryLog.push();
      this.detachPrimary(this.primary);
      this.primary = primary;
      this.attachPrimary(primary);
      this.notifyChangeCallback();
      sceneryLog && sceneryLog.Paints && sceneryLog.pop();
    }
  }

  /**
   * Releases references without sending the notifications.
   * @public
   */
  clean() {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] clean');
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    this.detachPrimary(this.primary);
    this.primary = null;
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
  }

  /**
   * Called when the value of a "primary" Property (contents of one, main or as a Gradient) is potentially changed.
   * @private
   *
   * @param {string|Color} newPaint
   * @param {string|Color} oldPaint
   * @param {Property} property
   */
  updateSecondary(newPaint, oldPaint, property) {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] secondary update');
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    const count = this.secondaryPropertyCountsMap[property.id];
    assert && assert(count > 0, 'We should always be removing at least one reference');
    for (let i = 0; i < count; i++) {
      this.attachSecondary(newPaint);
    }
    this.notifyChangeCallback();
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
  }

  /**
   * Attempt to attach listeners to the paint's primary (the paint itself), or something else that acts like the primary
   * (properties on a gradient).
   * @private
   *
   * TODO: Note that this is called for gradient colors also https://github.com/phetsims/scenery/issues/1581
   *
   * NOTE: If it's a Property, we'll also need to handle the secondary (part inside the Property).
   *
   * @param {PaintDef} paint
   */
  attachPrimary(paint) {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] attachPrimary');
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    if (isTReadOnlyProperty(paint)) {
      sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] add Property listener');
      sceneryLog && sceneryLog.Paints && sceneryLog.push();
      this.secondaryLazyLinkProperty(paint);
      this.attachSecondary(paint.get());
      sceneryLog && sceneryLog.Paints && sceneryLog.pop();
    } else if (paint instanceof Color) {
      sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] Color changed to immutable');

      // We set the color to be immutable, so we don't need to add a listener
      paint.setImmutable();
    } else if (paint instanceof Gradient) {
      sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] add Gradient listeners');
      sceneryLog && sceneryLog.Paints && sceneryLog.push();
      for (let i = 0; i < paint.stops.length; i++) {
        this.attachPrimary(paint.stops[i].color);
      }
      sceneryLog && sceneryLog.Paints && sceneryLog.pop();
    }
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
  }

  /**
   * Attempt to detach listeners from the paint's primary (the paint itself).
   * @private
   *
   * TODO: Note that this is called for gradient colors also https://github.com/phetsims/scenery/issues/1581
   *
   * NOTE: If it's a Property or Gradient, we'll also need to handle the secondaries (part(s) inside the Property(ies)).
   *
   * @param {PaintDef} paint
   */
  detachPrimary(paint) {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] detachPrimary');
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    if (isTReadOnlyProperty(paint)) {
      sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] remove Property listener');
      sceneryLog && sceneryLog.Paints && sceneryLog.push();
      this.secondaryUnlinkProperty(paint);
      sceneryLog && sceneryLog.Paints && sceneryLog.pop();
    } else if (paint instanceof Gradient) {
      sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] remove Gradient listeners');
      sceneryLog && sceneryLog.Paints && sceneryLog.push();
      for (let i = 0; i < paint.stops.length; i++) {
        this.detachPrimary(paint.stops[i].color);
      }
      sceneryLog && sceneryLog.Paints && sceneryLog.pop();
    }
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
  }

  /**
   * Attempt to attach listeners to the paint's secondary (part within the Property).
   * @private
   *
   * @param {string|Color} paint
   */
  attachSecondary(paint) {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] attachSecondary');
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    if (paint instanceof Color) {
      sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] Color set to immutable');

      // We set the color to be immutable, so we don't need to add a listener
      paint.setImmutable();
    }
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
  }

  /**
   * Calls the change callback, and invalidates the paint itself if it's a gradient.
   * @private
   */
  notifyChanged() {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints('[PaintObserver] changed');
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    if (this.primary instanceof Gradient) {
      this.primary.invalidateCanvasGradient();
    }
    this.changeCallback();
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
  }

  /**
   * Adds our secondary listener to the Property (unless there is already one, in which case we record the counts).
   * @private
   *
   * @param {Property.<*>} property
   */
  secondaryLazyLinkProperty(property) {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints(`[PaintObserver] secondaryLazyLinkProperty ${property._id}`);
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    const id = property.id;
    const count = this.secondaryPropertyCountsMap[id];
    if (count) {
      this.secondaryPropertyCountsMap[id]++;
    } else {
      this.secondaryPropertyCountsMap[id] = 1;
      property.lazyLink(this.updateSecondaryListener);
    }
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
  }

  /**
   * Removes our secondary listener from the Property (unless there were more than 1 time we needed to listen to it,
   * in which case we reduce the count).
   * @private
   *
   * @param {Property.<*>} property
   */
  secondaryUnlinkProperty(property) {
    sceneryLog && sceneryLog.Paints && sceneryLog.Paints(`[PaintObserver] secondaryUnlinkProperty ${property._id}`);
    sceneryLog && sceneryLog.Paints && sceneryLog.push();
    const id = property.id;
    const count = --this.secondaryPropertyCountsMap[id];
    assert && assert(count >= 0, 'We should have had a reference before');
    if (count === 0) {
      delete this.secondaryPropertyCountsMap[id];
      if (!property.isDisposed) {
        property.unlink(this.updateSecondaryListener);
      }
    }
    sceneryLog && sceneryLog.Paints && sceneryLog.pop();
  }
}
scenery.register('PaintObserver', PaintObserver);
export default PaintObserver;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpc1RSZWFkT25seVByb3BlcnR5IiwiQ29sb3IiLCJHcmFkaWVudCIsInNjZW5lcnkiLCJQYWludE9ic2VydmVyIiwiY29uc3RydWN0b3IiLCJjaGFuZ2VDYWxsYmFjayIsInByaW1hcnkiLCJub3RpZnlDaGFuZ2VDYWxsYmFjayIsIm5vdGlmeUNoYW5nZWQiLCJiaW5kIiwidXBkYXRlU2Vjb25kYXJ5TGlzdGVuZXIiLCJ1cGRhdGVTZWNvbmRhcnkiLCJzZWNvbmRhcnlQcm9wZXJ0eUNvdW50c01hcCIsInNldFByaW1hcnkiLCJzY2VuZXJ5TG9nIiwiUGFpbnRzIiwicHVzaCIsImRldGFjaFByaW1hcnkiLCJhdHRhY2hQcmltYXJ5IiwicG9wIiwiY2xlYW4iLCJuZXdQYWludCIsIm9sZFBhaW50IiwicHJvcGVydHkiLCJjb3VudCIsImlkIiwiYXNzZXJ0IiwiaSIsImF0dGFjaFNlY29uZGFyeSIsInBhaW50Iiwic2Vjb25kYXJ5TGF6eUxpbmtQcm9wZXJ0eSIsImdldCIsInNldEltbXV0YWJsZSIsInN0b3BzIiwibGVuZ3RoIiwiY29sb3IiLCJzZWNvbmRhcnlVbmxpbmtQcm9wZXJ0eSIsImludmFsaWRhdGVDYW52YXNHcmFkaWVudCIsIl9pZCIsImxhenlMaW5rIiwiaXNEaXNwb3NlZCIsInVubGluayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUGFpbnRPYnNlcnZlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBIb29rcyB1cCBsaXN0ZW5lcnMgdG8gYSBwYWludCAoZmlsbCBvciBzdHJva2UpIHRvIGRldGVybWluZSB3aGVuIGl0cyByZXByZXNlbnRlZCB2YWx1ZSBoYXMgY2hhbmdlZC5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IGlzVFJlYWRPbmx5UHJvcGVydHkgfSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgQ29sb3IsIEdyYWRpZW50LCBzY2VuZXJ5IH0gZnJvbSAnLi4vaW1wb3J0cy5qcyc7XHJcblxyXG5jbGFzcyBQYWludE9ic2VydmVyIHtcclxuICAvKipcclxuICAgKiBBbiBvYnNlcnZlciBmb3IgYSBwYWludCAoZmlsbCBvciBzdHJva2UpLCB0aGF0IHdpbGwgYmUgYWJsZSB0byB0cmlnZ2VyIG5vdGlmaWNhdGlvbnMgd2hlbiBpdCBjaGFuZ2VzLlxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtmdW5jdGlvbn0gY2hhbmdlQ2FsbGJhY2sgLSBUbyBiZSBjYWxsZWQgb24gYW55IGNoYW5nZSAod2l0aCBubyBhcmd1bWVudHMpXHJcbiAgICovXHJcbiAgY29uc3RydWN0b3IoIGNoYW5nZUNhbGxiYWNrICkge1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtQYWludERlZn0gLSBPdXIgdW53cmFwcGVkIGZpbGwvc3Ryb2tlIHZhbHVlXHJcbiAgICB0aGlzLnByaW1hcnkgPSBudWxsO1xyXG5cclxuICAgIC8vIEBwcml2YXRlIHtmdW5jdGlvbn0gLSBPdXIgY2FsbGJhY2tcclxuICAgIHRoaXMuY2hhbmdlQ2FsbGJhY2sgPSBjaGFuZ2VDYWxsYmFjaztcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7ZnVuY3Rpb259IC0gVG8gYmUgY2FsbGVkIHdoZW4gYSBwb3RlbnRpYWwgY2hhbmdlIGlzIGRldGVjdGVkXHJcbiAgICB0aGlzLm5vdGlmeUNoYW5nZUNhbGxiYWNrID0gdGhpcy5ub3RpZnlDaGFuZ2VkLmJpbmQoIHRoaXMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7ZnVuY3Rpb259IC0gVG8gYmUgY2FsbGVkIHdoZW5ldmVyIG91ciBzZWNvbmRhcnkgZmlsbC9zdHJva2UgdmFsdWUgbWF5IGhhdmUgY2hhbmdlZFxyXG4gICAgdGhpcy51cGRhdGVTZWNvbmRhcnlMaXN0ZW5lciA9IHRoaXMudXBkYXRlU2Vjb25kYXJ5LmJpbmQoIHRoaXMgKTtcclxuXHJcbiAgICAvLyBAcHJpdmF0ZSB7T2JqZWN0fSAtIE1hcHMge251bWJlcn0gcHJvcGVydHkuaWQgPT4ge251bWJlcn0gY291bnQgKG51bWJlciBvZiB0aW1lcyB3ZSB3b3VsZCBiZSBsaXN0ZW5pbmcgdG8gaXQpXHJcbiAgICB0aGlzLnNlY29uZGFyeVByb3BlcnR5Q291bnRzTWFwID0ge307XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTaG91bGQgYmUgY2FsbGVkIHdoZW4gb3VyIHBhaW50IChmaWxsL3N0cm9rZSkgbWF5IGhhdmUgY2hhbmdlZC5cclxuICAgKiBAcHVibGljIChzY2VuZXJ5LWludGVybmFsKVxyXG4gICAqXHJcbiAgICogU2hvdWxkIHVwZGF0ZSBhbnkgbGlzdGVuZXJzIChpZiBuZWNlc3NhcnkpLCBhbmQgY2FsbCB0aGUgY2FsbGJhY2sgKGlmIG5lY2Vzc2FyeSkuXHJcbiAgICpcclxuICAgKiBOT1RFOiBUbyBjbGVhbiBzdGF0ZSwgc2V0IHRoaXMgdG8gbnVsbC5cclxuICAgKlxyXG4gICAqIEBwYXJhbSB7UGFpbnREZWZ9IHByaW1hcnlcclxuICAgKi9cclxuICBzZXRQcmltYXJ5KCBwcmltYXJ5ICkge1xyXG4gICAgaWYgKCBwcmltYXJ5ICE9PSB0aGlzLnByaW1hcnkgKSB7XHJcbiAgICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5QYWludHMoICdbUGFpbnRPYnNlcnZlcl0gcHJpbWFyeSB1cGRhdGUnICk7XHJcbiAgICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5wdXNoKCk7XHJcblxyXG4gICAgICB0aGlzLmRldGFjaFByaW1hcnkoIHRoaXMucHJpbWFyeSApO1xyXG4gICAgICB0aGlzLnByaW1hcnkgPSBwcmltYXJ5O1xyXG4gICAgICB0aGlzLmF0dGFjaFByaW1hcnkoIHByaW1hcnkgKTtcclxuICAgICAgdGhpcy5ub3RpZnlDaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuICAgICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnBvcCgpO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVsZWFzZXMgcmVmZXJlbmNlcyB3aXRob3V0IHNlbmRpbmcgdGhlIG5vdGlmaWNhdGlvbnMuXHJcbiAgICogQHB1YmxpY1xyXG4gICAqL1xyXG4gIGNsZWFuKCkge1xyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLlBhaW50cyggJ1tQYWludE9ic2VydmVyXSBjbGVhbicgKTtcclxuICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5wdXNoKCk7XHJcblxyXG4gICAgdGhpcy5kZXRhY2hQcmltYXJ5KCB0aGlzLnByaW1hcnkgKTtcclxuICAgIHRoaXMucHJpbWFyeSA9IG51bGw7XHJcblxyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnBvcCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsbGVkIHdoZW4gdGhlIHZhbHVlIG9mIGEgXCJwcmltYXJ5XCIgUHJvcGVydHkgKGNvbnRlbnRzIG9mIG9uZSwgbWFpbiBvciBhcyBhIEdyYWRpZW50KSBpcyBwb3RlbnRpYWxseSBjaGFuZ2VkLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge3N0cmluZ3xDb2xvcn0gbmV3UGFpbnRcclxuICAgKiBAcGFyYW0ge3N0cmluZ3xDb2xvcn0gb2xkUGFpbnRcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5fSBwcm9wZXJ0eVxyXG4gICAqL1xyXG4gIHVwZGF0ZVNlY29uZGFyeSggbmV3UGFpbnQsIG9sZFBhaW50LCBwcm9wZXJ0eSApIHtcclxuICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5QYWludHMoICdbUGFpbnRPYnNlcnZlcl0gc2Vjb25kYXJ5IHVwZGF0ZScgKTtcclxuICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5wdXNoKCk7XHJcblxyXG4gICAgY29uc3QgY291bnQgPSB0aGlzLnNlY29uZGFyeVByb3BlcnR5Q291bnRzTWFwWyBwcm9wZXJ0eS5pZCBdO1xyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggY291bnQgPiAwLCAnV2Ugc2hvdWxkIGFsd2F5cyBiZSByZW1vdmluZyBhdCBsZWFzdCBvbmUgcmVmZXJlbmNlJyApO1xyXG5cclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGNvdW50OyBpKysgKSB7XHJcbiAgICAgIHRoaXMuYXR0YWNoU2Vjb25kYXJ5KCBuZXdQYWludCApO1xyXG4gICAgfVxyXG4gICAgdGhpcy5ub3RpZnlDaGFuZ2VDYWxsYmFjaygpO1xyXG5cclxuICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5wb3AoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0dGVtcHQgdG8gYXR0YWNoIGxpc3RlbmVycyB0byB0aGUgcGFpbnQncyBwcmltYXJ5ICh0aGUgcGFpbnQgaXRzZWxmKSwgb3Igc29tZXRoaW5nIGVsc2UgdGhhdCBhY3RzIGxpa2UgdGhlIHByaW1hcnlcclxuICAgKiAocHJvcGVydGllcyBvbiBhIGdyYWRpZW50KS5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqXHJcbiAgICogVE9ETzogTm90ZSB0aGF0IHRoaXMgaXMgY2FsbGVkIGZvciBncmFkaWVudCBjb2xvcnMgYWxzbyBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc2NlbmVyeS9pc3N1ZXMvMTU4MVxyXG4gICAqXHJcbiAgICogTk9URTogSWYgaXQncyBhIFByb3BlcnR5LCB3ZSdsbCBhbHNvIG5lZWQgdG8gaGFuZGxlIHRoZSBzZWNvbmRhcnkgKHBhcnQgaW5zaWRlIHRoZSBQcm9wZXJ0eSkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1BhaW50RGVmfSBwYWludFxyXG4gICAqL1xyXG4gIGF0dGFjaFByaW1hcnkoIHBhaW50ICkge1xyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLlBhaW50cyggJ1tQYWludE9ic2VydmVyXSBhdHRhY2hQcmltYXJ5JyApO1xyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnB1c2goKTtcclxuXHJcbiAgICBpZiAoIGlzVFJlYWRPbmx5UHJvcGVydHkoIHBhaW50ICkgKSB7XHJcbiAgICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5QYWludHMoICdbUGFpbnRPYnNlcnZlcl0gYWRkIFByb3BlcnR5IGxpc3RlbmVyJyApO1xyXG4gICAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucHVzaCgpO1xyXG4gICAgICB0aGlzLnNlY29uZGFyeUxhenlMaW5rUHJvcGVydHkoIHBhaW50ICk7XHJcbiAgICAgIHRoaXMuYXR0YWNoU2Vjb25kYXJ5KCBwYWludC5nZXQoKSApO1xyXG4gICAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucG9wKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggcGFpbnQgaW5zdGFuY2VvZiBDb2xvciApIHtcclxuICAgICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLlBhaW50cyggJ1tQYWludE9ic2VydmVyXSBDb2xvciBjaGFuZ2VkIHRvIGltbXV0YWJsZScgKTtcclxuXHJcbiAgICAgIC8vIFdlIHNldCB0aGUgY29sb3IgdG8gYmUgaW1tdXRhYmxlLCBzbyB3ZSBkb24ndCBuZWVkIHRvIGFkZCBhIGxpc3RlbmVyXHJcbiAgICAgIHBhaW50LnNldEltbXV0YWJsZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIHBhaW50IGluc3RhbmNlb2YgR3JhZGllbnQgKSB7XHJcbiAgICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5QYWludHMoICdbUGFpbnRPYnNlcnZlcl0gYWRkIEdyYWRpZW50IGxpc3RlbmVycycgKTtcclxuICAgICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnB1c2goKTtcclxuICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgcGFpbnQuc3RvcHMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgICAgdGhpcy5hdHRhY2hQcmltYXJ5KCBwYWludC5zdG9wc1sgaSBdLmNvbG9yICk7XHJcbiAgICAgIH1cclxuICAgICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnBvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5wb3AoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0dGVtcHQgdG8gZGV0YWNoIGxpc3RlbmVycyBmcm9tIHRoZSBwYWludCdzIHByaW1hcnkgKHRoZSBwYWludCBpdHNlbGYpLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICpcclxuICAgKiBUT0RPOiBOb3RlIHRoYXQgdGhpcyBpcyBjYWxsZWQgZm9yIGdyYWRpZW50IGNvbG9ycyBhbHNvIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9zY2VuZXJ5L2lzc3Vlcy8xNTgxXHJcbiAgICpcclxuICAgKiBOT1RFOiBJZiBpdCdzIGEgUHJvcGVydHkgb3IgR3JhZGllbnQsIHdlJ2xsIGFsc28gbmVlZCB0byBoYW5kbGUgdGhlIHNlY29uZGFyaWVzIChwYXJ0KHMpIGluc2lkZSB0aGUgUHJvcGVydHkoaWVzKSkuXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1BhaW50RGVmfSBwYWludFxyXG4gICAqL1xyXG4gIGRldGFjaFByaW1hcnkoIHBhaW50ICkge1xyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLlBhaW50cyggJ1tQYWludE9ic2VydmVyXSBkZXRhY2hQcmltYXJ5JyApO1xyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnB1c2goKTtcclxuXHJcbiAgICBpZiAoIGlzVFJlYWRPbmx5UHJvcGVydHkoIHBhaW50ICkgKSB7XHJcbiAgICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5QYWludHMoICdbUGFpbnRPYnNlcnZlcl0gcmVtb3ZlIFByb3BlcnR5IGxpc3RlbmVyJyApO1xyXG4gICAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucHVzaCgpO1xyXG4gICAgICB0aGlzLnNlY29uZGFyeVVubGlua1Byb3BlcnR5KCBwYWludCApO1xyXG4gICAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucG9wKCk7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggcGFpbnQgaW5zdGFuY2VvZiBHcmFkaWVudCApIHtcclxuICAgICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLlBhaW50cyggJ1tQYWludE9ic2VydmVyXSByZW1vdmUgR3JhZGllbnQgbGlzdGVuZXJzJyApO1xyXG4gICAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucHVzaCgpO1xyXG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBwYWludC5zdG9wcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICB0aGlzLmRldGFjaFByaW1hcnkoIHBhaW50LnN0b3BzWyBpIF0uY29sb3IgKTtcclxuICAgICAgfVxyXG4gICAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucG9wKCk7XHJcbiAgICB9XHJcblxyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnBvcCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQXR0ZW1wdCB0byBhdHRhY2ggbGlzdGVuZXJzIHRvIHRoZSBwYWludCdzIHNlY29uZGFyeSAocGFydCB3aXRoaW4gdGhlIFByb3BlcnR5KS5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtzdHJpbmd8Q29sb3J9IHBhaW50XHJcbiAgICovXHJcbiAgYXR0YWNoU2Vjb25kYXJ5KCBwYWludCApIHtcclxuICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5QYWludHMoICdbUGFpbnRPYnNlcnZlcl0gYXR0YWNoU2Vjb25kYXJ5JyApO1xyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnB1c2goKTtcclxuXHJcbiAgICBpZiAoIHBhaW50IGluc3RhbmNlb2YgQ29sb3IgKSB7XHJcbiAgICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5QYWludHMoICdbUGFpbnRPYnNlcnZlcl0gQ29sb3Igc2V0IHRvIGltbXV0YWJsZScgKTtcclxuXHJcbiAgICAgIC8vIFdlIHNldCB0aGUgY29sb3IgdG8gYmUgaW1tdXRhYmxlLCBzbyB3ZSBkb24ndCBuZWVkIHRvIGFkZCBhIGxpc3RlbmVyXHJcbiAgICAgIHBhaW50LnNldEltbXV0YWJsZSgpO1xyXG4gICAgfVxyXG5cclxuICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5wb3AoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENhbGxzIHRoZSBjaGFuZ2UgY2FsbGJhY2ssIGFuZCBpbnZhbGlkYXRlcyB0aGUgcGFpbnQgaXRzZWxmIGlmIGl0J3MgYSBncmFkaWVudC5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqL1xyXG4gIG5vdGlmeUNoYW5nZWQoKSB7XHJcbiAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cuUGFpbnRzKCAnW1BhaW50T2JzZXJ2ZXJdIGNoYW5nZWQnICk7XHJcbiAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucHVzaCgpO1xyXG5cclxuICAgIGlmICggdGhpcy5wcmltYXJ5IGluc3RhbmNlb2YgR3JhZGllbnQgKSB7XHJcbiAgICAgIHRoaXMucHJpbWFyeS5pbnZhbGlkYXRlQ2FudmFzR3JhZGllbnQoKTtcclxuICAgIH1cclxuICAgIHRoaXMuY2hhbmdlQ2FsbGJhY2soKTtcclxuXHJcbiAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucG9wKCk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBBZGRzIG91ciBzZWNvbmRhcnkgbGlzdGVuZXIgdG8gdGhlIFByb3BlcnR5ICh1bmxlc3MgdGhlcmUgaXMgYWxyZWFkeSBvbmUsIGluIHdoaWNoIGNhc2Ugd2UgcmVjb3JkIHRoZSBjb3VudHMpLlxyXG4gICAqIEBwcml2YXRlXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge1Byb3BlcnR5LjwqPn0gcHJvcGVydHlcclxuICAgKi9cclxuICBzZWNvbmRhcnlMYXp5TGlua1Byb3BlcnR5KCBwcm9wZXJ0eSApIHtcclxuICAgIHNjZW5lcnlMb2cgJiYgc2NlbmVyeUxvZy5QYWludHMgJiYgc2NlbmVyeUxvZy5QYWludHMoIGBbUGFpbnRPYnNlcnZlcl0gc2Vjb25kYXJ5TGF6eUxpbmtQcm9wZXJ0eSAke3Byb3BlcnR5Ll9pZH1gICk7XHJcbiAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucHVzaCgpO1xyXG5cclxuICAgIGNvbnN0IGlkID0gcHJvcGVydHkuaWQ7XHJcbiAgICBjb25zdCBjb3VudCA9IHRoaXMuc2Vjb25kYXJ5UHJvcGVydHlDb3VudHNNYXBbIGlkIF07XHJcbiAgICBpZiAoIGNvdW50ICkge1xyXG4gICAgICB0aGlzLnNlY29uZGFyeVByb3BlcnR5Q291bnRzTWFwWyBpZCBdKys7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgdGhpcy5zZWNvbmRhcnlQcm9wZXJ0eUNvdW50c01hcFsgaWQgXSA9IDE7XHJcbiAgICAgIHByb3BlcnR5LmxhenlMaW5rKCB0aGlzLnVwZGF0ZVNlY29uZGFyeUxpc3RlbmVyICk7XHJcbiAgICB9XHJcblxyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnBvcCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVtb3ZlcyBvdXIgc2Vjb25kYXJ5IGxpc3RlbmVyIGZyb20gdGhlIFByb3BlcnR5ICh1bmxlc3MgdGhlcmUgd2VyZSBtb3JlIHRoYW4gMSB0aW1lIHdlIG5lZWRlZCB0byBsaXN0ZW4gdG8gaXQsXHJcbiAgICogaW4gd2hpY2ggY2FzZSB3ZSByZWR1Y2UgdGhlIGNvdW50KS5cclxuICAgKiBAcHJpdmF0ZVxyXG4gICAqXHJcbiAgICogQHBhcmFtIHtQcm9wZXJ0eS48Kj59IHByb3BlcnR5XHJcbiAgICovXHJcbiAgc2Vjb25kYXJ5VW5saW5rUHJvcGVydHkoIHByb3BlcnR5ICkge1xyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLlBhaW50cyggYFtQYWludE9ic2VydmVyXSBzZWNvbmRhcnlVbmxpbmtQcm9wZXJ0eSAke3Byb3BlcnR5Ll9pZH1gICk7XHJcbiAgICBzY2VuZXJ5TG9nICYmIHNjZW5lcnlMb2cuUGFpbnRzICYmIHNjZW5lcnlMb2cucHVzaCgpO1xyXG5cclxuICAgIGNvbnN0IGlkID0gcHJvcGVydHkuaWQ7XHJcbiAgICBjb25zdCBjb3VudCA9IC0tdGhpcy5zZWNvbmRhcnlQcm9wZXJ0eUNvdW50c01hcFsgaWQgXTtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGNvdW50ID49IDAsICdXZSBzaG91bGQgaGF2ZSBoYWQgYSByZWZlcmVuY2UgYmVmb3JlJyApO1xyXG5cclxuICAgIGlmICggY291bnQgPT09IDAgKSB7XHJcbiAgICAgIGRlbGV0ZSB0aGlzLnNlY29uZGFyeVByb3BlcnR5Q291bnRzTWFwWyBpZCBdO1xyXG4gICAgICBpZiAoICFwcm9wZXJ0eS5pc0Rpc3Bvc2VkICkge1xyXG4gICAgICAgIHByb3BlcnR5LnVubGluayggdGhpcy51cGRhdGVTZWNvbmRhcnlMaXN0ZW5lciApO1xyXG4gICAgICB9XHJcbiAgICB9XHJcblxyXG4gICAgc2NlbmVyeUxvZyAmJiBzY2VuZXJ5TG9nLlBhaW50cyAmJiBzY2VuZXJ5TG9nLnBvcCgpO1xyXG4gIH1cclxufVxyXG5cclxuc2NlbmVyeS5yZWdpc3RlciggJ1BhaW50T2JzZXJ2ZXInLCBQYWludE9ic2VydmVyICk7XHJcbmV4cG9ydCBkZWZhdWx0IFBhaW50T2JzZXJ2ZXI7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVNBLG1CQUFtQixRQUFRLHVDQUF1QztBQUMzRSxTQUFTQyxLQUFLLEVBQUVDLFFBQVEsRUFBRUMsT0FBTyxRQUFRLGVBQWU7QUFFeEQsTUFBTUMsYUFBYSxDQUFDO0VBQ2xCO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7RUFDRUMsV0FBV0EsQ0FBRUMsY0FBYyxFQUFHO0lBRTVCO0lBQ0EsSUFBSSxDQUFDQyxPQUFPLEdBQUcsSUFBSTs7SUFFbkI7SUFDQSxJQUFJLENBQUNELGNBQWMsR0FBR0EsY0FBYzs7SUFFcEM7SUFDQSxJQUFJLENBQUNFLG9CQUFvQixHQUFHLElBQUksQ0FBQ0MsYUFBYSxDQUFDQyxJQUFJLENBQUUsSUFBSyxDQUFDOztJQUUzRDtJQUNBLElBQUksQ0FBQ0MsdUJBQXVCLEdBQUcsSUFB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