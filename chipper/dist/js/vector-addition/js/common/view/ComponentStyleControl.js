// Copyright 2019-2023, University of Colorado Boulder

/**
 * ComponentStyleControl is the control for selecting how to visually represent component vectors.
 * It consists of a labeled group of radio buttons.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Brandon Li
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import { AlignBox, Text, VBox } from '../../../../scenery/js/imports.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionStrings from '../../VectorAdditionStrings.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import ComponentStyleRadioButtonGroup from './ComponentStyleRadioButtonGroup.js';
const MAX_WIDTH = VectorAdditionConstants.GRAPH_CONTROL_PANEL_CONTENT_WIDTH;
export default class ComponentStyleControl extends VBox {
  constructor(componentStyleProperty) {
    const children = [];

    // 'Components' label, left justified
    const componentsText = new Text(VectorAdditionStrings.components, {
      font: VectorAdditionConstants.TITLE_FONT,
      maxWidth: MAX_WIDTH
    });
    children.push(componentsText);

    // Radio buttons, centered in maxWidth by using an AlignBox
    const componentStyleRadioButtonGroup = new ComponentStyleRadioButtonGroup(componentStyleProperty);
    children.push(new AlignBox(componentStyleRadioButtonGroup, {
      alignBounds: new Bounds2(0, 0, MAX_WIDTH, componentStyleRadioButtonGroup.height)
    }));
    super({
      // VBoxOptions
      children: children,
      align: 'left',
      spacing: VectorAdditionConstants.GRAPH_CONTROL_PANEL_Y_SPACING,
      isDisposable: false
    });
  }
}
vectorAddition.register('ComponentStyleControl', ComponentStyleControl);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiQWxpZ25Cb3giLCJUZXh0IiwiVkJveCIsInZlY3RvckFkZGl0aW9uIiwiVmVjdG9yQWRkaXRpb25TdHJpbmdzIiwiVmVjdG9yQWRkaXRpb25Db25zdGFudHMiLCJDb21wb25lbnRTdHlsZVJhZGlvQnV0dG9uR3JvdXAiLCJNQVhfV0lEVEgiLCJHUkFQSF9DT05UUk9MX1BBTkVMX0NPTlRFTlRfV0lEVEgiLCJDb21wb25lbnRTdHlsZUNvbnRyb2wiLCJjb25zdHJ1Y3RvciIsImNvbXBvbmVudFN0eWxlUHJvcGVydHkiLCJjaGlsZHJlbiIsImNvbXBvbmVudHNUZXh0IiwiY29tcG9uZW50cyIsImZvbnQiLCJUSVRMRV9GT05UIiwibWF4V2lkdGgiLCJwdXNoIiwiY29tcG9uZW50U3R5bGVSYWRpb0J1dHRvbkdyb3VwIiwiYWxpZ25Cb3VuZHMiLCJoZWlnaHQiLCJhbGlnbiIsInNwYWNpbmciLCJHUkFQSF9DT05UUk9MX1BBTkVMX1lfU1BBQ0lORyIsImlzRGlzcG9zYWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29tcG9uZW50U3R5bGVDb250cm9sLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbXBvbmVudFN0eWxlQ29udHJvbCBpcyB0aGUgY29udHJvbCBmb3Igc2VsZWN0aW5nIGhvdyB0byB2aXN1YWxseSByZXByZXNlbnQgY29tcG9uZW50IHZlY3RvcnMuXHJcbiAqIEl0IGNvbnNpc3RzIG9mIGEgbGFiZWxlZCBncm91cCBvZiByYWRpbyBidXR0b25zLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgRW51bWVyYXRpb25Qcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0VudW1lcmF0aW9uUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCB7IEFsaWduQm94LCBOb2RlLCBUZXh0LCBWQm94IH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHZlY3RvckFkZGl0aW9uIGZyb20gJy4uLy4uL3ZlY3RvckFkZGl0aW9uLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uU3RyaW5ncyBmcm9tICcuLi8uLi9WZWN0b3JBZGRpdGlvblN0cmluZ3MuanMnO1xyXG5pbXBvcnQgQ29tcG9uZW50VmVjdG9yU3R5bGVzIGZyb20gJy4uL21vZGVsL0NvbXBvbmVudFZlY3RvclN0eWxlcy5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyBmcm9tICcuLi9WZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBDb21wb25lbnRTdHlsZVJhZGlvQnV0dG9uR3JvdXAgZnJvbSAnLi9Db21wb25lbnRTdHlsZVJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5cclxuY29uc3QgTUFYX1dJRFRIID0gVmVjdG9yQWRkaXRpb25Db25zdGFudHMuR1JBUEhfQ09OVFJPTF9QQU5FTF9DT05URU5UX1dJRFRIO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgQ29tcG9uZW50U3R5bGVDb250cm9sIGV4dGVuZHMgVkJveCB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY29tcG9uZW50U3R5bGVQcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxDb21wb25lbnRWZWN0b3JTdHlsZXM+ICkge1xyXG5cclxuICAgIGNvbnN0IGNoaWxkcmVuOiBOb2RlW10gPSBbXTtcclxuXHJcbiAgICAvLyAnQ29tcG9uZW50cycgbGFiZWwsIGxlZnQganVzdGlmaWVkXHJcbiAgICBjb25zdCBjb21wb25lbnRzVGV4dCA9IG5ldyBUZXh0KCBWZWN0b3JBZGRpdGlvblN0cmluZ3MuY29tcG9uZW50cywge1xyXG4gICAgICBmb250OiBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5USVRMRV9GT05ULFxyXG4gICAgICBtYXhXaWR0aDogTUFYX1dJRFRIXHJcbiAgICB9ICk7XHJcbiAgICBjaGlsZHJlbi5wdXNoKCBjb21wb25lbnRzVGV4dCApO1xyXG5cclxuICAgIC8vIFJhZGlvIGJ1dHRvbnMsIGNlbnRlcmVkIGluIG1heFdpZHRoIGJ5IHVzaW5nIGFuIEFsaWduQm94XHJcbiAgICBjb25zdCBjb21wb25lbnRTdHlsZVJhZGlvQnV0dG9uR3JvdXAgPSBuZXcgQ29tcG9uZW50U3R5bGVSYWRpb0J1dHRvbkdyb3VwKCBjb21wb25lbnRTdHlsZVByb3BlcnR5ICk7XHJcbiAgICBjaGlsZHJlbi5wdXNoKCBuZXcgQWxpZ25Cb3goIGNvbXBvbmVudFN0eWxlUmFkaW9CdXR0b25Hcm91cCwge1xyXG4gICAgICBhbGlnbkJvdW5kczogbmV3IEJvdW5kczIoIDAsIDAsIE1BWF9XSURUSCwgY29tcG9uZW50U3R5bGVSYWRpb0J1dHRvbkdyb3VwLmhlaWdodCApXHJcbiAgICB9ICkgKTtcclxuXHJcbiAgICBzdXBlcigge1xyXG5cclxuICAgICAgLy8gVkJveE9wdGlvbnNcclxuICAgICAgY2hpbGRyZW46IGNoaWxkcmVuLFxyXG4gICAgICBhbGlnbjogJ2xlZnQnLFxyXG4gICAgICBzcGFjaW5nOiBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5HUkFQSF9DT05UUk9MX1BBTkVMX1lfU1BBQ0lORyxcclxuICAgICAgaXNEaXNwb3NhYmxlOiBmYWxzZVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdDb21wb25lbnRTdHlsZUNvbnRyb2wnLCBDb21wb25lbnRTdHlsZUNvbnRyb2wgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsU0FBU0MsUUFBUSxFQUFRQyxJQUFJLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDOUUsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxxQkFBcUIsTUFBTSxnQ0FBZ0M7QUFFbEUsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLDhCQUE4QixNQUFNLHFDQUFxQztBQUVoRixNQUFNQyxTQUFTLEdBQUdGLHVCQUF1QixDQUFDRyxpQ0FBaUM7QUFFM0UsZUFBZSxNQUFNQyxxQkFBcUIsU0FBU1AsSUFBSSxDQUFDO0VBRS9DUSxXQUFXQSxDQUFFQyxzQkFBa0UsRUFBRztJQUV2RixNQUFNQyxRQUFnQixHQUFHLEVBQUU7O0lBRTNCO0lBQ0EsTUFBTUMsY0FBYyxHQUFHLElBQUlaLElBQUksQ0FBRUcscUJBQXFCLENBQUNVLFVBQVUsRUFBRTtNQUNqRUMsSUFBSSxFQUFFVix1QkFBdUIsQ0FBQ1csVUFBVTtNQUN4Q0MsUUFBUSxFQUFFVjtJQUNaLENBQUUsQ0FBQztJQUNISyxRQUFRLENBQUNNLElBQUksQ0FBRUwsY0FBZSxDQUFDOztJQUUvQjtJQUNBLE1BQU1NLDhCQUE4QixHQUFHLElBQUliLDhCQUE4QixDQUFFSyxzQkFBdUIsQ0FBQztJQUNuR0MsUUFBUSxDQUFDTSxJQUFJLENBQUUsSUFBSWxCLFFBQVEsQ0FBRW1CLDhCQUE4QixFQUFFO01BQzNEQyxXQUFXLEVBQUUsSUFBSXJCLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFUSxTQUFTLEVBQUVZLDhCQUE4QixDQUFDRSxNQUFPO0lBQ25GLENBQUUsQ0FBRSxDQUFDO0lBRUwsS0FBSyxDQUFFO01BRUw7TUFDQVQsUUFBUSxFQUFFQSxRQUFRO01BQ2xCVSxLQUFLLEVBQUUsTUFBTTtNQUNiQyxPQUFPLEVBQUVsQix1QkFBdUIsQ0FBQ21CLDZCQUE2QjtNQUM5REMsWUFBWSxFQUFFO0lBQ2hCLENBQUUsQ0FBQztFQUNMO0FBQ0Y7QUFFQXRCLGNBQWMsQ0FBQ3VCLFFBQVEsQ0FBRSx1QkFBdUIsRUFBRWpCLHFCQUFzQixDQUFDIiwiaWdub3JlTGlzdCI6W119