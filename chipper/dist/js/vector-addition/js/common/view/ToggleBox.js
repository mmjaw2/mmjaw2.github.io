// Copyright 2019-2023, University of Colorado Boulder

/**
 * ToggleBox is a specialized version of AccordionBox that doesn't expand/collapse.  Instead, it toggles between
 * 'closed' content and 'open' content, while maintaining a fixed height.
 *
 * The box itself is a fixed width and height; both its fixed width and height are calculated by the largest
 * between the closed and open content added to its margins.
 *
 * However, there is an option to pass a defined fixed width and/or fixed height. The box will scale the nodes to fit
 * defined dimensions.
 *
 * Instances of this class are not meant to be disposed.
 *
 * @author Brandon Li
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import { AlignBox } from '../../../../scenery/js/imports.js';
import AccordionBox from '../../../../sun/js/AccordionBox.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import { optionize4 } from '../../../../phet-core/js/optionize.js';
export default class ToggleBox extends AccordionBox {
  /**
   * @param closedContent - content when the box is closed
   * @param openContent - content when the box is open
   * @param [providedOptions]
   */
  constructor(closedContent, openContent, providedOptions) {
    const options = optionize4()({}, VectorAdditionConstants.ACCORDION_BOX_OPTIONS, {
      // SelfOptions
      contentFixedWidth: null,
      contentFixedHeight: null,
      // AccordionBoxOptions
      contentYMargin: 0,
      titleYMargin: 0,
      buttonYMargin: 0,
      contentAlign: 'left',
      showTitleWhenExpanded: false,
      titleBarExpandCollapse: false
    }, providedOptions);

    // Determine the content width
    const contentWidth = options.contentFixedWidth || _.max([closedContent.width, openContent.width]);
    const contentHeight = options.contentFixedHeight || _.max([closedContent.height, openContent.height]);

    // Constrain the content width and height
    openContent.maxWidth = contentWidth;
    openContent.maxHeight = contentHeight;
    closedContent.maxWidth = contentWidth;
    closedContent.maxHeight = contentHeight;

    // Put the content in AlignBoxes, to handle alignment
    const alignBoxOptions = {
      xAlign: options.contentAlign,
      alignBounds: new Bounds2(0, 0, contentWidth, contentHeight)
    };
    const openContentAlignBox = new AlignBox(openContent, alignBoxOptions);
    options.titleNode = new AlignBox(closedContent, alignBoxOptions); // unorthodox use of AccordionBox, but it works

    super(openContentAlignBox, options);
  }
}
vectorAddition.register('ToggleBox', ToggleBox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiQWxpZ25Cb3giLCJBY2NvcmRpb25Cb3giLCJ2ZWN0b3JBZGRpdGlvbiIsIlZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIiwib3B0aW9uaXplNCIsIlRvZ2dsZUJveCIsImNvbnN0cnVjdG9yIiwiY2xvc2VkQ29udGVudCIsIm9wZW5Db250ZW50IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIkFDQ09SRElPTl9CT1hfT1BUSU9OUyIsImNvbnRlbnRGaXhlZFdpZHRoIiwiY29udGVudEZpeGVkSGVpZ2h0IiwiY29udGVudFlNYXJnaW4iLCJ0aXRsZVlNYXJnaW4iLCJidXR0b25ZTWFyZ2luIiwiY29udGVudEFsaWduIiwic2hvd1RpdGxlV2hlbkV4cGFuZGVkIiwidGl0bGVCYXJFeHBhbmRDb2xsYXBzZSIsImNvbnRlbnRXaWR0aCIsIl8iLCJtYXgiLCJ3aWR0aCIsImNvbnRlbnRIZWlnaHQiLCJoZWlnaHQiLCJtYXhXaWR0aCIsIm1heEhlaWdodCIsImFsaWduQm94T3B0aW9ucyIsInhBbGlnbiIsImFsaWduQm91bmRzIiwib3BlbkNvbnRlbnRBbGlnbkJveCIsInRpdGxlTm9kZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVG9nZ2xlQm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRvZ2dsZUJveCBpcyBhIHNwZWNpYWxpemVkIHZlcnNpb24gb2YgQWNjb3JkaW9uQm94IHRoYXQgZG9lc24ndCBleHBhbmQvY29sbGFwc2UuICBJbnN0ZWFkLCBpdCB0b2dnbGVzIGJldHdlZW5cclxuICogJ2Nsb3NlZCcgY29udGVudCBhbmQgJ29wZW4nIGNvbnRlbnQsIHdoaWxlIG1haW50YWluaW5nIGEgZml4ZWQgaGVpZ2h0LlxyXG4gKlxyXG4gKiBUaGUgYm94IGl0c2VsZiBpcyBhIGZpeGVkIHdpZHRoIGFuZCBoZWlnaHQ7IGJvdGggaXRzIGZpeGVkIHdpZHRoIGFuZCBoZWlnaHQgYXJlIGNhbGN1bGF0ZWQgYnkgdGhlIGxhcmdlc3RcclxuICogYmV0d2VlbiB0aGUgY2xvc2VkIGFuZCBvcGVuIGNvbnRlbnQgYWRkZWQgdG8gaXRzIG1hcmdpbnMuXHJcbiAqXHJcbiAqIEhvd2V2ZXIsIHRoZXJlIGlzIGFuIG9wdGlvbiB0byBwYXNzIGEgZGVmaW5lZCBmaXhlZCB3aWR0aCBhbmQvb3IgZml4ZWQgaGVpZ2h0LiBUaGUgYm94IHdpbGwgc2NhbGUgdGhlIG5vZGVzIHRvIGZpdFxyXG4gKiBkZWZpbmVkIGRpbWVuc2lvbnMuXHJcbiAqXHJcbiAqIEluc3RhbmNlcyBvZiB0aGlzIGNsYXNzIGFyZSBub3QgbWVhbnQgdG8gYmUgZGlzcG9zZWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKi9cclxuXHJcbmltcG9ydCBCb3VuZHMyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9Cb3VuZHMyLmpzJztcclxuaW1wb3J0IHsgQWxpZ25Cb3gsIE5vZGUsIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgQWNjb3JkaW9uQm94LCB7IEFjY29yZGlvbkJveE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvQWNjb3JkaW9uQm94LmpzJztcclxuaW1wb3J0IHZlY3RvckFkZGl0aW9uIGZyb20gJy4uLy4uL3ZlY3RvckFkZGl0aW9uLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IHsgb3B0aW9uaXplNCB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuXHJcbiAgLy8gSWYgcHJvdmlkZWQsIHRoZSBjb250ZW50IHdpbGwgc2NhbGUgdG8gZml4IHRoaXMgd2lkdGguIE90aGVyd2lzZSwgdGhlIGZpeGVkIHNpemUgaXMgY2FsY3VsYXRlZCBieSB0aGUgbGFyZ2VzdFxyXG4gIC8vIG9mIHRoZSBjb250ZW50IG5vZGVzIGFuZCBpdHMgcmVzcGVjdGl2ZSBtYXJnaW4uXHJcbiAgY29udGVudEZpeGVkV2lkdGg/OiBudW1iZXIgfCBudWxsO1xyXG5cclxuICAvLyBJZiBwcm92aWRlZCwgdGhlIGNvbnRlbnQgd2lsbCBzY2FsZSB0byBmaXggdGhpcyBoZWlnaHQuIE90aGVyd2lzZSwgdGhlIGZpeGVkIHNpemUgaXMgY2FsY3VsYXRlZCBieSB0aGUgbGFyZ2VzdFxyXG4gIC8vIG9mIHRoZSBjb250ZW50IG5vZGVzIGFuZCBpdHMgcmVzcGVjdGl2ZSBtYXJnaW4uXHJcbiAgY29udGVudEZpeGVkSGVpZ2h0PzogbnVtYmVyIHwgbnVsbDtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIFRvZ2dsZUJveE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgJlxyXG4gIFBpY2tPcHRpb25hbDxBY2NvcmRpb25Cb3hPcHRpb25zLCAnZXhwYW5kZWRQcm9wZXJ0eScgfCAnY29udGVudFhTcGFjaW5nJyB8ICdpc0Rpc3Bvc2FibGUnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFRvZ2dsZUJveCBleHRlbmRzIEFjY29yZGlvbkJveCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBjbG9zZWRDb250ZW50IC0gY29udGVudCB3aGVuIHRoZSBib3ggaXMgY2xvc2VkXHJcbiAgICogQHBhcmFtIG9wZW5Db250ZW50IC0gY29udGVudCB3aGVuIHRoZSBib3ggaXMgb3BlblxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvciggY2xvc2VkQ29udGVudDogTm9kZSwgb3BlbkNvbnRlbnQ6IE5vZGUsIHByb3ZpZGVkT3B0aW9ucz86IFRvZ2dsZUJveE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTQ8VG9nZ2xlQm94T3B0aW9ucywgU2VsZk9wdGlvbnMsIEFjY29yZGlvbkJveE9wdGlvbnM+KCkoXHJcbiAgICAgIHt9LCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5BQ0NPUkRJT05fQk9YX09QVElPTlMsIHtcclxuXHJcbiAgICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgICBjb250ZW50Rml4ZWRXaWR0aDogbnVsbCxcclxuICAgICAgICBjb250ZW50Rml4ZWRIZWlnaHQ6IG51bGwsXHJcblxyXG4gICAgICAgIC8vIEFjY29yZGlvbkJveE9wdGlvbnNcclxuICAgICAgICBjb250ZW50WU1hcmdpbjogMCxcclxuICAgICAgICB0aXRsZVlNYXJnaW46IDAsXHJcbiAgICAgICAgYnV0dG9uWU1hcmdpbjogMCxcclxuICAgICAgICBjb250ZW50QWxpZ246ICdsZWZ0JyxcclxuICAgICAgICBzaG93VGl0bGVXaGVuRXhwYW5kZWQ6IGZhbHNlLFxyXG4gICAgICAgIHRpdGxlQmFyRXhwYW5kQ29sbGFwc2U6IGZhbHNlXHJcbiAgICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIERldGVybWluZSB0aGUgY29udGVudCB3aWR0aFxyXG4gICAgY29uc3QgY29udGVudFdpZHRoID0gb3B0aW9ucy5jb250ZW50Rml4ZWRXaWR0aCB8fCBfLm1heCggWyBjbG9zZWRDb250ZW50LndpZHRoLCBvcGVuQ29udGVudC53aWR0aCBdICkhO1xyXG4gICAgY29uc3QgY29udGVudEhlaWdodCA9IG9wdGlvbnMuY29udGVudEZpeGVkSGVpZ2h0IHx8IF8ubWF4KCBbIGNsb3NlZENvbnRlbnQuaGVpZ2h0LCBvcGVuQ29udGVudC5oZWlnaHQgXSApITtcclxuXHJcbiAgICAvLyBDb25zdHJhaW4gdGhlIGNvbnRlbnQgd2lkdGggYW5kIGhlaWdodFxyXG4gICAgb3BlbkNvbnRlbnQubWF4V2lkdGggPSBjb250ZW50V2lkdGg7XHJcbiAgICBvcGVuQ29udGVudC5tYXhIZWlnaHQgPSBjb250ZW50SGVpZ2h0O1xyXG4gICAgY2xvc2VkQ29udGVudC5tYXhXaWR0aCA9IGNvbnRlbnRXaWR0aDtcclxuICAgIGNsb3NlZENvbnRlbnQubWF4SGVpZ2h0ID0gY29udGVudEhlaWdodDtcclxuXHJcbiAgICAvLyBQdXQgdGhlIGNvbnRlbnQgaW4gQWxpZ25Cb3hlcywgdG8gaGFuZGxlIGFsaWdubWVudFxyXG4gICAgY29uc3QgYWxpZ25Cb3hPcHRpb25zID0ge1xyXG4gICAgICB4QWxpZ246IG9wdGlvbnMuY29udGVudEFsaWduLFxyXG4gICAgICBhbGlnbkJvdW5kczogbmV3IEJvdW5kczIoIDAsIDAsIGNvbnRlbnRXaWR0aCwgY29udGVudEhlaWdodCApXHJcbiAgICB9O1xyXG4gICAgY29uc3Qgb3BlbkNvbnRlbnRBbGlnbkJveCA9IG5ldyBBbGlnbkJveCggb3BlbkNvbnRlbnQsIGFsaWduQm94T3B0aW9ucyApO1xyXG4gICAgb3B0aW9ucy50aXRsZU5vZGUgPSBuZXcgQWxpZ25Cb3goIGNsb3NlZENvbnRlbnQsIGFsaWduQm94T3B0aW9ucyApOyAvLyB1bm9ydGhvZG94IHVzZSBvZiBBY2NvcmRpb25Cb3gsIGJ1dCBpdCB3b3Jrc1xyXG5cclxuICAgIHN1cGVyKCBvcGVuQ29udGVudEFsaWduQm94LCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWN0b3JBZGRpdGlvbi5yZWdpc3RlciggJ1RvZ2dsZUJveCcsIFRvZ2dsZUJveCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLFFBQVEsUUFBc0MsbUNBQW1DO0FBQzFGLE9BQU9DLFlBQVksTUFBK0Isb0NBQW9DO0FBQ3RGLE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFDcEQsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLFNBQVNDLFVBQVUsUUFBUSx1Q0FBdUM7QUFpQmxFLGVBQWUsTUFBTUMsU0FBUyxTQUFTSixZQUFZLENBQUM7RUFFbEQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNZSyxXQUFXQSxDQUFFQyxhQUFtQixFQUFFQyxXQUFpQixFQUFFQyxlQUFrQyxFQUFHO0lBRWxHLE1BQU1DLE9BQU8sR0FBR04sVUFBVSxDQUFxRCxDQUFDLENBQzlFLENBQUMsQ0FBQyxFQUFFRCx1QkFBdUIsQ0FBQ1EscUJBQXFCLEVBQUU7TUFFakQ7TUFDQUMsaUJBQWlCLEVBQUUsSUFBSTtNQUN2QkMsa0JBQWtCLEVBQUUsSUFBSTtNQUV4QjtNQUNBQyxjQUFjLEVBQUUsQ0FBQztNQUNqQkMsWUFBWSxFQUFFLENBQUM7TUFDZkMsYUFBYSxFQUFFLENBQUM7TUFDaEJDLFlBQVksRUFBRSxNQUFNO01BQ3BCQyxxQkFBcUIsRUFBRSxLQUFLO01BQzVCQyxzQkFBc0IsRUFBRTtJQUMxQixDQUFDLEVBQUVWLGVBQWdCLENBQUM7O0lBRXRCO0lBQ0EsTUFBTVcsWUFBWSxHQUFHVixPQUFPLENBQUNFLGlCQUFpQixJQUFJUyxDQUFDLENBQUNDLEdBQUcsQ0FBRSxDQUFFZixhQUFhLENBQUNnQixLQUFLLEVBQUVmLFdBQVcsQ0FBQ2UsS0FBSyxDQUFHLENBQUU7SUFDdEcsTUFBTUMsYUFBYSxHQUFHZCxPQUFPLENBQUNHLGtCQUFrQixJQUFJUSxDQUFDLENBQUNDLEdBQUcsQ0FBRSxDQUFFZixhQUFhLENBQUNrQixNQUFNLEVBQUVqQixXQUFXLENBQUNpQixNQUFNLENBQUcsQ0FBRTs7SUFFMUc7SUFDQWpCLFdBQVcsQ0FBQ2tCLFFBQVEsR0FBR04sWUFBWTtJQUNuQ1osV0FBVyxDQUFDbUIsU0FBUyxHQUFHSCxhQUFhO0lBQ3JDakIsYUFBYSxDQUFDbUIsUUFBUSxHQUFHTixZQUFZO0lBQ3JDYixhQUFhLENBQUNvQixTQUFTLEdBQUdILGFBQWE7O0lBRXZDO0lBQ0EsTUFBTUksZUFBZSxHQUFHO01BQ3RCQyxNQUFNLEVBQUVuQixPQUFPLENBQUNPLFlBQVk7TUFDNUJhLFdBQVcsRUFBRSxJQUFJL0IsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUVxQixZQUFZLEVBQUVJLGFBQWM7SUFDOUQsQ0FBQztJQUNELE1BQU1PLG1CQUFtQixHQUFHLElBQUkvQixRQUFRLENBQUVRLFdBQVcsRUFBRW9CLGVBQWdCLENBQUM7SUFDeEVsQixPQUFPLENBQUNzQixTQUFTLEdBQUcsSUFBSWhDLFFBQVEsQ0FBRU8sYUFBYSxFQUFFcUIsZUFBZ0IsQ0FBQyxDQUFDLENBQUM7O0lBRXBFLEtBQUssQ0FBRUcsbUJBQW1CLEVBQUVyQixPQUFRLENBQUM7RUFDdkM7QUFDRjtBQUVBUixjQUFjLENBQUMrQixRQUFRLENBQUUsV0FBVyxFQUFFNUIsU0FBVSxDQUFDIiwiaWdub3JlTGlzdCI6W119