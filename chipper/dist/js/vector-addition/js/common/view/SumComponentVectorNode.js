// Copyright 2019-2023, University of Colorado Boulder

/**
 * View for the component of the sum vector.
 *
 * Extends ComponentVectorNode but adds the following functionality:
 *  - a distinct appearance
 *  - toggle visibility based on the sumVisibleProperty
 *  - disables ability to take the sum vector node off of the graph
 *
 * @author Brandon Li
 */

import Multilink from '../../../../axon/js/Multilink.js';
import merge from '../../../../phet-core/js/merge.js';
import vectorAddition from '../../vectorAddition.js';
import ComponentVectorStyles from '../model/ComponentVectorStyles.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import ComponentVectorNode from './ComponentVectorNode.js';
import optionize from '../../../../phet-core/js/optionize.js';
import SumVector from '../model/SumVector.js';
export default class SumComponentVectorNode extends ComponentVectorNode {
  constructor(componentVector, graph, componentStyleProperty, valuesVisibleProperty, sumVisibleProperty, providedOptions) {
    const options = optionize()({
      // ComponentVectorNodeOptions
      arrowOptions: merge({}, VectorAdditionConstants.SUM_COMPONENT_VECTOR_ARROW_OPTIONS, {
        fill: componentVector.vectorColorPalette.sumComponentFill
      })
    }, providedOptions);
    super(componentVector, graph, componentStyleProperty, valuesVisibleProperty, options);
    this.sumVisibleProperty = sumVisibleProperty;
    const sumVector = componentVector.parentVector;
    assert && assert(sumVector instanceof SumVector); // eslint-disable-line no-simple-type-checking-assertions

    // Update when the sum becomes visible or defined.
    // unlink is unnecessary, exists for the lifetime of the sim.
    Multilink.multilink([sumVisibleProperty, sumVector.isDefinedProperty], () => this.updateComponentVector(componentVector, graph.modelViewTransformProperty.value, componentStyleProperty.value, componentVector.isParentVectorActiveProperty.value));
  }

  /**
   * Handles visibility of sum component vectors.
   */
  updateComponentVector(componentVector, modelViewTransform, componentStyle, isParentActive) {
    super.updateComponentVector(componentVector, modelViewTransform, componentStyle, isParentActive);
    const sumVector = componentVector.parentVector;
    assert && assert(sumVector instanceof SumVector); // eslint-disable-line no-simple-type-checking-assertions

    this.visible =
    // components are visible
    componentStyle !== ComponentVectorStyles.INVISIBLE &&
    // sum is visible
    !!this.sumVisibleProperty && this.sumVisibleProperty.value &&
    // sum is defined
    sumVector.isDefinedProperty.value;
  }
}
vectorAddition.register('SumComponentVectorNode', SumComponentVectorNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,