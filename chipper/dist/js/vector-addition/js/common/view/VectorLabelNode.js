// Copyright 2019-2023, University of Colorado Boulder

/**
 * VectorLabelNode is the label that appears on a vector.  It may show only the vector's symbol, or the vector's magnitude.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import MathSymbols from '../../../../scenery-phet/js/MathSymbols.js';
import { HBox, Node, Rectangle, Text } from '../../../../scenery/js/imports.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionColors from '../VectorAdditionColors.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import VectorSymbolNode from './VectorSymbolNode.js';
import Utils from '../../../../dot/js/Utils.js';
const X_MARGIN = 5;
const Y_MARGIN = 1;
export default class VectorLabelNode extends Node {
  constructor(rootVector, valuesVisibleProperty, activeVectorProperty) {
    // Create the background rectangle, set as an arbitrary rectangle for now
    const backgroundRectangle = new Rectangle(0, 0, 1, 1, {
      fill: VectorAdditionColors.INACTIVE_VECTOR_LABEL_BACKGROUND_FILL,
      stroke: VectorAdditionColors.INACTIVE_VECTOR_LABEL_BACKGROUND_STROKE,
      cornerRadius: 4
    });

    // Create the VectorSymbolNode, set to arbitrary value for now.
    const vectorSymbolNode = new VectorSymbolNode({
      symbolFont: VectorAdditionConstants.VECTOR_LABEL_SYMBOL_FONT,
      font: VectorAdditionConstants.VECTOR_LABEL_FONT,
      spacing: 1
    });

    // Create the text for the vector's magnitude
    const vectorMagnitudeText = new Text('', {
      font: VectorAdditionConstants.VECTOR_LABEL_FONT
    });

    // Create a horizontal layout box for the symbol and magnitude
    const vectorLabelContent = new HBox({
      spacing: 7,
      align: 'origin' // so that text baselines will be aligned
    });
    super({
      cursor: 'move',
      children: [backgroundRectangle, vectorLabelContent]
    });
    this.rootVector = rootVector;
    this.valuesVisibleProperty = valuesVisibleProperty;
    this.activeVectorProperty = activeVectorProperty;
    this.backgroundRectangle = backgroundRectangle;
    this.vectorSymbolNode = vectorSymbolNode;
    this.vectorMagnitudeText = vectorMagnitudeText;
    this.vectorLabelContent = vectorLabelContent;

    // Observe changes to the model vector, and update the label node. Dispose is required.
    const labelMultilink = new Multilink([valuesVisibleProperty, rootVector.tailPositionProperty, rootVector.tipPositionProperty, activeVectorProperty], () => this.update());
    this.disposeVectorLabelNode = () => {
      labelMultilink.dispose();
    };
  }
  dispose() {
    this.disposeVectorLabelNode();
    super.dispose();
  }

  /**
   * Updates the label and background rectangle.
   */
  update() {
    // Get the label display information
    const labelDisplayData = this.rootVector.getLabelDisplayData(this.valuesVisibleProperty.value);

    // Update the VectorSymbolNode
    this.vectorSymbolNode.setVectorSymbolNode(labelDisplayData.symbol, labelDisplayData.coefficient, labelDisplayData.includeAbsoluteValueBars);

    // Update the displayed magnitude. Use Utils.toFixed so that we get a consistent number of decimal places.
    if (labelDisplayData.magnitude !== null) {
      const roundedMagnitude = Utils.toFixed(labelDisplayData.magnitude, VectorAdditionConstants.VECTOR_VALUE_DECIMAL_PLACES);
      const string = this.vectorSymbolNode.visible ? `${MathSymbols.EQUAL_TO} ${roundedMagnitude}` : roundedMagnitude;
      this.vectorMagnitudeText.setString(string);
    }

    // Toggle the visibility
    this.vectorMagnitudeText.visible = labelDisplayData.magnitude !== null;
    this.backgroundRectangle.visible = this.vectorSymbolNode.visible || this.vectorMagnitudeText.visible;

    // Update the children of the label content container
    this.vectorLabelContent.setChildren([this.vectorSymbolNode, this.vectorMagnitudeText].filter(node => node.visible));

    // Update the background
    if (this.backgroundRectangle.visible) {
      // Set the background size
      this.backgroundRectangle.setRectWidth(this.vectorLabelContent.width + 2 * X_MARGIN);
      this.backgroundRectangle.setRectHeight(this.vectorLabelContent.height + 2 * Y_MARGIN);

      // Update positioning
      this.vectorLabelContent.center = this.backgroundRectangle.center;
    }
  }

  /**
   * Determines whether the label is highlighted.
   */
  setHighlighted(highlighted) {
    if (highlighted) {
      this.backgroundRectangle.fill = VectorAdditionColors.ACTIVE_VECTOR_LABEL_BACKGROUND_FILL;
      this.backgroundRectangle.stroke = VectorAdditionColors.ACTIVE_VECTOR_LABEL_BACKGROUND_STROKE;
    } else {
      this.backgroundRectangle.fill = VectorAdditionColors.INACTIVE_VECTOR_LABEL_BACKGROUND_FILL;
      this.backgroundRectangle.stroke = VectorAdditionColors.INACTIVE_VECTOR_LABEL_BACKGROUND_STROKE;
    }
  }
}
vectorAddition.register('VectorLabelNode', VectorLabelNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJNYXRoU3ltYm9scyIsIkhCb3giLCJOb2RlIiwiUmVjdGFuZ2xlIiwiVGV4dCIsInZlY3RvckFkZGl0aW9uIiwiVmVjdG9yQWRkaXRpb25Db2xvcnMiLCJWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyIsIlZlY3RvclN5bWJvbE5vZGUiLCJVdGlscyIsIlhfTUFSR0lOIiwiWV9NQVJHSU4iLCJWZWN0b3JMYWJlbE5vZGUiLCJjb25zdHJ1Y3RvciIsInJvb3RWZWN0b3IiLCJ2YWx1ZXNWaXNpYmxlUHJvcGVydHkiLCJhY3RpdmVWZWN0b3JQcm9wZXJ0eSIsImJhY2tncm91bmRSZWN0YW5nbGUiLCJmaWxsIiwiSU5BQ1RJVkVfVkVDVE9SX0xBQkVMX0JBQ0tHUk9VTkRfRklMTCIsInN0cm9rZSIsIklOQUNUSVZFX1ZFQ1RPUl9MQUJFTF9CQUNLR1JPVU5EX1NUUk9LRSIsImNvcm5lclJhZGl1cyIsInZlY3RvclN5bWJvbE5vZGUiLCJzeW1ib2xGb250IiwiVkVDVE9SX0xBQkVMX1NZTUJPTF9GT05UIiwiZm9udCIsIlZFQ1RPUl9MQUJFTF9GT05UIiwic3BhY2luZyIsInZlY3Rvck1hZ25pdHVkZVRleHQiLCJ2ZWN0b3JMYWJlbENvbnRlbnQiLCJhbGlnbiIsImN1cnNvciIsImNoaWxkcmVuIiwibGFiZWxNdWx0aWxpbmsiLCJ0YWlsUG9zaXRpb25Qcm9wZXJ0eSIsInRpcFBvc2l0aW9uUHJvcGVydHkiLCJ1cGRhdGUiLCJkaXNwb3NlVmVjdG9yTGFiZWxOb2RlIiwiZGlzcG9zZSIsImxhYmVsRGlzcGxheURhdGEiLCJnZXRMYWJlbERpc3BsYXlEYXRhIiwidmFsdWUiLCJzZXRWZWN0b3JTeW1ib2xOb2RlIiwic3ltYm9sIiwiY29lZmZpY2llbnQiLCJpbmNsdWRlQWJzb2x1dGVWYWx1ZUJhcnMiLCJtYWduaXR1ZGUiLCJyb3VuZGVkTWFnbml0dWRlIiwidG9GaXhlZCIsIlZFQ1RPUl9WQUxVRV9ERUNJTUFMX1BMQUNFUyIsInN0cmluZyIsInZpc2libGUiLCJFUVVBTF9UTyIsInNldFN0cmluZyIsInNldENoaWxkcmVuIiwiZmlsdGVyIiwibm9kZSIsInNldFJlY3RXaWR0aCIsIndpZHRoIiwic2V0UmVjdEhlaWdodCIsImhlaWdodCIsImNlbnRlciIsInNldEhpZ2hsaWdodGVkIiwiaGlnaGxpZ2h0ZWQiLCJBQ1RJVkVfVkVDVE9SX0xBQkVMX0JBQ0tHUk9VTkRfRklMTCIsIkFDVElWRV9WRUNUT1JfTEFCRUxfQkFDS0dST1VORF9TVFJPS0UiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZlY3RvckxhYmVsTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWZWN0b3JMYWJlbE5vZGUgaXMgdGhlIGxhYmVsIHRoYXQgYXBwZWFycyBvbiBhIHZlY3Rvci4gIEl0IG1heSBzaG93IG9ubHkgdGhlIHZlY3RvcidzIHN5bWJvbCwgb3IgdGhlIHZlY3RvcidzIG1hZ25pdHVkZS5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCBNYXRoU3ltYm9scyBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTWF0aFN5bWJvbHMuanMnO1xyXG5pbXBvcnQgeyBIQm94LCBOb2RlLCBSZWN0YW5nbGUsIFRleHQgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5pbXBvcnQgUm9vdFZlY3RvciBmcm9tICcuLi9tb2RlbC9Sb290VmVjdG9yLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29sb3JzIGZyb20gJy4uL1ZlY3RvckFkZGl0aW9uQ29sb3JzLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFZlY3RvclN5bWJvbE5vZGUgZnJvbSAnLi9WZWN0b3JTeW1ib2xOb2RlLmpzJztcclxuaW1wb3J0IFRSZWFkT25seVByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvVFJlYWRPbmx5UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuXHJcbmNvbnN0IFhfTUFSR0lOID0gNTtcclxuY29uc3QgWV9NQVJHSU4gPSAxO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yTGFiZWxOb2RlIGV4dGVuZHMgTm9kZSB7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgcm9vdFZlY3RvcjogUm9vdFZlY3RvcjtcclxuICBwcml2YXRlIHJlYWRvbmx5IHZhbHVlc1Zpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj47XHJcbiAgcHJpdmF0ZSByZWFkb25seSBhY3RpdmVWZWN0b3JQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Um9vdFZlY3RvciB8IG51bGw+O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYmFja2dyb3VuZFJlY3RhbmdsZTogUmVjdGFuZ2xlO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdmVjdG9yU3ltYm9sTm9kZTogVmVjdG9yU3ltYm9sTm9kZTtcclxuICBwcml2YXRlIHJlYWRvbmx5IHZlY3Rvck1hZ25pdHVkZVRleHQ6IFRleHQ7XHJcbiAgcHJpdmF0ZSByZWFkb25seSB2ZWN0b3JMYWJlbENvbnRlbnQ6IEhCb3g7XHJcblxyXG4gIHByaXZhdGUgcmVhZG9ubHkgZGlzcG9zZVZlY3RvckxhYmVsTm9kZTogKCkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCByb290VmVjdG9yOiBSb290VmVjdG9yLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdmFsdWVzVmlzaWJsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIGFjdGl2ZVZlY3RvclByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxSb290VmVjdG9yIHwgbnVsbD4gKSB7XHJcblxyXG4gICAgLy8gQ3JlYXRlIHRoZSBiYWNrZ3JvdW5kIHJlY3RhbmdsZSwgc2V0IGFzIGFuIGFyYml0cmFyeSByZWN0YW5nbGUgZm9yIG5vd1xyXG4gICAgY29uc3QgYmFja2dyb3VuZFJlY3RhbmdsZSA9IG5ldyBSZWN0YW5nbGUoIDAsIDAsIDEsIDEsIHtcclxuICAgICAgZmlsbDogVmVjdG9yQWRkaXRpb25Db2xvcnMuSU5BQ1RJVkVfVkVDVE9SX0xBQkVMX0JBQ0tHUk9VTkRfRklMTCxcclxuICAgICAgc3Ryb2tlOiBWZWN0b3JBZGRpdGlvbkNvbG9ycy5JTkFDVElWRV9WRUNUT1JfTEFCRUxfQkFDS0dST1VORF9TVFJPS0UsXHJcbiAgICAgIGNvcm5lclJhZGl1czogNFxyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgVmVjdG9yU3ltYm9sTm9kZSwgc2V0IHRvIGFyYml0cmFyeSB2YWx1ZSBmb3Igbm93LlxyXG4gICAgY29uc3QgdmVjdG9yU3ltYm9sTm9kZSA9IG5ldyBWZWN0b3JTeW1ib2xOb2RlKCB7XHJcbiAgICAgIHN5bWJvbEZvbnQ6IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLlZFQ1RPUl9MQUJFTF9TWU1CT0xfRk9OVCxcclxuICAgICAgZm9udDogVmVjdG9yQWRkaXRpb25Db25zdGFudHMuVkVDVE9SX0xBQkVMX0ZPTlQsXHJcbiAgICAgIHNwYWNpbmc6IDFcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIHRleHQgZm9yIHRoZSB2ZWN0b3IncyBtYWduaXR1ZGVcclxuICAgIGNvbnN0IHZlY3Rvck1hZ25pdHVkZVRleHQgPSBuZXcgVGV4dCggJycsIHsgZm9udDogVmVjdG9yQWRkaXRpb25Db25zdGFudHMuVkVDVE9SX0xBQkVMX0ZPTlQgfSApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIGhvcml6b250YWwgbGF5b3V0IGJveCBmb3IgdGhlIHN5bWJvbCBhbmQgbWFnbml0dWRlXHJcbiAgICBjb25zdCB2ZWN0b3JMYWJlbENvbnRlbnQgPSBuZXcgSEJveCgge1xyXG4gICAgICBzcGFjaW5nOiA3LFxyXG4gICAgICBhbGlnbjogJ29yaWdpbicgLy8gc28gdGhhdCB0ZXh0IGJhc2VsaW5lcyB3aWxsIGJlIGFsaWduZWRcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICBjdXJzb3I6ICdtb3ZlJyxcclxuICAgICAgY2hpbGRyZW46IFsgYmFja2dyb3VuZFJlY3RhbmdsZSwgdmVjdG9yTGFiZWxDb250ZW50IF1cclxuICAgIH0gKTtcclxuXHJcbiAgICB0aGlzLnJvb3RWZWN0b3IgPSByb290VmVjdG9yO1xyXG4gICAgdGhpcy52YWx1ZXNWaXNpYmxlUHJvcGVydHkgPSB2YWx1ZXNWaXNpYmxlUHJvcGVydHk7XHJcbiAgICB0aGlzLmFjdGl2ZVZlY3RvclByb3BlcnR5ID0gYWN0aXZlVmVjdG9yUHJvcGVydHk7XHJcbiAgICB0aGlzLmJhY2tncm91bmRSZWN0YW5nbGUgPSBiYWNrZ3JvdW5kUmVjdGFuZ2xlO1xyXG4gICAgdGhpcy52ZWN0b3JTeW1ib2xOb2RlID0gdmVjdG9yU3ltYm9sTm9kZTtcclxuICAgIHRoaXMudmVjdG9yTWFnbml0dWRlVGV4dCA9IHZlY3Rvck1hZ25pdHVkZVRleHQ7XHJcbiAgICB0aGlzLnZlY3RvckxhYmVsQ29udGVudCA9IHZlY3RvckxhYmVsQ29udGVudDtcclxuXHJcbiAgICAvLyBPYnNlcnZlIGNoYW5nZXMgdG8gdGhlIG1vZGVsIHZlY3RvciwgYW5kIHVwZGF0ZSB0aGUgbGFiZWwgbm9kZS4gRGlzcG9zZSBpcyByZXF1aXJlZC5cclxuICAgIGNvbnN0IGxhYmVsTXVsdGlsaW5rID0gbmV3IE11bHRpbGluayhcclxuICAgICAgWyB2YWx1ZXNWaXNpYmxlUHJvcGVydHksIHJvb3RWZWN0b3IudGFpbFBvc2l0aW9uUHJvcGVydHksIHJvb3RWZWN0b3IudGlwUG9zaXRpb25Qcm9wZXJ0eSwgYWN0aXZlVmVjdG9yUHJvcGVydHkgXSxcclxuICAgICAgKCkgPT4gdGhpcy51cGRhdGUoKVxyXG4gICAgKTtcclxuXHJcbiAgICB0aGlzLmRpc3Bvc2VWZWN0b3JMYWJlbE5vZGUgPSAoKSA9PiB7XHJcbiAgICAgIGxhYmVsTXVsdGlsaW5rLmRpc3Bvc2UoKTtcclxuICAgIH07XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIHRoaXMuZGlzcG9zZVZlY3RvckxhYmVsTm9kZSgpO1xyXG4gICAgc3VwZXIuZGlzcG9zZSgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogVXBkYXRlcyB0aGUgbGFiZWwgYW5kIGJhY2tncm91bmQgcmVjdGFuZ2xlLlxyXG4gICAqL1xyXG4gIHB1YmxpYyB1cGRhdGUoKTogdm9pZCB7XHJcblxyXG4gICAgLy8gR2V0IHRoZSBsYWJlbCBkaXNwbGF5IGluZm9ybWF0aW9uXHJcbiAgICBjb25zdCBsYWJlbERpc3BsYXlEYXRhID0gdGhpcy5yb290VmVjdG9yLmdldExhYmVsRGlzcGxheURhdGEoIHRoaXMudmFsdWVzVmlzaWJsZVByb3BlcnR5LnZhbHVlICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBWZWN0b3JTeW1ib2xOb2RlXHJcbiAgICB0aGlzLnZlY3RvclN5bWJvbE5vZGUuc2V0VmVjdG9yU3ltYm9sTm9kZSggbGFiZWxEaXNwbGF5RGF0YS5zeW1ib2wsXHJcbiAgICAgIGxhYmVsRGlzcGxheURhdGEuY29lZmZpY2llbnQsXHJcbiAgICAgIGxhYmVsRGlzcGxheURhdGEuaW5jbHVkZUFic29sdXRlVmFsdWVCYXJzICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBkaXNwbGF5ZWQgbWFnbml0dWRlLiBVc2UgVXRpbHMudG9GaXhlZCBzbyB0aGF0IHdlIGdldCBhIGNvbnNpc3RlbnQgbnVtYmVyIG9mIGRlY2ltYWwgcGxhY2VzLlxyXG4gICAgaWYgKCBsYWJlbERpc3BsYXlEYXRhLm1hZ25pdHVkZSAhPT0gbnVsbCApIHtcclxuICAgICAgY29uc3Qgcm91bmRlZE1hZ25pdHVkZSA9IFV0aWxzLnRvRml4ZWQoIGxhYmVsRGlzcGxheURhdGEubWFnbml0dWRlLCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5WRUNUT1JfVkFMVUVfREVDSU1BTF9QTEFDRVMgKTtcclxuICAgICAgY29uc3Qgc3RyaW5nID0gdGhpcy52ZWN0b3JTeW1ib2xOb2RlLnZpc2libGUgPyBgJHtNYXRoU3ltYm9scy5FUVVBTF9UT30gJHtyb3VuZGVkTWFnbml0dWRlfWAgOiByb3VuZGVkTWFnbml0dWRlO1xyXG4gICAgICB0aGlzLnZlY3Rvck1hZ25pdHVkZVRleHQuc2V0U3RyaW5nKCBzdHJpbmcgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBUb2dnbGUgdGhlIHZpc2liaWxpdHlcclxuICAgIHRoaXMudmVjdG9yTWFnbml0dWRlVGV4dC52aXNpYmxlID0gKCBsYWJlbERpc3BsYXlEYXRhLm1hZ25pdHVkZSAhPT0gbnVsbCApO1xyXG4gICAgdGhpcy5iYWNrZ3JvdW5kUmVjdGFuZ2xlLnZpc2libGUgPSAoIHRoaXMudmVjdG9yU3ltYm9sTm9kZS52aXNpYmxlIHx8IHRoaXMudmVjdG9yTWFnbml0dWRlVGV4dC52aXNpYmxlICk7XHJcblxyXG4gICAgLy8gVXBkYXRlIHRoZSBjaGlsZHJlbiBvZiB0aGUgbGFiZWwgY29udGVudCBjb250YWluZXJcclxuICAgIHRoaXMudmVjdG9yTGFiZWxDb250ZW50LnNldENoaWxkcmVuKFxyXG4gICAgICBbIHRoaXMudmVjdG9yU3ltYm9sTm9kZSwgdGhpcy52ZWN0b3JNYWduaXR1ZGVUZXh0IF0uZmlsdGVyKCBub2RlID0+ICggbm9kZS52aXNpYmxlICkgKVxyXG4gICAgKTtcclxuXHJcbiAgICAvLyBVcGRhdGUgdGhlIGJhY2tncm91bmRcclxuICAgIGlmICggdGhpcy5iYWNrZ3JvdW5kUmVjdGFuZ2xlLnZpc2libGUgKSB7XHJcblxyXG4gICAgICAvLyBTZXQgdGhlIGJhY2tncm91bmQgc2l6ZVxyXG4gICAgICB0aGlzLmJhY2tncm91bmRSZWN0YW5nbGUuc2V0UmVjdFdpZHRoKCB0aGlzLnZlY3RvckxhYmVsQ29udGVudC53aWR0aCArIDIgKiBYX01BUkdJTiApO1xyXG4gICAgICB0aGlzLmJhY2tncm91bmRSZWN0YW5nbGUuc2V0UmVjdEhlaWdodCggdGhpcy52ZWN0b3JMYWJlbENvbnRlbnQuaGVpZ2h0ICsgMiAqIFlfTUFSR0lOICk7XHJcblxyXG4gICAgICAvLyBVcGRhdGUgcG9zaXRpb25pbmdcclxuICAgICAgdGhpcy52ZWN0b3JMYWJlbENvbnRlbnQuY2VudGVyID0gdGhpcy5iYWNrZ3JvdW5kUmVjdGFuZ2xlLmNlbnRlcjtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZXMgd2hldGhlciB0aGUgbGFiZWwgaXMgaGlnaGxpZ2h0ZWQuXHJcbiAgICovXHJcbiAgcHVibGljIHNldEhpZ2hsaWdodGVkKCBoaWdobGlnaHRlZDogYm9vbGVhbiApOiB2b2lkIHtcclxuICAgIGlmICggaGlnaGxpZ2h0ZWQgKSB7XHJcbiAgICAgIHRoaXMuYmFja2dyb3VuZFJlY3RhbmdsZS5maWxsID0gVmVjdG9yQWRkaXRpb25Db2xvcnMuQUNUSVZFX1ZFQ1RPUl9MQUJFTF9CQUNLR1JPVU5EX0ZJTEw7XHJcbiAgICAgIHRoaXMuYmFja2dyb3VuZFJlY3RhbmdsZS5zdHJva2UgPSBWZWN0b3JBZGRpdGlvbkNvbG9ycy5BQ1RJVkVfVkVDVE9SX0xBQkVMX0JBQ0tHUk9VTkRfU1RST0tFO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIHRoaXMuYmFja2dyb3VuZFJlY3RhbmdsZS5maWxsID0gVmVjdG9yQWRkaXRpb25Db2xvcnMuSU5BQ1RJVkVfVkVDVE9SX0xBQkVMX0JBQ0tHUk9VTkRfRklMTDtcclxuICAgICAgdGhpcy5iYWNrZ3JvdW5kUmVjdGFuZ2xlLnN0cm9rZSA9IFZlY3RvckFkZGl0aW9uQ29sb3JzLklOQUNUSVZFX1ZFQ1RPUl9MQUJFTF9CQUNLR1JPVU5EX1NUUk9LRTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnVmVjdG9yTGFiZWxOb2RlJywgVmVjdG9yTGFiZWxOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGtDQUFrQztBQUN4RCxPQUFPQyxXQUFXLE1BQU0sNENBQTRDO0FBQ3BFLFNBQVNDLElBQUksRUFBRUMsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLElBQUksUUFBUSxtQ0FBbUM7QUFDL0UsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUVwRCxPQUFPQyxvQkFBb0IsTUFBTSw0QkFBNEI7QUFDN0QsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLGdCQUFnQixNQUFNLHVCQUF1QjtBQUVwRCxPQUFPQyxLQUFLLE1BQU0sNkJBQTZCO0FBRS9DLE1BQU1DLFFBQVEsR0FBRyxDQUFDO0FBQ2xCLE1BQU1DLFFBQVEsR0FBRyxDQUFDO0FBRWxCLGVBQWUsTUFBTUMsZUFBZSxTQUFTVixJQUFJLENBQUM7RUFZekNXLFdBQVdBLENBQUVDLFVBQXNCLEVBQ3RCQyxxQkFBaUQsRUFDakRDLG9CQUEwRCxFQUFHO0lBRS9FO0lBQ0EsTUFBTUMsbUJBQW1CLEdBQUcsSUFBSWQsU0FBUyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRTtNQUNyRGUsSUFBSSxFQUFFWixvQkFBb0IsQ0FBQ2EscUNBQXFDO01BQ2hFQyxNQUFNLEVBQUVkLG9CQUFvQixDQUFDZSx1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