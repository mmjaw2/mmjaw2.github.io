// Copyright 2019-2023, University of Colorado Boulder

/**
 * SumVectorNode is the view for a sum vector.
 *
 * Extends VectorNode but adds the following functionality:
 *  - a distinct appearance
 *  - toggle visibility based on the sumVisibleProperty
 *  - disables ability to take the sum vector node off of the graph
 *
 * @author Brandon Li
 */

import Multilink from '../../../../axon/js/Multilink.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import VectorNode from './VectorNode.js';
import optionize, { combineOptions } from '../../../../phet-core/js/optionize.js';
export default class SumVectorNode extends VectorNode {
  constructor(sumVector, graph, valuesVisibleProperty, anglesVisibleProperty, sumVisibleProperty, providedOptions) {
    const options = optionize()({
      // VectorNodeOptions
      arrowOptions: combineOptions({}, VectorAdditionConstants.SUM_VECTOR_ARROW_OPTIONS, {
        fill: sumVector.vectorColorPalette.sumFill,
        stroke: sumVector.vectorColorPalette.sumStroke
      })
    }, providedOptions);
    super(sumVector, graph, valuesVisibleProperty, anglesVisibleProperty, options);

    // Make the sum vector visible only if it is defined, meaning that there is at least 1 vector on the graph.
    // See https://github.com/phetsims/vector-addition/issues/187
    // unmultilink is unnecessary, exists for the lifetime of the sim.
    Multilink.multilink([sumVisibleProperty, sumVector.isDefinedProperty], (sumVisible, isDefined) => {
      this.visible = sumVisible && isDefined;
    });

    // Making an active sum vector invisible clears activeVectorProperty. See #112.
    // unlink is unnecessary, exists for the lifetime of the sim.
    sumVisibleProperty.link(sumVisible => {
      if (!sumVisible && graph.activeVectorProperty.value === sumVector) {
        graph.activeVectorProperty.value = null;
      }
    });

    // When the sum vector becomes invisible, interrupt interactions.
    // See https://github.com/phetsims/vector-addition/issues/201
    this.visibleProperty.lazyLink(() => {
      if (!this.visible) {
        this.interruptSubtreeInput();
      }
    });

    // Double check that the vector node never is animated back
    // unlink is unnecessary, exists for the lifetime of the sim.
    assert && sumVector.animateBackProperty.link(animateBack => {
      if (animateBack) {
        assert && assert(false, 'SumVectorNode instances never animated back');
      }
    });
  }
}
vectorAddition.register('SumVectorNode', SumVectorNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJ2ZWN0b3JBZGRpdGlvbiIsIlZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIiwiVmVjdG9yTm9kZSIsIm9wdGlvbml6ZSIsImNvbWJpbmVPcHRpb25zIiwiU3VtVmVjdG9yTm9kZSIsImNvbnN0cnVjdG9yIiwic3VtVmVjdG9yIiwiZ3JhcGgiLCJ2YWx1ZXNWaXNpYmxlUHJvcGVydHkiLCJhbmdsZXNWaXNpYmxlUHJvcGVydHkiLCJzdW1WaXNpYmxlUHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiYXJyb3dPcHRpb25zIiwiU1VNX1ZFQ1RPUl9BUlJPV19PUFRJT05TIiwiZmlsbCIsInZlY3RvckNvbG9yUGFsZXR0ZSIsInN1bUZpbGwiLCJzdHJva2UiLCJzdW1TdHJva2UiLCJtdWx0aWxpbmsiLCJpc0RlZmluZWRQcm9wZXJ0eSIsInN1bVZpc2libGUiLCJpc0RlZmluZWQiLCJ2aXNpYmxlIiwibGluayIsImFjdGl2ZVZlY3RvclByb3BlcnR5IiwidmFsdWUiLCJ2aXNpYmxlUHJvcGVydHkiLCJsYXp5TGluayIsImludGVycnVwdFN1YnRyZWVJbnB1dCIsImFzc2VydCIsImFuaW1hdGVCYWNrUHJvcGVydHkiLCJhbmltYXRlQmFjayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU3VtVmVjdG9yTm9kZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTdW1WZWN0b3JOb2RlIGlzIHRoZSB2aWV3IGZvciBhIHN1bSB2ZWN0b3IuXHJcbiAqXHJcbiAqIEV4dGVuZHMgVmVjdG9yTm9kZSBidXQgYWRkcyB0aGUgZm9sbG93aW5nIGZ1bmN0aW9uYWxpdHk6XHJcbiAqICAtIGEgZGlzdGluY3QgYXBwZWFyYW5jZVxyXG4gKiAgLSB0b2dnbGUgdmlzaWJpbGl0eSBiYXNlZCBvbiB0aGUgc3VtVmlzaWJsZVByb3BlcnR5XHJcbiAqICAtIGRpc2FibGVzIGFiaWxpdHkgdG8gdGFrZSB0aGUgc3VtIHZlY3RvciBub2RlIG9mZiBvZiB0aGUgZ3JhcGhcclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE11bHRpbGluayBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL011bHRpbGluay5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBHcmFwaCBmcm9tICcuLi9tb2RlbC9HcmFwaC5qcyc7XHJcbmltcG9ydCBTdW1WZWN0b3IgZnJvbSAnLi4vbW9kZWwvU3VtVmVjdG9yLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFZlY3Rvck5vZGUsIHsgVmVjdG9yTm9kZU9wdGlvbnMgfSBmcm9tICcuL1ZlY3Rvck5vZGUuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgY29tYmluZU9wdGlvbnMsIEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgUm9vdFZlY3RvckFycm93Tm9kZU9wdGlvbnMgfSBmcm9tICcuL1Jvb3RWZWN0b3JOb2RlLmpzJztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSBFbXB0eVNlbGZPcHRpb25zO1xyXG50eXBlIFN1bVZlY3Rvck5vZGVPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBWZWN0b3JOb2RlT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIFN1bVZlY3Rvck5vZGUgZXh0ZW5kcyBWZWN0b3JOb2RlIHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzdW1WZWN0b3I6IFN1bVZlY3RvciwgZ3JhcGg6IEdyYXBoLCB2YWx1ZXNWaXNpYmxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgYW5nbGVzVmlzaWJsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPiwgc3VtVmlzaWJsZVByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IFN1bVZlY3Rvck5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8U3VtVmVjdG9yTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBWZWN0b3JOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gVmVjdG9yTm9kZU9wdGlvbnNcclxuICAgICAgYXJyb3dPcHRpb25zOiBjb21iaW5lT3B0aW9uczxSb290VmVjdG9yQXJyb3dOb2RlT3B0aW9ucz4oIHt9LCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5TVU1fVkVDVE9SX0FSUk9XX09QVElPTlMsIHtcclxuICAgICAgICBmaWxsOiBzdW1WZWN0b3IudmVjdG9yQ29sb3JQYWxldHRlLnN1bUZpbGwsXHJcbiAgICAgICAgc3Ryb2tlOiBzdW1WZWN0b3IudmVjdG9yQ29sb3JQYWxldHRlLnN1bVN0cm9rZVxyXG4gICAgICB9IClcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBzdW1WZWN0b3IsIGdyYXBoLCB2YWx1ZXNWaXNpYmxlUHJvcGVydHksIGFuZ2xlc1Zpc2libGVQcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG5cclxuICAgIC8vIE1ha2UgdGhlIHN1bSB2ZWN0b3IgdmlzaWJsZSBvbmx5IGlmIGl0IGlzIGRlZmluZWQsIG1lYW5pbmcgdGhhdCB0aGVyZSBpcyBhdCBsZWFzdCAxIHZlY3RvciBvbiB0aGUgZ3JhcGguXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlY3Rvci1hZGRpdGlvbi9pc3N1ZXMvMTg3XHJcbiAgICAvLyB1bm11bHRpbGluayBpcyB1bm5lY2Vzc2FyeSwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbS5cclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoXHJcbiAgICAgIFsgc3VtVmlzaWJsZVByb3BlcnR5LCBzdW1WZWN0b3IuaXNEZWZpbmVkUHJvcGVydHkgXSxcclxuICAgICAgKCBzdW1WaXNpYmxlLCBpc0RlZmluZWQgKSA9PiB7XHJcbiAgICAgICAgdGhpcy52aXNpYmxlID0gKCBzdW1WaXNpYmxlICYmIGlzRGVmaW5lZCApO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgLy8gTWFraW5nIGFuIGFjdGl2ZSBzdW0gdmVjdG9yIGludmlzaWJsZSBjbGVhcnMgYWN0aXZlVmVjdG9yUHJvcGVydHkuIFNlZSAjMTEyLlxyXG4gICAgLy8gdW5saW5rIGlzIHVubmVjZXNzYXJ5LCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltLlxyXG4gICAgc3VtVmlzaWJsZVByb3BlcnR5LmxpbmsoIHN1bVZpc2libGUgPT4ge1xyXG4gICAgICBpZiAoICFzdW1WaXNpYmxlICYmIGdyYXBoLmFjdGl2ZVZlY3RvclByb3BlcnR5LnZhbHVlID09PSBzdW1WZWN0b3IgKSB7XHJcbiAgICAgICAgZ3JhcGguYWN0aXZlVmVjdG9yUHJvcGVydHkudmFsdWUgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gV2hlbiB0aGUgc3VtIHZlY3RvciBiZWNvbWVzIGludmlzaWJsZSwgaW50ZXJydXB0IGludGVyYWN0aW9ucy5cclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVjdG9yLWFkZGl0aW9uL2lzc3Vlcy8yMDFcclxuICAgIHRoaXMudmlzaWJsZVByb3BlcnR5LmxhenlMaW5rKCAoKSA9PiB7XHJcbiAgICAgIGlmICggIXRoaXMudmlzaWJsZSApIHtcclxuICAgICAgICB0aGlzLmludGVycnVwdFN1YnRyZWVJbnB1dCgpO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gRG91YmxlIGNoZWNrIHRoYXQgdGhlIHZlY3RvciBub2RlIG5ldmVyIGlzIGFuaW1hdGVkIGJhY2tcclxuICAgIC8vIHVubGluayBpcyB1bm5lY2Vzc2FyeSwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbS5cclxuICAgIGFzc2VydCAmJiBzdW1WZWN0b3IuYW5pbWF0ZUJhY2tQcm9wZXJ0eS5saW5rKCBhbmltYXRlQmFjayA9PiB7XHJcbiAgICAgIGlmICggYW5pbWF0ZUJhY2sgKSB7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggZmFsc2UsICdTdW1WZWN0b3JOb2RlIGluc3RhbmNlcyBuZXZlciBhbmltYXRlZCBiYWNrJyApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWN0b3JBZGRpdGlvbi5yZWdpc3RlciggJ1N1bVZlY3Rvck5vZGUnLCBTdW1WZWN0b3JOb2RlICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0sa0NBQWtDO0FBQ3hELE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFHcEQsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLFVBQVUsTUFBNkIsaUJBQWlCO0FBRS9ELE9BQU9DLFNBQVMsSUFBSUMsY0FBYyxRQUEwQix1Q0FBdUM7QUFNbkcsZUFBZSxNQUFNQyxhQUFhLFNBQVNILFVBQVUsQ0FBQztFQUU3Q0ksV0FBV0EsQ0FBRUMsU0FBb0IsRUFBRUMsS0FBWSxFQUFFQyxxQkFBaUQsRUFDckZDLHFCQUFpRCxFQUFFQyxrQkFBOEMsRUFDakdDLGVBQXNDLEVBQUc7SUFFM0QsTUFBTUMsT0FBTyxHQUFHVixTQUFTLENBQXVELENBQUMsQ0FBRTtNQUVqRjtNQUNBVyxZQUFZLEVBQUVWLGNBQWMsQ0FBOEIsQ0FBQyxDQUFDLEVBQUVILHVCQUF1QixDQUFDYyx3QkFBd0IsRUFBRTtRQUM5R0MsSUFBSSxFQUFFVCxTQUFTLENBQUNVLGtCQUFrQixDQUFDQyxPQUFPO1FBQzFDQyxNQUFNLEVBQUVaLFNBQVMsQ0FBQ1Usa0JBQWtCLENBQUNHO01BQ3ZDLENBQUU7SUFDSixDQUFDLEVBQUVSLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFTCxTQUFTLEVBQUVDLEtBQUssRUFBRUMscUJBQXFCLEVBQUVDLHFCQUFxQixFQUFFRyxPQUFRLENBQUM7O0lBRWhGO0lBQ0E7SUFDQTtJQUNBZCxTQUFTLENBQUNzQixTQUFTLENBQ2pCLENBQUVWLGtCQUFrQixFQUFFSixTQUFTLENBQUNlLGlCQUFpQixDQUFFLEVBQ25ELENBQUVDLFVBQVUsRUFBRUMsU0FBUyxLQUFNO01BQzNCLElBQUksQ0FBQ0MsT0FBTyxHQUFLRixVQUFVLElBQUlDLFNBQVc7SUFDNUMsQ0FBRSxDQUFDOztJQUVMO0lBQ0E7SUFDQWIsa0JBQWtCLENBQUNlLElBQUksQ0FBRUgsVUFBVSxJQUFJO01BQ3JDLElBQUssQ0FBQ0EsVUFBVSxJQUFJZixLQUFLLENBQUNtQixvQkFBb0IsQ0FBQ0MsS0FBSyxLQUFLckIsU0FBUyxFQUFHO1FBQ25FQyxLQUFLLENBQUNtQixvQkFBb0IsQ0FBQ0MsS0FBSyxHQUFHLElBQUk7TUFDekM7SUFDRixDQUFFLENBQUM7O0lBRUg7SUFDQTtJQUNBLElBQUksQ0FBQ0MsZUFBZSxDQUFDQyxRQUFRLENBQUUsTUFBTTtNQUNuQyxJQUFLLENBQUMsSUFBSSxDQUFDTCxPQUFPLEVBQUc7UUFDbkIsSUFBSSxDQUFDTSxxQkFBcUIsQ0FBQyxDQUFDO01BQzlCO0lBQ0YsQ0FBRSxDQUFDOztJQUVIO0lBQ0E7SUFDQUMsTUFBTSxJQUFJekIsU0FBUyxDQUFDMEIsbUJBQW1CLENBQUNQLElBQUksQ0FBRVEsV0FBVyxJQUFJO01BQzNELElBQUtBLFdBQVcsRUFBRztRQUNqQkYsTUFBTSxJQUFJQSxNQUFNLENBQUUsS0FBSyxFQUFFLDZDQUE4QyxDQUFDO01BQzFFO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBaEMsY0FBYyxDQUFDbUMsUUFBUSxDQUFFLGVBQWUsRUFBRTlCLGFBQWMsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==