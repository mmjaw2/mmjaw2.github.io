// Copyright 2019-2023, University of Colorado Boulder

/**
 * ArrowOverSymbolNode is a symbol with a vector arrow centered above it.
 * Origin is at the lower left of the symbol's baseline.
 *
 * NOTE: I would have preferred to call this VectorSymbolNode, but that name was already taken.
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import MathSymbolFont from '../../../../scenery-phet/js/MathSymbolFont.js';
import { Node, Text } from '../../../../scenery/js/imports.js';
import vectorAddition from '../../vectorAddition.js';
import optionize from '../../../../phet-core/js/optionize.js';
// const
const DEFAULT_FONT = new MathSymbolFont(18);
export default class ArrowOverSymbolNode extends Node {
  constructor(symbol, providedOptions) {
    const options = optionize()({
      // SelfOptions
      font: DEFAULT_FONT,
      spacing: 3,
      // vertical spacing between arrow and symbol
      arrowScale: 0.65
    }, providedOptions);
    const symbolNode = new Text(symbol, {
      font: options.font,
      boundsMethod: 'accurate' // so that options.spacing is effective
    });
    const rightArrowNode = new Text('\u2192', {
      font: options.font,
      boundsMethod: 'accurate',
      // so that options.spacing is effective
      scale: options.arrowScale
    });
    options.children = [symbolNode, rightArrowNode];
    super(options);
    this.symbolNode = symbolNode;
    this.rightArrowNode = rightArrowNode;
    this.spacing = options.spacing;
    this.updateLayout();
  }

  /**
   * Changes the symbol.
   */
  setSymbol(symbol) {
    this.symbolNode.string = symbol;
    this.updateLayout();
  }
  updateLayout() {
    // Reposition the arrow
    this.rightArrowNode.centerX = this.symbolNode.centerX;
    this.rightArrowNode.bottom = this.symbolNode.top - this.spacing;
  }
}
vectorAddition.register('ArrowOverSymbolNode', ArrowOverSymbolNode);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNYXRoU3ltYm9sRm9udCIsIk5vZGUiLCJUZXh0IiwidmVjdG9yQWRkaXRpb24iLCJvcHRpb25pemUiLCJERUZBVUxUX0ZPTlQiLCJBcnJvd092ZXJTeW1ib2xOb2RlIiwiY29uc3RydWN0b3IiLCJzeW1ib2wiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwiZm9udCIsInNwYWNpbmciLCJhcnJvd1NjYWxlIiwic3ltYm9sTm9kZSIsImJvdW5kc01ldGhvZCIsInJpZ2h0QXJyb3dOb2RlIiwic2NhbGUiLCJjaGlsZHJlbiIsInVwZGF0ZUxheW91dCIsInNldFN5bWJvbCIsInN0cmluZyIsImNlbnRlclgiLCJib3R0b20iLCJ0b3AiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkFycm93T3ZlclN5bWJvbE5vZGUudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQXJyb3dPdmVyU3ltYm9sTm9kZSBpcyBhIHN5bWJvbCB3aXRoIGEgdmVjdG9yIGFycm93IGNlbnRlcmVkIGFib3ZlIGl0LlxyXG4gKiBPcmlnaW4gaXMgYXQgdGhlIGxvd2VyIGxlZnQgb2YgdGhlIHN5bWJvbCdzIGJhc2VsaW5lLlxyXG4gKlxyXG4gKiBOT1RFOiBJIHdvdWxkIGhhdmUgcHJlZmVycmVkIHRvIGNhbGwgdGhpcyBWZWN0b3JTeW1ib2xOb2RlLCBidXQgdGhhdCBuYW1lIHdhcyBhbHJlYWR5IHRha2VuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBNYXRoU3ltYm9sRm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvTWF0aFN5bWJvbEZvbnQuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBOb2RlT3B0aW9ucywgVGV4dCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGlja09wdGlvbmFsIGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9QaWNrT3B0aW9uYWwuanMnO1xyXG5cclxuLy8gY29uc3RcclxuY29uc3QgREVGQVVMVF9GT05UID0gbmV3IE1hdGhTeW1ib2xGb250KCAxOCApO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICBmb250PzogUGhldEZvbnQ7XHJcbiAgc3BhY2luZz86IG51bWJlcjsgLy8gdmVydGljYWwgc3BhY2luZyBiZXR3ZWVuIGFycm93IGFuZCBzeW1ib2xcclxuICBhcnJvd1NjYWxlPzogbnVtYmVyO1xyXG59O1xyXG5cclxudHlwZSBBcnJvd092ZXJTeW1ib2xOb2RlT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgUGlja09wdGlvbmFsPE5vZGVPcHRpb25zLCAnbWF4V2lkdGgnPjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEFycm93T3ZlclN5bWJvbE5vZGUgZXh0ZW5kcyBOb2RlIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBzeW1ib2xOb2RlOiBUZXh0O1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcmlnaHRBcnJvd05vZGU6IE5vZGU7XHJcbiAgcHJpdmF0ZSByZWFkb25seSBzcGFjaW5nOiBudW1iZXI7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3Rvciggc3ltYm9sOiBzdHJpbmcsIHByb3ZpZGVkT3B0aW9ucz86IEFycm93T3ZlclN5bWJvbE5vZGVPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8QXJyb3dPdmVyU3ltYm9sTm9kZU9wdGlvbnMsIFNlbGZPcHRpb25zLCBOb2RlT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgZm9udDogREVGQVVMVF9GT05ULFxyXG4gICAgICBzcGFjaW5nOiAzLCAvLyB2ZXJ0aWNhbCBzcGFjaW5nIGJldHdlZW4gYXJyb3cgYW5kIHN5bWJvbFxyXG4gICAgICBhcnJvd1NjYWxlOiAwLjY1XHJcbiAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICBjb25zdCBzeW1ib2xOb2RlID0gbmV3IFRleHQoIHN5bWJvbCwge1xyXG4gICAgICBmb250OiBvcHRpb25zLmZvbnQsXHJcbiAgICAgIGJvdW5kc01ldGhvZDogJ2FjY3VyYXRlJyAvLyBzbyB0aGF0IG9wdGlvbnMuc3BhY2luZyBpcyBlZmZlY3RpdmVcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCByaWdodEFycm93Tm9kZSA9IG5ldyBUZXh0KCAnXFx1MjE5MicsIHtcclxuICAgICAgZm9udDogb3B0aW9ucy5mb250LFxyXG4gICAgICBib3VuZHNNZXRob2Q6ICdhY2N1cmF0ZScsIC8vIHNvIHRoYXQgb3B0aW9ucy5zcGFjaW5nIGlzIGVmZmVjdGl2ZVxyXG4gICAgICBzY2FsZTogb3B0aW9ucy5hcnJvd1NjYWxlXHJcbiAgICB9ICk7XHJcblxyXG4gICAgb3B0aW9ucy5jaGlsZHJlbiA9IFsgc3ltYm9sTm9kZSwgcmlnaHRBcnJvd05vZGUgXTtcclxuXHJcbiAgICBzdXBlciggb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuc3ltYm9sTm9kZSA9IHN5bWJvbE5vZGU7XHJcbiAgICB0aGlzLnJpZ2h0QXJyb3dOb2RlID0gcmlnaHRBcnJvd05vZGU7XHJcbiAgICB0aGlzLnNwYWNpbmcgPSBvcHRpb25zLnNwYWNpbmc7XHJcblxyXG4gICAgdGhpcy51cGRhdGVMYXlvdXQoKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENoYW5nZXMgdGhlIHN5bWJvbC5cclxuICAgKi9cclxuICBwdWJsaWMgc2V0U3ltYm9sKCBzeW1ib2w6IHN0cmluZyApOiB2b2lkIHtcclxuICAgIHRoaXMuc3ltYm9sTm9kZS5zdHJpbmcgPSBzeW1ib2w7XHJcbiAgICB0aGlzLnVwZGF0ZUxheW91dCgpO1xyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSB1cGRhdGVMYXlvdXQoKTogdm9pZCB7XHJcblxyXG4gICAgLy8gUmVwb3NpdGlvbiB0aGUgYXJyb3dcclxuICAgIHRoaXMucmlnaHRBcnJvd05vZGUuY2VudGVyWCA9IHRoaXMuc3ltYm9sTm9kZS5jZW50ZXJYO1xyXG4gICAgdGhpcy5yaWdodEFycm93Tm9kZS5ib3R0b20gPSB0aGlzLnN5bWJvbE5vZGUudG9wIC0gdGhpcy5zcGFjaW5nO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdBcnJvd092ZXJTeW1ib2xOb2RlJywgQXJyb3dPdmVyU3ltYm9sTm9kZSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0sK0NBQStDO0FBQzFFLFNBQVNDLElBQUksRUFBZUMsSUFBSSxRQUFRLG1DQUFtQztBQUMzRSxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBRXBELE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFHN0Q7QUFDQSxNQUFNQyxZQUFZLEdBQUcsSUFBSUwsY0FBYyxDQUFFLEVBQUcsQ0FBQztBQVU3QyxlQUFlLE1BQU1NLG1CQUFtQixTQUFTTCxJQUFJLENBQUM7RUFNN0NNLFdBQVdBLENBQUVDLE1BQWMsRUFBRUMsZUFBNEMsRUFBRztJQUVqRixNQUFNQyxPQUFPLEdBQUdOLFNBQVMsQ0FBdUQsQ0FBQyxDQUFFO01BRWpGO01BQ0FPLElBQUksRUFBRU4sWUFBWTtNQUNsQk8sT0FBTyxFQUFFLENBQUM7TUFBRTtNQUNaQyxVQUFVLEVBQUU7SUFDZCxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsTUFBTUssVUFBVSxHQUFHLElBQUlaLElBQUksQ0FBRU0sTUFBTSxFQUFFO01BQ25DRyxJQUFJLEVBQUVELE9BQU8sQ0FBQ0MsSUFBSTtNQUNsQkksWUFBWSxFQUFFLFVBQVUsQ0FBQztJQUMzQixDQUFFLENBQUM7SUFFSCxNQUFNQyxjQUFjLEdBQUcsSUFBSWQsSUFBSSxDQUFFLFFBQVEsRUFBRTtNQUN6Q1MsSUFBSSxFQUFFRCxPQUFPLENBQUNDLElBQUk7TUFDbEJJLFlBQVksRUFBRSxVQUFVO01BQUU7TUFDMUJFLEtBQUssRUFBRVAsT0FBTyxDQUFDRztJQUNqQixDQUFFLENBQUM7SUFFSEgsT0FBTyxDQUFDUSxRQUFRLEdBQUcsQ0FBRUosVUFBVSxFQUFFRSxjQUFjLENBQUU7SUFFakQsS0FBSyxDQUFFTixPQUFRLENBQUM7SUFFaEIsSUFBSSxDQUFDSSxVQUFVLEdBQUdBLFVBQVU7SUFDNUIsSUFBSSxDQUFDRSxjQUFjLEdBQUdBLGNBQWM7SUFDcEMsSUFBSSxDQUFDSixPQUFPLEdBQUdGLE9BQU8sQ0FBQ0UsT0FBTztJQUU5QixJQUFJLENBQUNPLFlBQVksQ0FBQyxDQUFDO0VBQ3JCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTQyxTQUFTQSxDQUFFWixNQUFjLEVBQVM7SUFDdkMsSUFBSSxDQUFDTSxVQUFVLENBQUNPLE1BQU0sR0FBR2IsTUFBTTtJQUMvQixJQUFJLENBQUNXLFlBQVksQ0FBQyxDQUFDO0VBQ3JCO0VBRVFBLFlBQVlBLENBQUEsRUFBUztJQUUzQjtJQUNBLElBQUksQ0FBQ0gsY0FBYyxDQUFDTSxPQUFPLEdBQUcsSUFBSSxDQUFDUixVQUFVLENBQUNRLE9BQU87SUFDckQsSUFBSSxDQUFDTixjQUFjLENBQUNPLE1BQU0sR0FBRyxJQUFJLENBQUNULFVBQVUsQ0FBQ1UsR0FBRyxHQUFHLElBQUksQ0FBQ1osT0FBTztFQUNqRTtBQUNGO0FBRUFULGNBQWMsQ0FBQ3NCLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRW5CLG1CQUFvQixDQUFDIiwiaWdub3JlTGlzdCI6W119