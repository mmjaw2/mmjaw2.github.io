// Copyright 2019-2023, University of Colorado Boulder

/**
 * Radio button group for switching between polar and Cartesian snap modes.
 *
 * See https://github.com/phetsims/vector-addition/issues/21 for a visual.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import vectorAddition from '../../vectorAddition.js';
import CoordinateSnapModes from '../model/CoordinateSnapModes.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import VectorAdditionIconFactory from './VectorAdditionIconFactory.js';
import { optionize4 } from '../../../../phet-core/js/optionize.js';
export default class CoordinateSnapRadioButtonGroup extends RectangularRadioButtonGroup {
  constructor(coordinateSnapModeProperty, cartesianVectorColorPalette, polarVectorColorPalette, providedOptions) {
    const options = optionize4()({}, VectorAdditionConstants.RADIO_BUTTON_GROUP_OPTIONS, {
      isDisposable: false
    }, providedOptions);

    // Create the description of the buttons
    const items = [{
      value: CoordinateSnapModes.CARTESIAN,
      createNode: () => VectorAdditionIconFactory.createCartesianSnapModeIcon(cartesianVectorColorPalette)
    }, {
      value: CoordinateSnapModes.POLAR,
      createNode: () => VectorAdditionIconFactory.createPolarSnapModeIcon(polarVectorColorPalette)
    }];
    super(coordinateSnapModeProperty, items, options);
  }
}
vectorAddition.register('CoordinateSnapRadioButtonGroup', CoordinateSnapRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAiLCJ2ZWN0b3JBZGRpdGlvbiIsIkNvb3JkaW5hdGVTbmFwTW9kZXMiLCJWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyIsIlZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkiLCJvcHRpb25pemU0IiwiQ29vcmRpbmF0ZVNuYXBSYWRpb0J1dHRvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJjb29yZGluYXRlU25hcE1vZGVQcm9wZXJ0eSIsImNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZSIsInBvbGFyVmVjdG9yQ29sb3JQYWxldHRlIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIlJBRElPX0JVVFRPTl9HUk9VUF9PUFRJT05TIiwiaXNEaXNwb3NhYmxlIiwiaXRlbXMiLCJ2YWx1ZSIsIkNBUlRFU0lBTiIsImNyZWF0ZU5vZGUiLCJjcmVhdGVDYXJ0ZXNpYW5TbmFwTW9kZUljb24iLCJQT0xBUiIsImNyZWF0ZVBvbGFyU25hcE1vZGVJY29uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDb29yZGluYXRlU25hcFJhZGlvQnV0dG9uR3JvdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUmFkaW8gYnV0dG9uIGdyb3VwIGZvciBzd2l0Y2hpbmcgYmV0d2VlbiBwb2xhciBhbmQgQ2FydGVzaWFuIHNuYXAgbW9kZXMuXHJcbiAqXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVjdG9yLWFkZGl0aW9uL2lzc3Vlcy8yMSBmb3IgYSB2aXN1YWwuXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAsIHsgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwSXRlbSwgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cC5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBDb29yZGluYXRlU25hcE1vZGVzIGZyb20gJy4uL21vZGVsL0Nvb3JkaW5hdGVTbmFwTW9kZXMuanMnO1xyXG5pbXBvcnQgVmVjdG9yQ29sb3JQYWxldHRlIGZyb20gJy4uL21vZGVsL1ZlY3RvckNvbG9yUGFsZXR0ZS5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyBmcm9tICcuLi9WZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5IGZyb20gJy4vVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCB7IEVtcHR5U2VsZk9wdGlvbnMsIG9wdGlvbml6ZTQgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IHsgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgQ29vcmRpbmF0ZVNuYXBSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvb3JkaW5hdGVTbmFwUmFkaW9CdXR0b25Hcm91cCBleHRlbmRzIFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cDxDb29yZGluYXRlU25hcE1vZGVzPiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY29vcmRpbmF0ZVNuYXBNb2RlUHJvcGVydHk6IEVudW1lcmF0aW9uUHJvcGVydHk8Q29vcmRpbmF0ZVNuYXBNb2Rlcz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBjYXJ0ZXNpYW5WZWN0b3JDb2xvclBhbGV0dGU6IFZlY3RvckNvbG9yUGFsZXR0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgIHBvbGFyVmVjdG9yQ29sb3JQYWxldHRlOiBWZWN0b3JDb2xvclBhbGV0dGUsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBDb29yZGluYXRlU25hcFJhZGlvQnV0dG9uR3JvdXBPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU0PENvb3JkaW5hdGVTbmFwUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMsIFNlbGZPcHRpb25zLCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBPcHRpb25zPigpKFxyXG4gICAgICB7fSwgVmVjdG9yQWRkaXRpb25Db25zdGFudHMuUkFESU9fQlVUVE9OX0dST1VQX09QVElPTlMsIHtcclxuICAgICAgICBpc0Rpc3Bvc2FibGU6IGZhbHNlXHJcbiAgICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgZGVzY3JpcHRpb24gb2YgdGhlIGJ1dHRvbnNcclxuICAgIGNvbnN0IGl0ZW1zOiBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXBJdGVtPENvb3JkaW5hdGVTbmFwTW9kZXM+W10gPSBbXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogQ29vcmRpbmF0ZVNuYXBNb2Rlcy5DQVJURVNJQU4sXHJcbiAgICAgICAgY3JlYXRlTm9kZTogKCkgPT4gVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeS5jcmVhdGVDYXJ0ZXNpYW5TbmFwTW9kZUljb24oIGNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZSApXHJcbiAgICAgIH0sXHJcbiAgICAgIHtcclxuICAgICAgICB2YWx1ZTogQ29vcmRpbmF0ZVNuYXBNb2Rlcy5QT0xBUixcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBWZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5LmNyZWF0ZVBvbGFyU25hcE1vZGVJY29uKCBwb2xhclZlY3RvckNvbG9yUGFsZXR0ZSApXHJcbiAgICAgIH1cclxuICAgIF07XHJcblxyXG4gICAgc3VwZXIoIGNvb3JkaW5hdGVTbmFwTW9kZVByb3BlcnR5LCBpdGVtcywgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdDb29yZGluYXRlU25hcFJhZGlvQnV0dG9uR3JvdXAnLCBDb29yZGluYXRlU25hcFJhZGlvQnV0dG9uR3JvdXAgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsMkJBQTJCLE1BQStFLDJEQUEyRDtBQUM1SyxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLG1CQUFtQixNQUFNLGlDQUFpQztBQUVqRSxPQUFPQyx1QkFBdUIsTUFBTSwrQkFBK0I7QUFDbkUsT0FBT0MseUJBQXlCLE1BQU0sZ0NBQWdDO0FBQ3RFLFNBQTJCQyxVQUFVLFFBQVEsdUNBQXVDO0FBT3BGLGVBQWUsTUFBTUMsOEJBQThCLFNBQVNOLDJCQUEyQixDQUFzQjtFQUVwR08sV0FBV0EsQ0FBRUMsMEJBQW9FLEVBQ3BFQywyQkFBK0MsRUFDL0NDLHVCQUEyQyxFQUMzQ0MsZUFBdUQsRUFBRztJQUU1RSxNQUFNQyxPQUFPLEdBQUdQLFVBQVUsQ0FBeUYsQ0FBQyxDQUNsSCxDQUFDLENBQUMsRUFBRUYsdUJBQXVCLENBQUNVLDBCQUEwQixFQUFFO01BQ3REQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQyxFQUFFSCxlQUFnQixDQUFDOztJQUV0QjtJQUNBLE1BQU1JLEtBQTZELEdBQUcsQ0FDcEU7TUFDRUMsS0FBSyxFQUFFZCxtQkFBbUIsQ0FBQ2UsU0FBUztNQUNwQ0MsVUFBVSxFQUFFQSxDQUFBLEtBQU1kLHlCQUF5QixDQUFDZSwyQkFBMkIsQ0FBRVYsMkJBQTRCO0lBQ3ZHLENBQUMsRUFDRDtNQUNFTyxLQUFLLEVBQUVkLG1CQUFtQixDQUFDa0IsS0FBSztNQUNoQ0YsVUFBVSxFQUFFQSxDQUFBLEtBQU1kLHlCQUF5QixDQUFDaUIsdUJBQXVCLENBQUVYLHVCQUF3QjtJQUMvRixDQUFDLENBQ0Y7SUFFRCxLQUFLLENBQUVGLDBCQUEwQixFQUFFTyxLQUFLLEVBQUVILE9BQVEsQ0FBQztFQUNyRDtBQUNGO0FBRUFYLGNBQWMsQ0FBQ3FCLFFBQVEsQ0FBRSxnQ0FBZ0MsRUFBRWhCLDhCQUErQixDQUFDIiwiaWdub3JlTGlzdCI6W119