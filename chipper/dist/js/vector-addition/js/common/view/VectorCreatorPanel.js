// Copyright 2019-2023, University of Colorado Boulder

/**
 * VectorCreatorPanel (aka vector 'toolbox') is a Panel that contains 'slots' that can be clicked on to create
 * new vectors. Instances exist for the lifetime of the sim, and are not meant to be disposed.
 *
 * @author Martin Veillette
 * @author Brandon Li
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import { AlignBox, Color, VBox } from '../../../../scenery/js/imports.js';
import Panel from '../../../../sun/js/Panel.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import { optionize4 } from '../../../../phet-core/js/optionize.js';
export default class VectorCreatorPanel extends Panel {
  constructor(panelSlots, providedOptions) {
    const options = optionize4()({}, VectorAdditionConstants.PANEL_OPTIONS, {
      // SelfOptions
      xAlign: 'center',
      yAlign: 'center',
      slotSpacing: 30,
      contentWidth: 80,
      contentHeight: 145,
      // PanelOptions
      lineWidth: 0.8,
      xMargin: 2,
      yMargin: 10,
      fill: Color.WHITE,
      stroke: Color.BLACK,
      isDisposable: false
    }, providedOptions);

    // Create the container for the slots in a vertical alignment
    const slotsContainer = new VBox({
      spacing: options.slotSpacing,
      children: panelSlots
    });

    // Align the slots in a AlignBox to ensure sizing/alignment is correct
    const fixedSizeSlotsContainer = new AlignBox(slotsContainer, {
      alignBounds: new Bounds2(0, 0, options.contentWidth, options.contentHeight),
      xAlign: options.xAlign,
      yAlign: options.yAlign,
      maxWidth: options.contentWidth,
      maxHeight: options.contentHeight
    });
    super(fixedSizeSlotsContainer, options);
  }
}
vectorAddition.register('VectorCreatorPanel', VectorCreatorPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiQWxpZ25Cb3giLCJDb2xvciIsIlZCb3giLCJQYW5lbCIsInZlY3RvckFkZGl0aW9uIiwiVmVjdG9yQWRkaXRpb25Db25zdGFudHMiLCJvcHRpb25pemU0IiwiVmVjdG9yQ3JlYXRvclBhbmVsIiwiY29uc3RydWN0b3IiLCJwYW5lbFNsb3RzIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsIlBBTkVMX09QVElPTlMiLCJ4QWxpZ24iLCJ5QWxpZ24iLCJzbG90U3BhY2luZyIsImNvbnRlbnRXaWR0aCIsImNvbnRlbnRIZWlnaHQiLCJsaW5lV2lkdGgiLCJ4TWFyZ2luIiwieU1hcmdpbiIsImZpbGwiLCJXSElURSIsInN0cm9rZSIsIkJMQUNLIiwiaXNEaXNwb3NhYmxlIiwic2xvdHNDb250YWluZXIiLCJzcGFjaW5nIiwiY2hpbGRyZW4iLCJmaXhlZFNpemVTbG90c0NvbnRhaW5lciIsImFsaWduQm91bmRzIiwibWF4V2lkdGgiLCJtYXhIZWlnaHQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZlY3RvckNyZWF0b3JQYW5lbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWZWN0b3JDcmVhdG9yUGFuZWwgKGFrYSB2ZWN0b3IgJ3Rvb2xib3gnKSBpcyBhIFBhbmVsIHRoYXQgY29udGFpbnMgJ3Nsb3RzJyB0aGF0IGNhbiBiZSBjbGlja2VkIG9uIHRvIGNyZWF0ZVxyXG4gKiBuZXcgdmVjdG9ycy4gSW5zdGFuY2VzIGV4aXN0IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbSwgYW5kIGFyZSBub3QgbWVhbnQgdG8gYmUgZGlzcG9zZWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWFydGluIFZlaWxsZXR0ZVxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCB7IEFsaWduQm94LCBDb2xvciwgTm9kZVRyYW5zbGF0aW9uT3B0aW9ucywgVkJveCB9IGZyb20gJy4uLy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQYW5lbCwgeyBQYW5lbE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvUGFuZWwuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vVmVjdG9yQWRkaXRpb25Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgVmVjdG9yQ3JlYXRvclBhbmVsU2xvdCBmcm9tICcuL1ZlY3RvckNyZWF0b3JQYW5lbFNsb3QuanMnO1xyXG5pbXBvcnQgeyBvcHRpb25pemU0IH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG50eXBlIEhvcml6b250YWxBbGlnbiA9ICdsZWZ0JyB8ICdjZW50ZXInIHwgJ3JpZ2h0JztcclxudHlwZSBWZXJ0aWNhbEFsaWduID0gJ3RvcCcgfCAnY2VudGVyJyB8ICdib3R0b20nO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICB4QWxpZ24/OiBIb3Jpem9udGFsQWxpZ247ICAvLyBob3Jpem9udGFsIGFsaWdubWVudCBvZiB0aGUgcGFuZWwgc2xvdHNcclxuICB5QWxpZ24/OiBWZXJ0aWNhbEFsaWduOyAvLyB2ZXJ0aWNhbCBhbGlnbm1lbnQgb2YgdGhlIHBhbmVsIHNsb3RzXHJcbiAgc2xvdFNwYWNpbmc/OiBudW1iZXI7IC8vIHRoZSBzcGFjaW5nIGJldHdlZW4gc2xvdHNcclxuICBjb250ZW50V2lkdGg/OiBudW1iZXI7IC8vIGZpeGVkIHdpZHRoIG9mIHRoZSBwYW5lbCBjb250ZW50XHJcbiAgY29udGVudEhlaWdodD86IG51bWJlcjsgLy8gZml4ZWQgaGVpZ2h0IG9mIHRoZSBwYW5lbCBjb250ZW50XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBWZWN0b3JDcmVhdG9yUGFuZWxPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yQ3JlYXRvclBhbmVsIGV4dGVuZHMgUGFuZWwge1xyXG5cclxuICBwcm90ZWN0ZWQgY29uc3RydWN0b3IoIHBhbmVsU2xvdHM6IFZlY3RvckNyZWF0b3JQYW5lbFNsb3RbXSwgcHJvdmlkZWRPcHRpb25zPzogVmVjdG9yQ3JlYXRvclBhbmVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplNDxWZWN0b3JDcmVhdG9yUGFuZWxPcHRpb25zLCBTZWxmT3B0aW9ucywgUGFuZWxPcHRpb25zPigpKFxyXG4gICAgICB7fSwgVmVjdG9yQWRkaXRpb25Db25zdGFudHMuUEFORUxfT1BUSU9OUywge1xyXG5cclxuICAgICAgICAvLyBTZWxmT3B0aW9uc1xyXG4gICAgICAgIHhBbGlnbjogJ2NlbnRlcicsXHJcbiAgICAgICAgeUFsaWduOiAnY2VudGVyJyxcclxuICAgICAgICBzbG90U3BhY2luZzogMzAsXHJcbiAgICAgICAgY29udGVudFdpZHRoOiA4MCxcclxuICAgICAgICBjb250ZW50SGVpZ2h0OiAxNDUsXHJcblxyXG4gICAgICAgIC8vIFBhbmVsT3B0aW9uc1xyXG4gICAgICAgIGxpbmVXaWR0aDogMC44LFxyXG4gICAgICAgIHhNYXJnaW46IDIsXHJcbiAgICAgICAgeU1hcmdpbjogMTAsXHJcbiAgICAgICAgZmlsbDogQ29sb3IuV0hJVEUsXHJcbiAgICAgICAgc3Ryb2tlOiBDb2xvci5CTEFDSyxcclxuICAgICAgICBpc0Rpc3Bvc2FibGU6IGZhbHNlXHJcbiAgICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgY29udGFpbmVyIGZvciB0aGUgc2xvdHMgaW4gYSB2ZXJ0aWNhbCBhbGlnbm1lbnRcclxuICAgIGNvbnN0IHNsb3RzQ29udGFpbmVyID0gbmV3IFZCb3goIHtcclxuICAgICAgc3BhY2luZzogb3B0aW9ucy5zbG90U3BhY2luZyxcclxuICAgICAgY2hpbGRyZW46IHBhbmVsU2xvdHNcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBBbGlnbiB0aGUgc2xvdHMgaW4gYSBBbGlnbkJveCB0byBlbnN1cmUgc2l6aW5nL2FsaWdubWVudCBpcyBjb3JyZWN0XHJcbiAgICBjb25zdCBmaXhlZFNpemVTbG90c0NvbnRhaW5lciA9IG5ldyBBbGlnbkJveCggc2xvdHNDb250YWluZXIsIHtcclxuICAgICAgYWxpZ25Cb3VuZHM6IG5ldyBCb3VuZHMyKCAwLCAwLCBvcHRpb25zLmNvbnRlbnRXaWR0aCwgb3B0aW9ucy5jb250ZW50SGVpZ2h0ICksXHJcbiAgICAgIHhBbGlnbjogb3B0aW9ucy54QWxpZ24sXHJcbiAgICAgIHlBbGlnbjogb3B0aW9ucy55QWxpZ24sXHJcbiAgICAgIG1heFdpZHRoOiBvcHRpb25zLmNvbnRlbnRXaWR0aCxcclxuICAgICAgbWF4SGVpZ2h0OiBvcHRpb25zLmNvbnRlbnRIZWlnaHRcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggZml4ZWRTaXplU2xvdHNDb250YWluZXIsIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnVmVjdG9yQ3JlYXRvclBhbmVsJywgVmVjdG9yQ3JlYXRvclBhbmVsICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELFNBQVNDLFFBQVEsRUFBRUMsS0FBSyxFQUEwQkMsSUFBSSxRQUFRLG1DQUFtQztBQUNqRyxPQUFPQyxLQUFLLE1BQXdCLDZCQUE2QjtBQUNqRSxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLHVCQUF1QixNQUFNLCtCQUErQjtBQUVuRSxTQUFTQyxVQUFVLFFBQVEsdUNBQXVDO0FBZWxFLGVBQWUsTUFBTUMsa0JBQWtCLFNBQVNKLEtBQUssQ0FBQztFQUUxQ0ssV0FBV0EsQ0FBRUMsVUFBb0MsRUFBRUMsZUFBMkMsRUFBRztJQUV6RyxNQUFNQyxPQUFPLEdBQUdMLFVBQVUsQ0FBdUQsQ0FBQyxDQUNoRixDQUFDLENBQUMsRUFBRUQsdUJBQXVCLENBQUNPLGFBQWEsRUFBRTtNQUV6QztNQUNBQyxNQUFNLEVBQUUsUUFBUTtNQUNoQkMsTUFBTSxFQUFFLFFBQVE7TUFDaEJDLFdBQVcsRUFBRSxFQUFFO01BQ2ZDLFlBQVksRUFBRSxFQUFFO01BQ2hCQyxhQUFhLEVBQUUsR0FBRztNQUVsQjtNQUNBQyxTQUFTLEVBQUUsR0FBRztNQUNkQyxPQUFPLEVBQUUsQ0FBQztNQUNWQyxPQUFPLEVBQUUsRUFBRTtNQUNYQyxJQUFJLEVBQUVwQixLQUFLLENBQUNxQixLQUFLO01BQ2pCQyxNQUFNLEVBQUV0QixLQUFLLENBQUN1QixLQUFLO01BQ25CQyxZQUFZLEVBQUU7SUFDaEIsQ0FBQyxFQUFFZixlQUFnQixDQUFDOztJQUV0QjtJQUNBLE1BQU1nQixjQUFjLEdBQUcsSUFBSXhCLElBQUksQ0FBRTtNQUMvQnlCLE9BQU8sRUFBRWhCLE9BQU8sQ0FBQ0ksV0FBVztNQUM1QmEsUUFBUSxFQUFFbkI7SUFDWixDQUFFLENBQUM7O0lBRUg7SUFDQSxNQUFNb0IsdUJBQXVCLEdBQUcsSUFBSTdCLFFBQVEsQ0FBRTBCLGNBQWMsRUFBRTtNQUM1REksV0FBVyxFQUFFLElBQUkvQixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRVksT0FBTyxDQUFDSyxZQUFZLEVBQUVMLE9BQU8sQ0FBQ00sYUFBYyxDQUFDO01BQzdFSixNQUFNLEVBQUVGLE9BQU8sQ0FBQ0UsTUFBTTtNQUN0QkMsTUFBTSxFQUFFSCxPQUFPLENBQUNHLE1BQU07TUFDdEJpQixRQUFRLEVBQUVwQixPQUFPLENBQUNLLFlBQVk7TUFDOUJnQixTQUFTLEVBQUVyQixPQUFPLENBQUNNO0lBQ3JCLENBQUUsQ0FBQztJQUVILEtBQUssQ0FBRVksdUJBQXVCLEVBQUVsQixPQUFRLENBQUM7RUFDM0M7QUFDRjtBQUVBUCxjQUFjLENBQUM2QixRQUFRLENBQUUsb0JBQW9CLEVBQUUxQixrQkFBbUIsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==