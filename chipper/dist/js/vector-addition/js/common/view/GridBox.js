// Copyright 2019-2023, University of Colorado Boulder

/**
 * GridBox lays out its children in a grid composed of cells. Children are provided in row-major order,
 * so cells are filled left-to-right, top-to-bottom.  All cells have the same dimensions, and alignment
 * of children within the cells can be specified.
 *
 * Adding/removing children does NOT change the contents of the grid, they will decorate the GridBox. To change the
 * contents of the grid, use setContents.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { AlignBox, AlignGroup, HBox, Node, VBox } from '../../../../scenery/js/imports.js';
import vectorAddition from '../../vectorAddition.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class GridBox extends Node {
  /**
   * @param contents - the contents of the grid, in row-major order
   * @param [providedOptions]
   */
  constructor(contents, providedOptions) {
    const options = optionize()({
      // SelfOptions
      columns: 2,
      xSpacing: 8,
      ySpacing: 8,
      xAlign: 'center',
      yAlign: 'center'
    }, providedOptions);
    assert && assert(options.columns > 0, `invalid columns: ${options.columns}`);
    const vBox = new VBox({
      spacing: options.ySpacing,
      align: 'left'
    });
    options.children = [vBox];
    super(options);
    this.contents = contents;
    this.vBox = vBox;
    this.columns = options.columns;
    this.xSpacing = options.xSpacing;
    this.xAlign = options.xAlign;
    this.yAlign = options.yAlign;
    this.setContents(contents);
  }

  /**
   * Gets the contents of the grid, in row-major order.
   */
  getContents() {
    return this.contents;
  }

  /**
   * Sets the contents of the grid, in row-major order.
   * @param contents - the contents of the grid, in row-major order
   */
  setContents(contents) {
    this.contents = contents;

    // Use an AlignGroup to ensure that every Node in the grid has the same effective bounds.
    const alignGroup = new AlignGroup({
      matchHorizontal: true,
      matchVertical: true
    });

    // Process the Nodes, in row-major order
    const vBoxChildren = [];
    let i = 0;
    while (i < contents.length) {
      const hBoxChildren = [];
      for (let column = 0; column < this.columns && i < contents.length; column++) {
        // Wrap each child in an AlignBox, so that every Node in the grid has the same effective bounds,
        // and is aligned within those bounds as specified by options xAlign and yAlign.
        hBoxChildren.push(new AlignBox(contents[i++], {
          group: alignGroup,
          xAlign: this.xAlign,
          yAlign: this.yAlign
        }));
      }
      vBoxChildren.push(new HBox({
        children: hBoxChildren,
        spacing: this.xSpacing,
        align: 'origin'
      }));
    }
    this.vBox.children = vBoxChildren;
  }
}
vectorAddition.register('GridBox', GridBox);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,