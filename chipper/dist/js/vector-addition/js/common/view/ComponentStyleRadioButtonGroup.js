// Copyright 2019-2023, University of Colorado Boulder

/**
 * ComponentStyleRadioButtonGroup is a group of radio buttons, arranged in a grid, for selecting component style.
 * It does not use RectangularRadioButtonGroup, because that class does not support a grid layout.
 * See https://github.com/phetsims/sun/issues/513 for context.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import merge from '../../../../phet-core/js/merge.js';
import { Node } from '../../../../scenery/js/imports.js';
import RectangularRadioButton from '../../../../sun/js/buttons/RectangularRadioButton.js';
import vectorAddition from '../../vectorAddition.js';
import ComponentVectorStyles from '../model/ComponentVectorStyles.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import GridBox from './GridBox.js';
import VectorAdditionIconFactory from './VectorAdditionIconFactory.js';
export default class ComponentStyleRadioButtonGroup extends Node {
  constructor(componentStyleProperty) {
    // Create the radio buttons. Note that order of enum values determines order of buttons.
    const buttons = [];
    ComponentVectorStyles.enumeration.values.forEach(componentStyle => {
      buttons.push(new RectangularRadioButton(componentStyleProperty, componentStyle, merge({}, VectorAdditionConstants.RADIO_BUTTON_GROUP_OPTIONS.radioButtonOptions, {
        content: VectorAdditionIconFactory.createComponentStyleRadioButtonIcon(componentStyle)
      })));
    });

    // Arrange the buttons in a grid
    const gridBox = new GridBox(buttons, {
      columns: 2
    });
    super({
      children: [gridBox],
      isDisposable: false
    });
  }
}
vectorAddition.register('ComponentStyleRadioButtonGroup', ComponentStyleRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk5vZGUiLCJSZWN0YW5ndWxhclJhZGlvQnV0dG9uIiwidmVjdG9yQWRkaXRpb24iLCJDb21wb25lbnRWZWN0b3JTdHlsZXMiLCJWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyIsIkdyaWRCb3giLCJWZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5IiwiQ29tcG9uZW50U3R5bGVSYWRpb0J1dHRvbkdyb3VwIiwiY29uc3RydWN0b3IiLCJjb21wb25lbnRTdHlsZVByb3BlcnR5IiwiYnV0dG9ucyIsImVudW1lcmF0aW9uIiwidmFsdWVzIiwiZm9yRWFjaCIsImNvbXBvbmVudFN0eWxlIiwicHVzaCIsIlJBRElPX0JVVFRPTl9HUk9VUF9PUFRJT05TIiwicmFkaW9CdXR0b25PcHRpb25zIiwiY29udGVudCIsImNyZWF0ZUNvbXBvbmVudFN0eWxlUmFkaW9CdXR0b25JY29uIiwiZ3JpZEJveCIsImNvbHVtbnMiLCJjaGlsZHJlbiIsImlzRGlzcG9zYWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiQ29tcG9uZW50U3R5bGVSYWRpb0J1dHRvbkdyb3VwLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENvbXBvbmVudFN0eWxlUmFkaW9CdXR0b25Hcm91cCBpcyBhIGdyb3VwIG9mIHJhZGlvIGJ1dHRvbnMsIGFycmFuZ2VkIGluIGEgZ3JpZCwgZm9yIHNlbGVjdGluZyBjb21wb25lbnQgc3R5bGUuXHJcbiAqIEl0IGRvZXMgbm90IHVzZSBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAsIGJlY2F1c2UgdGhhdCBjbGFzcyBkb2VzIG5vdCBzdXBwb3J0IGEgZ3JpZCBsYXlvdXQuXHJcbiAqIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvc3VuL2lzc3Vlcy81MTMgZm9yIGNvbnRleHQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b24gZnJvbSAnLi4vLi4vLi4vLi4vc3VuL2pzL2J1dHRvbnMvUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbi5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBDb21wb25lbnRWZWN0b3JTdHlsZXMgZnJvbSAnLi4vbW9kZWwvQ29tcG9uZW50VmVjdG9yU3R5bGVzLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IEdyaWRCb3ggZnJvbSAnLi9HcmlkQm94LmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkgZnJvbSAnLi9WZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5LmpzJztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIENvbXBvbmVudFN0eWxlUmFkaW9CdXR0b25Hcm91cCBleHRlbmRzIE5vZGUge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGNvbXBvbmVudFN0eWxlUHJvcGVydHk6IEVudW1lcmF0aW9uUHJvcGVydHk8Q29tcG9uZW50VmVjdG9yU3R5bGVzPiApIHtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIHJhZGlvIGJ1dHRvbnMuIE5vdGUgdGhhdCBvcmRlciBvZiBlbnVtIHZhbHVlcyBkZXRlcm1pbmVzIG9yZGVyIG9mIGJ1dHRvbnMuXHJcbiAgICBjb25zdCBidXR0b25zOiBSZWN0YW5ndWxhclJhZGlvQnV0dG9uPENvbXBvbmVudFZlY3RvclN0eWxlcz5bXSA9IFtdO1xyXG4gICAgQ29tcG9uZW50VmVjdG9yU3R5bGVzLmVudW1lcmF0aW9uLnZhbHVlcy5mb3JFYWNoKCBjb21wb25lbnRTdHlsZSA9PiB7XHJcbiAgICAgIGJ1dHRvbnMucHVzaCggbmV3IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b24oIGNvbXBvbmVudFN0eWxlUHJvcGVydHksIGNvbXBvbmVudFN0eWxlLFxyXG4gICAgICAgIG1lcmdlKCB7fSwgVmVjdG9yQWRkaXRpb25Db25zdGFudHMuUkFESU9fQlVUVE9OX0dST1VQX09QVElPTlMucmFkaW9CdXR0b25PcHRpb25zLCB7XHJcbiAgICAgICAgICBjb250ZW50OiBWZWN0b3JBZGRpdGlvbkljb25GYWN0b3J5LmNyZWF0ZUNvbXBvbmVudFN0eWxlUmFkaW9CdXR0b25JY29uKCBjb21wb25lbnRTdHlsZSApXHJcbiAgICAgICAgfSApICkgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBBcnJhbmdlIHRoZSBidXR0b25zIGluIGEgZ3JpZFxyXG4gICAgY29uc3QgZ3JpZEJveCA9IG5ldyBHcmlkQm94KCBidXR0b25zLCB7XHJcbiAgICAgIGNvbHVtbnM6IDJcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICBjaGlsZHJlbjogWyBncmlkQm94IF0sXHJcbiAgICAgIGlzRGlzcG9zYWJsZTogZmFsc2VcclxuICAgIH0gKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnQ29tcG9uZW50U3R5bGVSYWRpb0J1dHRvbkdyb3VwJywgQ29tcG9uZW50U3R5bGVSYWRpb0J1dHRvbkdyb3VwICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLEtBQUssTUFBTSxtQ0FBbUM7QUFDckQsU0FBU0MsSUFBSSxRQUFRLG1DQUFtQztBQUN4RCxPQUFPQyxzQkFBc0IsTUFBTSxzREFBc0Q7QUFDekYsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxxQkFBcUIsTUFBTSxtQ0FBbUM7QUFDckUsT0FBT0MsdUJBQXVCLE1BQU0sK0JBQStCO0FBQ25FLE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBQ2xDLE9BQU9DLHlCQUF5QixNQUFNLGdDQUFnQztBQUV0RSxlQUFlLE1BQU1DLDhCQUE4QixTQUFTUCxJQUFJLENBQUM7RUFFeERRLFdBQVdBLENBQUVDLHNCQUFrRSxFQUFHO0lBRXZGO0lBQ0EsTUFBTUMsT0FBd0QsR0FBRyxFQUFFO0lBQ25FUCxxQkFBcUIsQ0FBQ1EsV0FBVyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBRUMsY0FBYyxJQUFJO01BQ2xFSixPQUFPLENBQUNLLElBQUksQ0FBRSxJQUFJZCxzQkFBc0IsQ0FBRVEsc0JBQXNCLEVBQUVLLGNBQWMsRUFDOUVmLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRUssdUJBQXVCLENBQUNZLDBCQUEwQixDQUFDQyxrQkFBa0IsRUFBRTtRQUNoRkMsT0FBTyxFQUFFWix5QkFBeUIsQ0FBQ2EsbUNBQW1DLENBQUVMLGNBQWU7TUFDekYsQ0FBRSxDQUFFLENBQUUsQ0FBQztJQUNYLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1NLE9BQU8sR0FBRyxJQUFJZixPQUFPLENBQUVLLE9BQU8sRUFBRTtNQUNwQ1csT0FBTyxFQUFFO0lBQ1gsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFO01BQ0xDLFFBQVEsRUFBRSxDQUFFRixPQUFPLENBQUU7TUFDckJHLFlBQVksRUFBRTtJQUNoQixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFyQixjQUFjLENBQUNzQixRQUFRLENBQUUsZ0NBQWdDLEVBQUVqQiw4QkFBK0IsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==