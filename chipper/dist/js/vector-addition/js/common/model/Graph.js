// Copyright 2019-2023, University of Colorado Boulder

/**
 * Graph is the base class for graphs, intended to be sub-classed. A screen can have multiple graphs.
 *
 * Graphs are responsible for:
 *   - Keeping track of where the origin is dragged and updating a modelViewTransformProperty.
 *   - Keeping track of the active (selected) vector on a graph.
 *   - Managing one or more VectorSets
 *
 * @author Brandon Li
 */

import DerivedProperty from '../../../../axon/js/DerivedProperty.js';
import Property from '../../../../axon/js/Property.js';
import Bounds2 from '../../../../dot/js/Bounds2.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import ModelViewTransform2 from '../../../../phetcommon/js/view/ModelViewTransform2.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import GraphOrientations from './GraphOrientations.js';
import optionize from '../../../../phet-core/js/optionize.js';
import Disposable from '../../../../axon/js/Disposable.js';

// scale of the coordinate transformation of model coordinates to view coordinates
const MODEL_TO_VIEW_SCALE = 14.5;
export default class Graph {
  // the vectorSets for this graph

  // orientation of the graph

  // coordinate snap mode for the graph, Cartesian or polar

  // Bounds of the graph, in model coordinates. Use graphModelBounds() to read this.

  // bounds of the graph in view coordinates, constant for the lifetime of the sim.

  // maps graph coordinates between model and view

  // The active (selected) vector. A graph has at most one active vector. If null, there is no active vector.

  // Since the origin is being dragged, modelViewTransform is in the model. That being said, it is necessary to know the
  // view coordinates of the graph node's bottom-left to calculate the model view transform.
  // Calculate the default for the grid's bottom-left, in view coordinates.
  static DEFAULT_BOTTOM_LEFT = new Vector2(VectorAdditionConstants.SCREEN_VIEW_BOUNDS.minX + VectorAdditionConstants.AXES_ARROW_X_EXTENSION + 10, VectorAdditionConstants.SCREEN_VIEW_BOUNDS.maxY - VectorAdditionConstants.AXES_ARROW_Y_EXTENSION - 45);

  /**
   * @param initialGraphBounds - the model bounds of the graph at the start of the sim
   * @param coordinateSnapMode - the coordinate snap mode of the graph. A graph is either strictly polar or Cartesian.
   * @param [providedOptions]
   */
  constructor(initialGraphBounds, coordinateSnapMode, providedOptions) {
    const options = optionize()({
      // SelfOptions
      orientation: GraphOrientations.TWO_DIMENSIONAL,
      bottomLeft: Graph.DEFAULT_BOTTOM_LEFT
    }, providedOptions);
    this.vectorSets = [];
    this.orientation = options.orientation;
    this.coordinateSnapMode = coordinateSnapMode;
    this.graphModelBoundsProperty = new Property(initialGraphBounds, {
      valueType: Bounds2
    });
    this.graphViewBounds = new Bounds2(options.bottomLeft.x, options.bottomLeft.y - MODEL_TO_VIEW_SCALE * initialGraphBounds.height, options.bottomLeft.x + MODEL_TO_VIEW_SCALE * initialGraphBounds.width, options.bottomLeft.y);
    this.modelViewTransformProperty = new DerivedProperty([this.graphModelBoundsProperty], graphModelBounds => ModelViewTransform2.createRectangleInvertedYMapping(graphModelBounds, this.graphViewBounds), {
      valueType: ModelViewTransform2
    });
    this.activeVectorProperty = new Property(null);
  }
  dispose() {
    Disposable.assertNotDisposable();
  }
  reset() {
    this.graphModelBoundsProperty.reset();
    this.vectorSets.forEach(vectorSet => vectorSet.reset());
    this.activeVectorProperty.reset();
  }

  /**
   * Erases the graph.
   */
  erase() {
    this.vectorSets.forEach(vectorSet => vectorSet.erase());
    this.activeVectorProperty.reset();
  }

  /**
   * Moves the origin to a specified point on the graph.
   */
  moveOriginToPoint(point) {
    assert && assert(this.graphModelBoundsProperty.value.containsPoint(point), `point is out of bounds: ${point}`);

    // Round to integer
    const roundedPoint = point.roundSymmetric();
    this.graphModelBoundsProperty.value = this.graphModelBounds.shiftedXY(-roundedPoint.x, -roundedPoint.y);
  }

  /**
   * Gets the bounds of the graph
   */
  get graphModelBounds() {
    return this.graphModelBoundsProperty.value;
  }
}
vectorAddition.register('Graph', Graph);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,