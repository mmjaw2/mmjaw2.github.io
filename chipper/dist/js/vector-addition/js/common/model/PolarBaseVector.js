// Copyright 2019-2023, University of Colorado Boulder

/**
 * PolarBaseVector is the subclass of BaseVector used with CoordinateSnapModes.POLAR.
 * It creates NumberProperties for the angle and magnitude that are controlled by NumberPickers, and
 * adjusts its x and y components based on the values of those Properties.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import NumberProperty from '../../../../axon/js/NumberProperty.js';
import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import vectorAddition from '../../vectorAddition.js';
import BaseVector from './BaseVector.js';
import CoordinateSnapModes from './CoordinateSnapModes.js';
export default class PolarBaseVector extends BaseVector {
  /**
   * @param initialTailPosition - starting tail position of the Base Vector
   * @param initialComponents - starting components of the Base Vector
   * @param graph - the graph the Base Vector belongs to
   * @param vectorSet - the set that the Base Vector belongs to
   * @param symbol - the symbol for the Base Vector (i.e. 'a', 'b', 'c', ...)
   */
  constructor(initialTailPosition, initialComponents, graph, vectorSet, symbol) {
    assert && assert(graph.coordinateSnapMode === CoordinateSnapModes.POLAR, `invalid coordinateSnapMode: ${graph.coordinateSnapMode}`);
    super(initialTailPosition, initialComponents, graph, vectorSet, symbol);
    this.magnitudeProperty = new NumberProperty(this.magnitude);
    const initialAngle = this.angle;
    assert && assert(initialAngle !== null, 'expected this.angle to be non-null');
    this.angleDegreesProperty = new NumberProperty(Utils.toDegrees(initialAngle));

    // Observe when the angle or magnitude changes, and update the components to match.
    // unmultilink is unnecessary, exists for the lifetime of the sim.
    Multilink.multilink([this.magnitudeProperty, this.angleDegreesProperty], (magnitude, angleDegrees) => {
      this.vectorComponents = Vector2.createPolar(magnitude, Utils.toRadians(angleDegrees));
    });
  }
  reset() {
    super.reset();
    this.magnitudeProperty.reset();
    this.angleDegreesProperty.reset();
  }
}
vectorAddition.register('PolarBaseVector', PolarBaseVector);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJOdW1iZXJQcm9wZXJ0eSIsIlV0aWxzIiwiVmVjdG9yMiIsInZlY3RvckFkZGl0aW9uIiwiQmFzZVZlY3RvciIsIkNvb3JkaW5hdGVTbmFwTW9kZXMiLCJQb2xhckJhc2VWZWN0b3IiLCJjb25zdHJ1Y3RvciIsImluaXRpYWxUYWlsUG9zaXRpb24iLCJpbml0aWFsQ29tcG9uZW50cyIsImdyYXBoIiwidmVjdG9yU2V0Iiwic3ltYm9sIiwiYXNzZXJ0IiwiY29vcmRpbmF0ZVNuYXBNb2RlIiwiUE9MQVIiLCJtYWduaXR1ZGVQcm9wZXJ0eSIsIm1hZ25pdHVkZSIsImluaXRpYWxBbmdsZSIsImFuZ2xlIiwiYW5nbGVEZWdyZWVzUHJvcGVydHkiLCJ0b0RlZ3JlZXMiLCJtdWx0aWxpbmsiLCJhbmdsZURlZ3JlZXMiLCJ2ZWN0b3JDb21wb25lbnRzIiwiY3JlYXRlUG9sYXIiLCJ0b1JhZGlhbnMiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUG9sYXJCYXNlVmVjdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBvbGFyQmFzZVZlY3RvciBpcyB0aGUgc3ViY2xhc3Mgb2YgQmFzZVZlY3RvciB1c2VkIHdpdGggQ29vcmRpbmF0ZVNuYXBNb2Rlcy5QT0xBUi5cclxuICogSXQgY3JlYXRlcyBOdW1iZXJQcm9wZXJ0aWVzIGZvciB0aGUgYW5nbGUgYW5kIG1hZ25pdHVkZSB0aGF0IGFyZSBjb250cm9sbGVkIGJ5IE51bWJlclBpY2tlcnMsIGFuZFxyXG4gKiBhZGp1c3RzIGl0cyB4IGFuZCB5IGNvbXBvbmVudHMgYmFzZWQgb24gdGhlIHZhbHVlcyBvZiB0aG9zZSBQcm9wZXJ0aWVzLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgTXVsdGlsaW5rIGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5pbXBvcnQgQmFzZVZlY3RvciBmcm9tICcuL0Jhc2VWZWN0b3IuanMnO1xyXG5pbXBvcnQgQ29vcmRpbmF0ZVNuYXBNb2RlcyBmcm9tICcuL0Nvb3JkaW5hdGVTbmFwTW9kZXMuanMnO1xyXG5pbXBvcnQgR3JhcGggZnJvbSAnLi9HcmFwaC5qcyc7XHJcbmltcG9ydCBWZWN0b3JTZXQgZnJvbSAnLi9WZWN0b3JTZXQuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgUG9sYXJCYXNlVmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvciB7XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBtYWduaXR1ZGVQcm9wZXJ0eTogTnVtYmVyUHJvcGVydHk7XHJcbiAgcHVibGljIHJlYWRvbmx5IGFuZ2xlRGVncmVlc1Byb3BlcnR5OiBOdW1iZXJQcm9wZXJ0eTtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGluaXRpYWxUYWlsUG9zaXRpb24gLSBzdGFydGluZyB0YWlsIHBvc2l0aW9uIG9mIHRoZSBCYXNlIFZlY3RvclxyXG4gICAqIEBwYXJhbSBpbml0aWFsQ29tcG9uZW50cyAtIHN0YXJ0aW5nIGNvbXBvbmVudHMgb2YgdGhlIEJhc2UgVmVjdG9yXHJcbiAgICogQHBhcmFtIGdyYXBoIC0gdGhlIGdyYXBoIHRoZSBCYXNlIFZlY3RvciBiZWxvbmdzIHRvXHJcbiAgICogQHBhcmFtIHZlY3RvclNldCAtIHRoZSBzZXQgdGhhdCB0aGUgQmFzZSBWZWN0b3IgYmVsb25ncyB0b1xyXG4gICAqIEBwYXJhbSBzeW1ib2wgLSB0aGUgc3ltYm9sIGZvciB0aGUgQmFzZSBWZWN0b3IgKGkuZS4gJ2EnLCAnYicsICdjJywgLi4uKVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaW5pdGlhbFRhaWxQb3NpdGlvbjogVmVjdG9yMiwgaW5pdGlhbENvbXBvbmVudHM6IFZlY3RvcjIsIGdyYXBoOiBHcmFwaCxcclxuICAgICAgICAgICAgICAgICAgICAgIHZlY3RvclNldDogVmVjdG9yU2V0LCBzeW1ib2w6IHN0cmluZyB8IG51bGwgKSB7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggZ3JhcGguY29vcmRpbmF0ZVNuYXBNb2RlID09PSBDb29yZGluYXRlU25hcE1vZGVzLlBPTEFSLCBgaW52YWxpZCBjb29yZGluYXRlU25hcE1vZGU6ICR7Z3JhcGguY29vcmRpbmF0ZVNuYXBNb2RlfWAgKTtcclxuXHJcbiAgICBzdXBlciggaW5pdGlhbFRhaWxQb3NpdGlvbiwgaW5pdGlhbENvbXBvbmVudHMsIGdyYXBoLCB2ZWN0b3JTZXQsIHN5bWJvbCApO1xyXG5cclxuICAgIHRoaXMubWFnbml0dWRlUHJvcGVydHkgPSBuZXcgTnVtYmVyUHJvcGVydHkoIHRoaXMubWFnbml0dWRlICk7XHJcblxyXG4gICAgY29uc3QgaW5pdGlhbEFuZ2xlID0gdGhpcy5hbmdsZSE7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBpbml0aWFsQW5nbGUgIT09IG51bGwsICdleHBlY3RlZCB0aGlzLmFuZ2xlIHRvIGJlIG5vbi1udWxsJyApO1xyXG4gICAgdGhpcy5hbmdsZURlZ3JlZXNQcm9wZXJ0eSA9IG5ldyBOdW1iZXJQcm9wZXJ0eSggVXRpbHMudG9EZWdyZWVzKCBpbml0aWFsQW5nbGUgKSApO1xyXG5cclxuICAgIC8vIE9ic2VydmUgd2hlbiB0aGUgYW5nbGUgb3IgbWFnbml0dWRlIGNoYW5nZXMsIGFuZCB1cGRhdGUgdGhlIGNvbXBvbmVudHMgdG8gbWF0Y2guXHJcbiAgICAvLyB1bm11bHRpbGluayBpcyB1bm5lY2Vzc2FyeSwgZXhpc3RzIGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbS5cclxuICAgIE11bHRpbGluay5tdWx0aWxpbmsoXHJcbiAgICAgIFsgdGhpcy5tYWduaXR1ZGVQcm9wZXJ0eSwgdGhpcy5hbmdsZURlZ3JlZXNQcm9wZXJ0eSBdLFxyXG4gICAgICAoIG1hZ25pdHVkZSwgYW5nbGVEZWdyZWVzICkgPT4ge1xyXG4gICAgICAgIHRoaXMudmVjdG9yQ29tcG9uZW50cyA9IFZlY3RvcjIuY3JlYXRlUG9sYXIoIG1hZ25pdHVkZSwgVXRpbHMudG9SYWRpYW5zKCBhbmdsZURlZ3JlZXMgKSApO1xyXG4gICAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy5tYWduaXR1ZGVQcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgdGhpcy5hbmdsZURlZ3JlZXNQcm9wZXJ0eS5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdQb2xhckJhc2VWZWN0b3InLCBQb2xhckJhc2VWZWN0b3IgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLGtDQUFrQztBQUN4RCxPQUFPQyxjQUFjLE1BQU0sdUNBQXVDO0FBQ2xFLE9BQU9DLEtBQUssTUFBTSw2QkFBNkI7QUFDL0MsT0FBT0MsT0FBTyxNQUFNLCtCQUErQjtBQUNuRCxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLFVBQVUsTUFBTSxpQkFBaUI7QUFDeEMsT0FBT0MsbUJBQW1CLE1BQU0sMEJBQTBCO0FBSTFELGVBQWUsTUFBTUMsZUFBZSxTQUFTRixVQUFVLENBQUM7RUFLdEQ7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0csV0FBV0EsQ0FBRUMsbUJBQTRCLEVBQUVDLGlCQUEwQixFQUFFQyxLQUFZLEVBQ3RFQyxTQUFvQixFQUFFQyxNQUFxQixFQUFHO0lBRWhFQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsS0FBSyxDQUFDSSxrQkFBa0IsS0FBS1QsbUJBQW1CLENBQUNVLEtBQUssRUFBRywrQkFBOEJMLEtBQUssQ0FBQ0ksa0JBQW1CLEVBQUUsQ0FBQztJQUVySSxLQUFLLENBQUVOLG1CQUFtQixFQUFFQyxpQkFBaUIsRUFBRUMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLE1BQU8sQ0FBQztJQUV6RSxJQUFJLENBQUNJLGlCQUFpQixHQUFHLElBQUloQixjQUFjLENBQUUsSUFBSSxDQUFDaUIsU0FBVSxDQUFDO0lBRTdELE1BQU1DLFlBQVksR0FBRyxJQUFJLENBQUNDLEtBQU07SUFDaENOLE1BQU0sSUFBSUEsTUFBTSxDQUFFSyxZQUFZLEtBQUssSUFBSSxFQUFFLG9DQUFxQyxDQUFDO0lBQy9FLElBQUksQ0FBQ0Usb0JBQW9CLEdBQUcsSUFBSXBCLGNBQWMsQ0FBRUMsS0FBSyxDQUFDb0IsU0FBUyxDQUFFSCxZQUFhLENBQUUsQ0FBQzs7SUFFakY7SUFDQTtJQUNBbkIsU0FBUyxDQUFDdUIsU0FBUyxDQUNqQixDQUFFLElBQUksQ0FBQ04saUJBQWlCLEVBQUUsSUFBSSxDQUFDSSxvQkFBb0IsQ0FBRSxFQUNyRCxDQUFFSCxTQUFTLEVBQUVNLFlBQVksS0FBTTtNQUM3QixJQUFJLENBQUNDLGdCQUFnQixHQUFHdEIsT0FBTyxDQUFDdUIsV0FBVyxDQUFFUixTQUFTLEVBQUVoQixLQUFLLENBQUN5QixTQUFTLENBQUVILFlBQWEsQ0FBRSxDQUFDO0lBQzNGLENBQUUsQ0FBQztFQUNQO0VBRWdCSSxLQUFLQSxDQUFBLEVBQVM7SUFDNUIsS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQ1gsaUJBQWlCLENBQUNXLEtBQUssQ0FBQyxDQUFDO0lBQzlCLElBQUksQ0FBQ1Asb0JBQW9CLENBQUNPLEtBQUssQ0FBQyxDQUFDO0VBQ25DO0FBQ0Y7QUFFQXhCLGNBQWMsQ0FBQ3lCLFFBQVEsQ0FBRSxpQkFBaUIsRUFBRXRCLGVBQWdCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=