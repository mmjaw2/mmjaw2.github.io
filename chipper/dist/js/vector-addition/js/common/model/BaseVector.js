// Copyright 2019-2023, University of Colorado Boulder

/**
 * BaseVector is the abstract base class for base vectors.  It disables tip dragging and removal of vectors.
 * Base vectors are created at the start of the sim, and are never disposed.
 * See https://github.com/phetsims/vector-addition/issues/63 for an overview of how BaseVectors fit into the class
 * hierarchy.
 *
 * @author Brandon Li
 */

import vectorAddition from '../../vectorAddition.js';
import Vector from './Vector.js';
// constants
const OPTIONS = {
  isRemovable: false,
  // BaseVectors are not removable
  isTipDraggable: false,
  // BaseVectors are not draggable by the tip
  isOnGraphInitially: true,
  // BaseVectors are always on the graph
  isDisposable: false
};
export default class BaseVector extends Vector {
  /**
   * @param initialTailPosition - starting tail position of the BaseVector
   * @param initialComponents - starting components of the BaseVector
   * @param graph - the graph the BaseVector belongs to
   * @param vectorSet - the set that the BaseVector belongs to
   * @param symbol - the symbol for the Base Vector (i.e. 'a', 'b', 'c', ...)
   */
  constructor(initialTailPosition, initialComponents, graph, vectorSet, symbol) {
    super(initialTailPosition, initialComponents, graph, vectorSet, symbol, OPTIONS);
  }
}
vectorAddition.register('BaseVector', BaseVector);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ2ZWN0b3JBZGRpdGlvbiIsIlZlY3RvciIsIk9QVElPTlMiLCJpc1JlbW92YWJsZSIsImlzVGlwRHJhZ2dhYmxlIiwiaXNPbkdyYXBoSW5pdGlhbGx5IiwiaXNEaXNwb3NhYmxlIiwiQmFzZVZlY3RvciIsImNvbnN0cnVjdG9yIiwiaW5pdGlhbFRhaWxQb3NpdGlvbiIsImluaXRpYWxDb21wb25lbnRzIiwiZ3JhcGgiLCJ2ZWN0b3JTZXQiLCJzeW1ib2wiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkJhc2VWZWN0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQmFzZVZlY3RvciBpcyB0aGUgYWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgYmFzZSB2ZWN0b3JzLiAgSXQgZGlzYWJsZXMgdGlwIGRyYWdnaW5nIGFuZCByZW1vdmFsIG9mIHZlY3RvcnMuXHJcbiAqIEJhc2UgdmVjdG9ycyBhcmUgY3JlYXRlZCBhdCB0aGUgc3RhcnQgb2YgdGhlIHNpbSwgYW5kIGFyZSBuZXZlciBkaXNwb3NlZC5cclxuICogU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzYzIGZvciBhbiBvdmVydmlldyBvZiBob3cgQmFzZVZlY3RvcnMgZml0IGludG8gdGhlIGNsYXNzXHJcbiAqIGhpZXJhcmNoeS5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHZlY3RvckFkZGl0aW9uIGZyb20gJy4uLy4uL3ZlY3RvckFkZGl0aW9uLmpzJztcclxuaW1wb3J0IFZlY3RvciBmcm9tICcuL1ZlY3Rvci5qcyc7XHJcbmltcG9ydCBHcmFwaCBmcm9tICcuL0dyYXBoLmpzJztcclxuaW1wb3J0IFZlY3RvclNldCBmcm9tICcuL1ZlY3RvclNldC5qcyc7XHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBPUFRJT05TID0ge1xyXG4gIGlzUmVtb3ZhYmxlOiBmYWxzZSwgICAgICAgLy8gQmFzZVZlY3RvcnMgYXJlIG5vdCByZW1vdmFibGVcclxuICBpc1RpcERyYWdnYWJsZTogZmFsc2UsICAgIC8vIEJhc2VWZWN0b3JzIGFyZSBub3QgZHJhZ2dhYmxlIGJ5IHRoZSB0aXBcclxuICBpc09uR3JhcGhJbml0aWFsbHk6IHRydWUsIC8vIEJhc2VWZWN0b3JzIGFyZSBhbHdheXMgb24gdGhlIGdyYXBoXHJcbiAgaXNEaXNwb3NhYmxlOiBmYWxzZVxyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYWJzdHJhY3QgY2xhc3MgQmFzZVZlY3RvciBleHRlbmRzIFZlY3RvciB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBpbml0aWFsVGFpbFBvc2l0aW9uIC0gc3RhcnRpbmcgdGFpbCBwb3NpdGlvbiBvZiB0aGUgQmFzZVZlY3RvclxyXG4gICAqIEBwYXJhbSBpbml0aWFsQ29tcG9uZW50cyAtIHN0YXJ0aW5nIGNvbXBvbmVudHMgb2YgdGhlIEJhc2VWZWN0b3JcclxuICAgKiBAcGFyYW0gZ3JhcGggLSB0aGUgZ3JhcGggdGhlIEJhc2VWZWN0b3IgYmVsb25ncyB0b1xyXG4gICAqIEBwYXJhbSB2ZWN0b3JTZXQgLSB0aGUgc2V0IHRoYXQgdGhlIEJhc2VWZWN0b3IgYmVsb25ncyB0b1xyXG4gICAqIEBwYXJhbSBzeW1ib2wgLSB0aGUgc3ltYm9sIGZvciB0aGUgQmFzZSBWZWN0b3IgKGkuZS4gJ2EnLCAnYicsICdjJywgLi4uKVxyXG4gICAqL1xyXG4gIHByb3RlY3RlZCBjb25zdHJ1Y3RvciggaW5pdGlhbFRhaWxQb3NpdGlvbjogVmVjdG9yMiwgaW5pdGlhbENvbXBvbmVudHM6IFZlY3RvcjIsIGdyYXBoOiBHcmFwaCxcclxuICAgICAgICAgICAgICAgICAgICAgICAgIHZlY3RvclNldDogVmVjdG9yU2V0LCBzeW1ib2w6IHN0cmluZyB8IG51bGwgKSB7XHJcblxyXG4gICAgc3VwZXIoIGluaXRpYWxUYWlsUG9zaXRpb24sIGluaXRpYWxDb21wb25lbnRzLCBncmFwaCwgdmVjdG9yU2V0LCBzeW1ib2wsIE9QVElPTlMgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnQmFzZVZlY3RvcicsIEJhc2VWZWN0b3IgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUtoQztBQUNBLE1BQU1DLE9BQU8sR0FBRztFQUNkQyxXQUFXLEVBQUUsS0FBSztFQUFRO0VBQzFCQyxjQUFjLEVBQUUsS0FBSztFQUFLO0VBQzFCQyxrQkFBa0IsRUFBRSxJQUFJO0VBQUU7RUFDMUJDLFlBQVksRUFBRTtBQUNoQixDQUFDO0FBRUQsZUFBZSxNQUFlQyxVQUFVLFNBQVNOLE1BQU0sQ0FBQztFQUV0RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNZTyxXQUFXQSxDQUFFQyxtQkFBNEIsRUFBRUMsaUJBQTBCLEVBQUVDLEtBQVksRUFDdEVDLFNBQW9CLEVBQUVDLE1BQXFCLEVBQUc7SUFFbkUsS0FBSyxDQUFFSixtQkFBbUIsRUFBRUMsaUJBQWlCLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFFQyxNQUFNLEVBQUVYLE9BQVEsQ0FBQztFQUNwRjtBQUNGO0FBRUFGLGNBQWMsQ0FBQ2MsUUFBUSxDQUFFLFlBQVksRUFBRVAsVUFBVyxDQUFDIiwiaWdub3JlTGlzdCI6W119