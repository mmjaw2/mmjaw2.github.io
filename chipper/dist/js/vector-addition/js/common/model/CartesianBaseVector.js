// Copyright 2019-2023, University of Colorado Boulder

/**
 * CartesianBaseVector is the subclass of BaseVector used with CoordinateSnapModes.CARTESIAN.
 * It creates NumberProperties for the x and y components that are controlled by NumberPickers, and
 * adjusts its x and y components based on the values of those Properties.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import NumberProperty from '../../../../axon/js/NumberProperty.js';
import vectorAddition from '../../vectorAddition.js';
import BaseVector from './BaseVector.js';
import CoordinateSnapModes from './CoordinateSnapModes.js';
export default class CartesianBaseVector extends BaseVector {
  // The x and y components of the vector

  /**
   * @param initialTailPosition - starting tail position of the Base Vector
   * @param initialComponents - starting components of the Base Vector
   * @param graph - the graph the Base Vector belongs to
   * @param vectorSet - the set that the Base Vector belongs to
   * @param symbol - the symbol for the Base Vector (e.g. 'a', 'b', 'c', ...)
   */
  constructor(initialTailPosition, initialComponents, graph, vectorSet, symbol) {
    assert && assert(graph.coordinateSnapMode === CoordinateSnapModes.CARTESIAN, `invalid coordinateSnapMode: ${graph.coordinateSnapMode}`);
    super(initialTailPosition, initialComponents, graph, vectorSet, symbol);
    this.xComponentProperty = new NumberProperty(this.xComponent);
    this.yComponentProperty = new NumberProperty(this.yComponent);

    // Observe when the component NumberProperties change and update the components to match.
    // unlink is unnecessary, exists for the lifetime of the sim.
    this.xComponentProperty.link(xComponent => {
      this.xComponent = xComponent;
    });
    this.yComponentProperty.link(yComponent => {
      this.yComponent = yComponent;
    });
  }
  reset() {
    super.reset();
    this.xComponentProperty.reset();
    this.yComponentProperty.reset();
  }
}
vectorAddition.register('CartesianBaseVector', CartesianBaseVector);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOdW1iZXJQcm9wZXJ0eSIsInZlY3RvckFkZGl0aW9uIiwiQmFzZVZlY3RvciIsIkNvb3JkaW5hdGVTbmFwTW9kZXMiLCJDYXJ0ZXNpYW5CYXNlVmVjdG9yIiwiY29uc3RydWN0b3IiLCJpbml0aWFsVGFpbFBvc2l0aW9uIiwiaW5pdGlhbENvbXBvbmVudHMiLCJncmFwaCIsInZlY3RvclNldCIsInN5bWJvbCIsImFzc2VydCIsImNvb3JkaW5hdGVTbmFwTW9kZSIsIkNBUlRFU0lBTiIsInhDb21wb25lbnRQcm9wZXJ0eSIsInhDb21wb25lbnQiLCJ5Q29tcG9uZW50UHJvcGVydHkiLCJ5Q29tcG9uZW50IiwibGluayIsInJlc2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJDYXJ0ZXNpYW5CYXNlVmVjdG9yLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENhcnRlc2lhbkJhc2VWZWN0b3IgaXMgdGhlIHN1YmNsYXNzIG9mIEJhc2VWZWN0b3IgdXNlZCB3aXRoIENvb3JkaW5hdGVTbmFwTW9kZXMuQ0FSVEVTSUFOLlxyXG4gKiBJdCBjcmVhdGVzIE51bWJlclByb3BlcnRpZXMgZm9yIHRoZSB4IGFuZCB5IGNvbXBvbmVudHMgdGhhdCBhcmUgY29udHJvbGxlZCBieSBOdW1iZXJQaWNrZXJzLCBhbmRcclxuICogYWRqdXN0cyBpdHMgeCBhbmQgeSBjb21wb25lbnRzIGJhc2VkIG9uIHRoZSB2YWx1ZXMgb2YgdGhvc2UgUHJvcGVydGllcy5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IE51bWJlclByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvTnVtYmVyUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5pbXBvcnQgQmFzZVZlY3RvciBmcm9tICcuL0Jhc2VWZWN0b3IuanMnO1xyXG5pbXBvcnQgQ29vcmRpbmF0ZVNuYXBNb2RlcyBmcm9tICcuL0Nvb3JkaW5hdGVTbmFwTW9kZXMuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBHcmFwaCBmcm9tICcuL0dyYXBoLmpzJztcclxuaW1wb3J0IFZlY3RvclNldCBmcm9tICcuL1ZlY3RvclNldC5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBDYXJ0ZXNpYW5CYXNlVmVjdG9yIGV4dGVuZHMgQmFzZVZlY3RvciB7XHJcblxyXG4gIC8vIFRoZSB4IGFuZCB5IGNvbXBvbmVudHMgb2YgdGhlIHZlY3RvclxyXG4gIHB1YmxpYyByZWFkb25seSB4Q29tcG9uZW50UHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG4gIHB1YmxpYyByZWFkb25seSB5Q29tcG9uZW50UHJvcGVydHk6IE51bWJlclByb3BlcnR5O1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gaW5pdGlhbFRhaWxQb3NpdGlvbiAtIHN0YXJ0aW5nIHRhaWwgcG9zaXRpb24gb2YgdGhlIEJhc2UgVmVjdG9yXHJcbiAgICogQHBhcmFtIGluaXRpYWxDb21wb25lbnRzIC0gc3RhcnRpbmcgY29tcG9uZW50cyBvZiB0aGUgQmFzZSBWZWN0b3JcclxuICAgKiBAcGFyYW0gZ3JhcGggLSB0aGUgZ3JhcGggdGhlIEJhc2UgVmVjdG9yIGJlbG9uZ3MgdG9cclxuICAgKiBAcGFyYW0gdmVjdG9yU2V0IC0gdGhlIHNldCB0aGF0IHRoZSBCYXNlIFZlY3RvciBiZWxvbmdzIHRvXHJcbiAgICogQHBhcmFtIHN5bWJvbCAtIHRoZSBzeW1ib2wgZm9yIHRoZSBCYXNlIFZlY3RvciAoZS5nLiAnYScsICdiJywgJ2MnLCAuLi4pXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBpbml0aWFsVGFpbFBvc2l0aW9uOiBWZWN0b3IyLCBpbml0aWFsQ29tcG9uZW50czogVmVjdG9yMiwgZ3JhcGg6IEdyYXBoLFxyXG4gICAgICAgICAgICAgICAgICAgICAgdmVjdG9yU2V0OiBWZWN0b3JTZXQsIHN5bWJvbDogc3RyaW5nIHwgbnVsbCApIHtcclxuXHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBncmFwaC5jb29yZGluYXRlU25hcE1vZGUgPT09IENvb3JkaW5hdGVTbmFwTW9kZXMuQ0FSVEVTSUFOLCBgaW52YWxpZCBjb29yZGluYXRlU25hcE1vZGU6ICR7Z3JhcGguY29vcmRpbmF0ZVNuYXBNb2RlfWAgKTtcclxuXHJcbiAgICBzdXBlciggaW5pdGlhbFRhaWxQb3NpdGlvbiwgaW5pdGlhbENvbXBvbmVudHMsIGdyYXBoLCB2ZWN0b3JTZXQsIHN5bWJvbCApO1xyXG5cclxuICAgIHRoaXMueENvbXBvbmVudFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCB0aGlzLnhDb21wb25lbnQgKTtcclxuICAgIHRoaXMueUNvbXBvbmVudFByb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCB0aGlzLnlDb21wb25lbnQgKTtcclxuXHJcbiAgICAvLyBPYnNlcnZlIHdoZW4gdGhlIGNvbXBvbmVudCBOdW1iZXJQcm9wZXJ0aWVzIGNoYW5nZSBhbmQgdXBkYXRlIHRoZSBjb21wb25lbnRzIHRvIG1hdGNoLlxyXG4gICAgLy8gdW5saW5rIGlzIHVubmVjZXNzYXJ5LCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltLlxyXG4gICAgdGhpcy54Q29tcG9uZW50UHJvcGVydHkubGluayggeENvbXBvbmVudCA9PiB7IHRoaXMueENvbXBvbmVudCA9IHhDb21wb25lbnQ7IH0gKTtcclxuICAgIHRoaXMueUNvbXBvbmVudFByb3BlcnR5LmxpbmsoIHlDb21wb25lbnQgPT4geyB0aGlzLnlDb21wb25lbnQgPSB5Q29tcG9uZW50OyB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy54Q29tcG9uZW50UHJvcGVydHkucmVzZXQoKTtcclxuICAgIHRoaXMueUNvbXBvbmVudFByb3BlcnR5LnJlc2V0KCk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWN0b3JBZGRpdGlvbi5yZWdpc3RlciggJ0NhcnRlc2lhbkJhc2VWZWN0b3InLCBDYXJ0ZXNpYW5CYXNlVmVjdG9yICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSx1Q0FBdUM7QUFDbEUsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUNwRCxPQUFPQyxVQUFVLE1BQU0saUJBQWlCO0FBQ3hDLE9BQU9DLG1CQUFtQixNQUFNLDBCQUEwQjtBQUsxRCxlQUFlLE1BQU1DLG1CQUFtQixTQUFTRixVQUFVLENBQUM7RUFFMUQ7O0VBSUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0csV0FBV0EsQ0FBRUMsbUJBQTRCLEVBQUVDLGlCQUEwQixFQUFFQyxLQUFZLEVBQ3RFQyxTQUFvQixFQUFFQyxNQUFxQixFQUFHO0lBRWhFQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsS0FBSyxDQUFDSSxrQkFBa0IsS0FBS1QsbUJBQW1CLENBQUNVLFNBQVMsRUFBRywrQkFBOEJMLEtBQUssQ0FBQ0ksa0JBQW1CLEVBQUUsQ0FBQztJQUV6SSxLQUFLLENBQUVOLG1CQUFtQixFQUFFQyxpQkFBaUIsRUFBRUMsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLE1BQU8sQ0FBQztJQUV6RSxJQUFJLENBQUNJLGtCQUFrQixHQUFHLElBQUlkLGNBQWMsQ0FBRSxJQUFJLENBQUNlLFVBQVcsQ0FBQztJQUMvRCxJQUFJLENBQUNDLGtCQUFrQixHQUFHLElBQUloQixjQUFjLENBQUUsSUFBSSxDQUFDaUIsVUFBVyxDQUFDOztJQUUvRDtJQUNBO0lBQ0EsSUFBSSxDQUFDSCxrQkFBa0IsQ0FBQ0ksSUFBSSxDQUFFSCxVQUFVLElBQUk7TUFBRSxJQUFJLENBQUNBLFVBQVUsR0FBR0EsVUFBVTtJQUFFLENBQUUsQ0FBQztJQUMvRSxJQUFJLENBQUNDLGtCQUFrQixDQUFDRSxJQUFJLENBQUVELFVBQVUsSUFBSTtNQUFFLElBQUksQ0FBQ0EsVUFBVSxHQUFHQSxVQUFVO0lBQUUsQ0FBRSxDQUFDO0VBQ2pGO0VBRWdCRSxLQUFLQSxDQUFBLEVBQVM7SUFDNUIsS0FBSyxDQUFDQSxLQUFLLENBQUMsQ0FBQztJQUNiLElBQUksQ0FBQ0wsa0JBQWtCLENBQUNLLEtBQUssQ0FBQyxDQUFDO0lBQy9CLElBQUksQ0FBQ0gsa0JBQWtCLENBQUNHLEtBQUssQ0FBQyxDQUFDO0VBQ2pDO0FBQ0Y7QUFFQWxCLGNBQWMsQ0FBQ21CLFFBQVEsQ0FBRSxxQkFBcUIsRUFBRWhCLG1CQUFvQixDQUFDIiwiaWdub3JlTGlzdCI6W119