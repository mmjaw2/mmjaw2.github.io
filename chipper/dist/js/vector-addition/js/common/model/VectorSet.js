// Copyright 2019-2023, University of Colorado Boulder

/**
 * VectorSet is the model for a related set of vectors, and contains:
 *
 *  - an ObservableArrayDef of vectors
 *  - a sum vector of those vectors
 *  - a color palette that is common to all vectors
 *
 * A Graph can support multiple VectorSets. (e.g. Lab screen has 2 VectorSets per Graph)
 *
 * @author Brandon Li
 */

import createObservableArray from '../../../../axon/js/createObservableArray.js';
import vectorAddition from '../../vectorAddition.js';
import VectorAdditionConstants from '../VectorAdditionConstants.js';
import SumVector from './SumVector.js';
import optionize from '../../../../phet-core/js/optionize.js';
import Disposable from '../../../../axon/js/Disposable.js';

// The symbol for the sum vector.
// The reason this isn't translatable is https://github.com/phetsims/vector-addition/issues/10.
const SUM_SYMBOL = 's';
export default class VectorSet {
  // This array contains only what is referred to as main or parent vectors. It does not contain sum vectors,
  // component vectors, or base vectors.

  // settable by subclasses, specifically EquationsVectorSet

  /**
   * @param graph - the graph the VectorSet belongs to
   * @param componentStyleProperty - component style for all vectors
   * @param sumVisibleProperty - controls whether the sum vector is visible
   * @param vectorColorPalette - color palette for vectors in this set
   * @param [providedOptions]
   */
  constructor(graph, componentStyleProperty, sumVisibleProperty, vectorColorPalette, providedOptions) {
    // Compute values for the options that are related to the PROJECTION style component vectors.
    // See https://github.com/phetsims/vector-addition/issues/225
    const viewHeadWidth = VectorAdditionConstants.COMPONENT_VECTOR_ARROW_OPTIONS.headWidth;
    assert && assert(viewHeadWidth !== undefined, 'viewHeadWidth must be defined');
    const modelHeadWidth = graph.modelViewTransformProperty.value.viewToModelDeltaX(viewHeadWidth);
    const axisSpacing = graph.modelViewTransformProperty.value.viewToModelDeltaX(1.5);
    const offsetStart = modelHeadWidth / 2 + axisSpacing;
    const offsetDelta = modelHeadWidth;
    const options = optionize()({
      // SelfOptions
      initializeSum: true,
      initialSumTailPosition: graph.graphModelBounds.center,
      projectionXOffsetStart: -offsetStart,
      projectionYOffsetStart: -offsetStart,
      projectionXOffsetDelta: -offsetDelta,
      projectionYOffsetDelta: -offsetDelta,
      sumProjectionXOffset: offsetStart,
      sumProjectionYOffset: offsetStart
    }, providedOptions);
    this.vectors = createObservableArray();
    this.vectorColorPalette = vectorColorPalette;
    this.sumVisibleProperty = sumVisibleProperty;
    this.componentStyleProperty = componentStyleProperty;
    this.projectionXOffsetStart = options.projectionXOffsetStart;
    this.projectionYOffsetStart = options.projectionYOffsetStart;
    this.sumProjectionXOffset = options.sumProjectionXOffset;
    this.sumProjectionYOffset = options.sumProjectionYOffset;
    if (options.initializeSum) {
      this._sumVector = new SumVector(options.initialSumTailPosition, graph, this, SUM_SYMBOL);
      this._sumVector.setProjectionOffsets(options.sumProjectionXOffset, options.sumProjectionYOffset);
    } else {
      this._sumVector = null;
    }

    // Whenever a vector is added or removed, adjust the offsets of all component vectors for PROJECTION style.
    // See https://github.com/phetsims/vector-addition/issues/225
    // unlink is unnecessary, since VectorSet own this.vectors.
    this.vectors.lengthProperty.link(length => {
      for (let i = 0; i < length; i++) {
        const xOffset = options.projectionXOffsetStart + i * options.projectionXOffsetDelta;
        const yOffset = options.projectionYOffsetStart + i * options.projectionYOffsetDelta;
        this.vectors.get(i).setProjectionOffsets(xOffset, yOffset);
      }
    });
  }
  dispose() {
    Disposable.assertNotDisposable();
  }
  get sumVector() {
    return this._sumVector;
  }
  reset() {
    this.erase();
    this._sumVector && this._sumVector.reset();
  }

  /**
   * Erases all vectors (except the sum) from the VectorSet. Called when the eraser button is pressed.
   */
  erase() {
    while (this.vectors.length > 0) {
      this.vectors.pop().dispose();
    }
  }
}
vectorAddition.register('VectorSet', VectorSet);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjcmVhdGVPYnNlcnZhYmxlQXJyYXkiLCJ2ZWN0b3JBZGRpdGlvbiIsIlZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIiwiU3VtVmVjdG9yIiwib3B0aW9uaXplIiwiRGlzcG9zYWJsZSIsIlNVTV9TWU1CT0wiLCJWZWN0b3JTZXQiLCJjb25zdHJ1Y3RvciIsImdyYXBoIiwiY29tcG9uZW50U3R5bGVQcm9wZXJ0eSIsInN1bVZpc2libGVQcm9wZXJ0eSIsInZlY3RvckNvbG9yUGFsZXR0ZSIsInByb3ZpZGVkT3B0aW9ucyIsInZpZXdIZWFkV2lkdGgiLCJDT01QT05FTlRfVkVDVE9SX0FSUk9XX09QVElPTlMiLCJoZWFkV2lkdGgiLCJhc3NlcnQiLCJ1bmRlZmluZWQiLCJtb2RlbEhlYWRXaWR0aCIsIm1vZGVsVmlld1RyYW5zZm9ybVByb3BlcnR5IiwidmFsdWUiLCJ2aWV3VG9Nb2RlbERlbHRhWCIsImF4aXNTcGFjaW5nIiwib2Zmc2V0U3RhcnQiLCJvZmZzZXREZWx0YSIsIm9wdGlvbnMiLCJpbml0aWFsaXplU3VtIiwiaW5pdGlhbFN1bVRhaWxQb3NpdGlvbiIsImdyYXBoTW9kZWxCb3VuZHMiLCJjZW50ZXIiLCJwcm9qZWN0aW9uWE9mZnNldFN0YXJ0IiwicHJvamVjdGlvbllPZmZzZXRTdGFydCIsInByb2plY3Rpb25YT2Zmc2V0RGVsdGEiLCJwcm9qZWN0aW9uWU9mZnNldERlbHRhIiwic3VtUHJvamVjdGlvblhPZmZzZXQiLCJzdW1Qcm9qZWN0aW9uWU9mZnNldCIsInZlY3RvcnMiLCJfc3VtVmVjdG9yIiwic2V0UHJvamVjdGlvbk9mZnNldHMiLCJsZW5ndGhQcm9wZXJ0eSIsImxpbmsiLCJsZW5ndGgiLCJpIiwieE9mZnNldCIsInlPZmZzZXQiLCJnZXQiLCJkaXNwb3NlIiwiYXNzZXJ0Tm90RGlzcG9zYWJsZSIsInN1bVZlY3RvciIsInJlc2V0IiwiZXJhc2UiLCJwb3AiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlZlY3RvclNldC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBWZWN0b3JTZXQgaXMgdGhlIG1vZGVsIGZvciBhIHJlbGF0ZWQgc2V0IG9mIHZlY3RvcnMsIGFuZCBjb250YWluczpcclxuICpcclxuICogIC0gYW4gT2JzZXJ2YWJsZUFycmF5RGVmIG9mIHZlY3RvcnNcclxuICogIC0gYSBzdW0gdmVjdG9yIG9mIHRob3NlIHZlY3RvcnNcclxuICogIC0gYSBjb2xvciBwYWxldHRlIHRoYXQgaXMgY29tbW9uIHRvIGFsbCB2ZWN0b3JzXHJcbiAqXHJcbiAqIEEgR3JhcGggY2FuIHN1cHBvcnQgbXVsdGlwbGUgVmVjdG9yU2V0cy4gKGUuZy4gTGFiIHNjcmVlbiBoYXMgMiBWZWN0b3JTZXRzIHBlciBHcmFwaClcclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGNyZWF0ZU9ic2VydmFibGVBcnJheSwgeyBPYnNlcnZhYmxlQXJyYXkgfSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL2NyZWF0ZU9ic2VydmFibGVBcnJheS5qcyc7XHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyBmcm9tICcuLi9WZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCBDb21wb25lbnRWZWN0b3JTdHlsZXMgZnJvbSAnLi9Db21wb25lbnRWZWN0b3JTdHlsZXMuanMnO1xyXG5pbXBvcnQgU3VtVmVjdG9yIGZyb20gJy4vU3VtVmVjdG9yLmpzJztcclxuaW1wb3J0IFZlY3RvckNvbG9yUGFsZXR0ZSBmcm9tICcuL1ZlY3RvckNvbG9yUGFsZXR0ZS5qcyc7XHJcbmltcG9ydCBHcmFwaCBmcm9tICcuL0dyYXBoLmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBWZWN0b3IgZnJvbSAnLi9WZWN0b3IuanMnO1xyXG5pbXBvcnQgRGlzcG9zYWJsZSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL0Rpc3Bvc2FibGUuanMnO1xyXG5cclxuLy8gVGhlIHN5bWJvbCBmb3IgdGhlIHN1bSB2ZWN0b3IuXHJcbi8vIFRoZSByZWFzb24gdGhpcyBpc24ndCB0cmFuc2xhdGFibGUgaXMgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlY3Rvci1hZGRpdGlvbi9pc3N1ZXMvMTAuXHJcbmNvbnN0IFNVTV9TWU1CT0wgPSAncyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG5cclxuICAvLyBmYWxzZSBtZWFucyB0aGF0IHRoZSBkZWZhdWx0IFN1bVZlY3RvciB3aWxsIG5vdCBiZSBjcmVhdGVkLCBhbmQgYSBzdWJjbGFzcyBpcyByZXNwb25zaWJsZSBmb3IgaW5pdGlhbGl6aW5nIHRoaXMuc3VtVmVjdG9yLlxyXG4gIGluaXRpYWxpemVTdW0/OiBib29sZWFuO1xyXG5cclxuICAvLyBpbml0aWFsIHRhaWwgcG9zaXRpb24gb2YgdGhlIHN1bS4gT25seSB1c2VkIGlmIG9wdGlvbnMuaW5pdGlhbGl6ZVN1bSA9IHRydWVcclxuICBpbml0aWFsU3VtVGFpbFBvc2l0aW9uPzogVmVjdG9yMjtcclxuXHJcbiAgLy8gT2Zmc2V0cyBmb3IgcHJpbWFyeSBjb21wb25lbnQgdmVjdG9ycyBpbiBQUk9KRUNUSU9OIHN0eWxlXHJcbiAgcHJvamVjdGlvblhPZmZzZXRTdGFydD86IG51bWJlcjtcclxuICBwcm9qZWN0aW9uWU9mZnNldFN0YXJ0PzogbnVtYmVyO1xyXG4gIHByb2plY3Rpb25YT2Zmc2V0RGVsdGE/OiBudW1iZXI7XHJcbiAgcHJvamVjdGlvbllPZmZzZXREZWx0YT86IG51bWJlcjtcclxuXHJcbiAgLy8gT2Zmc2V0cyBmb3Igc3VtIGNvbXBvbmVudCB2ZWN0b3JzIGluIFBST0pFQ1RJT04gc3R5bGVcclxuICBzdW1Qcm9qZWN0aW9uWE9mZnNldD86IG51bWJlcjtcclxuICBzdW1Qcm9qZWN0aW9uWU9mZnNldD86IG51bWJlcjtcclxufTtcclxuXHJcbnR5cGUgVmVjdG9yU2V0T3B0aW9ucyA9IFNlbGZPcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgVmVjdG9yU2V0IHtcclxuXHJcbiAgLy8gVGhpcyBhcnJheSBjb250YWlucyBvbmx5IHdoYXQgaXMgcmVmZXJyZWQgdG8gYXMgbWFpbiBvciBwYXJlbnQgdmVjdG9ycy4gSXQgZG9lcyBub3QgY29udGFpbiBzdW0gdmVjdG9ycyxcclxuICAvLyBjb21wb25lbnQgdmVjdG9ycywgb3IgYmFzZSB2ZWN0b3JzLlxyXG4gIHB1YmxpYyByZWFkb25seSB2ZWN0b3JzOiBPYnNlcnZhYmxlQXJyYXk8VmVjdG9yPjtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IHZlY3RvckNvbG9yUGFsZXR0ZTogVmVjdG9yQ29sb3JQYWxldHRlO1xyXG4gIHB1YmxpYyByZWFkb25seSBzdW1WaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+O1xyXG4gIHB1YmxpYyByZWFkb25seSBjb21wb25lbnRTdHlsZVByb3BlcnR5OiBFbnVtZXJhdGlvblByb3BlcnR5PENvbXBvbmVudFZlY3RvclN0eWxlcz47XHJcblxyXG4gIHB1YmxpYyByZWFkb25seSBwcm9qZWN0aW9uWE9mZnNldFN0YXJ0OiBudW1iZXI7XHJcbiAgcHVibGljIHJlYWRvbmx5IHByb2plY3Rpb25ZT2Zmc2V0U3RhcnQ6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgc3VtUHJvamVjdGlvblhPZmZzZXQ6IG51bWJlcjtcclxuICBwdWJsaWMgcmVhZG9ubHkgc3VtUHJvamVjdGlvbllPZmZzZXQ6IG51bWJlcjtcclxuXHJcbiAgcHJvdGVjdGVkIF9zdW1WZWN0b3I6IFN1bVZlY3RvciB8IG51bGw7IC8vIHNldHRhYmxlIGJ5IHN1YmNsYXNzZXMsIHNwZWNpZmljYWxseSBFcXVhdGlvbnNWZWN0b3JTZXRcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGdyYXBoIC0gdGhlIGdyYXBoIHRoZSBWZWN0b3JTZXQgYmVsb25ncyB0b1xyXG4gICAqIEBwYXJhbSBjb21wb25lbnRTdHlsZVByb3BlcnR5IC0gY29tcG9uZW50IHN0eWxlIGZvciBhbGwgdmVjdG9yc1xyXG4gICAqIEBwYXJhbSBzdW1WaXNpYmxlUHJvcGVydHkgLSBjb250cm9scyB3aGV0aGVyIHRoZSBzdW0gdmVjdG9yIGlzIHZpc2libGVcclxuICAgKiBAcGFyYW0gdmVjdG9yQ29sb3JQYWxldHRlIC0gY29sb3IgcGFsZXR0ZSBmb3IgdmVjdG9ycyBpbiB0aGlzIHNldFxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZ3JhcGg6IEdyYXBoLCBjb21wb25lbnRTdHlsZVByb3BlcnR5OiBFbnVtZXJhdGlvblByb3BlcnR5PENvbXBvbmVudFZlY3RvclN0eWxlcz4sXHJcbiAgICAgICAgICAgICAgICAgICAgICBzdW1WaXNpYmxlUHJvcGVydHk6IFByb3BlcnR5PGJvb2xlYW4+LCB2ZWN0b3JDb2xvclBhbGV0dGU6IFZlY3RvckNvbG9yUGFsZXR0ZSxcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IFZlY3RvclNldE9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gQ29tcHV0ZSB2YWx1ZXMgZm9yIHRoZSBvcHRpb25zIHRoYXQgYXJlIHJlbGF0ZWQgdG8gdGhlIFBST0pFQ1RJT04gc3R5bGUgY29tcG9uZW50IHZlY3RvcnMuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlY3Rvci1hZGRpdGlvbi9pc3N1ZXMvMjI1XHJcbiAgICBjb25zdCB2aWV3SGVhZFdpZHRoID0gVmVjdG9yQWRkaXRpb25Db25zdGFudHMuQ09NUE9ORU5UX1ZFQ1RPUl9BUlJPV19PUFRJT05TLmhlYWRXaWR0aDtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHZpZXdIZWFkV2lkdGggIT09IHVuZGVmaW5lZCwgJ3ZpZXdIZWFkV2lkdGggbXVzdCBiZSBkZWZpbmVkJyApO1xyXG4gICAgY29uc3QgbW9kZWxIZWFkV2lkdGggPSBncmFwaC5tb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eS52YWx1ZS52aWV3VG9Nb2RlbERlbHRhWCggdmlld0hlYWRXaWR0aCApO1xyXG4gICAgY29uc3QgYXhpc1NwYWNpbmcgPSBncmFwaC5tb2RlbFZpZXdUcmFuc2Zvcm1Qcm9wZXJ0eS52YWx1ZS52aWV3VG9Nb2RlbERlbHRhWCggMS41ICk7XHJcbiAgICBjb25zdCBvZmZzZXRTdGFydCA9ICggbW9kZWxIZWFkV2lkdGggLyAyICkgKyBheGlzU3BhY2luZztcclxuICAgIGNvbnN0IG9mZnNldERlbHRhID0gbW9kZWxIZWFkV2lkdGg7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxWZWN0b3JTZXRPcHRpb25zLCBTZWxmT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gU2VsZk9wdGlvbnNcclxuICAgICAgaW5pdGlhbGl6ZVN1bTogdHJ1ZSxcclxuICAgICAgaW5pdGlhbFN1bVRhaWxQb3NpdGlvbjogZ3JhcGguZ3JhcGhNb2RlbEJvdW5kcy5jZW50ZXIsXHJcbiAgICAgIHByb2plY3Rpb25YT2Zmc2V0U3RhcnQ6IC1vZmZzZXRTdGFydCxcclxuICAgICAgcHJvamVjdGlvbllPZmZzZXRTdGFydDogLW9mZnNldFN0YXJ0LFxyXG4gICAgICBwcm9qZWN0aW9uWE9mZnNldERlbHRhOiAtb2Zmc2V0RGVsdGEsXHJcbiAgICAgIHByb2plY3Rpb25ZT2Zmc2V0RGVsdGE6IC1vZmZzZXREZWx0YSxcclxuICAgICAgc3VtUHJvamVjdGlvblhPZmZzZXQ6IG9mZnNldFN0YXJ0LFxyXG4gICAgICBzdW1Qcm9qZWN0aW9uWU9mZnNldDogb2Zmc2V0U3RhcnRcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMudmVjdG9ycyA9IGNyZWF0ZU9ic2VydmFibGVBcnJheSgpO1xyXG4gICAgdGhpcy52ZWN0b3JDb2xvclBhbGV0dGUgPSB2ZWN0b3JDb2xvclBhbGV0dGU7XHJcbiAgICB0aGlzLnN1bVZpc2libGVQcm9wZXJ0eSA9IHN1bVZpc2libGVQcm9wZXJ0eTtcclxuICAgIHRoaXMuY29tcG9uZW50U3R5bGVQcm9wZXJ0eSA9IGNvbXBvbmVudFN0eWxlUHJvcGVydHk7XHJcblxyXG4gICAgdGhpcy5wcm9qZWN0aW9uWE9mZnNldFN0YXJ0ID0gb3B0aW9ucy5wcm9qZWN0aW9uWE9mZnNldFN0YXJ0O1xyXG4gICAgdGhpcy5wcm9qZWN0aW9uWU9mZnNldFN0YXJ0ID0gb3B0aW9ucy5wcm9qZWN0aW9uWU9mZnNldFN0YXJ0O1xyXG4gICAgdGhpcy5zdW1Qcm9qZWN0aW9uWE9mZnNldCA9IG9wdGlvbnMuc3VtUHJvamVjdGlvblhPZmZzZXQ7XHJcbiAgICB0aGlzLnN1bVByb2plY3Rpb25ZT2Zmc2V0ID0gb3B0aW9ucy5zdW1Qcm9qZWN0aW9uWU9mZnNldDtcclxuXHJcbiAgICBpZiAoIG9wdGlvbnMuaW5pdGlhbGl6ZVN1bSApIHtcclxuICAgICAgdGhpcy5fc3VtVmVjdG9yID0gbmV3IFN1bVZlY3Rvciggb3B0aW9ucy5pbml0aWFsU3VtVGFpbFBvc2l0aW9uLCBncmFwaCwgdGhpcywgU1VNX1NZTUJPTCApO1xyXG4gICAgICB0aGlzLl9zdW1WZWN0b3Iuc2V0UHJvamVjdGlvbk9mZnNldHMoIG9wdGlvbnMuc3VtUHJvamVjdGlvblhPZmZzZXQsIG9wdGlvbnMuc3VtUHJvamVjdGlvbllPZmZzZXQgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICB0aGlzLl9zdW1WZWN0b3IgPSBudWxsO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIFdoZW5ldmVyIGEgdmVjdG9yIGlzIGFkZGVkIG9yIHJlbW92ZWQsIGFkanVzdCB0aGUgb2Zmc2V0cyBvZiBhbGwgY29tcG9uZW50IHZlY3RvcnMgZm9yIFBST0pFQ1RJT04gc3R5bGUuXHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlY3Rvci1hZGRpdGlvbi9pc3N1ZXMvMjI1XHJcbiAgICAvLyB1bmxpbmsgaXMgdW5uZWNlc3NhcnksIHNpbmNlIFZlY3RvclNldCBvd24gdGhpcy52ZWN0b3JzLlxyXG4gICAgdGhpcy52ZWN0b3JzLmxlbmd0aFByb3BlcnR5LmxpbmsoIGxlbmd0aCA9PiB7XHJcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGxlbmd0aDsgaSsrICkge1xyXG4gICAgICAgIGNvbnN0IHhPZmZzZXQgPSBvcHRpb25zLnByb2plY3Rpb25YT2Zmc2V0U3RhcnQgKyBpICogb3B0aW9ucy5wcm9qZWN0aW9uWE9mZnNldERlbHRhO1xyXG4gICAgICAgIGNvbnN0IHlPZmZzZXQgPSBvcHRpb25zLnByb2plY3Rpb25ZT2Zmc2V0U3RhcnQgKyBpICogb3B0aW9ucy5wcm9qZWN0aW9uWU9mZnNldERlbHRhO1xyXG4gICAgICAgIHRoaXMudmVjdG9ycy5nZXQoIGkgKS5zZXRQcm9qZWN0aW9uT2Zmc2V0cyggeE9mZnNldCwgeU9mZnNldCApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIERpc3Bvc2FibGUuYXNzZXJ0Tm90RGlzcG9zYWJsZSgpO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBzdW1WZWN0b3IoKTogU3VtVmVjdG9yIHwgbnVsbCB7XHJcbiAgICByZXR1cm4gdGhpcy5fc3VtVmVjdG9yO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5lcmFzZSgpO1xyXG4gICAgdGhpcy5fc3VtVmVjdG9yICYmIHRoaXMuX3N1bVZlY3Rvci5yZXNldCgpO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogRXJhc2VzIGFsbCB2ZWN0b3JzIChleGNlcHQgdGhlIHN1bSkgZnJvbSB0aGUgVmVjdG9yU2V0LiBDYWxsZWQgd2hlbiB0aGUgZXJhc2VyIGJ1dHRvbiBpcyBwcmVzc2VkLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBlcmFzZSgpOiB2b2lkIHtcclxuICAgIHdoaWxlICggdGhpcy52ZWN0b3JzLmxlbmd0aCA+IDAgKSB7XHJcbiAgICAgIHRoaXMudmVjdG9ycy5wb3AoKSEuZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdWZWN0b3JTZXQnLCBWZWN0b3JTZXQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EscUJBQXFCLE1BQTJCLDhDQUE4QztBQUVyRyxPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBQ3BELE9BQU9DLHVCQUF1QixNQUFNLCtCQUErQjtBQUVuRSxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBS3RDLE9BQU9DLFNBQVMsTUFBTSx1Q0FBdUM7QUFFN0QsT0FBT0MsVUFBVSxNQUFNLG1DQUFtQzs7QUFFMUQ7QUFDQTtBQUNBLE1BQU1DLFVBQVUsR0FBRyxHQUFHO0FBdUJ0QixlQUFlLE1BQU1DLFNBQVMsQ0FBQztFQUU3QjtFQUNBOztFQVl3Qzs7RUFFeEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsS0FBWSxFQUFFQyxzQkFBa0UsRUFDaEZDLGtCQUFxQyxFQUFFQyxrQkFBc0MsRUFD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