// Copyright 2019-2023, University of Colorado Boulder

/**
 * EquationsSumVector is a specialization of SumVector for the 'Equations' screen.  It computes the 'sum' differently
 * depending on the equation type.  Instances exist for the lifetime of the sim and do not need to be disposed.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Multilink from '../../../../axon/js/Multilink.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import merge from '../../../../phet-core/js/merge.js';
import SumVector from '../../common/model/SumVector.js';
import vectorAddition from '../../vectorAddition.js';
import EquationTypes from './EquationTypes.js';
// constants
const EQUATIONS_SUM_TAIL_POSITION = new Vector2(25, 5);
export default class EquationsSumVector extends SumVector {
  /**
   * @param graph - graph the sum vector belongs to
   * @param vectorSet - the vector set that the sum vector represents
   * @param equationTypeProperty
   * @param symbol - the symbol for the vector (i.e. 'a', 'b', 'c', ...)
   */
  constructor(graph, vectorSet, equationTypeProperty, symbol) {
    super(EQUATIONS_SUM_TAIL_POSITION, graph, vectorSet, symbol);
    this.equationTypeProperty = equationTypeProperty;

    // Observe when each vector changes and/or when the equationType changes to calculate the sum.
    // unmultilink is unnecessary, exists for the lifetime of the sim.
    const vectorComponentsProperties = vectorSet.vectors.map(vector => vector.vectorComponentsProperty);
    Multilink.multilinkAny([equationTypeProperty, ...vectorComponentsProperties], () => this.updateSum(vectorSet.vectors));
  }

  /**
   * Calculate the sum vector for the Equations screen.
   */
  updateSum(vectors) {
    const equationType = this.equationTypeProperty.value;

    // Denoted by 'a' + 'b' = 'c'
    if (equationType === EquationTypes.ADDITION) {
      const sum = new Vector2(0, 0);
      vectors.forEach(vector => {
        sum.add(vector.vectorComponents);
      });
      this.vectorComponents = sum;
    } else if (equationType === EquationTypes.SUBTRACTION) {
      const calculatedComponents = vectors.get(0).vectorComponents.copy();

      // Subtract from the first vector
      _.drop(vectors).forEach(vector => {
        calculatedComponents.subtract(vector.vectorComponents);
      });
      this.vectorComponents = calculatedComponents;
    } else if (equationType === EquationTypes.NEGATION) {
      // Same as addition but negated  : a + b = -c or a + b + c = 0
      const sum = new Vector2(0, 0);
      vectors.forEach(vector => {
        sum.add(vector.vectorComponents);
      });
      this.vectorComponents = sum.negate();
    }
  }

  /**
   * See RootVector.getLabelDisplayData for details.
   */
  getLabelDisplayData(valuesVisible) {
    return merge(super.getLabelDisplayData(valuesVisible), {
      symbol: this.symbol
    });
  }
  reset() {
    super.reset();

    // In the Equations screen, vectors are never removed, so we need to explicitly call updateSum.
    // See https://github.com/phetsims/vector-addition/issues/129
    this.updateSum(this.vectorSet.vectors);
  }
}
vectorAddition.register('EquationsSumVector', EquationsSumVector);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aWxpbmsiLCJWZWN0b3IyIiwibWVyZ2UiLCJTdW1WZWN0b3IiLCJ2ZWN0b3JBZGRpdGlvbiIsIkVxdWF0aW9uVHlwZXMiLCJFUVVBVElPTlNfU1VNX1RBSUxfUE9TSVRJT04iLCJFcXVhdGlvbnNTdW1WZWN0b3IiLCJjb25zdHJ1Y3RvciIsImdyYXBoIiwidmVjdG9yU2V0IiwiZXF1YXRpb25UeXBlUHJvcGVydHkiLCJzeW1ib2wiLCJ2ZWN0b3JDb21wb25lbnRzUHJvcGVydGllcyIsInZlY3RvcnMiLCJtYXAiLCJ2ZWN0b3IiLCJ2ZWN0b3JDb21wb25lbnRzUHJvcGVydHkiLCJtdWx0aWxpbmtBbnkiLCJ1cGRhdGVTdW0iLCJlcXVhdGlvblR5cGUiLCJ2YWx1ZSIsIkFERElUSU9OIiwic3VtIiwiZm9yRWFjaCIsImFkZCIsInZlY3RvckNvbXBvbmVudHMiLCJTVUJUUkFDVElPTiIsImNhbGN1bGF0ZWRDb21wb25lbnRzIiwiZ2V0IiwiY29weSIsIl8iLCJkcm9wIiwic3VidHJhY3QiLCJORUdBVElPTiIsIm5lZ2F0ZSIsImdldExhYmVsRGlzcGxheURhdGEiLCJ2YWx1ZXNWaXNpYmxlIiwicmVzZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkVxdWF0aW9uc1N1bVZlY3Rvci50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFcXVhdGlvbnNTdW1WZWN0b3IgaXMgYSBzcGVjaWFsaXphdGlvbiBvZiBTdW1WZWN0b3IgZm9yIHRoZSAnRXF1YXRpb25zJyBzY3JlZW4uICBJdCBjb21wdXRlcyB0aGUgJ3N1bScgZGlmZmVyZW50bHlcclxuICogZGVwZW5kaW5nIG9uIHRoZSBlcXVhdGlvbiB0eXBlLiAgSW5zdGFuY2VzIGV4aXN0IGZvciB0aGUgbGlmZXRpbWUgb2YgdGhlIHNpbSBhbmQgZG8gbm90IG5lZWQgdG8gYmUgZGlzcG9zZWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbnVtZXJhdGlvblByb3BlcnR5IGZyb20gJy4uLy4uLy4uLy4uL2F4b24vanMvRW51bWVyYXRpb25Qcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgVmVjdG9yMiBmcm9tICcuLi8uLi8uLi8uLi9kb3QvanMvVmVjdG9yMi5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgU3VtVmVjdG9yIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9TdW1WZWN0b3IuanMnO1xyXG5pbXBvcnQgdmVjdG9yQWRkaXRpb24gZnJvbSAnLi4vLi4vdmVjdG9yQWRkaXRpb24uanMnO1xyXG5pbXBvcnQgRXF1YXRpb25UeXBlcyBmcm9tICcuL0VxdWF0aW9uVHlwZXMuanMnO1xyXG5pbXBvcnQgVmVjdG9yU2V0IGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9WZWN0b3JTZXQuanMnO1xyXG5pbXBvcnQgR3JhcGggZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0dyYXBoLmpzJztcclxuaW1wb3J0IHsgT2JzZXJ2YWJsZUFycmF5IH0gZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9jcmVhdGVPYnNlcnZhYmxlQXJyYXkuanMnO1xyXG5pbXBvcnQgVmVjdG9yIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9WZWN0b3IuanMnO1xyXG5pbXBvcnQgeyBMYWJlbERpc3BsYXlEYXRhIH0gZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL1Jvb3RWZWN0b3IuanMnO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbmNvbnN0IEVRVUFUSU9OU19TVU1fVEFJTF9QT1NJVElPTiA9IG5ldyBWZWN0b3IyKCAyNSwgNSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXF1YXRpb25zU3VtVmVjdG9yIGV4dGVuZHMgU3VtVmVjdG9yIHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBlcXVhdGlvblR5cGVQcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxFcXVhdGlvblR5cGVzPjtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGdyYXBoIC0gZ3JhcGggdGhlIHN1bSB2ZWN0b3IgYmVsb25ncyB0b1xyXG4gICAqIEBwYXJhbSB2ZWN0b3JTZXQgLSB0aGUgdmVjdG9yIHNldCB0aGF0IHRoZSBzdW0gdmVjdG9yIHJlcHJlc2VudHNcclxuICAgKiBAcGFyYW0gZXF1YXRpb25UeXBlUHJvcGVydHlcclxuICAgKiBAcGFyYW0gc3ltYm9sIC0gdGhlIHN5bWJvbCBmb3IgdGhlIHZlY3RvciAoaS5lLiAnYScsICdiJywgJ2MnLCAuLi4pXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBncmFwaDogR3JhcGgsIHZlY3RvclNldDogVmVjdG9yU2V0LCBlcXVhdGlvblR5cGVQcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxFcXVhdGlvblR5cGVzPixcclxuICAgICAgICAgICAgICAgICAgICAgIHN5bWJvbDogc3RyaW5nIHwgbnVsbCApIHtcclxuXHJcbiAgICBzdXBlciggRVFVQVRJT05TX1NVTV9UQUlMX1BPU0lUSU9OLCBncmFwaCwgdmVjdG9yU2V0LCBzeW1ib2wgKTtcclxuXHJcbiAgICB0aGlzLmVxdWF0aW9uVHlwZVByb3BlcnR5ID0gZXF1YXRpb25UeXBlUHJvcGVydHk7XHJcblxyXG4gICAgLy8gT2JzZXJ2ZSB3aGVuIGVhY2ggdmVjdG9yIGNoYW5nZXMgYW5kL29yIHdoZW4gdGhlIGVxdWF0aW9uVHlwZSBjaGFuZ2VzIHRvIGNhbGN1bGF0ZSB0aGUgc3VtLlxyXG4gICAgLy8gdW5tdWx0aWxpbmsgaXMgdW5uZWNlc3NhcnksIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0uXHJcbiAgICBjb25zdCB2ZWN0b3JDb21wb25lbnRzUHJvcGVydGllcyA9IHZlY3RvclNldC52ZWN0b3JzLm1hcCggdmVjdG9yID0+IHZlY3Rvci52ZWN0b3JDb21wb25lbnRzUHJvcGVydHkgKTtcclxuICAgIE11bHRpbGluay5tdWx0aWxpbmtBbnkoIFsgZXF1YXRpb25UeXBlUHJvcGVydHksIC4uLnZlY3RvckNvbXBvbmVudHNQcm9wZXJ0aWVzIF0sXHJcbiAgICAgICgpID0+IHRoaXMudXBkYXRlU3VtKCB2ZWN0b3JTZXQudmVjdG9ycyApXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ2FsY3VsYXRlIHRoZSBzdW0gdmVjdG9yIGZvciB0aGUgRXF1YXRpb25zIHNjcmVlbi5cclxuICAgKi9cclxuICBwdWJsaWMgb3ZlcnJpZGUgdXBkYXRlU3VtKCB2ZWN0b3JzOiBPYnNlcnZhYmxlQXJyYXk8VmVjdG9yPiApOiB2b2lkIHtcclxuXHJcbiAgICBjb25zdCBlcXVhdGlvblR5cGUgPSB0aGlzLmVxdWF0aW9uVHlwZVByb3BlcnR5LnZhbHVlO1xyXG5cclxuICAgIC8vIERlbm90ZWQgYnkgJ2EnICsgJ2InID0gJ2MnXHJcbiAgICBpZiAoIGVxdWF0aW9uVHlwZSA9PT0gRXF1YXRpb25UeXBlcy5BRERJVElPTiApIHtcclxuICAgICAgY29uc3Qgc3VtID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcclxuXHJcbiAgICAgIHZlY3RvcnMuZm9yRWFjaCggdmVjdG9yID0+IHtcclxuICAgICAgICBzdW0uYWRkKCB2ZWN0b3IudmVjdG9yQ29tcG9uZW50cyApO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICB0aGlzLnZlY3RvckNvbXBvbmVudHMgPSBzdW07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggZXF1YXRpb25UeXBlID09PSBFcXVhdGlvblR5cGVzLlNVQlRSQUNUSU9OICkge1xyXG4gICAgICBjb25zdCBjYWxjdWxhdGVkQ29tcG9uZW50cyA9IHZlY3RvcnMuZ2V0KCAwICkudmVjdG9yQ29tcG9uZW50cy5jb3B5KCk7XHJcblxyXG4gICAgICAvLyBTdWJ0cmFjdCBmcm9tIHRoZSBmaXJzdCB2ZWN0b3JcclxuICAgICAgXy5kcm9wKCB2ZWN0b3JzICkuZm9yRWFjaCggdmVjdG9yID0+IHtcclxuICAgICAgICBjYWxjdWxhdGVkQ29tcG9uZW50cy5zdWJ0cmFjdCggdmVjdG9yLnZlY3RvckNvbXBvbmVudHMgKTtcclxuICAgICAgfSApO1xyXG5cclxuICAgICAgdGhpcy52ZWN0b3JDb21wb25lbnRzID0gY2FsY3VsYXRlZENvbXBvbmVudHM7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggZXF1YXRpb25UeXBlID09PSBFcXVhdGlvblR5cGVzLk5FR0FUSU9OICkge1xyXG5cclxuICAgICAgLy8gU2FtZSBhcyBhZGRpdGlvbiBidXQgbmVnYXRlZCAgOiBhICsgYiA9IC1jIG9yIGEgKyBiICsgYyA9IDBcclxuICAgICAgY29uc3Qgc3VtID0gbmV3IFZlY3RvcjIoIDAsIDAgKTtcclxuXHJcbiAgICAgIHZlY3RvcnMuZm9yRWFjaCggdmVjdG9yID0+IHtcclxuICAgICAgICBzdW0uYWRkKCB2ZWN0b3IudmVjdG9yQ29tcG9uZW50cyApO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICB0aGlzLnZlY3RvckNvbXBvbmVudHMgPSBzdW0ubmVnYXRlKCk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBTZWUgUm9vdFZlY3Rvci5nZXRMYWJlbERpc3BsYXlEYXRhIGZvciBkZXRhaWxzLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBnZXRMYWJlbERpc3BsYXlEYXRhKCB2YWx1ZXNWaXNpYmxlOiBib29sZWFuICk6IExhYmVsRGlzcGxheURhdGEge1xyXG4gICAgcmV0dXJuIG1lcmdlKCBzdXBlci5nZXRMYWJlbERpc3BsYXlEYXRhKCB2YWx1ZXNWaXNpYmxlICksIHtcclxuICAgICAgc3ltYm9sOiB0aGlzLnN5bWJvbFxyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgc3VwZXIucmVzZXQoKTtcclxuXHJcbiAgICAvLyBJbiB0aGUgRXF1YXRpb25zIHNjcmVlbiwgdmVjdG9ycyBhcmUgbmV2ZXIgcmVtb3ZlZCwgc28gd2UgbmVlZCB0byBleHBsaWNpdGx5IGNhbGwgdXBkYXRlU3VtLlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzEyOVxyXG4gICAgdGhpcy51cGRhdGVTdW0oIHRoaXMudmVjdG9yU2V0LnZlY3RvcnMgKTtcclxuICB9XHJcbn1cclxuXHJcbnZlY3RvckFkZGl0aW9uLnJlZ2lzdGVyKCAnRXF1YXRpb25zU3VtVmVjdG9yJywgRXF1YXRpb25zU3VtVmVjdG9yICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxTQUFTLE1BQU0sa0NBQWtDO0FBQ3hELE9BQU9DLE9BQU8sTUFBTSwrQkFBK0I7QUFDbkQsT0FBT0MsS0FBSyxNQUFNLG1DQUFtQztBQUNyRCxPQUFPQyxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFDcEQsT0FBT0MsYUFBYSxNQUFNLG9CQUFvQjtBQU85QztBQUNBLE1BQU1DLDJCQUEyQixHQUFHLElBQUlMLE9BQU8sQ0FBRSxFQUFFLEVBQUUsQ0FBRSxDQUFDO0FBRXhELGVBQWUsTUFBTU0sa0JBQWtCLFNBQVNKLFNBQVMsQ0FBQztFQUl4RDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0ssV0FBV0EsQ0FBRUMsS0FBWSxFQUFFQyxTQUFvQixFQUFFQyxvQkFBd0QsRUFDNUZDLE1BQXFCLEVBQUc7SUFFMUMsS0FBSyxDQUFFTiwyQkFBMkIsRUFBRUcsS0FBSyxFQUFFQyxTQUFTLEVBQUVFLE1BQU8sQ0FBQztJQUU5RCxJQUFJLENBQUNE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