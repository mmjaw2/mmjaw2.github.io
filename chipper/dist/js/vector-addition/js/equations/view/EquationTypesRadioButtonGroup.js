// Copyright 2019-2023, University of Colorado Boulder

/**
 * View for the radio button group near the top of the scene that allows the user to select a equation type.
 *
 * See EquationTypes.js
 *
 * 'Is a' relationship with RectangularRadioButtonGroup but adds:
 *    - Radio button for 'ADDITION' => 'a' + 'b' = 'c'
 *    - Radio button for 'SUBTRACTION' => 'a' - 'b' = 'c'
 *    - Radio button for 'NEGATION' => 'a' + 'b' + 'c' = 0
 *
 * Icons created from the VectorAdditionIconFactory.
 *
 * EquationTypesRadioButtonGroup is never disposed and exists for the entire simulation.
 *
 * @author Brandon Li
 * @author Chris Malley (PixelZoom, Inc.)
 */

import { AlignBox } from '../../../../scenery/js/imports.js';
import RectangularRadioButtonGroup from '../../../../sun/js/buttons/RectangularRadioButtonGroup.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import VectorAdditionIconFactory from '../../common/view/VectorAdditionIconFactory.js';
import vectorAddition from '../../vectorAddition.js';
import EquationTypes from '../model/EquationTypes.js';
import { optionize4 } from '../../../../phet-core/js/optionize.js';
export default class EquationTypesRadioButtonGroup extends RectangularRadioButtonGroup {
  constructor(equationTypeProperty, vectorSymbols,
  // symbols on the buttons
  alignGroup, providedOptions) {
    const options = optionize4()({}, VectorAdditionConstants.RADIO_BUTTON_GROUP_OPTIONS, {
      xMargin: 12,
      scale: 0.75,
      isDisposable: false
    }, providedOptions);

    // Create the description of the buttons
    const items = [];
    EquationTypes.enumeration.values.forEach(equationType => {
      items.push({
        value: equationType,
        createNode: () => new AlignBox(VectorAdditionIconFactory.createEquationTypeIcon(equationType, vectorSymbols), {
          group: alignGroup
        })
      });
    });
    super(equationTypeProperty, items, options);
  }
}
vectorAddition.register('EquationTypesRadioButtonGroup', EquationTypesRadioButtonGroup);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJBbGlnbkJveCIsIlJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cCIsIlZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIiwiVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeSIsInZlY3RvckFkZGl0aW9uIiwiRXF1YXRpb25UeXBlcyIsIm9wdGlvbml6ZTQiLCJFcXVhdGlvblR5cGVzUmFkaW9CdXR0b25Hcm91cCIsImNvbnN0cnVjdG9yIiwiZXF1YXRpb25UeXBlUHJvcGVydHkiLCJ2ZWN0b3JTeW1ib2xzIiwiYWxpZ25Hcm91cCIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJSQURJT19CVVRUT05fR1JPVVBfT1BUSU9OUyIsInhNYXJnaW4iLCJzY2FsZSIsImlzRGlzcG9zYWJsZSIsIml0ZW1zIiwiZW51bWVyYXRpb24iLCJ2YWx1ZXMiLCJmb3JFYWNoIiwiZXF1YXRpb25UeXBlIiwicHVzaCIsInZhbHVlIiwiY3JlYXRlTm9kZSIsImNyZWF0ZUVxdWF0aW9uVHlwZUljb24iLCJncm91cCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXF1YXRpb25UeXBlc1JhZGlvQnV0dG9uR3JvdXAudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVmlldyBmb3IgdGhlIHJhZGlvIGJ1dHRvbiBncm91cCBuZWFyIHRoZSB0b3Agb2YgdGhlIHNjZW5lIHRoYXQgYWxsb3dzIHRoZSB1c2VyIHRvIHNlbGVjdCBhIGVxdWF0aW9uIHR5cGUuXHJcbiAqXHJcbiAqIFNlZSBFcXVhdGlvblR5cGVzLmpzXHJcbiAqXHJcbiAqICdJcyBhJyByZWxhdGlvbnNoaXAgd2l0aCBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAgYnV0IGFkZHM6XHJcbiAqICAgIC0gUmFkaW8gYnV0dG9uIGZvciAnQURESVRJT04nID0+ICdhJyArICdiJyA9ICdjJ1xyXG4gKiAgICAtIFJhZGlvIGJ1dHRvbiBmb3IgJ1NVQlRSQUNUSU9OJyA9PiAnYScgLSAnYicgPSAnYydcclxuICogICAgLSBSYWRpbyBidXR0b24gZm9yICdORUdBVElPTicgPT4gJ2EnICsgJ2InICsgJ2MnID0gMFxyXG4gKlxyXG4gKiBJY29ucyBjcmVhdGVkIGZyb20gdGhlIFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkuXHJcbiAqXHJcbiAqIEVxdWF0aW9uVHlwZXNSYWRpb0J1dHRvbkdyb3VwIGlzIG5ldmVyIGRpc3Bvc2VkIGFuZCBleGlzdHMgZm9yIHRoZSBlbnRpcmUgc2ltdWxhdGlvbi5cclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IHsgQWxpZ25Cb3gsIEFsaWduR3JvdXAsIE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwLCB7IFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cEl0ZW0sIFJlY3Rhbmd1bGFyUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9zdW4vanMvYnV0dG9ucy9SZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQWRkaXRpb25JY29uRmFjdG9yeS5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBFcXVhdGlvblR5cGVzIGZyb20gJy4uL21vZGVsL0VxdWF0aW9uVHlwZXMuanMnO1xyXG5pbXBvcnQgeyBFbXB0eVNlbGZPcHRpb25zLCBvcHRpb25pemU0IH0gZnJvbSAnLi4vLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgRXF1YXRpb25UeXBlc1JhZGlvQnV0dG9uR3JvdXBPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBOb2RlVHJhbnNsYXRpb25PcHRpb25zO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXF1YXRpb25UeXBlc1JhZGlvQnV0dG9uR3JvdXAgZXh0ZW5kcyBSZWN0YW5ndWxhclJhZGlvQnV0dG9uR3JvdXA8RXF1YXRpb25UeXBlcz4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGVxdWF0aW9uVHlwZVByb3BlcnR5OiBFbnVtZXJhdGlvblByb3BlcnR5PEVxdWF0aW9uVHlwZXM+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgdmVjdG9yU3ltYm9sczogc3RyaW5nW10sIC8vIHN5bWJvbHMgb24gdGhlIGJ1dHRvbnNcclxuICAgICAgICAgICAgICAgICAgICAgIGFsaWduR3JvdXA6IEFsaWduR3JvdXAsXHJcbiAgICAgICAgICAgICAgICAgICAgICBwcm92aWRlZE9wdGlvbnM/OiBFcXVhdGlvblR5cGVzUmFkaW9CdXR0b25Hcm91cE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTQ8RXF1YXRpb25UeXBlc1JhZGlvQnV0dG9uR3JvdXBPcHRpb25zLCBTZWxmT3B0aW9ucywgUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwT3B0aW9ucz4oKShcclxuICAgICAge30sIFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLlJBRElPX0JVVFRPTl9HUk9VUF9PUFRJT05TLCB7XHJcbiAgICAgICAgeE1hcmdpbjogMTIsXHJcbiAgICAgICAgc2NhbGU6IDAuNzUsXHJcbiAgICAgICAgaXNEaXNwb3NhYmxlOiBmYWxzZVxyXG4gICAgICB9LCBwcm92aWRlZE9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgdGhlIGRlc2NyaXB0aW9uIG9mIHRoZSBidXR0b25zXHJcbiAgICBjb25zdCBpdGVtczogUmVjdGFuZ3VsYXJSYWRpb0J1dHRvbkdyb3VwSXRlbTxFcXVhdGlvblR5cGVzPltdID0gW107XHJcbiAgICBFcXVhdGlvblR5cGVzLmVudW1lcmF0aW9uLnZhbHVlcy5mb3JFYWNoKCBlcXVhdGlvblR5cGUgPT4ge1xyXG4gICAgICBpdGVtcy5wdXNoKCB7XHJcbiAgICAgICAgdmFsdWU6IGVxdWF0aW9uVHlwZSxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgQWxpZ25Cb3goIFZlY3RvckFkZGl0aW9uSWNvbkZhY3RvcnkuY3JlYXRlRXF1YXRpb25UeXBlSWNvbiggZXF1YXRpb25UeXBlLCB2ZWN0b3JTeW1ib2xzICksIHtcclxuICAgICAgICAgIGdyb3VwOiBhbGlnbkdyb3VwXHJcbiAgICAgICAgfSApXHJcbiAgICAgIH0gKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBzdXBlciggZXF1YXRpb25UeXBlUHJvcGVydHksIGl0ZW1zLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWN0b3JBZGRpdGlvbi5yZWdpc3RlciggJ0VxdWF0aW9uVHlwZXNSYWRpb0J1dHRvbkdyb3VwJywgRXF1YXRpb25UeXBlc1JhZGlvQnV0dG9uR3JvdXAgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsU0FBU0EsUUFBUSxRQUE0QyxtQ0FBbUM7QUFDaEcsT0FBT0MsMkJBQTJCLE1BQStFLDJEQUEyRDtBQUM1SyxPQUFPQyx1QkFBdUIsTUFBTSx5Q0FBeUM7QUFDN0UsT0FBT0MseUJBQXlCLE1BQU0sZ0RBQWdEO0FBQ3RGLE9BQU9DLGNBQWMsTUFBTSx5QkFBeUI7QUFDcEQsT0FBT0MsYUFBYSxNQUFNLDJCQUEyQjtBQUNyRCxTQUEyQkMsVUFBVSxRQUFRLHVDQUF1QztBQU1wRixlQUFlLE1BQU1DLDZCQUE2QixTQUFTTiwyQkFBMkIsQ0FBZ0I7RUFFN0ZPLFdBQVdBLENBQUVDLG9CQUF3RCxFQUN4REMsYUFBdUI7RUFBRTtFQUN6QkMsVUFBc0IsRUFDdEJDLGVBQXNELEVBQUc7SUFFM0UsTUFBTUMsT0FBTyxHQUFHUCxVQUFVLENBQXdGLENBQUMsQ0FDakgsQ0FBQyxDQUFDLEVBQUVKLHVCQUF1QixDQUFDWSwwQkFBMEIsRUFBRTtNQUN0REMsT0FBTyxFQUFFLEVBQUU7TUFDWEMsS0FBSyxFQUFFLElBQUk7TUFDWEMsWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFBRUwsZUFBZ0IsQ0FBQzs7SUFFdEI7SUFDQSxNQUFNTSxLQUF1RCxHQUFHLEVBQUU7SUFDbEViLGFBQWEsQ0FBQ2MsV0FBVyxDQUFDQyxNQUFNLENBQUNDLE9BQU8sQ0FBRUMsWUFBWSxJQUFJO01BQ3hESixLQUFLLENBQUNLLElBQUksQ0FBRTtRQUNWQyxLQUFLLEVBQUVGLFlBQVk7UUFDbkJHLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUl6QixRQUFRLENBQUVHLHlCQUF5QixDQUFDdUIsc0JBQXNCLENBQUVKLFlBQVksRUFBRVosYUFBYyxDQUFDLEVBQUU7VUFDL0dpQixLQUFLLEVBQUVoQjtRQUNULENBQUU7TUFDSixDQUFFLENBQUM7SUFDTCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVGLG9CQUFvQixFQUFFUyxLQUFLLEVBQUVMLE9BQVEsQ0FBQztFQUMvQztBQUNGO0FBRUFULGNBQWMsQ0FBQ3dCLFFBQVEsQ0FBRSwrQkFBK0IsRUFBRXJCLDZCQUE4QixDQUFDIiwiaWdub3JlTGlzdCI6W119