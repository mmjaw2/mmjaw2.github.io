// Copyright 2019-2024, University of Colorado Boulder

/**
 * Explore2DScreenView is the view for the 'Explore 2D' screen.
 *
 * @author Martin Veillette
 */

import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import CoordinateSnapRadioButtonGroup from '../../common/view/CoordinateSnapRadioButtonGroup.js';
import SceneNode from '../../common/view/SceneNode.js';
import VectorAdditionScreenView from '../../common/view/VectorAdditionScreenView.js';
import VectorAdditionViewProperties from '../../common/view/VectorAdditionViewProperties.js';
import vectorAddition from '../../vectorAddition.js';
import Explore2DGraphControlPanel from './Explore2DGraphControlPanel.js';
import Explore2DVectorCreatorPanel from './Explore2DVectorCreatorPanel.js';
import { Node } from '../../../../scenery/js/imports.js';
export default class Explore2DScreenView extends VectorAdditionScreenView {
  // view-specific Properties

  constructor(model, tandem) {
    super(model, tandem);
    this.viewProperties = new VectorAdditionViewProperties();

    // Control for the graph, at upper right
    const graphControlPanel = new Explore2DGraphControlPanel(model.cartesianGraph.vectorSet, model.polarGraph.vectorSet, model.componentStyleProperty, this.viewProperties, {
      right: VectorAdditionConstants.SCREEN_VIEW_BOUNDS.right - VectorAdditionConstants.SCREEN_VIEW_X_MARGIN,
      top: VectorAdditionConstants.SCREEN_VIEW_BOUNDS.top + VectorAdditionConstants.SCREEN_VIEW_Y_MARGIN
    });

    // Coordinate Snap radio buttons, at lower right
    const coordinateSnapRadioButtonGroup = new CoordinateSnapRadioButtonGroup(this.viewProperties.coordinateSnapModeProperty, model.cartesianVectorColorPalette, model.polarVectorColorPalette, {
      left: graphControlPanel.left,
      bottom: this.resetAllButton.bottom
    });

    // Create and add the Scene Nodes and Vector Creator Panels for each graph
    const sceneNodes = [];
    [model.polarGraph, model.cartesianGraph].forEach(graph => {
      // Create the scene node
      const sceneNode = new SceneNode(graph, this.viewProperties, model.componentStyleProperty);

      // Vector symbols depend on whether snap mode is Cartesian or Polar
      const vectorSymbols = graph.coordinateSnapMode === CoordinateSnapModes.CARTESIAN ? VectorAdditionConstants.VECTOR_SYMBOLS_GROUP_1 : VectorAdditionConstants.VECTOR_SYMBOLS_GROUP_2;

      // Add the vector creator panel
      sceneNode.addVectorCreatorPanel(new Explore2DVectorCreatorPanel(graph, sceneNode, vectorSymbols, {
        left: coordinateSnapRadioButtonGroup.left,
        bottom: coordinateSnapRadioButtonGroup.top - VectorAdditionConstants.RADIO_BUTTONS_Y_SPACING
      }));

      // Switch between scenes to match coordinate snap mode.
      // unlink is unnecessary, exists for the lifetime of the sim.
      this.viewProperties.coordinateSnapModeProperty.link(coordinateSnapMode => {
        this.interruptSubtreeInput(); // cancel interactions when switching scenes
        sceneNode.visible = coordinateSnapMode === graph.coordinateSnapMode;
      });

      // Add the scene node
      sceneNodes.push(sceneNode);
    });
    const screenViewRootNode = new Node({
      children: [graphControlPanel, coordinateSnapRadioButtonGroup, ...sceneNodes, this.resetAllButton]
    });
    this.addChild(screenViewRootNode);
  }
  reset() {
    super.reset();
    this.viewProperties.reset();
  }
}
vectorAddition.register('Explore2DScreenView', Explore2DScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb29yZGluYXRlU25hcE1vZGVzIiwiVmVjdG9yQWRkaXRpb25Db25zdGFudHMiLCJDb29yZGluYXRlU25hcFJhZGlvQnV0dG9uR3JvdXAiLCJTY2VuZU5vZGUiLCJWZWN0b3JBZGRpdGlvblNjcmVlblZpZXciLCJWZWN0b3JBZGRpdGlvblZpZXdQcm9wZXJ0aWVzIiwidmVjdG9yQWRkaXRpb24iLCJFeHBsb3JlMkRHcmFwaENvbnRyb2xQYW5lbCIsIkV4cGxvcmUyRFZlY3RvckNyZWF0b3JQYW5lbCIsIk5vZGUiLCJFeHBsb3JlMkRTY3JlZW5WaWV3IiwiY29uc3RydWN0b3IiLCJtb2RlbCIsInRhbmRlbSIsInZpZXdQcm9wZXJ0aWVzIiwiZ3JhcGhDb250cm9sUGFuZWwiLCJjYXJ0ZXNpYW5HcmFwaCIsInZlY3RvclNldCIsInBvbGFyR3JhcGgiLCJjb21wb25lbnRTdHlsZVByb3BlcnR5IiwicmlnaHQiLCJTQ1JFRU5fVklFV19CT1VORFMiLCJTQ1JFRU5fVklFV19YX01BUkdJTiIsInRvcCIsIlNDUkVFTl9WSUVXX1lfTUFSR0lOIiwiY29vcmRpbmF0ZVNuYXBSYWRpb0J1dHRvbkdyb3VwIiwiY29vcmRpbmF0ZVNuYXBNb2RlUHJvcGVydHkiLCJjYXJ0ZXNpYW5WZWN0b3JDb2xvclBhbGV0dGUiLCJwb2xhclZlY3RvckNvbG9yUGFsZXR0ZSIsImxlZnQiLCJib3R0b20iLCJyZXNldEFsbEJ1dHRvbiIsInNjZW5lTm9kZXMiLCJmb3JFYWNoIiwiZ3JhcGgiLCJzY2VuZU5vZGUiLCJ2ZWN0b3JTeW1ib2xzIiwiY29vcmRpbmF0ZVNuYXBNb2RlIiwiQ0FSVEVTSUFOIiwiVkVDVE9SX1NZTUJPTFNfR1JPVVBfMSIsIlZFQ1RPUl9TWU1CT0xTX0dST1VQXzIiLCJhZGRWZWN0b3JDcmVhdG9yUGFuZWwiLCJSQURJT19CVVRUT05TX1lfU1BBQ0lORyIsImxpbmsiLCJpbnRlcnJ1cHRTdWJ0cmVlSW5wdXQiLCJ2aXNpYmxlIiwicHVzaCIsInNjcmVlblZpZXdSb290Tm9kZSIsImNoaWxkcmVuIiwiYWRkQ2hpbGQiLCJyZXNldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRXhwbG9yZTJEU2NyZWVuVmlldy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFeHBsb3JlMkRTY3JlZW5WaWV3IGlzIHRoZSB2aWV3IGZvciB0aGUgJ0V4cGxvcmUgMkQnIHNjcmVlbi5cclxuICpcclxuICogQGF1dGhvciBNYXJ0aW4gVmVpbGxldHRlXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi8uLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuaW1wb3J0IENvb3JkaW5hdGVTbmFwTW9kZXMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0Nvb3JkaW5hdGVTbmFwTW9kZXMuanMnO1xyXG5pbXBvcnQgVmVjdG9yQWRkaXRpb25Db25zdGFudHMgZnJvbSAnLi4vLi4vY29tbW9uL1ZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLmpzJztcclxuaW1wb3J0IENvb3JkaW5hdGVTbmFwUmFkaW9CdXR0b25Hcm91cCBmcm9tICcuLi8uLi9jb21tb24vdmlldy9Db29yZGluYXRlU25hcFJhZGlvQnV0dG9uR3JvdXAuanMnO1xyXG5pbXBvcnQgU2NlbmVOb2RlIGZyb20gJy4uLy4uL2NvbW1vbi92aWV3L1NjZW5lTm9kZS5qcyc7XHJcbmltcG9ydCBWZWN0b3JBZGRpdGlvblNjcmVlblZpZXcgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQWRkaXRpb25TY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uVmlld1Byb3BlcnRpZXMgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQWRkaXRpb25WaWV3UHJvcGVydGllcy5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBFeHBsb3JlMkRNb2RlbCBmcm9tICcuLi9tb2RlbC9FeHBsb3JlMkRNb2RlbC5qcyc7XHJcbmltcG9ydCBFeHBsb3JlMkRHcmFwaENvbnRyb2xQYW5lbCBmcm9tICcuL0V4cGxvcmUyREdyYXBoQ29udHJvbFBhbmVsLmpzJztcclxuaW1wb3J0IEV4cGxvcmUyRFZlY3RvckNyZWF0b3JQYW5lbCBmcm9tICcuL0V4cGxvcmUyRFZlY3RvckNyZWF0b3JQYW5lbC5qcyc7XHJcbmltcG9ydCB7IE5vZGUgfSBmcm9tICcuLi8uLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRXhwbG9yZTJEU2NyZWVuVmlldyBleHRlbmRzIFZlY3RvckFkZGl0aW9uU2NyZWVuVmlldyB7XHJcblxyXG4gIC8vIHZpZXctc3BlY2lmaWMgUHJvcGVydGllc1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgdmlld1Byb3BlcnRpZXM6IFZlY3RvckFkZGl0aW9uVmlld1Byb3BlcnRpZXM7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggbW9kZWw6IEV4cGxvcmUyRE1vZGVsLCB0YW5kZW06IFRhbmRlbSApIHtcclxuXHJcbiAgICBzdXBlciggbW9kZWwsIHRhbmRlbSApO1xyXG5cclxuICAgIHRoaXMudmlld1Byb3BlcnRpZXMgPSBuZXcgVmVjdG9yQWRkaXRpb25WaWV3UHJvcGVydGllcygpO1xyXG5cclxuICAgIC8vIENvbnRyb2wgZm9yIHRoZSBncmFwaCwgYXQgdXBwZXIgcmlnaHRcclxuICAgIGNvbnN0IGdyYXBoQ29udHJvbFBhbmVsID0gbmV3IEV4cGxvcmUyREdyYXBoQ29udHJvbFBhbmVsKFxyXG4gICAgICBtb2RlbC5jYXJ0ZXNpYW5HcmFwaC52ZWN0b3JTZXQsXHJcbiAgICAgIG1vZGVsLnBvbGFyR3JhcGgudmVjdG9yU2V0LFxyXG4gICAgICBtb2RlbC5jb21wb25lbnRTdHlsZVByb3BlcnR5LFxyXG4gICAgICB0aGlzLnZpZXdQcm9wZXJ0aWVzLCB7XHJcbiAgICAgICAgcmlnaHQ6IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLlNDUkVFTl9WSUVXX0JPVU5EUy5yaWdodCAtIFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLlNDUkVFTl9WSUVXX1hfTUFSR0lOLFxyXG4gICAgICAgIHRvcDogVmVjdG9yQWRkaXRpb25Db25zdGFudHMuU0NSRUVOX1ZJRVdfQk9VTkRTLnRvcCArIFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLlNDUkVFTl9WSUVXX1lfTUFSR0lOXHJcbiAgICAgIH0gKTtcclxuXHJcbiAgICAvLyBDb29yZGluYXRlIFNuYXAgcmFkaW8gYnV0dG9ucywgYXQgbG93ZXIgcmlnaHRcclxuICAgIGNvbnN0IGNvb3JkaW5hdGVTbmFwUmFkaW9CdXR0b25Hcm91cCA9IG5ldyBDb29yZGluYXRlU25hcFJhZGlvQnV0dG9uR3JvdXAoXHJcbiAgICAgIHRoaXMudmlld1Byb3BlcnRpZXMuY29vcmRpbmF0ZVNuYXBNb2RlUHJvcGVydHksXHJcbiAgICAgIG1vZGVsLmNhcnRlc2lhblZlY3RvckNvbG9yUGFsZXR0ZSxcclxuICAgICAgbW9kZWwucG9sYXJWZWN0b3JDb2xvclBhbGV0dGUsIHtcclxuICAgICAgICBsZWZ0OiBncmFwaENvbnRyb2xQYW5lbC5sZWZ0LFxyXG4gICAgICAgIGJvdHRvbTogdGhpcy5yZXNldEFsbEJ1dHRvbi5ib3R0b21cclxuICAgICAgfSApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhbmQgYWRkIHRoZSBTY2VuZSBOb2RlcyBhbmQgVmVjdG9yIENyZWF0b3IgUGFuZWxzIGZvciBlYWNoIGdyYXBoXHJcbiAgICBjb25zdCBzY2VuZU5vZGVzOiBOb2RlW10gPSBbXTtcclxuICAgIFsgbW9kZWwucG9sYXJHcmFwaCwgbW9kZWwuY2FydGVzaWFuR3JhcGggXS5mb3JFYWNoKCBncmFwaCA9PiB7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgdGhlIHNjZW5lIG5vZGVcclxuICAgICAgY29uc3Qgc2NlbmVOb2RlID0gbmV3IFNjZW5lTm9kZSggZ3JhcGgsIHRoaXMudmlld1Byb3BlcnRpZXMsIG1vZGVsLmNvbXBvbmVudFN0eWxlUHJvcGVydHkgKTtcclxuXHJcbiAgICAgIC8vIFZlY3RvciBzeW1ib2xzIGRlcGVuZCBvbiB3aGV0aGVyIHNuYXAgbW9kZSBpcyBDYXJ0ZXNpYW4gb3IgUG9sYXJcclxuICAgICAgY29uc3QgdmVjdG9yU3ltYm9scyA9ICggZ3JhcGguY29vcmRpbmF0ZVNuYXBNb2RlID09PSBDb29yZGluYXRlU25hcE1vZGVzLkNBUlRFU0lBTiApID9cclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLlZFQ1RPUl9TWU1CT0xTX0dST1VQXzEgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgVmVjdG9yQWRkaXRpb25Db25zdGFudHMuVkVDVE9SX1NZTUJPTFNfR1JPVVBfMjtcclxuXHJcbiAgICAgIC8vIEFkZCB0aGUgdmVjdG9yIGNyZWF0b3IgcGFuZWxcclxuICAgICAgc2NlbmVOb2RlLmFkZFZlY3RvckNyZWF0b3JQYW5lbCggbmV3IEV4cGxvcmUyRFZlY3RvckNyZWF0b3JQYW5lbChcclxuICAgICAgICBncmFwaCxcclxuICAgICAgICBzY2VuZU5vZGUsXHJcbiAgICAgICAgdmVjdG9yU3ltYm9scywge1xyXG4gICAgICAgICAgbGVmdDogY29vcmRpbmF0ZVNuYXBSYWRpb0J1dHRvbkdyb3VwLmxlZnQsXHJcbiAgICAgICAgICBib3R0b206IGNvb3JkaW5hdGVTbmFwUmFkaW9CdXR0b25Hcm91cC50b3AgLSBWZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5SQURJT19CVVRUT05TX1lfU1BBQ0lOR1xyXG4gICAgICAgIH0gKVxyXG4gICAgICApO1xyXG5cclxuICAgICAgLy8gU3dpdGNoIGJldHdlZW4gc2NlbmVzIHRvIG1hdGNoIGNvb3JkaW5hdGUgc25hcCBtb2RlLlxyXG4gICAgICAvLyB1bmxpbmsgaXMgdW5uZWNlc3NhcnksIGV4aXN0cyBmb3IgdGhlIGxpZmV0aW1lIG9mIHRoZSBzaW0uXHJcbiAgICAgIHRoaXMudmlld1Byb3BlcnRpZXMuY29vcmRpbmF0ZVNuYXBNb2RlUHJvcGVydHkubGluayggY29vcmRpbmF0ZVNuYXBNb2RlID0+IHtcclxuICAgICAgICB0aGlzLmludGVycnVwdFN1YnRyZWVJbnB1dCgpOyAvLyBjYW5jZWwgaW50ZXJhY3Rpb25zIHdoZW4gc3dpdGNoaW5nIHNjZW5lc1xyXG4gICAgICAgIHNjZW5lTm9kZS52aXNpYmxlID0gKCBjb29yZGluYXRlU25hcE1vZGUgPT09IGdyYXBoLmNvb3JkaW5hdGVTbmFwTW9kZSApO1xyXG4gICAgICB9ICk7XHJcblxyXG4gICAgICAvLyBBZGQgdGhlIHNjZW5lIG5vZGVcclxuICAgICAgc2NlbmVOb2Rlcy5wdXNoKCBzY2VuZU5vZGUgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBzY3JlZW5WaWV3Um9vdE5vZGUgPSBuZXcgTm9kZSgge1xyXG4gICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgIGdyYXBoQ29udHJvbFBhbmVsLFxyXG4gICAgICAgIGNvb3JkaW5hdGVTbmFwUmFkaW9CdXR0b25Hcm91cCxcclxuICAgICAgICAuLi5zY2VuZU5vZGVzLFxyXG4gICAgICAgIHRoaXMucmVzZXRBbGxCdXR0b25cclxuICAgICAgXVxyXG4gICAgfSApO1xyXG4gICAgdGhpcy5hZGRDaGlsZCggc2NyZWVuVmlld1Jvb3ROb2RlICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgb3ZlcnJpZGUgcmVzZXQoKTogdm9pZCB7XHJcbiAgICBzdXBlci5yZXNldCgpO1xyXG4gICAgdGhpcy52aWV3UHJvcGVydGllcy5yZXNldCgpO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdFeHBsb3JlMkRTY3JlZW5WaWV3JywgRXhwbG9yZTJEU2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFP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