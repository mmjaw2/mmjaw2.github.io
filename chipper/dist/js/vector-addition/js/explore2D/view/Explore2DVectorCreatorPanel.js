// Copyright 2019-2023, University of Colorado Boulder

/**
 * Explore2DVectorCreatorPanel is a specialization of VectorCreatorPanel (the vector 'toolbox') for the 'Explore 2D' screen.
 *
 * @author Brandon Li
 */

import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import VectorCreatorPanel from '../../common/view/VectorCreatorPanel.js';
import VectorCreatorPanelSlot from '../../common/view/VectorCreatorPanelSlot.js';
import vectorAddition from '../../vectorAddition.js';
// constants

// initial values for vectors in Cartesian scene, see https://github.com/phetsims/vector-addition/issues/227
const CARTESIAN_INITIAL_VECTOR_COMPONENTS = [new Vector2(6, 8),
// a
new Vector2(8, 6),
// b
new Vector2(0, -10) // c
];

// initial values for vectors in Polar scene, see https://github.com/phetsims/vector-addition/issues/227
const POLAR_INITIAL_VECTOR_COMPONENTS = [Vector2.createPolar(8, Utils.toRadians(30)),
// d
Vector2.createPolar(8, Utils.toRadians(60)),
// e
Vector2.createPolar(8, Utils.toRadians(-90)) // f
];
export default class Explore2DVectorCreatorPanel extends VectorCreatorPanel {
  /**
   * @param graph
   * @param sceneNode
   * @param symbols - the symbols corresponding to each slot
   * @param [providedOptions]
   */
  constructor(graph, sceneNode, symbols, providedOptions) {
    const options = providedOptions;

    // Get the initial vector components, they are different for each symbol.
    // See https://github.com/phetsims/vector-addition/issues/227
    const initialVectorComponents = graph.coordinateSnapMode === CoordinateSnapModes.CARTESIAN ? CARTESIAN_INITIAL_VECTOR_COMPONENTS : POLAR_INITIAL_VECTOR_COMPONENTS;
    assert && assert(initialVectorComponents.length === symbols.length, 'components are required for each symbol');

    // Create a slot for each symbol
    const panelSlots = [];
    for (let i = 0; i < symbols.length; i++) {
      panelSlots.push(new VectorCreatorPanelSlot(graph, graph.vectorSet, sceneNode, initialVectorComponents[i], {
        symbol: symbols[i],
        iconArrowMagnitude: 35,
        iconVectorComponents: new Vector2(1, 1) // all icons in the slots look the same, see #227
      }));
    }
    super(panelSlots, options);
  }
}
vectorAddition.register('Explore2DVectorCreatorPanel', Explore2DVectorCreatorPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJDb29yZGluYXRlU25hcE1vZGVzIiwiVmVjdG9yQ3JlYXRvclBhbmVsIiwiVmVjdG9yQ3JlYXRvclBhbmVsU2xvdCIsInZlY3RvckFkZGl0aW9uIiwiQ0FSVEVTSUFOX0lOSVRJQUxfVkVDVE9SX0NPTVBPTkVOVFMiLCJQT0xBUl9JTklUSUFMX1ZFQ1RPUl9DT01QT05FTlRTIiwiY3JlYXRlUG9sYXIiLCJ0b1JhZGlhbnMiLCJFeHBsb3JlMkRWZWN0b3JDcmVhdG9yUGFuZWwiLCJjb25zdHJ1Y3RvciIsImdyYXBoIiwic2NlbmVOb2RlIiwic3ltYm9scyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJpbml0aWFsVmVjdG9yQ29tcG9uZW50cyIsImNvb3JkaW5hdGVTbmFwTW9kZSIsIkNBUlRFU0lBTiIsImFzc2VydCIsImxlbmd0aCIsInBhbmVsU2xvdHMiLCJpIiwicHVzaCIsInZlY3RvclNldCIsInN5bWJvbCIsImljb25BcnJvd01hZ25pdHVkZSIsImljb25WZWN0b3JDb21wb25lbnRzIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFeHBsb3JlMkRWZWN0b3JDcmVhdG9yUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTktMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRXhwbG9yZTJEVmVjdG9yQ3JlYXRvclBhbmVsIGlzIGEgc3BlY2lhbGl6YXRpb24gb2YgVmVjdG9yQ3JlYXRvclBhbmVsICh0aGUgdmVjdG9yICd0b29sYm94JykgZm9yIHRoZSAnRXhwbG9yZSAyRCcgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgQ29vcmRpbmF0ZVNuYXBNb2RlcyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ29vcmRpbmF0ZVNuYXBNb2Rlcy5qcyc7XHJcbmltcG9ydCBTY2VuZU5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvU2NlbmVOb2RlLmpzJztcclxuaW1wb3J0IFZlY3RvckNyZWF0b3JQYW5lbCwgeyBWZWN0b3JDcmVhdG9yUGFuZWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsLmpzJztcclxuaW1wb3J0IFZlY3RvckNyZWF0b3JQYW5lbFNsb3QgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsU2xvdC5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBFeHBsb3JlMkRHcmFwaCBmcm9tICcuLi9tb2RlbC9FeHBsb3JlMkRHcmFwaC5qcyc7XHJcbmltcG9ydCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5cclxuLy8gaW5pdGlhbCB2YWx1ZXMgZm9yIHZlY3RvcnMgaW4gQ2FydGVzaWFuIHNjZW5lLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlY3Rvci1hZGRpdGlvbi9pc3N1ZXMvMjI3XHJcbmNvbnN0IENBUlRFU0lBTl9JTklUSUFMX1ZFQ1RPUl9DT01QT05FTlRTID0gW1xyXG4gIG5ldyBWZWN0b3IyKCA2LCA4ICksIC8vIGFcclxuICBuZXcgVmVjdG9yMiggOCwgNiApLCAvLyBiXHJcbiAgbmV3IFZlY3RvcjIoIDAsIC0xMCApIC8vIGNcclxuXTtcclxuXHJcbi8vIGluaXRpYWwgdmFsdWVzIGZvciB2ZWN0b3JzIGluIFBvbGFyIHNjZW5lLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlY3Rvci1hZGRpdGlvbi9pc3N1ZXMvMjI3XHJcbmNvbnN0IFBPTEFSX0lOSVRJQUxfVkVDVE9SX0NPTVBPTkVOVFMgPSBbXHJcbiAgVmVjdG9yMi5jcmVhdGVQb2xhciggOCwgVXRpbHMudG9SYWRpYW5zKCAzMCApICksIC8vIGRcclxuICBWZWN0b3IyLmNyZWF0ZVBvbGFyKCA4LCBVdGlscy50b1JhZGlhbnMoIDYwICkgKSwgLy8gZVxyXG4gIFZlY3RvcjIuY3JlYXRlUG9sYXIoIDgsIFV0aWxzLnRvUmFkaWFucyggLTkwICkgKSAvLyBmXHJcbl07XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgRXhwbG9yZTJEVmVjdG9yQ3JlYXRvclBhbmVsT3B0aW9ucyA9IFNlbGZPcHRpb25zICYgVmVjdG9yQ3JlYXRvclBhbmVsT3B0aW9ucztcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4cGxvcmUyRFZlY3RvckNyZWF0b3JQYW5lbCBleHRlbmRzIFZlY3RvckNyZWF0b3JQYW5lbCB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBncmFwaFxyXG4gICAqIEBwYXJhbSBzY2VuZU5vZGVcclxuICAgKiBAcGFyYW0gc3ltYm9scyAtIHRoZSBzeW1ib2xzIGNvcnJlc3BvbmRpbmcgdG8gZWFjaCBzbG90XHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdXHJcbiAgICovXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBncmFwaDogRXhwbG9yZTJER3JhcGgsIHNjZW5lTm9kZTogU2NlbmVOb2RlLCBzeW1ib2xzOiBzdHJpbmdbXSwgcHJvdmlkZWRPcHRpb25zPzogRXhwbG9yZTJEVmVjdG9yQ3JlYXRvclBhbmVsT3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gcHJvdmlkZWRPcHRpb25zO1xyXG5cclxuICAgIC8vIEdldCB0aGUgaW5pdGlhbCB2ZWN0b3IgY29tcG9uZW50cywgdGhleSBhcmUgZGlmZmVyZW50IGZvciBlYWNoIHN5bWJvbC5cclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVjdG9yLWFkZGl0aW9uL2lzc3Vlcy8yMjdcclxuICAgIGNvbnN0IGluaXRpYWxWZWN0b3JDb21wb25lbnRzID0gKCBncmFwaC5jb29yZGluYXRlU25hcE1vZGUgPT09IENvb3JkaW5hdGVTbmFwTW9kZXMuQ0FSVEVTSUFOICkgP1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBDQVJURVNJQU5fSU5JVElBTF9WRUNUT1JfQ09NUE9ORU5UUyA6XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFBPTEFSX0lOSVRJQUxfVkVDVE9SX0NPTVBPTkVOVFM7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCBpbml0aWFsVmVjdG9yQ29tcG9uZW50cy5sZW5ndGggPT09IHN5bWJvbHMubGVuZ3RoLCAnY29tcG9uZW50cyBhcmUgcmVxdWlyZWQgZm9yIGVhY2ggc3ltYm9sJyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSBhIHNsb3QgZm9yIGVhY2ggc3ltYm9sXHJcbiAgICBjb25zdCBwYW5lbFNsb3RzOiBWZWN0b3JDcmVhdG9yUGFuZWxTbG90W10gPSBbXTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHN5bWJvbHMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICAgIHBhbmVsU2xvdHMucHVzaCggbmV3IFZlY3RvckNyZWF0b3JQYW5lbFNsb3QoIGdyYXBoLCBncmFwaC52ZWN0b3JTZXQsIHNjZW5lTm9kZSwgaW5pdGlhbFZlY3RvckNvbXBvbmVudHNbIGkgXSwge1xyXG4gICAgICAgIHN5bWJvbDogc3ltYm9sc1sgaSBdLFxyXG4gICAgICAgIGljb25BcnJvd01hZ25pdHVkZTogMzUsXHJcbiAgICAgICAgaWNvblZlY3RvckNvbXBvbmVudHM6IG5ldyBWZWN0b3IyKCAxLCAxICkgLy8gYWxsIGljb25zIGluIHRoZSBzbG90cyBsb29rIHRoZSBzYW1lLCBzZWUgIzIyN1xyXG4gICAgICB9ICkgKTtcclxuICAgIH1cclxuXHJcbiAgICBzdXBlciggcGFuZWxTbG90cywgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdFeHBsb3JlMkRWZWN0b3JDcmVhdG9yUGFuZWwnLCBFeHBsb3JlMkRWZWN0b3JDcmVhdG9yUGFuZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLG1CQUFtQixNQUFNLDJDQUEyQztBQUUzRSxPQUFPQyxrQkFBa0IsTUFBcUMseUNBQXlDO0FBQ3ZHLE9BQU9DLHNCQUFzQixNQUFNLDZDQUE2QztBQUNoRixPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBSXBEOztBQUVBO0FBQ0EsTUFBTUMsbUNBQW1DLEdBQUcsQ0FDMUMsSUFBSUwsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7QUFBRTtBQUNyQixJQUFJQSxPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQztBQUFFO0FBQ3JCLElBQUlBLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFHLENBQUMsQ0FBQztBQUFBLENBQ3ZCOztBQUVEO0FBQ0EsTUFBTU0sK0JBQStCLEdBQUcsQ0FDdENOLE9BQU8sQ0FBQ08sV0FBVyxDQUFFLENBQUMsRUFBRVIsS0FBSyxDQUFDUyxTQUFTLENBQUUsRUFBRyxDQUFFLENBQUM7QUFBRTtBQUNqRFIsT0FBTyxDQUFDTyxXQUFXLENBQUUsQ0FBQyxFQUFFUixLQUFLLENBQUNTLFNBQVMsQ0FBRSxFQUFHLENBQUUsQ0FBQztBQUFFO0FBQ2pEUixPQUFPLENBQUNPLFdBQVcsQ0FBRSxDQUFDLEVBQUVSLEtBQUssQ0FBQ1MsU0FBUyxDQUFFLENBQUMsRUFBRyxDQUFFLENBQUMsQ0FBQztBQUFBLENBQ2xEO0FBTUQsZUFBZSxNQUFNQywyQkFBMkIsU0FBU1Asa0JBQWtCLENBQUM7RUFFMUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ1NRLFdBQVdBLENBQUVDLEtBQXFCLEVBQUVDLFNBQW9CLEVBQUVDLE9BQWlCLEVBQUVDLGVBQW9ELEVBQUc7SUFFekksTUFBTUMsT0FBTyxHQUFHRCxlQUFlOztJQUUvQjtJQUNBO0lBQ0EsTUFBTUUsdUJBQXVCLEdBQUtMLEtBQUssQ0FBQ00sa0JBQWtCLEtBQUtoQixtQkFBbUIsQ0FBQ2lCLFNBQVMsR0FDNURiLG1DQUFtQyxHQUNuQ0MsK0JBQStCO0lBQy9EYSxNQUFNLElBQUlBLE1BQU0sQ0FBRUgsdUJBQXVCLENBQUNJLE1BQU0sS0FBS1AsT0FBTyxDQUFDTyxNQUFNLEVBQUUseUNBQTBDLENBQUM7O0lBRWhIO0lBQ0EsTUFBTUMsVUFBb0MsR0FBRyxFQUFFO0lBQy9DLEtBQU0sSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHVCxPQUFPLENBQUNPLE1BQU0sRUFBRUUsQ0FBQyxFQUFFLEVBQUc7TUFDekNELFVBQVUsQ0FBQ0UsSUFBSSxDQUFFLElBQUlwQixzQkFBc0IsQ0FBRVEsS0FBSyxFQUFFQSxLQUFLLENBQUNhLFNBQVMsRUFBRVosU0FBUyxFQUFFSSx1QkFBdUIsQ0FBRU0sQ0FBQyxDQUFFLEVBQUU7UUFDNUdHLE1BQU0sRUFBRVosT0FBTyxDQUFFUyxDQUFDLENBQUU7UUFDcEJJLGtCQUFrQixFQUFFLEVBQUU7UUFDdEJDLG9CQUFvQixFQUFFLElBQUkzQixPQUFPLENBQUUsQ0FBQyxFQUFFLENBQUUsQ0FBQyxDQUFDO01BQzVDLENBQUUsQ0FBRSxDQUFDO0lBQ1A7SUFFQSxLQUFLLENBQUVxQixVQUFVLEVBQUVOLE9BQVEsQ0FBQztFQUM5QjtBQUNGO0FBRUFYLGNBQWMsQ0FBQ3dCLFFBQVEsQ0FBRSw2QkFBNkIsRUFBRW5CLDJCQUE0QixDQUFDIiwiaWdub3JlTGlzdCI6W119