// Copyright 2019-2023, University of Colorado Boulder

/**
 * LabVectorCreatorPanel is a specialization of VectorCreatorPanel (the vector 'toolbox') for the 'Lab' screen.
 *
 * @author Brandon Li
 */

import Utils from '../../../../dot/js/Utils.js';
import Vector2 from '../../../../dot/js/Vector2.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import VectorCreatorPanel from '../../common/view/VectorCreatorPanel.js';
import VectorCreatorPanelSlot from '../../common/view/VectorCreatorPanelSlot.js';
import vectorAddition from '../../vectorAddition.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class LabVectorCreatorPanel extends VectorCreatorPanel {
  constructor(graph, sceneNode, providedOptions) {
    const options = optionize()({
      // VectorCreatorPanelOptions
      slotSpacing: 40
    }, providedOptions);

    // Create the initial vector components, the same for all vectors in a set.
    // See https://github.com/phetsims/vector-addition/issues/227
    const initialVectorComponents = graph.coordinateSnapMode === CoordinateSnapModes.CARTESIAN ? new Vector2(8, 6) : Vector2.createPolar(8, Utils.toRadians(45));

    // Create a slot for each VectorSet
    const slots = [];
    graph.vectorSets.forEach(vectorSet => {
      slots.push(new VectorCreatorPanelSlot(graph, vectorSet, sceneNode, initialVectorComponents, {
        iconArrowMagnitude: 57,
        numberOfVectors: 10 // Each slot can create 10 vectors
      }));
    });
    super(slots, options);
  }
}
vectorAddition.register('LabVectorCreatorPanel', LabVectorCreatorPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsIlZlY3RvcjIiLCJDb29yZGluYXRlU25hcE1vZGVzIiwiVmVjdG9yQ3JlYXRvclBhbmVsIiwiVmVjdG9yQ3JlYXRvclBhbmVsU2xvdCIsInZlY3RvckFkZGl0aW9uIiwib3B0aW9uaXplIiwiTGFiVmVjdG9yQ3JlYXRvclBhbmVsIiwiY29uc3RydWN0b3IiLCJncmFwaCIsInNjZW5lTm9kZSIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzbG90U3BhY2luZyIsImluaXRpYWxWZWN0b3JDb21wb25lbnRzIiwiY29vcmRpbmF0ZVNuYXBNb2RlIiwiQ0FSVEVTSUFOIiwiY3JlYXRlUG9sYXIiLCJ0b1JhZGlhbnMiLCJzbG90cyIsInZlY3RvclNldHMiLCJmb3JFYWNoIiwidmVjdG9yU2V0IiwicHVzaCIsImljb25BcnJvd01hZ25pdHVkZSIsIm51bWJlck9mVmVjdG9ycyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTGFiVmVjdG9yQ3JlYXRvclBhbmVsLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIExhYlZlY3RvckNyZWF0b3JQYW5lbCBpcyBhIHNwZWNpYWxpemF0aW9uIG9mIFZlY3RvckNyZWF0b3JQYW5lbCAodGhlIHZlY3RvciAndG9vbGJveCcpIGZvciB0aGUgJ0xhYicgc2NyZWVuLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEJyYW5kb24gTGlcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1V0aWxzLmpzJztcclxuaW1wb3J0IFZlY3RvcjIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL1ZlY3RvcjIuanMnO1xyXG5pbXBvcnQgQ29vcmRpbmF0ZVNuYXBNb2RlcyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ29vcmRpbmF0ZVNuYXBNb2Rlcy5qcyc7XHJcbmltcG9ydCBTY2VuZU5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvU2NlbmVOb2RlLmpzJztcclxuaW1wb3J0IFZlY3RvckNyZWF0b3JQYW5lbCwgeyBWZWN0b3JDcmVhdG9yUGFuZWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsLmpzJztcclxuaW1wb3J0IFZlY3RvckNyZWF0b3JQYW5lbFNsb3QgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsU2xvdC5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBMYWJHcmFwaCBmcm9tICcuLi9tb2RlbC9MYWJHcmFwaC5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIExhYlZlY3RvckNyZWF0b3JQYW5lbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFZlY3RvckNyZWF0b3JQYW5lbE9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMYWJWZWN0b3JDcmVhdG9yUGFuZWwgZXh0ZW5kcyBWZWN0b3JDcmVhdG9yUGFuZWwge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGdyYXBoOiBMYWJHcmFwaCwgc2NlbmVOb2RlOiBTY2VuZU5vZGUsIHByb3ZpZGVkT3B0aW9ucz86IExhYlZlY3RvckNyZWF0b3JQYW5lbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxMYWJWZWN0b3JDcmVhdG9yUGFuZWxPcHRpb25zLCBTZWxmT3B0aW9ucywgVmVjdG9yQ3JlYXRvclBhbmVsT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gVmVjdG9yQ3JlYXRvclBhbmVsT3B0aW9uc1xyXG4gICAgICBzbG90U3BhY2luZzogNDBcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgaW5pdGlhbCB2ZWN0b3IgY29tcG9uZW50cywgdGhlIHNhbWUgZm9yIGFsbCB2ZWN0b3JzIGluIGEgc2V0LlxyXG4gICAgLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzIyN1xyXG4gICAgY29uc3QgaW5pdGlhbFZlY3RvckNvbXBvbmVudHMgPSAoIGdyYXBoLmNvb3JkaW5hdGVTbmFwTW9kZSA9PT0gQ29vcmRpbmF0ZVNuYXBNb2Rlcy5DQVJURVNJQU4gKSA/XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG5ldyBWZWN0b3IyKCA4LCA2ICkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBWZWN0b3IyLmNyZWF0ZVBvbGFyKCA4LCBVdGlscy50b1JhZGlhbnMoIDQ1ICkgKTtcclxuXHJcbiAgICAvLyBDcmVhdGUgYSBzbG90IGZvciBlYWNoIFZlY3RvclNldFxyXG4gICAgY29uc3Qgc2xvdHM6IFZlY3RvckNyZWF0b3JQYW5lbFNsb3RbXSA9IFtdO1xyXG4gICAgZ3JhcGgudmVjdG9yU2V0cy5mb3JFYWNoKCB2ZWN0b3JTZXQgPT4ge1xyXG4gICAgICBzbG90cy5wdXNoKCBuZXcgVmVjdG9yQ3JlYXRvclBhbmVsU2xvdCggZ3JhcGgsIHZlY3RvclNldCwgc2NlbmVOb2RlLCBpbml0aWFsVmVjdG9yQ29tcG9uZW50cywge1xyXG4gICAgICAgIGljb25BcnJvd01hZ25pdHVkZTogNTcsXHJcbiAgICAgICAgbnVtYmVyT2ZWZWN0b3JzOiAxMCAvLyBFYWNoIHNsb3QgY2FuIGNyZWF0ZSAxMCB2ZWN0b3JzXHJcbiAgICAgIH0gKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBzbG90cywgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdMYWJWZWN0b3JDcmVhdG9yUGFuZWwnLCBMYWJWZWN0b3JDcmVhdG9yUGFuZWwgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLG1CQUFtQixNQUFNLDJDQUEyQztBQUUzRSxPQUFPQyxrQkFBa0IsTUFBcUMseUNBQXlDO0FBQ3ZHLE9BQU9DLHNCQUFzQixNQUFNLDZDQUE2QztBQUNoRixPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBRXBELE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBTW5GLGVBQWUsTUFBTUMscUJBQXFCLFNBQVNKLGtCQUFrQixDQUFDO0VBRTdESyxXQUFXQSxDQUFFQyxLQUFlLEVBQUVDLFNBQW9CLEVBQUVDLGVBQThDLEVBQUc7SUFFMUcsTUFBTUMsT0FBTyxHQUFHTixTQUFTLENBQXVFLENBQUMsQ0FBRTtNQUVqRztNQUNBTyxXQUFXLEVBQUU7SUFDZixDQUFDLEVBQUVGLGVBQWdCLENBQUM7O0lBRXBCO0lBQ0E7SUFDQSxNQUFNRyx1QkFBdUIsR0FBS0wsS0FBSyxDQUFDTSxrQkFBa0IsS0FBS2IsbUJBQW1CLENBQUNjLFNBQVMsR0FDNUQsSUFBSWYsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUMsR0FDbkJBLE9BQU8sQ0FBQ2dCLFdBQVcsQ0FBRSxDQUFDLEVBQUVqQixLQUFLLENBQUNrQixTQUFTLENBQUUsRUFBRyxDQUFFLENBQUM7O0lBRS9FO0lBQ0EsTUFBTUMsS0FBK0IsR0FBRyxFQUFFO0lBQzFDVixLQUFLLENBQUNXLFVBQVUsQ0FBQ0MsT0FBTyxDQUFFQyxTQUFTLElBQUk7TUFDckNILEtBQUssQ0FBQ0ksSUFBSSxDQUFFLElBQUluQixzQkFBc0IsQ0FBRUssS0FBSyxFQUFFYSxTQUFTLEVBQUVaLFNBQVMsRUFBRUksdUJBQXVCLEVBQUU7UUFDNUZVLGtCQUFrQixFQUFFLEVBQUU7UUFDdEJDLGVBQWUsRUFBRSxFQUFFLENBQUM7TUFDdEIsQ0FBRSxDQUFFLENBQUM7SUFDUCxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVOLEtBQUssRUFBRVAsT0FBUSxDQUFDO0VBQ3pCO0FBQ0Y7QUFFQVAsY0FBYyxDQUFDcUIsUUFBUSxDQUFFLHVCQUF1QixFQUFFbkIscUJBQXNCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=