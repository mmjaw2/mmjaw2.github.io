// Copyright 2019-2023, University of Colorado Boulder

/**
 * Explore1DVectorCreatorPanel is a specialization of VectorCreatorPanel (the vector 'toolbox') for the 'Explore 1D' screen.
 *
 * @author Brandon Li
 */

import Vector2 from '../../../../dot/js/Vector2.js';
import GraphOrientations from '../../common/model/GraphOrientations.js';
import VectorCreatorPanel from '../../common/view/VectorCreatorPanel.js';
import VectorCreatorPanelSlot from '../../common/view/VectorCreatorPanelSlot.js';
import vectorAddition from '../../vectorAddition.js';
import optionize from '../../../../phet-core/js/optionize.js';
export default class Explore1DVectorCreatorPanel extends VectorCreatorPanel {
  /**
   * @param graph
   * @param sceneNode
   * @param symbols - the symbols corresponding to each slot
   * @param [providedOptions]
   */
  constructor(graph, sceneNode, symbols, providedOptions) {
    const options = optionize()({
      // VectorCreatorPanelOptions
      slotSpacing: graph.orientation === GraphOrientations.VERTICAL ? 18 : 32
    }, providedOptions);

    // Create the initial vector components, they are the same for every symbol.
    // See https://github.com/phetsims/vector-addition/issues/227
    const isHorizontal = graph.orientation === GraphOrientations.HORIZONTAL;
    const initialVectorComponents = isHorizontal ? new Vector2(5, 0) : new Vector2(0, 5);

    // Create a slot for each symbol
    const panelSlots = [];
    symbols.forEach(symbol => {
      panelSlots.push(new VectorCreatorPanelSlot(graph, graph.vectorSet, sceneNode, initialVectorComponents, {
        symbol: symbol,
        iconArrowMagnitude: 35,
        // pointer area dilation for icons, identical for mouseArea and touchArea,
        // see https://github.com/phetsims/vector-addition/issues/250
        iconPointerAreaXDilation: isHorizontal ? 10 : 20,
        iconPointerAreaYDilation: isHorizontal ? 15 : 5
      }));
    });
    super(panelSlots, options);
  }
}
vectorAddition.register('Explore1DVectorCreatorPanel', Explore1DVectorCreatorPanel);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWZWN0b3IyIiwiR3JhcGhPcmllbnRhdGlvbnMiLCJWZWN0b3JDcmVhdG9yUGFuZWwiLCJWZWN0b3JDcmVhdG9yUGFuZWxTbG90IiwidmVjdG9yQWRkaXRpb24iLCJvcHRpb25pemUiLCJFeHBsb3JlMURWZWN0b3JDcmVhdG9yUGFuZWwiLCJjb25zdHJ1Y3RvciIsImdyYXBoIiwic2NlbmVOb2RlIiwic3ltYm9scyIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJzbG90U3BhY2luZyIsIm9yaWVudGF0aW9uIiwiVkVSVElDQUwiLCJpc0hvcml6b250YWwiLCJIT1JJWk9OVEFMIiwiaW5pdGlhbFZlY3RvckNvbXBvbmVudHMiLCJwYW5lbFNsb3RzIiwiZm9yRWFjaCIsInN5bWJvbCIsInB1c2giLCJ2ZWN0b3JTZXQiLCJpY29uQXJyb3dNYWduaXR1ZGUiLCJpY29uUG9pbnRlckFyZWFYRGlsYXRpb24iLCJpY29uUG9pbnRlckFyZWFZRGlsYXRpb24iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkV4cGxvcmUxRFZlY3RvckNyZWF0b3JQYW5lbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBFeHBsb3JlMURWZWN0b3JDcmVhdG9yUGFuZWwgaXMgYSBzcGVjaWFsaXphdGlvbiBvZiBWZWN0b3JDcmVhdG9yUGFuZWwgKHRoZSB2ZWN0b3IgJ3Rvb2xib3gnKSBmb3IgdGhlICdFeHBsb3JlIDFEJyBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgQnJhbmRvbiBMaVxyXG4gKi9cclxuXHJcbmltcG9ydCBWZWN0b3IyIGZyb20gJy4uLy4uLy4uLy4uL2RvdC9qcy9WZWN0b3IyLmpzJztcclxuaW1wb3J0IEdyYXBoT3JpZW50YXRpb25zIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9HcmFwaE9yaWVudGF0aW9ucy5qcyc7XHJcbmltcG9ydCBTY2VuZU5vZGUgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvU2NlbmVOb2RlLmpzJztcclxuaW1wb3J0IFZlY3RvckNyZWF0b3JQYW5lbCwgeyBWZWN0b3JDcmVhdG9yUGFuZWxPcHRpb25zIH0gZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsLmpzJztcclxuaW1wb3J0IFZlY3RvckNyZWF0b3JQYW5lbFNsb3QgZnJvbSAnLi4vLi4vY29tbW9uL3ZpZXcvVmVjdG9yQ3JlYXRvclBhbmVsU2xvdC5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBFeHBsb3JlMURHcmFwaCBmcm9tICcuLi9tb2RlbC9FeHBsb3JlMURHcmFwaC5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcblxyXG50eXBlIEV4cGxvcmUxRFZlY3RvckNyZWF0b3JQYW5lbE9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFZlY3RvckNyZWF0b3JQYW5lbE9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFeHBsb3JlMURWZWN0b3JDcmVhdG9yUGFuZWwgZXh0ZW5kcyBWZWN0b3JDcmVhdG9yUGFuZWwge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gZ3JhcGhcclxuICAgKiBAcGFyYW0gc2NlbmVOb2RlXHJcbiAgICogQHBhcmFtIHN5bWJvbHMgLSB0aGUgc3ltYm9scyBjb3JyZXNwb25kaW5nIHRvIGVhY2ggc2xvdFxyXG4gICAqIEBwYXJhbSBbcHJvdmlkZWRPcHRpb25zXVxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggZ3JhcGg6IEV4cGxvcmUxREdyYXBoLCBzY2VuZU5vZGU6IFNjZW5lTm9kZSwgc3ltYm9sczogc3RyaW5nW10sIHByb3ZpZGVkT3B0aW9ucz86IEV4cGxvcmUxRFZlY3RvckNyZWF0b3JQYW5lbE9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxFeHBsb3JlMURWZWN0b3JDcmVhdG9yUGFuZWxPcHRpb25zLCBTZWxmT3B0aW9ucywgVmVjdG9yQ3JlYXRvclBhbmVsT3B0aW9ucz4oKSgge1xyXG5cclxuICAgICAgLy8gVmVjdG9yQ3JlYXRvclBhbmVsT3B0aW9uc1xyXG4gICAgICBzbG90U3BhY2luZzogKCBncmFwaC5vcmllbnRhdGlvbiA9PT0gR3JhcGhPcmllbnRhdGlvbnMuVkVSVElDQUwgKSA/IDE4IDogMzJcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIENyZWF0ZSB0aGUgaW5pdGlhbCB2ZWN0b3IgY29tcG9uZW50cywgdGhleSBhcmUgdGhlIHNhbWUgZm9yIGV2ZXJ5IHN5bWJvbC5cclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvdmVjdG9yLWFkZGl0aW9uL2lzc3Vlcy8yMjdcclxuICAgIGNvbnN0IGlzSG9yaXpvbnRhbCA9ICggZ3JhcGgub3JpZW50YXRpb24gPT09IEdyYXBoT3JpZW50YXRpb25zLkhPUklaT05UQUwgKTtcclxuICAgIGNvbnN0IGluaXRpYWxWZWN0b3JDb21wb25lbnRzID0gaXNIb3Jpem9udGFsID8gbmV3IFZlY3RvcjIoIDUsIDAgKSA6IG5ldyBWZWN0b3IyKCAwLCA1ICk7XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgc2xvdCBmb3IgZWFjaCBzeW1ib2xcclxuICAgIGNvbnN0IHBhbmVsU2xvdHM6IFZlY3RvckNyZWF0b3JQYW5lbFNsb3RbXSA9IFtdO1xyXG4gICAgc3ltYm9scy5mb3JFYWNoKCBzeW1ib2wgPT4ge1xyXG4gICAgICBwYW5lbFNsb3RzLnB1c2goIG5ldyBWZWN0b3JDcmVhdG9yUGFuZWxTbG90KCBncmFwaCwgZ3JhcGgudmVjdG9yU2V0LCBzY2VuZU5vZGUsIGluaXRpYWxWZWN0b3JDb21wb25lbnRzLCB7XHJcbiAgICAgICAgc3ltYm9sOiBzeW1ib2wsXHJcbiAgICAgICAgaWNvbkFycm93TWFnbml0dWRlOiAzNSxcclxuXHJcbiAgICAgICAgLy8gcG9pbnRlciBhcmVhIGRpbGF0aW9uIGZvciBpY29ucywgaWRlbnRpY2FsIGZvciBtb3VzZUFyZWEgYW5kIHRvdWNoQXJlYSxcclxuICAgICAgICAvLyBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3ZlY3Rvci1hZGRpdGlvbi9pc3N1ZXMvMjUwXHJcbiAgICAgICAgaWNvblBvaW50ZXJBcmVhWERpbGF0aW9uOiBpc0hvcml6b250YWwgPyAxMCA6IDIwLFxyXG4gICAgICAgIGljb25Qb2ludGVyQXJlYVlEaWxhdGlvbjogaXNIb3Jpem9udGFsID8gMTUgOiA1XHJcbiAgICAgIH0gKSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBwYW5lbFNsb3RzLCBvcHRpb25zICk7XHJcbiAgfVxyXG59XHJcblxyXG52ZWN0b3JBZGRpdGlvbi5yZWdpc3RlciggJ0V4cGxvcmUxRFZlY3RvckNyZWF0b3JQYW5lbCcsIEV4cGxvcmUxRFZlY3RvckNyZWF0b3JQYW5lbCApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sK0JBQStCO0FBQ25ELE9BQU9DLGlCQUFpQixNQUFNLHlDQUF5QztBQUV2RSxPQUFPQyxrQkFBa0IsTUFBcUMseUNBQXlDO0FBQ3ZHLE9BQU9DLHNCQUFzQixNQUFNLDZDQUE2QztBQUNoRixPQUFPQyxjQUFjLE1BQU0seUJBQXlCO0FBRXBELE9BQU9DLFNBQVMsTUFBNEIsdUNBQXVDO0FBTW5GLGVBQWUsTUFBTUMsMkJBQTJCLFNBQVNKLGtCQUFrQixDQUFDO0VBRTFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTSyxXQUFXQSxDQUFFQyxLQUFxQixFQUFFQyxTQUFvQixFQUFFQyxPQUFpQixFQUFFQyxlQUFvRCxFQUFHO0lBRXpJLE1BQU1DLE9BQU8sR0FBR1AsU0FBUyxDQUE2RSxDQUFDLENBQUU7TUFFdkc7TUFDQVEsV0FBVyxFQUFJTCxLQUFLLENBQUNNLFdBQVcsS0FBS2IsaUJBQWlCLENBQUNjLFFBQVEsR0FBSyxFQUFFLEdBQUc7SUFDM0UsQ0FBQyxFQUFFSixlQUFnQixDQUFDOztJQUVwQjtJQUNBO0lBQ0EsTUFBTUssWUFBWSxHQUFLUixLQUFLLENBQUNNLFdBQVcsS0FBS2IsaUJBQWlCLENBQUNnQixVQUFZO0lBQzNFLE1BQU1DLHVCQUF1QixHQUFHRixZQUFZLEdBQUcsSUFBSWhCLE9BQU8sQ0FBRSxDQUFDLEVBQUUsQ0FBRSxDQUFDLEdBQUcsSUFBSUEsT0FBTyxDQUFFLENBQUMsRUFBRSxDQUFFLENBQUM7O0lBRXhGO0lBQ0EsTUFBTW1CLFVBQW9DLEdBQUcsRUFBRTtJQUMvQ1QsT0FBTyxDQUFDVSxPQUFPLENBQUVDLE1BQU0sSUFBSTtNQUN6QkYsVUFBVSxDQUFDRyxJQUFJLENBQUUsSUFBSW5CLHNCQUFzQixDQUFFSyxLQUFLLEVBQUVBLEtBQUssQ0FBQ2UsU0FBUyxFQUFFZCxTQUFTLEVBQUVTLHVCQUF1QixFQUFFO1FBQ3ZHRyxNQUFNLEVBQUVBLE1BQU07UUFDZEcsa0JBQWtCLEVBQUUsRUFBRTtRQUV0QjtRQUNBO1FBQ0FDLHdCQUF3QixFQUFFVCxZQUFZLEdBQUcsRUFBRSxHQUFHLEVBQUU7UUFDaERVLHdCQUF3QixFQUFFVixZQUFZLEdBQUcsRUFBRSxHQUFHO01BQ2hELENBQUUsQ0FBRSxDQUFDO0lBQ1AsQ0FBRSxDQUFDO0lBRUgsS0FBSyxDQUFFRyxVQUFVLEVBQUVQLE9BQVEsQ0FBQztFQUM5QjtBQUNGO0FBRUFSLGNBQWMsQ0FBQ3VCLFFBQVEsQ0FBRSw2QkFBNkIsRUFBRXJCLDJCQUE0QixDQUFDIiwiaWdub3JlTGlzdCI6W119