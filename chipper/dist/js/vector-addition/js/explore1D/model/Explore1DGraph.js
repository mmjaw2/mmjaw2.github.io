// Copyright 2019-2023, University of Colorado Boulder

/**
 * Model for a single graph on the 'Explore 1D' screen. 'Explore 1D' has a total of 2 graphs (polar and Cartesian).
 *
 * Characteristics of a Explore 1D Graph (which extends Graph) are:
 *  - Explore 1D graphs have exactly 1 vector sets each
 *  - Have a shared sum visible property across all graphs
 *  - are either Horizontal or Vertical
 *  - Are strictly Cartesian
 *  - Same width/height as default graph bounds, but the origin is in the center
 *
 * @author Brandon Li
 */

import Bounds2 from '../../../../dot/js/Bounds2.js';
import CoordinateSnapModes from '../../common/model/CoordinateSnapModes.js';
import Graph from '../../common/model/Graph.js';
import GraphOrientations from '../../common/model/GraphOrientations.js';
import VectorSet from '../../common/model/VectorSet.js';
import VectorAdditionConstants from '../../common/VectorAdditionConstants.js';
import vectorAddition from '../../vectorAddition.js';
// constants
const DEFAULT_GRAPH_BOUNDS = VectorAdditionConstants.DEFAULT_GRAPH_BOUNDS;

// See https://github.com/phetsims/vector-addition/issues/127
assert && assert(DEFAULT_GRAPH_BOUNDS.width % 2 === 0, `DEFAULT_GRAPH_BOUNDS.width must be even: ${DEFAULT_GRAPH_BOUNDS.width}`);
assert && assert(DEFAULT_GRAPH_BOUNDS.height % 2 === 0, `DEFAULT_GRAPH_BOUNDS.height must be even: ${DEFAULT_GRAPH_BOUNDS.height}`);

// graph bounds for 'Explore 1D' - origin is at the center
const EXPLORE_1D_GRAPH_BOUNDS = new Bounds2(-DEFAULT_GRAPH_BOUNDS.width / 2, -DEFAULT_GRAPH_BOUNDS.height / 2, DEFAULT_GRAPH_BOUNDS.width / 2, DEFAULT_GRAPH_BOUNDS.height / 2);

// All graphs on 'Explore 1D' are strictly Cartesian
const EXPLORE_1D_COORDINATE_SNAP_MODE = CoordinateSnapModes.CARTESIAN;
export default class Explore1DGraph extends Graph {
  // Graphs on 'Explore 1D' have exactly one vector set

  /**
   * @param graphOrientation - orientation of the graph (Must be either Horizontal or Vertical)
   * @param componentStyleProperty
   * @param sumVisibleProperty - shared boolean Property that controls the visibility of sum vectors
   * @param vectorColorPalette - color palette for vectors on this graph
   */
  constructor(graphOrientation, componentStyleProperty, sumVisibleProperty, vectorColorPalette) {
    assert && assert(_.includes([GraphOrientations.HORIZONTAL, GraphOrientations.VERTICAL], graphOrientation));
    super(EXPLORE_1D_GRAPH_BOUNDS, EXPLORE_1D_COORDINATE_SNAP_MODE, {
      orientation: graphOrientation
    });
    this.vectorSet = new VectorSet(this, componentStyleProperty, sumVisibleProperty, vectorColorPalette);

    // Add the one and only vector set
    this.vectorSets.push(this.vectorSet);
  }
}
vectorAddition.register('Explore1DGraph', Explore1DGraph);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb3VuZHMyIiwiQ29vcmRpbmF0ZVNuYXBNb2RlcyIsIkdyYXBoIiwiR3JhcGhPcmllbnRhdGlvbnMiLCJWZWN0b3JTZXQiLCJWZWN0b3JBZGRpdGlvbkNvbnN0YW50cyIsInZlY3RvckFkZGl0aW9uIiwiREVGQVVMVF9HUkFQSF9CT1VORFMiLCJhc3NlcnQiLCJ3aWR0aCIsImhlaWdodCIsIkVYUExPUkVfMURfR1JBUEhfQk9VTkRTIiwiRVhQTE9SRV8xRF9DT09SRElOQVRFX1NOQVBfTU9ERSIsIkNBUlRFU0lBTiIsIkV4cGxvcmUxREdyYXBoIiwiY29uc3RydWN0b3IiLCJncmFwaE9yaWVudGF0aW9uIiwiY29tcG9uZW50U3R5bGVQcm9wZXJ0eSIsInN1bVZpc2libGVQcm9wZXJ0eSIsInZlY3RvckNvbG9yUGFsZXR0ZSIsIl8iLCJpbmNsdWRlcyIsIkhPUklaT05UQUwiLCJWRVJUSUNBTCIsIm9yaWVudGF0aW9uIiwidmVjdG9yU2V0IiwidmVjdG9yU2V0cyIsInB1c2giLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkV4cGxvcmUxREdyYXBoLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIE1vZGVsIGZvciBhIHNpbmdsZSBncmFwaCBvbiB0aGUgJ0V4cGxvcmUgMUQnIHNjcmVlbi4gJ0V4cGxvcmUgMUQnIGhhcyBhIHRvdGFsIG9mIDIgZ3JhcGhzIChwb2xhciBhbmQgQ2FydGVzaWFuKS5cclxuICpcclxuICogQ2hhcmFjdGVyaXN0aWNzIG9mIGEgRXhwbG9yZSAxRCBHcmFwaCAod2hpY2ggZXh0ZW5kcyBHcmFwaCkgYXJlOlxyXG4gKiAgLSBFeHBsb3JlIDFEIGdyYXBocyBoYXZlIGV4YWN0bHkgMSB2ZWN0b3Igc2V0cyBlYWNoXHJcbiAqICAtIEhhdmUgYSBzaGFyZWQgc3VtIHZpc2libGUgcHJvcGVydHkgYWNyb3NzIGFsbCBncmFwaHNcclxuICogIC0gYXJlIGVpdGhlciBIb3Jpem9udGFsIG9yIFZlcnRpY2FsXHJcbiAqICAtIEFyZSBzdHJpY3RseSBDYXJ0ZXNpYW5cclxuICogIC0gU2FtZSB3aWR0aC9oZWlnaHQgYXMgZGVmYXVsdCBncmFwaCBib3VuZHMsIGJ1dCB0aGUgb3JpZ2luIGlzIGluIHRoZSBjZW50ZXJcclxuICpcclxuICogQGF1dGhvciBCcmFuZG9uIExpXHJcbiAqL1xyXG5cclxuaW1wb3J0IEVudW1lcmF0aW9uUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vLi4vYXhvbi9qcy9FbnVtZXJhdGlvblByb3BlcnR5LmpzJztcclxuaW1wb3J0IEJvdW5kczIgZnJvbSAnLi4vLi4vLi4vLi4vZG90L2pzL0JvdW5kczIuanMnO1xyXG5pbXBvcnQgQ29tcG9uZW50VmVjdG9yU3R5bGVzIGZyb20gJy4uLy4uL2NvbW1vbi9tb2RlbC9Db21wb25lbnRWZWN0b3JTdHlsZXMuanMnO1xyXG5pbXBvcnQgQ29vcmRpbmF0ZVNuYXBNb2RlcyBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvQ29vcmRpbmF0ZVNuYXBNb2Rlcy5qcyc7XHJcbmltcG9ydCBHcmFwaCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvR3JhcGguanMnO1xyXG5pbXBvcnQgR3JhcGhPcmllbnRhdGlvbnMgZnJvbSAnLi4vLi4vY29tbW9uL21vZGVsL0dyYXBoT3JpZW50YXRpb25zLmpzJztcclxuaW1wb3J0IFZlY3RvckNvbG9yUGFsZXR0ZSBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVmVjdG9yQ29sb3JQYWxldHRlLmpzJztcclxuaW1wb3J0IFZlY3RvclNldCBmcm9tICcuLi8uLi9jb21tb24vbW9kZWwvVmVjdG9yU2V0LmpzJztcclxuaW1wb3J0IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzIGZyb20gJy4uLy4uL2NvbW1vbi9WZWN0b3JBZGRpdGlvbkNvbnN0YW50cy5qcyc7XHJcbmltcG9ydCB2ZWN0b3JBZGRpdGlvbiBmcm9tICcuLi8uLi92ZWN0b3JBZGRpdGlvbi5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBERUZBVUxUX0dSQVBIX0JPVU5EUyA9IFZlY3RvckFkZGl0aW9uQ29uc3RhbnRzLkRFRkFVTFRfR1JBUEhfQk9VTkRTO1xyXG5cclxuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy92ZWN0b3ItYWRkaXRpb24vaXNzdWVzLzEyN1xyXG5hc3NlcnQgJiYgYXNzZXJ0KCBERUZBVUxUX0dSQVBIX0JPVU5EUy53aWR0aCAlIDIgPT09IDAsIGBERUZBVUxUX0dSQVBIX0JPVU5EUy53aWR0aCBtdXN0IGJlIGV2ZW46ICR7REVGQVVMVF9HUkFQSF9CT1VORFMud2lkdGh9YCApO1xyXG5hc3NlcnQgJiYgYXNzZXJ0KCBERUZBVUxUX0dSQVBIX0JPVU5EUy5oZWlnaHQgJSAyID09PSAwLCBgREVGQVVMVF9HUkFQSF9CT1VORFMuaGVpZ2h0IG11c3QgYmUgZXZlbjogJHtERUZBVUxUX0dSQVBIX0JPVU5EUy5oZWlnaHR9YCApO1xyXG5cclxuLy8gZ3JhcGggYm91bmRzIGZvciAnRXhwbG9yZSAxRCcgLSBvcmlnaW4gaXMgYXQgdGhlIGNlbnRlclxyXG5jb25zdCBFWFBMT1JFXzFEX0dSQVBIX0JPVU5EUyA9IG5ldyBCb3VuZHMyKCAtREVGQVVMVF9HUkFQSF9CT1VORFMud2lkdGggLyAyLFxyXG4gIC1ERUZBVUxUX0dSQVBIX0JPVU5EUy5oZWlnaHQgLyAyLFxyXG4gIERFRkFVTFRfR1JBUEhfQk9VTkRTLndpZHRoIC8gMixcclxuICBERUZBVUxUX0dSQVBIX0JPVU5EUy5oZWlnaHQgLyAyICk7XHJcblxyXG4vLyBBbGwgZ3JhcGhzIG9uICdFeHBsb3JlIDFEJyBhcmUgc3RyaWN0bHkgQ2FydGVzaWFuXHJcbmNvbnN0IEVYUExPUkVfMURfQ09PUkRJTkFURV9TTkFQX01PREUgPSBDb29yZGluYXRlU25hcE1vZGVzLkNBUlRFU0lBTjtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGNsYXNzIEV4cGxvcmUxREdyYXBoIGV4dGVuZHMgR3JhcGgge1xyXG5cclxuICAvLyBHcmFwaHMgb24gJ0V4cGxvcmUgMUQnIGhhdmUgZXhhY3RseSBvbmUgdmVjdG9yIHNldFxyXG4gIHB1YmxpYyByZWFkb25seSB2ZWN0b3JTZXQ6IFZlY3RvclNldDtcclxuXHJcbiAgLyoqXHJcbiAgICogQHBhcmFtIGdyYXBoT3JpZW50YXRpb24gLSBvcmllbnRhdGlvbiBvZiB0aGUgZ3JhcGggKE11c3QgYmUgZWl0aGVyIEhvcml6b250YWwgb3IgVmVydGljYWwpXHJcbiAgICogQHBhcmFtIGNvbXBvbmVudFN0eWxlUHJvcGVydHlcclxuICAgKiBAcGFyYW0gc3VtVmlzaWJsZVByb3BlcnR5IC0gc2hhcmVkIGJvb2xlYW4gUHJvcGVydHkgdGhhdCBjb250cm9scyB0aGUgdmlzaWJpbGl0eSBvZiBzdW0gdmVjdG9yc1xyXG4gICAqIEBwYXJhbSB2ZWN0b3JDb2xvclBhbGV0dGUgLSBjb2xvciBwYWxldHRlIGZvciB2ZWN0b3JzIG9uIHRoaXMgZ3JhcGhcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGdyYXBoT3JpZW50YXRpb246IEdyYXBoT3JpZW50YXRpb25zLFxyXG4gICAgICAgICAgICAgICAgICAgICAgY29tcG9uZW50U3R5bGVQcm9wZXJ0eTogRW51bWVyYXRpb25Qcm9wZXJ0eTxDb21wb25lbnRWZWN0b3JTdHlsZXM+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgc3VtVmlzaWJsZVByb3BlcnR5OiBQcm9wZXJ0eTxib29sZWFuPixcclxuICAgICAgICAgICAgICAgICAgICAgIHZlY3RvckNvbG9yUGFsZXR0ZTogVmVjdG9yQ29sb3JQYWxldHRlICkge1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIF8uaW5jbHVkZXMoIFsgR3JhcGhPcmllbnRhdGlvbnMuSE9SSVpPTlRBTCwgR3JhcGhPcmllbnRhdGlvbnMuVkVSVElDQUwgXSwgZ3JhcGhPcmllbnRhdGlvbiApICk7XHJcblxyXG4gICAgc3VwZXIoIEVYUExPUkVfMURfR1JBUEhfQk9VTkRTLCBFWFBMT1JFXzFEX0NPT1JESU5BVEVfU05BUF9NT0RFLCB7XHJcbiAgICAgIG9yaWVudGF0aW9uOiBncmFwaE9yaWVudGF0aW9uXHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy52ZWN0b3JTZXQgPSBuZXcgVmVjdG9yU2V0KCB0aGlzLCBjb21wb25lbnRTdHlsZVByb3BlcnR5LCBzdW1WaXNpYmxlUHJvcGVydHksIHZlY3RvckNvbG9yUGFsZXR0ZSApO1xyXG5cclxuICAgIC8vIEFkZCB0aGUgb25lIGFuZCBvbmx5IHZlY3RvciBzZXRcclxuICAgIHRoaXMudmVjdG9yU2V0cy5wdXNoKCB0aGlzLnZlY3RvclNldCApO1xyXG4gIH1cclxufVxyXG5cclxudmVjdG9yQWRkaXRpb24ucmVnaXN0ZXIoICdFeHBsb3JlMURHcmFwaCcsIEV4cGxvcmUxREdyYXBoICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsT0FBTyxNQUFNLCtCQUErQjtBQUVuRCxPQUFPQyxtQkFBbUIsTUFBTSwyQ0FBMkM7QUFDM0UsT0FBT0MsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxpQkFBaUIsTUFBTSx5Q0FBeUM7QUFFdkUsT0FBT0MsU0FBUyxNQUFNLGlDQUFpQztBQUN2RCxPQUFPQyx1QkFBdUIsTUFBTSx5Q0FBeUM7QUFDN0UsT0FBT0MsY0FBYyxNQUFNLHlCQUF5QjtBQUdwRDtBQUNBLE1BQU1DLG9CQUFvQixHQUFHRix1QkFBdUIsQ0FBQ0Usb0JBQW9COztBQUV6RTtBQUNBQyxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsb0JBQW9CLENBQUNFLEtBQUssR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFHLDRDQUEyQ0Ysb0JBQW9CLENBQUNFLEtBQU0sRUFBRSxDQUFDO0FBQ2xJRCxNQUFNLElBQUlBLE1BQU0sQ0FBRUQsb0JBQW9CLENBQUNHLE1BQU0sR0FBRyxDQUFDLEtBQUssQ0FBQyxFQUFHLDZDQUE0Q0gsb0JBQW9CLENBQUNHLE1BQU8sRUFBRSxDQUFDOztBQUVySTtBQUNBLE1BQU1DLHVCQUF1QixHQUFHLElBQUlYLE9BQU8sQ0FBRSxDQUFDTyxvQkFBb0IsQ0FBQ0UsS0FBSyxHQUFHLENBQUMsRUFDMUUsQ0FBQ0Ysb0JBQW9CLENBQUNHLE1BQU0sR0FBRyxDQUFDLEVBQ2hDSCxvQkFBb0IsQ0FBQ0UsS0FBSyxHQUFHLENBQUMsRUFDOUJGLG9CQUFvQixDQUFDRyxNQUFNLEdBQUcsQ0FBRSxDQUFDOztBQUVuQztBQUNBLE1BQU1FLCtCQUErQixHQUFHWCxtQkFBbUIsQ0FBQ1ksU0FBUztBQUVyRSxlQUFlLE1BQU1DLGNBQWMsU0FBU1osS0FBSyxDQUFDO0VBRWhEOztFQUdBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNTYSxXQUFXQSxDQUFFQyxnQkFBbUMsRUFDbkNDLHNCQUFrRSxFQUNsRUMsa0JBQXFDLEVBQ3JDQyxrQkFBc0MsRUFBRztJQUUzRFgsTUFBTSxJQUFJQSxNQUFNLENBQUVZLENBQUMsQ0FBQ0MsUUFBUSxDQUFFLENBQUVsQixpQkFBaUIsQ0FBQ21CLFVBQVUsRUFBRW5CLGlCQUFpQixDQUFDb0IsUUFBUSxDQUFFLEVBQUVQLGdCQUFpQixDQUFFLENBQUM7SUFFaEgsS0FBSyxDQUFFTCx1QkFBdUIsRUFBRUMsK0JBQStCLEVBQUU7TUFDL0RZLFdBQVcsRUFBRVI7SUFDZixDQUFFLENBQUM7SUFFSCxJQUFJLENBQUNTLFNBQVMsR0FBRyxJQUFJckIsU0FBUyxDQUFFLElBQUksRUFBRWEsc0JBQXNCLEVBQUVDLGtCQUFrQixFQUFFQyxrQkFBbUIsQ0FBQzs7SUFFdEc7SUFDQSxJQUFJLENBQUNPLFVBQVUsQ0FBQ0MsSUFBSSxDQUFFLElBQUksQ0FBQ0YsU0FBVSxDQUFDO0VBQ3hDO0FBQ0Y7QUFFQW5CLGNBQWMsQ0FBQ3NCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWQsY0FBZSxDQUFDIiwiaWdub3JlTGlzdCI6W119