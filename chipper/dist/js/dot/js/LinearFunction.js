// Copyright 2013-2024, University of Colorado Boulder

/**
 * Function for doing a linear mapping between two domains ('a' and 'b').
 * <p>
 * Example usage:
 * <code>
 * var f = new LinearFunction( 0, 100, 0, 200 );
 * f.evaluate( 50 ); // 100
 * f.inverse( 100 ); // 50
 * </code>
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import Utils from './Utils.js';
import dot from './dot.js';
export default class LinearFunction {
  /**
   * @param a1
   * @param a2
   * @param b1
   * @param b2
   * @param clamp - clamp the result to the provided ranges, false by default
   */
  constructor(a1, a2, b1, b2, clamp = false) {
    this.a1 = a1;
    this.a2 = a2;
    this.b1 = b1;
    this.b2 = b2;
    this.clamp = clamp;
  }

  /**
   * Maps from a to b.
   */
  evaluate(a3) {
    return map(this.a1, this.a2, this.b1, this.b2, a3, this.clamp);
  }

  /**
   * Maps from b to a
   */
  inverse(b3) {
    return map(this.b1, this.b2, this.a1, this.a2, b3, this.clamp);
  }
}

/**
 * Linearly interpolate two points and evaluate the line equation for a third point.
 * f( a1 ) = b1, f( a2 ) = b2, f( a3 ) = <linear mapped value>
 * Optionally clamp the result to the range [b1,b2].
 */
const map = (a1, a2, b1, b2, a3, clamp) => {
  let b3 = Utils.linear(a1, a2, b1, b2, a3);
  if (clamp) {
    const max = Math.max(b1, b2);
    const min = Math.min(b1, b2);
    b3 = Utils.clamp(b3, min, max);
  }
  return b3;
};
dot.register('LinearFunction', LinearFunction);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVdGlscyIsImRvdCIsIkxpbmVhckZ1bmN0aW9uIiwiY29uc3RydWN0b3IiLCJhMSIsImEyIiwiYjEiLCJiMiIsImNsYW1wIiwiZXZhbHVhdGUiLCJhMyIsIm1hcCIsImludmVyc2UiLCJiMyIsImxpbmVhciIsIm1heCIsIk1hdGgiLCJtaW4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkxpbmVhckZ1bmN0aW9uLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDEzLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEZ1bmN0aW9uIGZvciBkb2luZyBhIGxpbmVhciBtYXBwaW5nIGJldHdlZW4gdHdvIGRvbWFpbnMgKCdhJyBhbmQgJ2InKS5cclxuICogPHA+XHJcbiAqIEV4YW1wbGUgdXNhZ2U6XHJcbiAqIDxjb2RlPlxyXG4gKiB2YXIgZiA9IG5ldyBMaW5lYXJGdW5jdGlvbiggMCwgMTAwLCAwLCAyMDAgKTtcclxuICogZi5ldmFsdWF0ZSggNTAgKTsgLy8gMTAwXHJcbiAqIGYuaW52ZXJzZSggMTAwICk7IC8vIDUwXHJcbiAqIDwvY29kZT5cclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgVXRpbHMgZnJvbSAnLi9VdGlscy5qcyc7XHJcbmltcG9ydCBkb3QgZnJvbSAnLi9kb3QuanMnO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgTGluZWFyRnVuY3Rpb24ge1xyXG4gIHByaXZhdGUgYTE6IG51bWJlcjtcclxuICBwcml2YXRlIGEyOiBudW1iZXI7XHJcbiAgcHJpdmF0ZSBiMTogbnVtYmVyO1xyXG4gIHByaXZhdGUgYjI6IG51bWJlcjtcclxuICBwcml2YXRlIGNsYW1wOiBib29sZWFuO1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gYTFcclxuICAgKiBAcGFyYW0gYTJcclxuICAgKiBAcGFyYW0gYjFcclxuICAgKiBAcGFyYW0gYjJcclxuICAgKiBAcGFyYW0gY2xhbXAgLSBjbGFtcCB0aGUgcmVzdWx0IHRvIHRoZSBwcm92aWRlZCByYW5nZXMsIGZhbHNlIGJ5IGRlZmF1bHRcclxuICAgKi9cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGExOiBudW1iZXIsIGEyOiBudW1iZXIsIGIxOiBudW1iZXIsIGIyOiBudW1iZXIsIGNsYW1wID0gZmFsc2UgKSB7XHJcbiAgICB0aGlzLmExID0gYTE7XHJcbiAgICB0aGlzLmEyID0gYTI7XHJcbiAgICB0aGlzLmIxID0gYjE7XHJcbiAgICB0aGlzLmIyID0gYjI7XHJcbiAgICB0aGlzLmNsYW1wID0gY2xhbXA7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBNYXBzIGZyb20gYSB0byBiLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBldmFsdWF0ZSggYTM6IG51bWJlciApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIG1hcCggdGhpcy5hMSwgdGhpcy5hMiwgdGhpcy5iMSwgdGhpcy5iMiwgYTMsIHRoaXMuY2xhbXAgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIE1hcHMgZnJvbSBiIHRvIGFcclxuICAgKi9cclxuICBwdWJsaWMgaW52ZXJzZSggYjM6IG51bWJlciApOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIG1hcCggdGhpcy5iMSwgdGhpcy5iMiwgdGhpcy5hMSwgdGhpcy5hMiwgYjMsIHRoaXMuY2xhbXAgKTtcclxuICB9XHJcbn1cclxuXHJcbi8qKlxyXG4gKiBMaW5lYXJseSBpbnRlcnBvbGF0ZSB0d28gcG9pbnRzIGFuZCBldmFsdWF0ZSB0aGUgbGluZSBlcXVhdGlvbiBmb3IgYSB0aGlyZCBwb2ludC5cclxuICogZiggYTEgKSA9IGIxLCBmKCBhMiApID0gYjIsIGYoIGEzICkgPSA8bGluZWFyIG1hcHBlZCB2YWx1ZT5cclxuICogT3B0aW9uYWxseSBjbGFtcCB0aGUgcmVzdWx0IHRvIHRoZSByYW5nZSBbYjEsYjJdLlxyXG4gKi9cclxuY29uc3QgbWFwID0gKCBhMTogbnVtYmVyLCBhMjogbnVtYmVyLCBiMTogbnVtYmVyLCBiMjogbnVtYmVyLCBhMzogbnVtYmVyLCBjbGFtcDogYm9vbGVhbiApOiBudW1iZXIgPT4ge1xyXG4gIGxldCBiMyA9IFV0aWxzLmxpbmVhciggYTEsIGEyLCBiMSwgYjIsIGEzICk7XHJcbiAgaWYgKCBjbGFtcCApIHtcclxuICAgIGNvbnN0IG1heCA9IE1hdGgubWF4KCBiMSwgYjIgKTtcclxuICAgIGNvbnN0IG1pbiA9IE1hdGgubWluKCBiMSwgYjIgKTtcclxuICAgIGIzID0gVXRpbHMuY2xhbXAoIGIzLCBtaW4sIG1heCApO1xyXG4gIH1cclxuICByZXR1cm4gYjM7XHJcbn07XHJcblxyXG5kb3QucmVnaXN0ZXIoICdMaW5lYXJGdW5jdGlvbicsIExpbmVhckZ1bmN0aW9uICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLFlBQVk7QUFDOUIsT0FBT0MsR0FBRyxNQUFNLFVBQVU7QUFFMUIsZUFBZSxNQUFNQyxjQUFjLENBQUM7RUFPbEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0MsV0FBV0EsQ0FBRUMsRUFBVSxFQUFFQyxFQUFVLEVBQUVDLEVBQVUsRUFBRUMsRUFBVSxFQUFFQyxLQUFLLEdBQUcsS0FBSyxFQUFHO0lBQ2xGLElBQUksQ0FBQ0osRUFBRSxHQUFHQSxFQUFFO0lBQ1osSUFBSSxDQUFDQyxFQUFFLEdBQUdBLEVBQUU7SUFDWixJQUFJLENBQUNDLEVBQUUsR0FBR0EsRUFBRTtJQUNaLElBQUksQ0FBQ0MsRUFBRSxHQUFHQSxFQUFFO0lBQ1osSUFBSSxDQUFDQyxLQUFLLEdBQUdBLEtBQUs7RUFDcEI7O0VBRUE7QUFDRjtBQUNBO0VBQ1NDLFFBQVFBLENBQUVDLEVBQVUsRUFBVztJQUNwQyxPQUFPQyxHQUFHLENBQUUsSUFBSSxDQUFDUCxFQUFFLEVBQUUsSUFBSSxDQUFDQyxFQUFFLEVBQUUsSUFBSSxDQUFDQyxFQUFFLEVBQUUsSUFBSSxDQUFDQyxFQUFFLEVBQUVHLEVBQUUsRUFBRSxJQUFJLENBQUNGLEtBQU0sQ0FBQztFQUNsRTs7RUFFQTtBQUNGO0FBQ0E7RUFDU0ksT0FBT0EsQ0FBRUMsRUFBVSxFQUFXO0lBQ25DLE9BQU9GLEdBQUcsQ0FBRSxJQUFJLENBQUNMLEVBQUUsRUFBRSxJQUFJLENBQUNDLEVBQUUsRUFBRSxJQUFJLENBQUNILEVBQUUsRUFBRSxJQUFJLENBQUNDLEVBQUUsRUFBRVEsRUFBRSxFQUFFLElBQUksQ0FBQ0wsS0FBTSxDQUFDO0VBQ2xFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1HLEdBQUcsR0FBR0EsQ0FBRVAsRUFBVSxFQUFFQyxFQUFVLEVBQUVDLEVBQVUsRUFBRUMsRUFBVSxFQUFFRyxFQUFVLEVBQUVGLEtBQWMsS0FBYztFQUNwRyxJQUFJSyxFQUFFLEdBQUdiLEtBQUssQ0FBQ2MsTUFBTSxDQUFFVixFQUFFLEVBQUVDLEVBQUUsRUFBRUMsRUFBRSxFQUFFQyxFQUFFLEVBQUVHLEVBQUcsQ0FBQztFQUMzQyxJQUFLRixLQUFLLEVBQUc7SUFDWCxNQUFNTyxHQUFHLEdBQUdDLElBQUksQ0FBQ0QsR0FBRyxDQUFFVCxFQUFFLEVBQUVDLEVBQUcsQ0FBQztJQUM5QixNQUFNVSxHQUFHLEdBQUdELElBQUksQ0FBQ0MsR0FBRyxDQUFFWCxFQUFFLEVBQUVDLEVBQUcsQ0FBQztJQUM5Qk0sRUFBRSxHQUFHYixLQUFLLENBQUNRLEtBQUssQ0FBRUssRUFBRSxFQUFFSSxHQUFHLEVBQUVGLEdBQUksQ0FBQztFQUNsQztFQUNBLE9BQU9GLEVBQUU7QUFDWCxDQUFDO0FBRURaLEdBQUcsQ0FBQ2lCLFFBQVEsQ0FBRSxnQkFBZ0IsRUFBRWhCLGNBQWUsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==