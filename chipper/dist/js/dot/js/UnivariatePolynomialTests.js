// Copyright 2023-2024, University of Colorado Boulder

/**
 * UnivariatePolynomial tests
 *
 * @author Jonathan Olson (PhET Interactive Simulations)
 */

import UnivariatePolynomial from './UnivariatePolynomial.js';
import Complex from './Complex.js';
QUnit.module('UnivariatePolynomial');
const numberEqualsEpsilon = (assert, a, b, message) => {
  assert.ok(Math.abs(a - b) < 1e-8, `actual: ${a}, expected: ${b}, ${message}`);
};
QUnit.test('2x^2 + 6x + 4', assert => {
  // 2x^2 + 6x + 4
  const polynomial = new UnivariatePolynomial([4, 6, 2]);
  numberEqualsEpsilon(assert, polynomial.getCoefficient(0), 4, 'getCoefficient 0');
  numberEqualsEpsilon(assert, polynomial.getCoefficient(1), 6, 'getCoefficient 1');
  numberEqualsEpsilon(assert, polynomial.getCoefficient(2), 2, 'getCoefficient 2');
  numberEqualsEpsilon(assert, polynomial.degree, 2, 'degree');
  numberEqualsEpsilon(assert, polynomial.evaluate(0), 4, 'evaluate 0');
  numberEqualsEpsilon(assert, polynomial.evaluate(1), 12, 'evaluate 1');
  numberEqualsEpsilon(assert, polynomial.evaluate(2), 24, 'evaluate 2');
  numberEqualsEpsilon(assert, polynomial.evaluate(-1), 0, 'evaluate -1');
  numberEqualsEpsilon(assert, polynomial.evaluate(-2), 0, 'evaluate -2');
  const roots = polynomial.getRoots();
  assert.ok(roots.some(root => root.equals(Complex.real(-1))), 'first root');
  assert.ok(roots.some(root => root.equals(Complex.real(-2))), 'second root');
});
QUnit.test('x^3 + 10x^2 + 169x', assert => {
  // 2x^2 + 6x + 4
  const polynomial = new UnivariatePolynomial([0, 169, 10, 1]);
  const roots = polynomial.getRoots();
  assert.ok(roots.length === 3, 'There should be 3 roots');
  assert.ok(roots.some(root => root.equals(new Complex(-5, 12))), 'first root');
  assert.ok(roots.some(root => root.equals(new Complex(-5, -12))), 'second root');
  assert.ok(roots.some(root => root.equals(new Complex(0, 0))), 'third root');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJVbml2YXJpYXRlUG9seW5vbWlhbCIsIkNvbXBsZXgiLCJRVW5pdCIsIm1vZHVsZSIsIm51bWJlckVxdWFsc0Vwc2lsb24iLCJhc3NlcnQiLCJhIiwiYiIsIm1lc3NhZ2UiLCJvayIsIk1hdGgiLCJhYnMiLCJ0ZXN0IiwicG9seW5vbWlhbCIsImdldENvZWZmaWNpZW50IiwiZGVncmVlIiwiZXZhbHVhdGUiLCJyb290cyIsImdldFJvb3RzIiwic29tZSIsInJvb3QiLCJlcXVhbHMiLCJyZWFsIiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiVW5pdmFyaWF0ZVBvbHlub21pYWxUZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBVbml2YXJpYXRlUG9seW5vbWlhbCB0ZXN0c1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBVbml2YXJpYXRlUG9seW5vbWlhbCBmcm9tICcuL1VuaXZhcmlhdGVQb2x5bm9taWFsLmpzJztcclxuaW1wb3J0IENvbXBsZXggZnJvbSAnLi9Db21wbGV4LmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ1VuaXZhcmlhdGVQb2x5bm9taWFsJyApO1xyXG5cclxuY29uc3QgbnVtYmVyRXF1YWxzRXBzaWxvbiA9ICggYXNzZXJ0OiBBc3NlcnQsIGE6IG51bWJlciwgYjogbnVtYmVyLCBtZXNzYWdlOiBzdHJpbmcgKSA9PiB7XHJcbiAgYXNzZXJ0Lm9rKCBNYXRoLmFicyggYSAtIGIgKSA8IDFlLTgsIGBhY3R1YWw6ICR7YX0sIGV4cGVjdGVkOiAke2J9LCAke21lc3NhZ2V9YCApO1xyXG59O1xyXG5cclxuUVVuaXQudGVzdCggJzJ4XjIgKyA2eCArIDQnLCBhc3NlcnQgPT4ge1xyXG5cclxuICAvLyAyeF4yICsgNnggKyA0XHJcbiAgY29uc3QgcG9seW5vbWlhbCA9IG5ldyBVbml2YXJpYXRlUG9seW5vbWlhbCggWyA0LCA2LCAyIF0gKTtcclxuXHJcbiAgbnVtYmVyRXF1YWxzRXBzaWxvbiggYXNzZXJ0LCBwb2x5bm9taWFsLmdldENvZWZmaWNpZW50KCAwICksIDQsICdnZXRDb2VmZmljaWVudCAwJyApO1xyXG4gIG51bWJlckVxdWFsc0Vwc2lsb24oIGFzc2VydCwgcG9seW5vbWlhbC5nZXRDb2VmZmljaWVudCggMSApLCA2LCAnZ2V0Q29lZmZpY2llbnQgMScgKTtcclxuICBudW1iZXJFcXVhbHNFcHNpbG9uKCBhc3NlcnQsIHBvbHlub21pYWwuZ2V0Q29lZmZpY2llbnQoIDIgKSwgMiwgJ2dldENvZWZmaWNpZW50IDInICk7XHJcblxyXG4gIG51bWJlckVxdWFsc0Vwc2lsb24oIGFzc2VydCwgcG9seW5vbWlhbC5kZWdyZWUsIDIsICdkZWdyZWUnICk7XHJcblxyXG4gIG51bWJlckVxdWFsc0Vwc2lsb24oIGFzc2VydCwgcG9seW5vbWlhbC5ldmFsdWF0ZSggMCApLCA0LCAnZXZhbHVhdGUgMCcgKTtcclxuICBudW1iZXJFcXVhbHNFcHNpbG9uKCBhc3NlcnQsIHBvbHlub21pYWwuZXZhbHVhdGUoIDEgKSwgMTIsICdldmFsdWF0ZSAxJyApO1xyXG4gIG51bWJlckVxdWFsc0Vwc2lsb24oIGFzc2VydCwgcG9seW5vbWlhbC5ldmFsdWF0ZSggMiApLCAyNCwgJ2V2YWx1YXRlIDInICk7XHJcbiAgbnVtYmVyRXF1YWxzRXBzaWxvbiggYXNzZXJ0LCBwb2x5bm9taWFsLmV2YWx1YXRlKCAtMSApLCAwLCAnZXZhbHVhdGUgLTEnICk7XHJcbiAgbnVtYmVyRXF1YWxzRXBzaWxvbiggYXNzZXJ0LCBwb2x5bm9taWFsLmV2YWx1YXRlKCAtMiApLCAwLCAnZXZhbHVhdGUgLTInICk7XHJcblxyXG4gIGNvbnN0IHJvb3RzID0gcG9seW5vbWlhbC5nZXRSb290cygpO1xyXG4gIGFzc2VydC5vayggcm9vdHMuc29tZSggcm9vdCA9PiByb290LmVxdWFscyggQ29tcGxleC5yZWFsKCAtMSApICkgKSwgJ2ZpcnN0IHJvb3QnICk7XHJcbiAgYXNzZXJ0Lm9rKCByb290cy5zb21lKCByb290ID0+IHJvb3QuZXF1YWxzKCBDb21wbGV4LnJlYWwoIC0yICkgKSApLCAnc2Vjb25kIHJvb3QnICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICd4XjMgKyAxMHheMiArIDE2OXgnLCBhc3NlcnQgPT4ge1xyXG5cclxuICAvLyAyeF4yICsgNnggKyA0XHJcbiAgY29uc3QgcG9seW5vbWlhbCA9IG5ldyBVbml2YXJpYXRlUG9seW5vbWlhbCggWyAwLCAxNjksIDEwLCAxIF0gKTtcclxuXHJcbiAgY29uc3Qgcm9vdHMgPSBwb2x5bm9taWFsLmdldFJvb3RzKCk7XHJcbiAgYXNzZXJ0Lm9rKCByb290cy5sZW5ndGggPT09IDMsICdUaGVyZSBzaG91bGQgYmUgMyByb290cycgKTtcclxuICBhc3NlcnQub2soIHJvb3RzLnNvbWUoIHJvb3QgPT4gcm9vdC5lcXVhbHMoIG5ldyBDb21wbGV4KCAtNSwgMTIgKSApICksICdmaXJzdCByb290JyApO1xyXG4gIGFzc2VydC5vayggcm9vdHMuc29tZSggcm9vdCA9PiByb290LmVxdWFscyggbmV3IENvbXBsZXgoIC01LCAtMTIgKSApICksICdzZWNvbmQgcm9vdCcgKTtcclxuICBhc3NlcnQub2soIHJvb3RzLnNvbWUoIHJvb3QgPT4gcm9vdC5lcXVhbHMoIG5ldyBDb21wbGV4KCAwLCAwICkgKSApLCAndGhpcmQgcm9vdCcgKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxvQkFBb0IsTUFBTSwyQkFBMkI7QUFDNUQsT0FBT0MsT0FBTyxNQUFNLGNBQWM7QUFFbENDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLHNCQUF1QixDQUFDO0FBRXRDLE1BQU1DLG1CQUFtQixHQUFHQSxDQUFFQyxNQUFjLEVBQUVDLENBQVMsRUFB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