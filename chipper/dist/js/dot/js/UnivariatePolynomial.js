// Copyright 2023, University of Colorado Boulder

/**
 * Handles a univariate polynomial (a polynomial with one variable), like 2x^2 + 6x + 4.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import dot from './dot.js';
import Complex from './Complex.js';
import Matrix from './Matrix.js';
import EigenvalueDecomposition from './EigenvalueDecomposition.js';
import QRDecomposition from './QRDecomposition.js';
class UnivariatePolynomial {
  // coefficients indexed by degree, so e.g. 2x^2 + 6x + 4 would be input as [ 4, 6, 2 ], because
  // coefficients[ 2 ] would be the coefficient of x^2, etc.
  constructor(coefficients) {
    // Get rid of "leading" zero coefficients
    const nontrivialCoefficients = coefficients.slice();
    while (nontrivialCoefficients.length && nontrivialCoefficients[nontrivialCoefficients.length - 1] === 0) {
      nontrivialCoefficients.pop();
    }
    this.coefficients = nontrivialCoefficients;
  }
  plus(polynomial) {
    const coefficients = [];
    for (let i = 0; i < Math.max(this.coefficients.length, polynomial.coefficients.length); i++) {
      coefficients.push(this.getCoefficient(i) + polynomial.getCoefficient(i));
    }
    return new UnivariatePolynomial(coefficients);
  }
  minus(polynomial) {
    const coefficients = [];
    for (let i = 0; i < Math.max(this.coefficients.length, polynomial.coefficients.length); i++) {
      coefficients.push(this.getCoefficient(i) - polynomial.getCoefficient(i));
    }
    return new UnivariatePolynomial(coefficients);
  }
  times(polynomial) {
    const coefficients = [];
    while (coefficients.length < this.coefficients.length + polynomial.coefficients.length - 1) {
      coefficients.push(0);
    }
    for (let i = 0; i < this.coefficients.length; i++) {
      for (let j = 0; j < polynomial.coefficients.length; j++) {
        coefficients[i + j] += this.getCoefficient(i) * polynomial.getCoefficient(j);
      }
    }
    return new UnivariatePolynomial(coefficients);
  }
  dividedBy(polynomial) {
    let q = new UnivariatePolynomial([]);
    let r = this; // eslint-disable-line consistent-this, @typescript-eslint/no-this-alias
    const d = polynomial.degree;
    const c = polynomial.coefficients[polynomial.coefficients.length - 1];
    while (r.degree >= d) {
      const s = UnivariatePolynomial.singleCoefficient(r.getCoefficient(r.degree) / c, r.degree - d);
      q = q.plus(s);
      r = r.minus(s.times(polynomial));
    }
    return {
      quotient: q,
      remainder: r
    };
  }
  gcd(polynomial) {
    let a = this; // eslint-disable-line consistent-this, @typescript-eslint/no-this-alias
    let b = polynomial;
    while (!b.isZero()) {
      const t = b;
      b = a.dividedBy(b).remainder;
      a = t;
    }
    return a;
  }
  equals(polynomial) {
    return this.coefficients.length === polynomial.coefficients.length && this.coefficients.every((coefficient, i) => coefficient === polynomial.coefficients[i]);
  }
  getCoefficient(degree) {
    return degree < this.coefficients.length ? this.coefficients[degree] : 0;
  }
  get degree() {
    return this.coefficients.length - 1;
  }
  isZero() {
    return this.coefficients.length === 0;
  }
  getMonicPolynomial() {
    if (this.isZero()) {
      return this;
    } else {
      const leadingCoefficient = this.coefficients[this.coefficients.length - 1];
      return new UnivariatePolynomial(this.coefficients.map(coefficient => coefficient / leadingCoefficient));
    }
  }
  evaluate(x) {
    // https://en.wikipedia.org/wiki/Horner%27s_method
    let result = this.coefficients[this.coefficients.length - 1];
    for (let i = this.coefficients.length - 2; i >= 0; i--) {
      result = result * x + this.coefficients[i];
    }
    return result;
  }
  evaluateComplex(x) {
    // https://en.wikipedia.org/wiki/Horner%27s_method
    let result = Complex.real(this.coefficients[this.coefficients.length - 1]);
    for (let i = this.coefficients.length - 2; i >= 0; i--) {
      result = result.times(x).plus(Complex.real(this.coefficients[i]));
    }
    return result;
  }
  getRoots() {
    if (this.isZero() || this.degree === 0) {
      // TODO: how to handle? https://github.com/phetsims/kite/issues/97
      return [];
    } else if (this.degree === 1) {
      return [Complex.real(-this.coefficients[0] / this.coefficients[1])];
    } else if (this.coefficients[0] === 0) {
      // x=0 is a root!
      const roots = new UnivariatePolynomial(this.coefficients.slice(1)).getRoots();
      if (!roots.some(root => root.equalsEpsilon(Complex.real(0), 1e-10))) {
        roots.push(Complex.real(0));
      }
      return roots;
    } else if (this.degree === 2) {
      return Complex.solveQuadraticRoots(Complex.real(this.coefficients[2]), Complex.real(this.coefficients[1]), Complex.real(this.coefficients[0]));
    } else if (this.degree === 3) {
      return Complex.solveCubicRoots(Complex.real(this.coefficients[3]), Complex.real(this.coefficients[2]), Complex.real(this.coefficients[1]), Complex.real(this.coefficients[0]));
    } else {
      // Use the eigenvalues of the companion matrix, since it is the zeros of the characteristic polynomial

      // https://en.wikipedia.org/wiki/Companion_matrix
      const companionMatrix = new Matrix(this.degree, this.degree);
      for (let i = 0; i < this.degree; i++) {
        if (i < this.degree - 1) {
          companionMatrix.set(i + 1, i, 1);
        }
        companionMatrix.set(i, this.degree - 1, -this.coefficients[i] / this.coefficients[this.degree]);
      }
      console.log(companionMatrix.toString());
      let matrix = companionMatrix;
      const epsilon = 1e-13;

      // TODO: custom number of steps? https://github.com/phetsims/kite/issues/97
      for (let i = 0; i < 500; i++) {
        const qr = new QRDecomposition(matrix);
        matrix = qr.getR().times(qr.getQ());
        if (i % 10 === 0) {
          let maxLowerTriangular = 0;
          for (let i = 0; i < this.degree; i++) {
            for (let j = 0; j < i; j++) {
              maxLowerTriangular = Math.max(maxLowerTriangular, Math.abs(matrix.get(i, j)));
            }
          }
          // TODO: 1000 seems excessive OR not enough, depending on the polynomial? https://github.com/phetsims/kite/issues/97
          if (maxLowerTriangular < epsilon || i > 1000) {
            break;
          }
        }
      }
      const qrValues = _.range(0, this.degree).map(i => Complex.real(matrix.get(i, i)));
      const decomp = new EigenvalueDecomposition(companionMatrix);

      // @ts-expect-error
      const realValues = decomp.getRealEigenvalues();
      // @ts-expect-error
      const imaginaryValues = decomp.getImagEigenvalues();
      const decompValues = _.range(0, this.degree).map(i => new Complex(realValues[i], imaginaryValues[i]));

      // TODO: complex values! We seem to be failing here https://github.com/phetsims/kite/issues/97
      return qrValues ? qrValues : decompValues;
    }
  }
  static singleCoefficient(coefficient, degree) {
    const coefficients = [];
    while (coefficients.length < degree) {
      coefficients.push(0);
    }
    coefficients.push(coefficient);
    return new UnivariatePolynomial(coefficients);
  }
  static ZERO = new UnivariatePolynomial([]);
}
dot.register('UnivariatePolynomial', UnivariatePolynomial);
export default UnivariatePolynomial;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3QiLCJDb21wbGV4IiwiTWF0cml4IiwiRWlnZW52YWx1ZURlY29tcG9zaXRpb24iLCJRUkRlY29tcG9zaXRpb24iLCJVbml2YXJpYXRlUG9seW5vbWlhbCIsImNvbnN0cnVjdG9yIiwiY29lZmZpY2llbnRzIiwibm9udHJpdmlhbENvZWZmaWNpZW50cyIsInNsaWNlIiwibGVuZ3RoIiwicG9wIiwicGx1cyIsInBvbHlub21pYWwiLCJpIiwiTWF0aCIsIm1heCIsInB1c2giLCJnZXRDb2VmZmljaWVudCIsIm1pbnVzIiwidGltZXMiLCJqIiwiZGl2aWRlZEJ5IiwicSIsInIiLCJkIiwiZGVncmVlIiwiYyIsInMiLCJzaW5nbGVDb2VmZmljaWVudCIsInF1b3RpZW50IiwicmVtYWluZGVyIiwiZ2NkIiwiYSIsImIiLCJpc1plcm8iLCJ0IiwiZXF1YWxzIiwiZXZlcnkiLCJjb2VmZmljaWVudCIsImdldE1vbmljUG9seW5vbWlhbCIsImxlYWRpbmdDb2VmZmljaWVudCIsIm1hcCIsImV2YWx1YXRlIiwieCIsInJlc3VsdCIsImV2YWx1YXRlQ29tcGxleCIsInJlYWwiLCJnZXRSb290cyIsInJvb3RzIiwic29tZSIsInJvb3QiLCJlcXVhbHNFcHNpbG9uIiwic29sdmVRdWFkcmF0aWNSb290cyIsInNvbHZlQ3ViaWNSb290cyIsImNvbXBhbmlvbk1hdHJpeCIsInNldCIsImNvbnNvbGUiLCJsb2ciLCJ0b1N0cmluZyIsIm1hdHJpeCIsImVwc2lsb24iLCJxciIsImdldFIiLCJnZXRRIiwibWF4TG93ZXJUcmlhbmd1bGFyIiwiYWJzIiwiZ2V0IiwicXJWYWx1ZXMiLCJfIiwicmFuZ2UiLCJkZWNvbXAiLCJyZWFsVmFsdWVzIiwiZ2V0UmVhbEVpZ2VudmFsdWVzIiwiaW1hZ2luYXJ5VmFsdWVzIiwiZ2V0SW1hZ0VpZ2VudmFsdWVzIiwiZGVjb21wVmFsdWVzIiwiWkVSTyIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVW5pdmFyaWF0ZVBvbHlub21pYWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgYSB1bml2YXJpYXRlIHBvbHlub21pYWwgKGEgcG9seW5vbWlhbCB3aXRoIG9uZSB2YXJpYWJsZSksIGxpa2UgMnheMiArIDZ4ICsgNC5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBkb3QgZnJvbSAnLi9kb3QuanMnO1xyXG5pbXBvcnQgQ29tcGxleCBmcm9tICcuL0NvbXBsZXguanMnO1xyXG5pbXBvcnQgTWF0cml4IGZyb20gJy4vTWF0cml4LmpzJztcclxuaW1wb3J0IEVpZ2VudmFsdWVEZWNvbXBvc2l0aW9uIGZyb20gJy4vRWlnZW52YWx1ZURlY29tcG9zaXRpb24uanMnO1xyXG5pbXBvcnQgUVJEZWNvbXBvc2l0aW9uIGZyb20gJy4vUVJEZWNvbXBvc2l0aW9uLmpzJztcclxuXHJcbmNsYXNzIFVuaXZhcmlhdGVQb2x5bm9taWFsIHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IGNvZWZmaWNpZW50czogbnVtYmVyW107XHJcblxyXG4gIC8vIGNvZWZmaWNpZW50cyBpbmRleGVkIGJ5IGRlZ3JlZSwgc28gZS5nLiAyeF4yICsgNnggKyA0IHdvdWxkIGJlIGlucHV0IGFzIFsgNCwgNiwgMiBdLCBiZWNhdXNlXHJcbiAgLy8gY29lZmZpY2llbnRzWyAyIF0gd291bGQgYmUgdGhlIGNvZWZmaWNpZW50IG9mIHheMiwgZXRjLlxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggY29lZmZpY2llbnRzOiBudW1iZXJbXSApIHtcclxuXHJcbiAgICAvLyBHZXQgcmlkIG9mIFwibGVhZGluZ1wiIHplcm8gY29lZmZpY2llbnRzXHJcbiAgICBjb25zdCBub250cml2aWFsQ29lZmZpY2llbnRzID0gY29lZmZpY2llbnRzLnNsaWNlKCk7XHJcbiAgICB3aGlsZSAoIG5vbnRyaXZpYWxDb2VmZmljaWVudHMubGVuZ3RoICYmIG5vbnRyaXZpYWxDb2VmZmljaWVudHNbIG5vbnRyaXZpYWxDb2VmZmljaWVudHMubGVuZ3RoIC0gMSBdID09PSAwICkge1xyXG4gICAgICBub250cml2aWFsQ29lZmZpY2llbnRzLnBvcCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuY29lZmZpY2llbnRzID0gbm9udHJpdmlhbENvZWZmaWNpZW50cztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBwbHVzKCBwb2x5bm9taWFsOiBVbml2YXJpYXRlUG9seW5vbWlhbCApOiBVbml2YXJpYXRlUG9seW5vbWlhbCB7XHJcbiAgICBjb25zdCBjb2VmZmljaWVudHMgPSBbXTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IE1hdGgubWF4KCB0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGgsIHBvbHlub21pYWwuY29lZmZpY2llbnRzLmxlbmd0aCApOyBpKysgKSB7XHJcbiAgICAgIGNvZWZmaWNpZW50cy5wdXNoKCB0aGlzLmdldENvZWZmaWNpZW50KCBpICkgKyBwb2x5bm9taWFsLmdldENvZWZmaWNpZW50KCBpICkgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgVW5pdmFyaWF0ZVBvbHlub21pYWwoIGNvZWZmaWNpZW50cyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG1pbnVzKCBwb2x5bm9taWFsOiBVbml2YXJpYXRlUG9seW5vbWlhbCApOiBVbml2YXJpYXRlUG9seW5vbWlhbCB7XHJcbiAgICBjb25zdCBjb2VmZmljaWVudHMgPSBbXTtcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IE1hdGgubWF4KCB0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGgsIHBvbHlub21pYWwuY29lZmZpY2llbnRzLmxlbmd0aCApOyBpKysgKSB7XHJcbiAgICAgIGNvZWZmaWNpZW50cy5wdXNoKCB0aGlzLmdldENvZWZmaWNpZW50KCBpICkgLSBwb2x5bm9taWFsLmdldENvZWZmaWNpZW50KCBpICkgKTtcclxuICAgIH1cclxuICAgIHJldHVybiBuZXcgVW5pdmFyaWF0ZVBvbHlub21pYWwoIGNvZWZmaWNpZW50cyApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHRpbWVzKCBwb2x5bm9taWFsOiBVbml2YXJpYXRlUG9seW5vbWlhbCApOiBVbml2YXJpYXRlUG9seW5vbWlhbCB7XHJcbiAgICBjb25zdCBjb2VmZmljaWVudHMgPSBbXTtcclxuICAgIHdoaWxlICggY29lZmZpY2llbnRzLmxlbmd0aCA8IHRoaXMuY29lZmZpY2llbnRzLmxlbmd0aCArIHBvbHlub21pYWwuY29lZmZpY2llbnRzLmxlbmd0aCAtIDEgKSB7XHJcbiAgICAgIGNvZWZmaWNpZW50cy5wdXNoKCAwICk7XHJcbiAgICB9XHJcbiAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgZm9yICggbGV0IGogPSAwOyBqIDwgcG9seW5vbWlhbC5jb2VmZmljaWVudHMubGVuZ3RoOyBqKysgKSB7XHJcbiAgICAgICAgY29lZmZpY2llbnRzWyBpICsgaiBdICs9IHRoaXMuZ2V0Q29lZmZpY2llbnQoIGkgKSAqIHBvbHlub21pYWwuZ2V0Q29lZmZpY2llbnQoIGogKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5ldyBVbml2YXJpYXRlUG9seW5vbWlhbCggY29lZmZpY2llbnRzICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGl2aWRlZEJ5KCBwb2x5bm9taWFsOiBVbml2YXJpYXRlUG9seW5vbWlhbCApOiB7IHF1b3RpZW50OiBVbml2YXJpYXRlUG9seW5vbWlhbDsgcmVtYWluZGVyOiBVbml2YXJpYXRlUG9seW5vbWlhbCB9IHtcclxuICAgIGxldCBxID0gbmV3IFVuaXZhcmlhdGVQb2x5bm9taWFsKCBbXSApO1xyXG4gICAgbGV0IHI6IFVuaXZhcmlhdGVQb2x5bm9taWFsID0gdGhpczsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBjb25zaXN0ZW50LXRoaXMsIEB0eXBlc2NyaXB0LWVzbGludC9uby10aGlzLWFsaWFzXHJcbiAgICBjb25zdCBkID0gcG9seW5vbWlhbC5kZWdyZWU7XHJcbiAgICBjb25zdCBjID0gcG9seW5vbWlhbC5jb2VmZmljaWVudHNbIHBvbHlub21pYWwuY29lZmZpY2llbnRzLmxlbmd0aCAtIDEgXTtcclxuICAgIHdoaWxlICggci5kZWdyZWUgPj0gZCApIHtcclxuICAgICAgY29uc3QgcyA9IFVuaXZhcmlhdGVQb2x5bm9taWFsLnNpbmdsZUNvZWZmaWNpZW50KCByLmdldENvZWZmaWNpZW50KCByLmRlZ3JlZSApIC8gYywgci5kZWdyZWUgLSBkICk7XHJcbiAgICAgIHEgPSBxLnBsdXMoIHMgKTtcclxuICAgICAgciA9IHIubWludXMoIHMudGltZXMoIHBvbHlub21pYWwgKSApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHtcclxuICAgICAgcXVvdGllbnQ6IHEsXHJcbiAgICAgIHJlbWFpbmRlcjogclxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnY2QoIHBvbHlub21pYWw6IFVuaXZhcmlhdGVQb2x5bm9taWFsICk6IFVuaXZhcmlhdGVQb2x5bm9taWFsIHtcclxuICAgIGxldCBhOiBVbml2YXJpYXRlUG9seW5vbWlhbCA9IHRoaXM7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgY29uc2lzdGVudC10aGlzLCBAdHlwZXNjcmlwdC1lc2xpbnQvbm8tdGhpcy1hbGlhc1xyXG4gICAgbGV0IGIgPSBwb2x5bm9taWFsO1xyXG4gICAgd2hpbGUgKCAhYi5pc1plcm8oKSApIHtcclxuICAgICAgY29uc3QgdCA9IGI7XHJcbiAgICAgIGIgPSBhLmRpdmlkZWRCeSggYiApLnJlbWFpbmRlcjtcclxuICAgICAgYSA9IHQ7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBlcXVhbHMoIHBvbHlub21pYWw6IFVuaXZhcmlhdGVQb2x5bm9taWFsICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuY29lZmZpY2llbnRzLmxlbmd0aCA9PT0gcG9seW5vbWlhbC5jb2VmZmljaWVudHMubGVuZ3RoICYmIHRoaXMuY29lZmZpY2llbnRzLmV2ZXJ5KCAoIGNvZWZmaWNpZW50LCBpICkgPT4gY29lZmZpY2llbnQgPT09IHBvbHlub21pYWwuY29lZmZpY2llbnRzWyBpIF0gKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRDb2VmZmljaWVudCggZGVncmVlOiBudW1iZXIgKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBkZWdyZWUgPCB0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGggPyB0aGlzLmNvZWZmaWNpZW50c1sgZGVncmVlIF0gOiAwO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBkZWdyZWUoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGggLSAxO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGlzWmVybygpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGggPT09IDA7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0TW9uaWNQb2x5bm9taWFsKCk6IFVuaXZhcmlhdGVQb2x5bm9taWFsIHtcclxuICAgIGlmICggdGhpcy5pc1plcm8oKSApIHtcclxuICAgICAgcmV0dXJuIHRoaXM7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY29uc3QgbGVhZGluZ0NvZWZmaWNpZW50ID0gdGhpcy5jb2VmZmljaWVudHNbIHRoaXMuY29lZmZpY2llbnRzLmxlbmd0aCAtIDEgXTtcclxuICAgICAgcmV0dXJuIG5ldyBVbml2YXJpYXRlUG9seW5vbWlhbCggdGhpcy5jb2VmZmljaWVudHMubWFwKCBjb2VmZmljaWVudCA9PiBjb2VmZmljaWVudCAvIGxlYWRpbmdDb2VmZmljaWVudCApICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZXZhbHVhdGUoIHg6IG51bWJlciApOiBudW1iZXIge1xyXG4gICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvSG9ybmVyJTI3c19tZXRob2RcclxuICAgIGxldCByZXN1bHQgPSB0aGlzLmNvZWZmaWNpZW50c1sgdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoIC0gMSBdO1xyXG4gICAgZm9yICggbGV0IGkgPSB0aGlzLmNvZWZmaWNpZW50cy5sZW5ndGggLSAyOyBpID49IDA7IGktLSApIHtcclxuICAgICAgcmVzdWx0ID0gcmVzdWx0ICogeCArIHRoaXMuY29lZmZpY2llbnRzWyBpIF07XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcmVzdWx0O1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGV2YWx1YXRlQ29tcGxleCggeDogQ29tcGxleCApOiBDb21wbGV4IHtcclxuICAgIC8vIGh0dHBzOi8vZW4ud2lraXBlZGlhLm9yZy93aWtpL0hvcm5lciUyN3NfbWV0aG9kXHJcbiAgICBsZXQgcmVzdWx0ID0gQ29tcGxleC5yZWFsKCB0aGlzLmNvZWZmaWNpZW50c1sgdGhpcy5jb2VmZmljaWVudHMubGVuZ3RoIC0gMSBdICk7XHJcbiAgICBmb3IgKCBsZXQgaSA9IHRoaXMuY29lZmZpY2llbnRzLmxlbmd0aCAtIDI7IGkgPj0gMDsgaS0tICkge1xyXG4gICAgICByZXN1bHQgPSByZXN1bHQudGltZXMoIHggKS5wbHVzKCBDb21wbGV4LnJlYWwoIHRoaXMuY29lZmZpY2llbnRzWyBpIF0gKSApO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHJlc3VsdDtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXRSb290cygpOiBDb21wbGV4W10ge1xyXG4gICAgaWYgKCB0aGlzLmlzWmVybygpIHx8IHRoaXMuZGVncmVlID09PSAwICkge1xyXG4gICAgICAvLyBUT0RPOiBob3cgdG8gaGFuZGxlPyBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMva2l0ZS9pc3N1ZXMvOTdcclxuICAgICAgcmV0dXJuIFtdO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIHRoaXMuZGVncmVlID09PSAxICkge1xyXG4gICAgICByZXR1cm4gWyBDb21wbGV4LnJlYWwoIC10aGlzLmNvZWZmaWNpZW50c1sgMCBdIC8gdGhpcy5jb2VmZmljaWVudHNbIDEgXSApIF07XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggdGhpcy5jb2VmZmljaWVudHNbIDAgXSA9PT0gMCApIHtcclxuICAgICAgLy8geD0wIGlzIGEgcm9vdCFcclxuICAgICAgY29uc3Qgcm9vdHMgPSBuZXcgVW5pdmFyaWF0ZVBvbHlub21pYWwoIHRoaXMuY29lZmZpY2llbnRzLnNsaWNlKCAxICkgKS5nZXRSb290cygpO1xyXG4gICAgICBpZiAoICFyb290cy5zb21lKCByb290ID0+IHJvb3QuZXF1YWxzRXBzaWxvbiggQ29tcGxleC5yZWFsKCAwICksIDFlLTEwICkgKSApIHtcclxuICAgICAgICByb290cy5wdXNoKCBDb21wbGV4LnJlYWwoIDAgKSApO1xyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiByb290cztcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB0aGlzLmRlZ3JlZSA9PT0gMiApIHtcclxuICAgICAgcmV0dXJuIENvbXBsZXguc29sdmVRdWFkcmF0aWNSb290cyhcclxuICAgICAgICBDb21wbGV4LnJlYWwoIHRoaXMuY29lZmZpY2llbnRzWyAyIF0gKSxcclxuICAgICAgICBDb21wbGV4LnJlYWwoIHRoaXMuY29lZmZpY2llbnRzWyAxIF0gKSxcclxuICAgICAgICBDb21wbGV4LnJlYWwoIHRoaXMuY29lZmZpY2llbnRzWyAwIF0gKVxyXG4gICAgICApITtcclxuICAgIH1cclxuICAgIGVsc2UgaWYgKCB0aGlzLmRlZ3JlZSA9PT0gMyApIHtcclxuICAgICAgcmV0dXJuIENvbXBsZXguc29sdmVDdWJpY1Jvb3RzKFxyXG4gICAgICAgIENvbXBsZXgucmVhbCggdGhpcy5jb2VmZmljaWVudHNbIDMgXSApLFxyXG4gICAgICAgIENvbXBsZXgucmVhbCggdGhpcy5jb2VmZmljaWVudHNbIDIgXSApLFxyXG4gICAgICAgIENvbXBsZXgucmVhbCggdGhpcy5jb2VmZmljaWVudHNbIDEgXSApLFxyXG4gICAgICAgIENvbXBsZXgucmVhbCggdGhpcy5jb2VmZmljaWVudHNbIDAgXSApXHJcbiAgICAgICkhO1xyXG4gICAgfVxyXG4gICAgZWxzZSB7XHJcbiAgICAgIC8vIFVzZSB0aGUgZWlnZW52YWx1ZXMgb2YgdGhlIGNvbXBhbmlvbiBtYXRyaXgsIHNpbmNlIGl0IGlzIHRoZSB6ZXJvcyBvZiB0aGUgY2hhcmFjdGVyaXN0aWMgcG9seW5vbWlhbFxyXG5cclxuICAgICAgLy8gaHR0cHM6Ly9lbi53aWtpcGVkaWEub3JnL3dpa2kvQ29tcGFuaW9uX21hdHJpeFxyXG4gICAgICBjb25zdCBjb21wYW5pb25NYXRyaXggPSBuZXcgTWF0cml4KCB0aGlzLmRlZ3JlZSwgdGhpcy5kZWdyZWUgKTtcclxuICAgICAgZm9yICggbGV0IGkgPSAwOyBpIDwgdGhpcy5kZWdyZWU7IGkrKyApIHtcclxuICAgICAgICBpZiAoIGkgPCB0aGlzLmRlZ3JlZSAtIDEgKSB7XHJcbiAgICAgICAgICBjb21wYW5pb25NYXRyaXguc2V0KCBpICsgMSwgaSwgMSApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBjb21wYW5pb25NYXRyaXguc2V0KCBpLCB0aGlzLmRlZ3JlZSAtIDEsIC10aGlzLmNvZWZmaWNpZW50c1sgaSBdIC8gdGhpcy5jb2VmZmljaWVudHNbIHRoaXMuZGVncmVlIF0gKTtcclxuICAgICAgfVxyXG4gICAgICBjb25zb2xlLmxvZyggY29tcGFuaW9uTWF0cml4LnRvU3RyaW5nKCkgKTtcclxuXHJcbiAgICAgIGxldCBtYXRyaXggPSBjb21wYW5pb25NYXRyaXg7XHJcbiAgICAgIGNvbnN0IGVwc2lsb24gPSAxZS0xMztcclxuXHJcbiAgICAgIC8vIFRPRE86IGN1c3RvbSBudW1iZXIgb2Ygc3RlcHM/IGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9raXRlL2lzc3Vlcy85N1xyXG4gICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCA1MDA7IGkrKyApIHtcclxuICAgICAgICBjb25zdCBxciA9IG5ldyBRUkRlY29tcG9zaXRpb24oIG1hdHJpeCApO1xyXG4gICAgICAgIG1hdHJpeCA9IHFyLmdldFIoKS50aW1lcyggcXIuZ2V0USgpICk7XHJcblxyXG4gICAgICAgIGlmICggaSAlIDEwID09PSAwICkge1xyXG4gICAgICAgICAgbGV0IG1heExvd2VyVHJpYW5ndWxhciA9IDA7XHJcbiAgICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCB0aGlzLmRlZ3JlZTsgaSsrICkge1xyXG4gICAgICAgICAgICBmb3IgKCBsZXQgaiA9IDA7IGogPCBpOyBqKysgKSB7XHJcbiAgICAgICAgICAgICAgbWF4TG93ZXJUcmlhbmd1bGFyID0gTWF0aC5tYXgoIG1heExvd2VyVHJpYW5ndWxhciwgTWF0aC5hYnMoIG1hdHJpeC5nZXQoIGksIGogKSApICk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgIH1cclxuICAgICAgICAgIC8vIFRPRE86IDEwMDAgc2VlbXMgZXhjZXNzaXZlIE9SIG5vdCBlbm91Z2gsIGRlcGVuZGluZyBvbiB0aGUgcG9seW5vbWlhbD8gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2tpdGUvaXNzdWVzLzk3XHJcbiAgICAgICAgICBpZiAoIG1heExvd2VyVHJpYW5ndWxhciA8IGVwc2lsb24gfHwgaSA+IDEwMDAgKSB7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjb25zdCBxclZhbHVlcyA9IF8ucmFuZ2UoIDAsIHRoaXMuZGVncmVlICkubWFwKCBpID0+IENvbXBsZXgucmVhbCggbWF0cml4LmdldCggaSwgaSApICkgKTtcclxuXHJcbiAgICAgIGNvbnN0IGRlY29tcCA9IG5ldyBFaWdlbnZhbHVlRGVjb21wb3NpdGlvbiggY29tcGFuaW9uTWF0cml4ICk7XHJcblxyXG4gICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgIGNvbnN0IHJlYWxWYWx1ZXM6IEZsb2F0NjRBcnJheSA9IGRlY29tcC5nZXRSZWFsRWlnZW52YWx1ZXMoKTtcclxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICBjb25zdCBpbWFnaW5hcnlWYWx1ZXM6IEZsb2F0NjRBcnJheSA9IGRlY29tcC5nZXRJbWFnRWlnZW52YWx1ZXMoKTtcclxuICAgICAgY29uc3QgZGVjb21wVmFsdWVzID0gXy5yYW5nZSggMCwgdGhpcy5kZWdyZWUgKS5tYXAoIGkgPT4gbmV3IENvbXBsZXgoIHJlYWxWYWx1ZXNbIGkgXSwgaW1hZ2luYXJ5VmFsdWVzWyBpIF0gKSApO1xyXG5cclxuICAgICAgLy8gVE9ETzogY29tcGxleCB2YWx1ZXMhIFdlIHNlZW0gdG8gYmUgZmFpbGluZyBoZXJlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9raXRlL2lzc3Vlcy85N1xyXG4gICAgICByZXR1cm4gcXJWYWx1ZXMgPyBxclZhbHVlcyA6IGRlY29tcFZhbHVlcztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgc2luZ2xlQ29lZmZpY2llbnQoIGNvZWZmaWNpZW50OiBudW1iZXIsIGRlZ3JlZTogbnVtYmVyICk6IFVuaXZhcmlhdGVQb2x5bm9taWFsIHtcclxuICAgIGNvbnN0IGNvZWZmaWNpZW50cyA9IFtdO1xyXG4gICAgd2hpbGUgKCBjb2VmZmljaWVudHMubGVuZ3RoIDwgZGVncmVlICkge1xyXG4gICAgICBjb2VmZmljaWVudHMucHVzaCggMCApO1xyXG4gICAgfVxyXG4gICAgY29lZmZpY2llbnRzLnB1c2goIGNvZWZmaWNpZW50ICk7XHJcbiAgICByZXR1cm4gbmV3IFVuaXZhcmlhdGVQb2x5bm9taWFsKCBjb2VmZmljaWVudHMgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgWkVSTyA9IG5ldyBVbml2YXJpYXRlUG9seW5vbWlhbCggW10gKTtcclxufVxyXG5cclxuZG90LnJlZ2lzdGVyKCAnVW5pdmFyaWF0ZVBvbHlub21pYWwnLCBVbml2YXJpYXRlUG9seW5vbWlhbCApO1xyXG5leHBvcnQgZGVmYXVsdCBVbml2YXJpYXRlUG9seW5vbWlhbDsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsR0FBRyxNQUFNLFVBQVU7QUFDMUIsT0FBT0MsT0FBTyxNQUFNLGNBQWM7QUFDbEMsT0FBT0MsTUFBTSxNQUFNLGFBQWE7QUFDaEMsT0FBT0MsdUJBQXVCLE1BQU0sOEJBQThCO0FBQ2xFLE9BQU9DLGVBQWUsTUFBTSxzQkFBc0I7QUFFbEQsTUFBTUMsb0JBQW9CLENBQUM7RUFJekI7RUFDQTtFQUNPQyxXQUFXQSxDQUFFQyxZQUFzQixFQUFHO0lBRTNDO0lBQ0EsTUFBTUMsc0JBQXNCLEdBQUdELFlBQVksQ0FBQ0UsS0FBSyxDQUFDLENBQUM7SUFDbkQsT0FBUUQsc0JBQXNCLENBQUNFLE1BQU0sSUFBSUYsc0JBQXNCLENBQUVBLHNCQUFzQixDQUFDRSxNQUFNLEdBQUcsQ0FBQyxDQUFFLEtBQUssQ0FBQyxFQUFHO01BQzNHRixzQkFBc0IsQ0FBQ0csR0FBRyxDQUFDLENBQUM7SUFDOUI7SUFFQSxJQUFJLENBQUNKLFlBQVksR0FBR0Msc0JBQXNCO0VBQzVDO0VBRU9JLElBQUlBLENBQUVDLFVBQWdDLEVBQXlCO0lBQ3BFLE1BQU1OLFlBQVksR0FBRyxFQUFFO0lBQ3ZCLEtBQU0sSUFBSU8sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHQyxJQUFJLENBQUNDLEdBQUcsQ0FBRSxJQUFJLENBQUNULFlBQVksQ0FBQ0csTUFBTSxFQUFFRyxVQUFVLENBQUNOLFlBQVksQ0FBQ0csTUFBTyxDQUFDLEVBQUVJLENBQUMsRUFBRSxFQUFHO01BQy9GUCxZQUFZLENBQUNVLElBQUksQ0FBRSxJQUFJLENBQUNDLGNBQWMsQ0FBRUosQ0FBRSxDQUFDLEdBQUdELFVBQVUsQ0FBQ0ssY0FBYyxDQUFFSixDQUFFLENBQUUsQ0FBQztJQUNoRjtJQUNBLE9BQU8sSUFBSVQsb0JBQW9CLENBQUVFLFlBQWEsQ0FBQztFQUNqRDtFQUVPWSxLQUFLQSxDQUFFTixVQUFnQyxFQUF5QjtJQUNyRSxNQUFNTixZQUFZLEdBQUcsRUFBRTtJQUN2QixLQUFNLElBQUlPLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0MsSUFBSSxDQUFDQyxHQUFHLENBQUUsSUFBSSxDQUFDVCxZQUFZLENBQUNHLE1BQU0sRUFBRUcsVUFBVSxDQUFDTixZQUFZLENBQUNHLE1BQU8sQ0FBQyxFQUFFSSxDQUFDLEVBQUUsRUFBRztNQUMvRlAsWUFBWSxDQUFDVSxJQUFJLENBQUUsSUFBSSxDQUFDQyxjQUFjLENBQUVKLENBQUUsQ0FBQyxHQUFHRCxVQUFVLENBQUNLLGNBQWMsQ0FBRUosQ0FBRSxDQUFFLENBQUM7SUFDaEY7SUFDQSxPQUFPLElBQUlULG9CQUFvQixDQUFFRSxZQUFhLENBQUM7RUFDakQ7RUFFT2EsS0FBS0EsQ0FBRVAsVUFBZ0MsRUFBeUI7SUFDckUsTUFBTU4sWUFBWSxHQUFHLEVBQUU7SUFDdkIsT0FBUUEsWUFBWSxDQUFDRyxNQUFNLEdBQUcsSUFBSSxDQUFDSCxZQUFZLENBQUNHLE1BQU0sR0FBR0csVUFBVSxDQUFDTixZQUFZLENBQUNHLE1BQU0sR0FBRyxDQUFDLEVBQUc7TUFDNUZILFlBQVksQ0FBQ1UsSUFBSSxDQUFFLENBQUUsQ0FBQztJQUN4QjtJQUNBLEtBQU0sSUFBSUgsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ1AsWUFBWSxDQUFDRyxNQUFNLEVBQUVJLENBQUMsRUFBRSxFQUFHO01BQ25ELEtBQU0sSUFBSU8sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHUixVQUFVLENBQUNOLFlBQVksQ0FBQ0csTUFBTSxFQUFFVyxDQUFDLEVBQUUsRUFBRztRQUN6RGQsWUFBWSxDQUFFTyxDQUFDLEdBQUdPLENBQUMsQ0FBRSxJQUFJLElBQUksQ0FBQ0gsY0FBYyxDQUFFSixDQUFFLENBQUMsR0FBR0QsVUFBVSxDQUFDSyxjQUFjLENBQUVHLENBQUUsQ0FBQztNQUNwRjtJQUNGO0lBQ0EsT0FBTyxJQUFJaEIsb0JBQW9CLENBQUVFLFlBQWEsQ0FBQztFQUNqRDtFQUVPZSxTQUFTQSxDQUFFVCxVQUFnQyxFQUF3RTtJQUN4SCxJQUFJVSxDQUFDLEdBQUcsSUFBSWxCLG9CQUFvQixDQUFFLEVBQUcsQ0FBQztJQUN0QyxJQUFJbUIsQ0FBdUIsR0FBRyxJQUFJLENBQUMsQ0FBQztJQUNwQyxNQUFNQyxDQUFDLEdBQUdaLFVBQVUsQ0FBQ2EsTUFBTTtJQUMzQixNQUFNQyxDQUFDLEdBQUdkLFVBQVUsQ0FBQ04sWUFBWSxDQUFFTSxVQUFVLENBQUNOLFlBQVksQ0FBQ0csTUFBTSxHQUFHLENBQUMsQ0FBRTtJQUN2RSxPQUFRYyxDQUFDLENBQUNFLE1BQU0sSUFBSUQsQ0FBQyxFQUFHO01BQ3RCLE1BQU1HLENBQUMsR0FBR3ZCLG9CQUFvQixDQUFDd0IsaUJBQWlCLENBQUVMLENBQUMsQ0FBQ04sY0FBYyxDQUFFTSxDQUFDLENBQUNFLE1BQU8sQ0FBQyxHQUFHQyxDQUFDLEVBQUVILENBQUMsQ0FBQ0UsTUFBTSxHQUFHRCxDQUFFLENBQUM7TUFDbEdGLENBQUMsR0FBR0EsQ0FBQyxDQUFDWCxJQUFJLENBQUVnQixDQUFFLENBQUM7TUFDZkosQ0FBQyxHQUFHQSxDQUFDLENBQUNMLEtBQUssQ0FBRVMsQ0FBQyxDQUFDUixLQUFLLENBQUVQLFVBQVcsQ0FBRSxDQUFDO0lBQ3RDO0lBQ0EsT0FBTztNQUNMaUIsUUFBUSxFQUFFUCxDQUFDO01BQ1hRLFNBQVMsRUFBRVA7SUFDYixDQUFDO0VBQ0g7RUFFT1EsR0FBR0EsQ0FBRW5CLFVBQWdDLEVBQXlCO0lBQ25FLElBQUlvQixDQUF1QixHQUFHLElBQUksQ0FBQyxDQUFDO0lBQ3BDLElBQUlDLENBQUMsR0FBR3JCLFVBQVU7SUFDbEIsT0FBUSxDQUFDcUIsQ0FBQyxDQUFDQyxNQUFNLENBQUMsQ0FBQyxFQUFHO01BQ3BCLE1BQU1DLENBQUMsR0FBR0YsQ0FBQztNQUNYQSxDQUFDLEdBQUdELENBQUMsQ0FBQ1gsU0FBUyxDQUFFWSxDQUFFLENBQUMsQ0FBQ0gsU0FBUztNQUM5QkUsQ0FBQyxHQUFHRyxDQUFDO0lBQ1A7SUFDQSxPQUFPSCxDQUFDO0VBQ1Y7RUFFT0ksTUFBTUEsQ0FBRXhCLFVBQWdDLEVBQVk7SUFDekQsT0FBTyxJQUFJLENBQUNOLFlBQVksQ0FBQ0csTUFBTSxLQUFLRyxVQUFVLENBQUNOLFlBQVksQ0FBQ0csTUFBTSxJQUFJLElBQUksQ0FBQ0gsWUFBWSxDQUFDK0IsS0FBSyxDQUFFLENBQUVDLFdBQVcsRUFBRXpCLENBQUMsS0FBTXlCLFdBQVcsS0FBSzFCLFVBQVUsQ0FBQ04sWUFBWSxDQUFFTyxDQUFDLENBQUcsQ0FBQztFQUNySztFQUVPSSxjQUFjQSxDQUFFUSxNQUFjLEVBQVc7SUFDOUMsT0FBT0EsTUFBTSxHQUFHLElBQUksQ0FBQ25CLFlBQVksQ0FBQ0csTUFBTSxHQUFHLElBQUksQ0FBQ0gsWUFBWSxDQUFFbUIsTUFBTSxDQUFFLEdBQUcsQ0FBQztFQUM1RTtFQUVBLElBQVdBLE1BQU1BLENBQUEsRUFBVztJQUMxQixPQUFPLElBQUksQ0FBQ25CLFlBQVksQ0FBQ0csTUFBTSxHQUFHLENBQUM7RUFDckM7RUFFT3lCLE1BQU1BLENBQUEsRUFBWTtJQUN2QixPQUFPLElBQUksQ0FBQzVCLFlBQVksQ0FBQ0csTUFBTSxLQUFLLENBQUM7RUFDdkM7RUFFTzhCLGtCQUFrQkEsQ0FBQSxFQUF5QjtJQUNoRCxJQUFLLElBQUksQ0FBQ0wsTUFBTSxDQUFDLENBQUMsRUFBRztNQUNuQixPQUFPLElBQUk7SUFDYixDQUFDLE1BQ0k7TUFDSCxNQUFNTSxrQkFBa0IsR0FBRyxJQUFJLENBQUNsQyxZQUFZLENBQUUsSUFBSSxDQUFDQSxZQUFZLENBQUNHLE1BQU0sR0FBRyxDQUFDLENBQUU7TUFDNUUsT0FBTyxJQUFJTCxvQkFBb0IsQ0FBRSxJQUFJLENBQUNFLFlBQVksQ0FBQ21DLEdBQUcsQ0FBRUgsV0FBVyxJQUFJQSxXQUFXLEdBQUdFLGtCQUFtQixDQUFFLENBQUM7SUFDN0c7RUFDRjtFQUVPRSxRQUFRQSxDQUFFQyxDQUFTLEVBQVc7SUFDbkM7SUFDQSxJQUFJQyxNQUFNLEdBQUcsSUFBSSxDQUFDdEMsWUFBWSxDQUFFLElBQUksQ0FBQ0EsWUFBWSxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxDQUFFO0lBQzlELEtBQU0sSUFBSUksQ0FBQyxHQUFHLElBQUksQ0FBQ1AsWUFBWSxDQUFDRyxNQUFNLEdBQUcsQ0FBQyxFQUFFSSxDQUFDLElBQUksQ0FBQyxFQUFFQSxDQUFDLEVBQUUsRUFBRztNQUN4RCtCLE1BQU0sR0FBR0EsTUFBTSxHQUFHRCxDQUFDLEdBQUcsSUFBSSxDQUFDckMsWUFBWSxDQUFFTyxDQUFDLENBQUU7SUFDOUM7SUFDQSxPQUFPK0IsTUFBTTtFQUNmO0VBRU9DLGVBQWVBLENBQUVGLENBQVUsRUFBWTtJQUM1QztJQUNBLElBQUlDLE1BQU0sR0FBRzVDLE9BQU8sQ0FBQzhDLElBQUksQ0FBRSxJQUFJLENBQUN4QyxZQUFZLENBQUUsSUFBSSxDQUFDQSxZQUFZLENBQUNHLE1BQU0sR0FBRyxDQUFDLENBQUcsQ0FBQztJQUM5RSxLQUFNLElBQUlJLENBQUMsR0FBRyxJQUFJLENBQUNQLFlBQVksQ0FBQ0csTUFBTSxHQUFHLENBQUMsRUFBRUksQ0FBQyxJQUFJLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUc7TUFDeEQrQixNQUFNLEdBQUdBLE1BQU0sQ0FBQ3pCLEtBQUssQ0FBRXdCLENBQUUsQ0FBQyxDQUFDaEMsSUFBSSxDQUFFWCxPQUFPLENBQUM4QyxJQUFJLENBQUUsSUFBSSxDQUFDeEMsWUFBWSxDQUFFTyxDQUFDLENBQUcsQ0FBRSxDQUFDO0lBQzNFO0lBQ0EsT0FBTytCLE1BQU07RUFDZjtFQUVPRyxRQUFRQSxDQUFBLEVBQWM7SUFDM0IsSUFBSyxJQUFJLENBQUNiLE1BQU0sQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDVCxNQUFNLEtBQUssQ0FBQyxFQUFHO01BQ3hDO01BQ0EsT0FBTyxFQUFFO0lBQ1gsQ0FBQyxNQUNJLElBQUssSUFBSSxDQUFDQSxNQUFNLEtBQUssQ0FBQyxFQUFHO01BQzVCLE9BQU8sQ0FBRXpCLE9BQU8sQ0FBQzhDLElBQUksQ0FBRSxDQUFDLElBQUksQ0FBQ3hDLFlBQVksQ0FBRSxDQUFDLENBQUUsR0FBRyxJQUFJLENBQUNBLFlBQVksQ0FBRSxDQUFDLENBQUcsQ0FBQyxDQUFFO0lBQzdFLENBQUMsTUFDSSxJQUFLLElBQUksQ0FBQ0EsWUFBWSxDQUFFLENBQUMsQ0FBRSxLQUFLLENBQUMsRUFBRztNQUN2QztNQUNBLE1BQU0wQyxLQUFLLEdBQUcsSUFBSTVDLG9CQUFvQixDQUFFLElBQUksQ0FBQ0UsWUFBWSxDQUFDRSxLQUFLLENBQUUsQ0FBRSxDQUFFLENBQUMsQ0FBQ3VDLFFBQVEsQ0FBQyxDQUFDO01BQ2pGLElBQUssQ0FBQ0MsS0FBSyxDQUFDQyxJQUFJLENBQUVDLElBQUksSUFBSUEsSUFBSSxDQUFDQyxhQUFhLENBQUVuRCxPQUFPLENBQUM4QyxJQUFJLENBQUUsQ0FBRSxDQUFDLEVBQUUsS0FBTSxDQUFFLENBQUMsRUFBRztRQUMzRUUsS0FBSyxDQUFDaEMsSUFBSSxDQUFFaEIsT0FBTyxDQUFDOEMsSUFBSSxDQUFFLENBQUUsQ0FBRSxDQUFDO01BQ2pDO01BQ0EsT0FBT0UsS0FBSztJQUNkLENBQUMsTUFDSSxJQUFLLElBQUksQ0FBQ3ZCLE1BQU0sS0FBSyxDQUFDLEVBQUc7TUFDNUIsT0FBT3pCLE9BQU8sQ0FBQ29ELG1CQUFtQixDQUNoQ3BELE9BQU8sQ0FBQzhDLElBQUksQ0FBRSxJQUFJLENBQUN4QyxZQUFZLENBQUUsQ0FBQyxDQUFHLENBQUMsRUFDdENOLE9BQU8sQ0FBQzhDLElBQUksQ0FBRSxJQUFJLENBQUN4QyxZQUFZLENBQUUsQ0FBQyxDQUFHLENBQUMsRUFDdENOLE9BQU8sQ0FBQzhDLElBQUksQ0FBRSxJQUFJLENBQUN4QyxZQUFZLENBQUUsQ0FBQyxDQUFHLENBQ3ZDLENBQUM7SUFDSCxDQUFDLE1BQ0ksSUFBSyxJQUFJLENBQUNtQixNQUFNLEtBQUssQ0FBQyxFQUFHO01BQzVCLE9BQU96QixPQUFPLENBQUNxRCxlQUFlLENBQzVCckQsT0FBTyxDQUFDOEMsSUFBSSxDQUFFLElBQUksQ0FBQ3hDLFlBQVksQ0FBRSxDQUFDLENBQUcsQ0FBQyxFQUN0Q04sT0FBTyxDQUFDOEMsSUFBSSxDQUFFLElBQUksQ0FBQ3hDLFlBQVksQ0FBRSxDQUFDLENBQUcsQ0FBQyxFQUN0Q04sT0FBTyxDQUFDOEMsSUFBSSxDQUFFLElBQUksQ0FBQ3hDLFlBQVksQ0FBRSxDQUFDLENBQUcsQ0FBQyxFQUN0Q04sT0FBTyxDQUFDOEMsSUFBSSxDQUFFLElBQUksQ0FBQ3hDLFlBQVksQ0FBRSxDQUFDLENBQUcsQ0FDdkMsQ0FBQztJQUNILENBQUMsTUFDSTtNQUNIOztNQUVBO01BQ0EsTUFBTWdELGVBQWUsR0FBRyxJQUFJckQsTUFBTSxDQUFFLElBQUksQ0FBQ3dCLE1BQU0sRUFBRSxJQUFJLENBQUNBLE1BQU8sQ0FBQztNQUM5RCxLQUFNLElBQUlaLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBRyxJQUFJLENBQUNZLE1BQU0sRUFBRVosQ0FBQyxFQUFFLEVBQUc7UUFDdEMsSUFBS0EsQ0FBQyxHQUFHLElBQUksQ0FBQ1ksTUFBTSxHQUFHLENBQUMsRUFBRztVQUN6QjZCLGVBQWUsQ0FBQ0MsR0FBRyxDQUFFMUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxFQUFFLENBQUUsQ0FBQztRQUNwQztRQUNBeUMsZUFBZSxDQUFDQyxHQUFHLENBQUUxQyxDQUFDLEVBQUUsSUFBSSxDQUFDWSxNQUFNLEdBQUcsQ0FBQyxFQUFFLENBQUMsSUFBSSxDQUFDbkIsWUFBWSxDQUFFTyxDQUFDLENBQUUsR0FBRyxJQUFJLENBQUNQLFlBQVksQ0FBRSxJQUFJLENBQUNtQixNQUFNLENBQUcsQ0FBQztNQUN2RztNQUNBK0IsT0FBTyxDQUFDQyxHQUFHLENBQUVILGVBQWUsQ0FBQ0ksUUFBUSxDQUFDLENBQUUsQ0FBQztNQUV6QyxJQUFJQyxNQUFNLEdBQUdMLGVBQWU7TUFDNUIsTUFBTU0sT0FBTyxHQUFHLEtBQUs7O01BRXJCO01BQ0EsS0FBTSxJQUFJL0MsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLEdBQUcsRUFBRUEsQ0FBQyxFQUFFLEVBQUc7UUFDOUIsTUFBTWdELEVBQUUsR0FBRyxJQUFJMUQsZUFBZSxDQUFFd0QsTUFBTyxDQUFDO1FBQ3hDQSxNQUFNLEdBQUdFLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLENBQUMsQ0FBQzNDLEtBQUssQ0FBRTBDLEVBQUUsQ0FBQ0UsSUFBSSxDQUFDLENBQUUsQ0FBQztRQUVyQyxJQUFLbEQsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLEVBQUc7VUFDbEIsSUFBSW1ELGtCQUFrQixHQUFHLENBQUM7VUFDMUIsS0FBTSxJQUFJbkQsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHLElBQUksQ0FBQ1ksTUFBTSxFQUFFWixDQUFDLEVBQUUsRUFBRztZQUN0QyxLQUFNLElBQUlPLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR1AsQ0FBQyxFQUFFTyxDQUFDLEVBQUUsRUFBRztjQUM1QjRDLGtCQUFrQixHQUFHbEQsSUFBSSxDQUFDQyxHQUFHLENBQUVpRCxrQkFBa0IsRUFBRWxELElBQUksQ0FBQ21ELEdBQUcsQ0FBRU4sTUFBTSxDQUFDTyxHQUFHLENBQUVyRCxDQUFDLEVBQUVPLENBQUUsQ0FBRSxDQUFFLENBQUM7WUFDckY7VUFDRjtVQUNBO1VBQ0EsSUFBSzRDLGtCQUFrQixHQUFHSixPQUFPLElBQUkvQyxDQUFDLEdBQUcsSUFBSSxFQUFHO1lBQzlDO1VBQ0Y7UUFDRjtNQUNGO01BQ0EsTUFBTXNELFFBQVEsR0FBR0MsQ0FBQyxDQUFDQyxLQUFLLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQzVDLE1BQU8sQ0FBQyxDQUFDZ0IsR0FBRyxDQUFFNUIsQ0FBQyxJQUFJYixPQUFPLENBQUM4QyxJQUFJLENBQUVhLE1BQU0sQ0FBQ08sR0FBRyxDQUFFckQsQ0FBQyxFQUFFQSxDQUFFLENBQUUsQ0FBRSxDQUFDO01BRXpGLE1BQU15RCxNQUFNLEdBQUcsSUFBSXBFLHVCQUF1QixDQUFFb0QsZUFBZ0IsQ0FBQzs7TUFFN0Q7TUFDQSxNQUFNaUIsVUFBd0IsR0FBR0QsTUFBTSxDQUFDRSxrQkFBa0IsQ0FBQyxDQUFDO01BQzVEO01BQ0EsTUFBTUMsZUFBNkIsR0FBR0gsTUFBTSxDQUFDSSxrQkFBa0IsQ0FBQyxDQUFDO01BQ2pFLE1BQU1DLFlBQVksR0FBR1AsQ0FBQyxDQUFDQyxLQUFLLENBQUUsQ0FBQyxFQUFFLElBQUksQ0FBQzVDLE1BQU8sQ0FBQyxDQUFDZ0IsR0FBRyxDQUFFNUIsQ0FBQyxJQUFJLElBQUliLE9BQU8sQ0FBRXVFLFVBQVUsQ0FBRTFELENBQUMsQ0FBRSxFQUFFNEQsZUFBZSxDQUFFNUQsQ0FBQyxDQUFHLENBQUUsQ0FBQzs7TUFFL0c7TUFDQSxPQUFPc0QsUUFBUSxHQUFHQSxRQUFRLEdBQUdRLFlBQVk7SUFDM0M7RUFDRjtFQUVBLE9BQWMvQyxpQkFBaUJBLENBQUVVLFdBQW1CLEVBQUViLE1BQWMsRUFBeUI7SUFDM0YsTUFBTW5CLFlBQVksR0FBRyxFQUFFO0lBQ3ZCLE9BQVFBLFlBQVksQ0FBQ0csTUFBTSxHQUFHZ0IsTUFBTSxFQUFHO01BQ3JDbkIsWUFBWSxDQUFDVSxJQUFJLENBQUUsQ0FBRSxDQUFDO0lBQ3hCO0lBQ0FWLFlBQVksQ0FBQ1UsSUFBSSxDQUFFc0IsV0FBWSxDQUFDO0lBQ2hDLE9BQU8sSUFBSWxDLG9CQUFvQixDQUFFRSxZQUFhLENBQUM7RUFDakQ7RUFFQSxPQUF1QnNFLElBQUksR0FBRyxJQUFJeEUsb0JBQW9CLENBQUUsRUFBRyxDQUFDO0FBQzlEO0FBRUFMLEdBQUcsQ0FBQzhFLFFBQVEsQ0FBRSxzQkFBc0IsRUFBRXpFLG9CQUFxQixDQUFDO0FBQzVELGVBQWVBLG9CQUFvQiIsImlnbm9yZUxpc3QiOltdfQ==