// Copyright 2022-2023, University of Colorado Boulder

/**
 * Unit tests for PhetioObject
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import PhetioAction from './PhetioAction.js';
import Tandem from './Tandem.js';
import NumberIO from './types/NumberIO.js';
QUnit.module('PhetioAction');
QUnit.test('PhetioAction execute', assert => {
  let count = 0;
  const invokeActionOnce = () => phetioAction.execute(++count);
  const action = currentCount => {
    assert.ok(count === currentCount, 'current count' + count);
    if (currentCount === 1) {
      invokeActionOnce();
    }
  };
  const phetioAction = new PhetioAction(action, {
    parameters: [{
      name: 'count',
      phetioType: NumberIO
    }],
    tandem: Tandem.ROOT_TEST.createTandem('phetioAction')
  });
  invokeActionOnce();
  assert.ok(count === 2, 'called twice');
  invokeActionOnce();
  assert.ok(count === 3, 'and once more');
  phetioAction.dispose();
});
QUnit.test('PhetioAction reentrant disposal', assert => {
  let count = 0;
  const invokeActionOnce = () => phetioAction.execute(++count);

  // We must call super.dispose() immediately, but we delay disposing the executedEmitter to prevent wonky reentrant behavior.
  const actionDisposedItself = () => phetioAction.executedEmitter.isDisposed;
  const action = currentCount => {
    assert.ok(count === currentCount, 'current count' + count);
    if (currentCount === 1) {
      invokeActionOnce();
    } else if (currentCount === 2) {
      invokeActionOnce();
      phetioAction.dispose();
    }
    assert.ok(!actionDisposedItself(), 'should not be disposed until after executing ' + currentCount);
  };
  const phetioAction = new PhetioAction(action, {
    parameters: [{
      name: 'count',
      phetioType: NumberIO
    }],
    tandem: Tandem.ROOT_TEST.createTandem('phetioAction')
  });

  // @ts-expect-error INTENTIONAL for testing
  const v = phetioAction.getValidationErrors('hello');
  assert.ok(v.length === 1, 'should have one validation error');
  assert.ok(typeof v[0] === 'string', 'should have correct validation error');
  phetioAction.executedEmitter.addListener(currentCount => {
    assert.ok(!actionDisposedItself(), 'should not be disposed until after emitting ' + currentCount);
    assert.ok(count === 3, 'count will always be last because all execute calls come before all emitting ' + currentCount);
  });
  invokeActionOnce();
  assert.ok(count === 3, 'three calls total');
  assert.ok(actionDisposedItself(), 'should now be disposed');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQaGV0aW9BY3Rpb24iLCJUYW5kZW0iLCJOdW1iZXJJTyIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsImNvdW50IiwiaW52b2tlQWN0aW9uT25jZSIsInBoZXRpb0FjdGlvbiIsImV4ZWN1dGUiLCJhY3Rpb24iLCJjdXJyZW50Q291bnQiLCJvayIsInBhcmFtZXRlcnMiLCJuYW1lIiwicGhldGlvVHlwZSIsInRhbmRlbSIsIlJPT1RfVEVTVCIsImNyZWF0ZVRhbmRlbSIsImRpc3Bvc2UiLCJhY3Rpb25EaXNwb3NlZEl0c2VsZiIsImV4ZWN1dGVkRW1pdHRlciIsImlzRGlzcG9zZWQiLCJ2IiwiZ2V0VmFsaWRhdGlvbkVycm9ycyIsImxlbmd0aCIsImFkZExpc3RlbmVyIl0sInNvdXJjZXMiOlsiUGhldGlvQWN0aW9uVGVzdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVW5pdCB0ZXN0cyBmb3IgUGhldGlvT2JqZWN0XHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgUGhldGlvQWN0aW9uIGZyb20gJy4vUGhldGlvQWN0aW9uLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBOdW1iZXJJTyBmcm9tICcuL3R5cGVzL051bWJlcklPLmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ1BoZXRpb0FjdGlvbicgKTtcclxuXHJcblFVbml0LnRlc3QoICdQaGV0aW9BY3Rpb24gZXhlY3V0ZScsIGFzc2VydCA9PiB7XHJcblxyXG4gIGxldCBjb3VudCA9IDA7XHJcblxyXG4gIGNvbnN0IGludm9rZUFjdGlvbk9uY2UgPSAoKSA9PiBwaGV0aW9BY3Rpb24uZXhlY3V0ZSggKytjb3VudCApO1xyXG5cclxuICBjb25zdCBhY3Rpb24gPSAoIGN1cnJlbnRDb3VudDogbnVtYmVyICkgPT4ge1xyXG4gICAgYXNzZXJ0Lm9rKCBjb3VudCA9PT0gY3VycmVudENvdW50LCAnY3VycmVudCBjb3VudCcgKyBjb3VudCApO1xyXG5cclxuICAgIGlmICggY3VycmVudENvdW50ID09PSAxICkge1xyXG4gICAgICBpbnZva2VBY3Rpb25PbmNlKCk7XHJcbiAgICB9XHJcbiAgfTtcclxuICBjb25zdCBwaGV0aW9BY3Rpb24gPSBuZXcgUGhldGlvQWN0aW9uPFsgbnVtYmVyIF0+KCBhY3Rpb24sIHtcclxuICAgIHBhcmFtZXRlcnM6IFsgeyBuYW1lOiAnY291bnQnLCBwaGV0aW9UeXBlOiBOdW1iZXJJTyB9IF0sXHJcbiAgICB0YW5kZW06IFRhbmRlbS5ST09UX1RFU1QuY3JlYXRlVGFuZGVtKCAncGhldGlvQWN0aW9uJyApXHJcbiAgfSApO1xyXG5cclxuICBpbnZva2VBY3Rpb25PbmNlKCk7XHJcbiAgYXNzZXJ0Lm9rKCBjb3VudCA9PT0gMiwgJ2NhbGxlZCB0d2ljZScgKTtcclxuICBpbnZva2VBY3Rpb25PbmNlKCk7XHJcbiAgYXNzZXJ0Lm9rKCBjb3VudCA9PT0gMywgJ2FuZCBvbmNlIG1vcmUnICk7XHJcblxyXG4gIHBoZXRpb0FjdGlvbi5kaXNwb3NlKCk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICdQaGV0aW9BY3Rpb24gcmVlbnRyYW50IGRpc3Bvc2FsJywgYXNzZXJ0ID0+IHtcclxuXHJcbiAgbGV0IGNvdW50ID0gMDtcclxuXHJcbiAgY29uc3QgaW52b2tlQWN0aW9uT25jZSA9ICgpID0+IHBoZXRpb0FjdGlvbi5leGVjdXRlKCArK2NvdW50ICk7XHJcblxyXG4gIC8vIFdlIG11c3QgY2FsbCBzdXBlci5kaXNwb3NlKCkgaW1tZWRpYXRlbHksIGJ1dCB3ZSBkZWxheSBkaXNwb3NpbmcgdGhlIGV4ZWN1dGVkRW1pdHRlciB0byBwcmV2ZW50IHdvbmt5IHJlZW50cmFudCBiZWhhdmlvci5cclxuICBjb25zdCBhY3Rpb25EaXNwb3NlZEl0c2VsZiA9ICgpID0+IHBoZXRpb0FjdGlvbi5leGVjdXRlZEVtaXR0ZXIuaXNEaXNwb3NlZDtcclxuXHJcbiAgY29uc3QgYWN0aW9uID0gKCBjdXJyZW50Q291bnQ6IG51bWJlciApID0+IHtcclxuICAgIGFzc2VydC5vayggY291bnQgPT09IGN1cnJlbnRDb3VudCwgJ2N1cnJlbnQgY291bnQnICsgY291bnQgKTtcclxuXHJcbiAgICBpZiAoIGN1cnJlbnRDb3VudCA9PT0gMSApIHtcclxuICAgICAgaW52b2tlQWN0aW9uT25jZSgpO1xyXG4gICAgfVxyXG4gICAgZWxzZSBpZiAoIGN1cnJlbnRDb3VudCA9PT0gMiApIHtcclxuICAgICAgaW52b2tlQWN0aW9uT25jZSgpO1xyXG4gICAgICBwaGV0aW9BY3Rpb24uZGlzcG9zZSgpO1xyXG4gICAgfVxyXG4gICAgYXNzZXJ0Lm9rKCAhYWN0aW9uRGlzcG9zZWRJdHNlbGYoKSwgJ3Nob3VsZCBub3QgYmUgZGlzcG9zZWQgdW50aWwgYWZ0ZXIgZXhlY3V0aW5nICcgKyBjdXJyZW50Q291bnQgKTtcclxuICB9O1xyXG4gIGNvbnN0IHBoZXRpb0FjdGlvbiA9IG5ldyBQaGV0aW9BY3Rpb248WyBudW1iZXIgXT4oIGFjdGlvbiwge1xyXG4gICAgcGFyYW1ldGVyczogWyB7IG5hbWU6ICdjb3VudCcsIHBoZXRpb1R5cGU6IE51bWJlcklPIH0gXSxcclxuICAgIHRhbmRlbTogVGFuZGVtLlJPT1RfVEVTVC5jcmVhdGVUYW5kZW0oICdwaGV0aW9BY3Rpb24nIClcclxuICB9ICk7XHJcblxyXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgSU5URU5USU9OQUwgZm9yIHRlc3RpbmdcclxuICBjb25zdCB2ID0gcGhldGlvQWN0aW9uLmdldFZhbGlkYXRpb25FcnJvcnMoICdoZWxsbycgKTtcclxuICBhc3NlcnQub2soIHYubGVuZ3RoID09PSAxLCAnc2hvdWxkIGhhdmUgb25lIHZhbGlkYXRpb24gZXJyb3InICk7XHJcbiAgYXNzZXJ0Lm9rKCB0eXBlb2YgdlsgMCBdID09PSAnc3RyaW5nJywgJ3Nob3VsZCBoYXZlIGNvcnJlY3QgdmFsaWRhdGlvbiBlcnJvcicgKTtcclxuXHJcbiAgcGhldGlvQWN0aW9uLmV4ZWN1dGVkRW1pdHRlci5hZGRMaXN0ZW5lciggKCBjdXJyZW50Q291bnQ6IG51bWJlciApID0+IHtcclxuICAgIGFzc2VydC5vayggIWFjdGlvbkRpc3Bvc2VkSXRzZWxmKCksICdzaG91bGQgbm90IGJlIGRpc3Bvc2VkIHVudGlsIGFmdGVyIGVtaXR0aW5nICcgKyBjdXJyZW50Q291bnQgKTtcclxuICAgIGFzc2VydC5vayggY291bnQgPT09IDMsICdjb3VudCB3aWxsIGFsd2F5cyBiZSBsYXN0IGJlY2F1c2UgYWxsIGV4ZWN1dGUgY2FsbHMgY29tZSBiZWZvcmUgYWxsIGVtaXR0aW5nICcgKyBjdXJyZW50Q291bnQgKTtcclxuICB9ICk7XHJcblxyXG4gIGludm9rZUFjdGlvbk9uY2UoKTtcclxuICBhc3NlcnQub2soIGNvdW50ID09PSAzLCAndGhyZWUgY2FsbHMgdG90YWwnICk7XHJcbiAgYXNzZXJ0Lm9rKCBhY3Rpb25EaXNwb3NlZEl0c2VsZigpLCAnc2hvdWxkIG5vdyBiZSBkaXNwb3NlZCcgKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxZQUFZLE1BQU0sbUJBQW1CO0FBQzVDLE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLFFBQVEsTUFBTSxxQkFBcUI7QUFFMUNDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLGNBQWUsQ0FBQztBQUU5QkQsS0FBSyxDQUFDRSxJQUFJLENBQUUsc0JBQXNCLEVBQUVDLE1BQU0sSUFBSTtFQUU1QyxJQUFJQyxLQUFLLEdBQUcsQ0FBQztFQUViLE1BQU1DLGdCQUFnQixHQUFHQSxDQUFBLEtBQU1DLFlBQVksQ0FBQ0MsT0FBTyxDQUFFLEVBQUVILEtBQU0sQ0FBQztFQUU5RCxNQUFNSSxNQUFNLEdBQUtDLFlBQW9CLElBQU07SUFDekNOLE1BQU0sQ0FBQ08sRUFBRSxDQUFFTixLQUFLLEtBQUtLLFlBQVksRUFBRSxlQUFlLEdBQUdMLEtBQU0sQ0FBQztJQUU1RCxJQUFLSyxZQUFZLEtBQUssQ0FBQyxFQUFHO01BQ3hCSixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BCO0VBQ0YsQ0FBQztFQUNELE1BQU1DLFlBQVksR0FBRyxJQUFJVCxZQUFZLENBQWNXLE1BQU0sRUFBRTtJQUN6REcsVUFBVSxFQUFFLENBQUU7TUFBRUMsSUFBSSxFQUFFLE9BQU87TUFBRUMsVUFBVSxFQUFFZDtJQUFTLENBQUMsQ0FBRTtJQUN2RGUsTUFBTSxFQUFFaEIsTUFBTSxDQUFDaUIsU0FBUyxDQUFDQyxZQUFZLENBQUUsY0FBZTtFQUN4RCxDQUFFLENBQUM7RUFFSFgsZ0JBQWdCLENBQUMsQ0FBQztFQUNsQkYsTUFBTSxDQUFDTyxFQUFFLENBQUVOLEtBQUssS0FBSyxDQUFDLEVBQUUsY0FBZSxDQUFDO0VBQ3hDQyxnQkFBZ0IsQ0FBQyxDQUFDO0VBQ2xCRixNQUFNLENBQUNPLEVBQUUsQ0FBRU4sS0FBSyxLQUFLLENBQUMsRUFBRSxlQUFnQixDQUFDO0VBRXpDRSxZQUFZLENBQUNXLE9BQU8sQ0FBQyxDQUFDO0FBQ3hCLENBQUUsQ0FBQztBQUVIakIsS0FBSyxDQUFDRSxJQUFJLENBQUUsaUNBQWlDLEVBQUVDLE1BQU0sSUFBSTtFQUV2RCxJQUFJQyxLQUFLLEdBQUcsQ0FBQztFQUViLE1BQU1DLGdCQUFnQixHQUFHQSxDQUFBLEtBQU1DLFlBQVksQ0FBQ0MsT0FBTyxDQUFFLEVBQUVILEtBQU0sQ0FBQzs7RUFFOUQ7RUFDQSxNQUFNYyxvQkFBb0IsR0FBR0EsQ0FBQSxLQUFNWixZQUFZLENBQUNhLGVBQWUsQ0FBQ0MsVUFBVTtFQUUxRSxNQUFNWixNQUFNLEdBQUtDLFlBQW9CLElBQU07SUFDekNOLE1BQU0sQ0FBQ08sRUFBRSxDQUFFTixLQUFLLEtBQUtLLFlBQVksRUFBRSxlQUFlLEdBQUdMLEtBQU0sQ0FBQztJQUU1RCxJQUFLSyxZQUFZLEtBQUssQ0FBQyxFQUFHO01BQ3hCSixnQkFBZ0IsQ0FBQyxDQUFDO0lBQ3BCLENBQUMsTUFDSSxJQUFLSSxZQUFZLEtBQUssQ0FBQyxFQUFHO01BQzdCSixnQkFBZ0IsQ0FBQyxDQUFDO01BQ2xCQyxZQUFZLENBQUNXLE9BQU8sQ0FBQyxDQUFDO0lBQ3hCO0lBQ0FkLE1BQU0sQ0FBQ08sRUFBRSxDQUFFLENBQUNRLG9CQUFvQixDQUFDLENBQUMsRUFBRSwrQ0FBK0MsR0FBR1QsWUFBYSxDQUFDO0VBQ3RHLENBQUM7RUFDRCxNQUFNSCxZQUFZLEdBQUcsSUFBSVQsWUFBWSxDQUFjVyxNQUFNLEVBQUU7SUFDekRHLFVBQVUsRUFBRSxDQUFFO01BQUVDLElBQUksRUFBRSxPQUFPO01BQUVDLFVBQVUsRUFBRWQ7SUFBUyxDQUFDLENBQUU7SUFDdkRlLE1BQU0sRUFBRWhCLE1BQU0sQ0FBQ2lCLFNBQVMsQ0FBQ0MsWUFBWSxDQUFFLGNBQWU7RUFDeEQsQ0FBRSxDQUFDOztFQUVIO0VBQ0EsTUFBTUssQ0FBQyxHQUFHZixZQUFZLENBQUNnQixtQkFBbUIsQ0FBRSxPQUFRLENBQUM7RUFDckRuQixNQUFNLENBQUNPLEVBQUUsQ0FBRVcsQ0FBQyxDQUFDRSxNQUFNLEtBQUssQ0FBQyxFQUFFLGtDQUFtQyxDQUFDO0VBQy9EcEIsTUFBTSxDQUFDTyxFQUFFLENBQUUsT0FBT1csQ0FBQyxDQUFFLENBQUMsQ0FBRSxLQUFLLFFBQVEsRUFBRSxzQ0FBdUMsQ0FBQztFQUUvRWYsWUFBWSxDQUFDYSxlQUFlLENBQUNLLFdBQVcsQ0FBSWYsWUFBb0IsSUFBTTtJQUNwRU4sTUFBTSxDQUFDTyxFQUFFLENBQUUsQ0FBQ1Esb0JBQW9CLENBQUMsQ0FBQyxFQUFFLDhDQUE4QyxHQUFHVCxZQUFhLENBQUM7SUFDbkdOLE1BQU0sQ0FBQ08sRUFBRSxDQUFFTixLQUFLLEtBQUssQ0FBQyxFQUFFLCtFQUErRSxHQUFHSyxZQUFhLENBQUM7RUFDMUgsQ0FBRSxDQUFDO0VBRUhKLGdCQUFnQixDQUFDLENBQUM7RUFDbEJGLE1BQU0sQ0FBQ08sRUFBRSxDQUFFTixLQUFLLEtBQUssQ0FBQyxFQUFFLG1CQUFvQixDQUFDO0VBQzdDRCxNQUFNLENBQUNPLEVBQUUsQ0FBRVEsb0JBQW9CLENBQUMsQ0FBQyxFQUFFLHdCQUF5QixDQUFDO0FBQy9ELENBQUUsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==