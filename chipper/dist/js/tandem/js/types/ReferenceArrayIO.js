// Copyright 2023-2024, University of Colorado Boulder

/**
 * PhET-iO Type for using that same reference of the JS's built-in Array type. Unlike ArrayIO, ReferenceArrayIO will use
 * `applyState` to preserve the exact same Array reference, just mutating its values.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Validation from '../../../axon/js/Validation.js';
import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
import ArrayIO from './ArrayIO.js';
import IOTypeCache from '../IOTypeCache.js';

// Cache each parameterized IOType so that it is only created once.
const cache = new IOTypeCache();

/**
 * Parametric IOType constructor.  Given an element type, this function returns an appropriate array IOType.
 * This caching implementation should be kept in sync with the other parametric IOType caching implementations.
 */
const ReferenceArrayIO = parameterType => {
  assert && assert(!!parameterType, 'parameterType should be defined');
  if (!cache.has(parameterType)) {
    cache.set(parameterType, new IOType(`ReferenceArrayIO<${parameterType.typeName}>`, {
      valueType: Array,
      supertype: ArrayIO(parameterType),
      documentation: 'PhET-iO Type for Arrays that should be serialized back into the same Array reference.',
      isValidValue: array => {
        return _.every(array, element => Validation.isValueValid(element, parameterType.validator));
      },
      parameterTypes: [parameterType],
      toStateObject: ArrayIO(parameterType).toStateObject,
      applyState: (originalArray, stateObject) => {
        originalArray.length = 0;
        originalArray.push(...ArrayIO(parameterType).fromStateObject(stateObject));
      },
      defaultDeserializationMethod: 'applyState',
      stateSchema: StateSchema.asValue(`ReferenceArray<${parameterType.typeName}>`, {
        isValidValue: array => _.every(array, element => parameterType.isStateObjectValid(element))
      })
    }));
  }
  return cache.get(parameterType);
};
tandemNamespace.register('ReferenceArrayIO', ReferenceArrayIO);
export default ReferenceArrayIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJBcnJheUlPIiwiSU9UeXBlQ2FjaGUiLCJjYWNoZSIsIlJlZmVyZW5jZUFycmF5SU8iLCJwYXJhbWV0ZXJUeXBlIiwiYXNzZXJ0IiwiaGFzIiwic2V0IiwidHlwZU5hbWUiLCJ2YWx1ZVR5cGUiLCJBcnJheSIsInN1cGVydHlwZSIsImRvY3VtZW50YXRpb24iLCJpc1ZhbGlkVmFsdWUiLCJhcnJheSIsIl8iLCJldmVyeSIsImVsZW1lbnQiLCJpc1ZhbHVlVmFsaWQiLCJ2YWxpZGF0b3IiLCJwYXJhbWV0ZXJUeXBlcyIsInRvU3RhdGVPYmplY3QiLCJhcHBseVN0YXRlIiwib3JpZ2luYWxBcnJheSIsInN0YXRlT2JqZWN0IiwibGVuZ3RoIiwicHVzaCIsImZyb21TdGF0ZU9iamVjdCIsImRlZmF1bHREZXNlcmlhbGl6YXRpb25NZXRob2QiLCJzdGF0ZVNjaGVtYSIsImFzVmFsdWUiLCJpc1N0YXRlT2JqZWN0VmFsaWQiLCJnZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlJlZmVyZW5jZUFycmF5SU8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGhFVC1pTyBUeXBlIGZvciB1c2luZyB0aGF0IHNhbWUgcmVmZXJlbmNlIG9mIHRoZSBKUydzIGJ1aWx0LWluIEFycmF5IHR5cGUuIFVubGlrZSBBcnJheUlPLCBSZWZlcmVuY2VBcnJheUlPIHdpbGwgdXNlXHJcbiAqIGBhcHBseVN0YXRlYCB0byBwcmVzZXJ2ZSB0aGUgZXhhY3Qgc2FtZSBBcnJheSByZWZlcmVuY2UsIGp1c3QgbXV0YXRpbmcgaXRzIHZhbHVlcy5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWYWxpZGF0aW9uIGZyb20gJy4uLy4uLy4uL2F4b24vanMvVmFsaWRhdGlvbi5qcyc7XHJcbmltcG9ydCB0YW5kZW1OYW1lc3BhY2UgZnJvbSAnLi4vdGFuZGVtTmFtZXNwYWNlLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcclxuaW1wb3J0IEFycmF5SU8gZnJvbSAnLi9BcnJheUlPLmpzJztcclxuaW1wb3J0IElPVHlwZUNhY2hlIGZyb20gJy4uL0lPVHlwZUNhY2hlLmpzJztcclxuXHJcbi8vIENhY2hlIGVhY2ggcGFyYW1ldGVyaXplZCBJT1R5cGUgc28gdGhhdCBpdCBpcyBvbmx5IGNyZWF0ZWQgb25jZS5cclxuY29uc3QgY2FjaGUgPSBuZXcgSU9UeXBlQ2FjaGUoKTtcclxuXHJcbi8qKlxyXG4gKiBQYXJhbWV0cmljIElPVHlwZSBjb25zdHJ1Y3Rvci4gIEdpdmVuIGFuIGVsZW1lbnQgdHlwZSwgdGhpcyBmdW5jdGlvbiByZXR1cm5zIGFuIGFwcHJvcHJpYXRlIGFycmF5IElPVHlwZS5cclxuICogVGhpcyBjYWNoaW5nIGltcGxlbWVudGF0aW9uIHNob3VsZCBiZSBrZXB0IGluIHN5bmMgd2l0aCB0aGUgb3RoZXIgcGFyYW1ldHJpYyBJT1R5cGUgY2FjaGluZyBpbXBsZW1lbnRhdGlvbnMuXHJcbiAqL1xyXG5jb25zdCBSZWZlcmVuY2VBcnJheUlPID0gPFBhcmFtZXRlclR5cGUsIFBhcmFtZXRlclN0YXRlVHlwZT4oIHBhcmFtZXRlclR5cGU6IElPVHlwZTxQYXJhbWV0ZXJUeXBlLCBQYXJhbWV0ZXJTdGF0ZVR5cGU+ICk6IElPVHlwZTxQYXJhbWV0ZXJUeXBlW10sIFBhcmFtZXRlclN0YXRlVHlwZVtdPiA9PiB7XHJcbiAgYXNzZXJ0ICYmIGFzc2VydCggISFwYXJhbWV0ZXJUeXBlLCAncGFyYW1ldGVyVHlwZSBzaG91bGQgYmUgZGVmaW5lZCcgKTtcclxuICBpZiAoICFjYWNoZS5oYXMoIHBhcmFtZXRlclR5cGUgKSApIHtcclxuICAgIGNhY2hlLnNldCggcGFyYW1ldGVyVHlwZSwgbmV3IElPVHlwZTxQYXJhbWV0ZXJUeXBlW10sIFBhcmFtZXRlclN0YXRlVHlwZVtdPiggYFJlZmVyZW5jZUFycmF5SU88JHtwYXJhbWV0ZXJUeXBlLnR5cGVOYW1lfT5gLCB7XHJcbiAgICAgIHZhbHVlVHlwZTogQXJyYXksXHJcbiAgICAgIHN1cGVydHlwZTogQXJyYXlJTyggcGFyYW1ldGVyVHlwZSApLFxyXG4gICAgICBkb2N1bWVudGF0aW9uOiAnUGhFVC1pTyBUeXBlIGZvciBBcnJheXMgdGhhdCBzaG91bGQgYmUgc2VyaWFsaXplZCBiYWNrIGludG8gdGhlIHNhbWUgQXJyYXkgcmVmZXJlbmNlLicsXHJcbiAgICAgIGlzVmFsaWRWYWx1ZTogYXJyYXkgPT4ge1xyXG4gICAgICAgIHJldHVybiBfLmV2ZXJ5KCBhcnJheSwgZWxlbWVudCA9PiBWYWxpZGF0aW9uLmlzVmFsdWVWYWxpZCggZWxlbWVudCwgcGFyYW1ldGVyVHlwZS52YWxpZGF0b3IgKSApO1xyXG4gICAgICB9LFxyXG4gICAgICBwYXJhbWV0ZXJUeXBlczogWyBwYXJhbWV0ZXJUeXBlIF0sXHJcbiAgICAgIHRvU3RhdGVPYmplY3Q6IEFycmF5SU8oIHBhcmFtZXRlclR5cGUgKS50b1N0YXRlT2JqZWN0LFxyXG4gICAgICBhcHBseVN0YXRlOiAoIG9yaWdpbmFsQXJyYXksIHN0YXRlT2JqZWN0ICkgPT4ge1xyXG4gICAgICAgIG9yaWdpbmFsQXJyYXkubGVuZ3RoID0gMDtcclxuICAgICAgICBvcmlnaW5hbEFycmF5LnB1c2goIC4uLkFycmF5SU8oIHBhcmFtZXRlclR5cGUgKS5mcm9tU3RhdGVPYmplY3QoIHN0YXRlT2JqZWN0ICkgKTtcclxuICAgICAgfSxcclxuICAgICAgZGVmYXVsdERlc2VyaWFsaXphdGlvbk1ldGhvZDogJ2FwcGx5U3RhdGUnLFxyXG4gICAgICBzdGF0ZVNjaGVtYTogU3RhdGVTY2hlbWEuYXNWYWx1ZSggYFJlZmVyZW5jZUFycmF5PCR7cGFyYW1ldGVyVHlwZS50eXBlTmFtZX0+YCwge1xyXG4gICAgICAgIGlzVmFsaWRWYWx1ZTogYXJyYXkgPT4gXy5ldmVyeSggYXJyYXksIGVsZW1lbnQgPT4gcGFyYW1ldGVyVHlwZS5pc1N0YXRlT2JqZWN0VmFsaWQoIGVsZW1lbnQgKSApXHJcbiAgICAgIH0gKVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2FjaGUuZ2V0KCBwYXJhbWV0ZXJUeXBlICkhO1xyXG59O1xyXG5cclxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnUmVmZXJlbmNlQXJyYXlJTycsIFJlZmVyZW5jZUFycmF5SU8gKTtcclxuZXhwb3J0IGRlZmF1bHQgUmVmZXJlbmNlQXJyYXlJTzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxnQ0FBZ0M7QUFDdkQsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBQ2xDLE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7O0FBRTNDO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLElBQUlELFdBQVcsQ0FBQyxDQUFDOztBQUUvQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1FLGdCQUFnQixHQUF3Q0MsYUFBd0QsSUFBcUQ7RUFDektDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsQ0FBQ0QsYUFBYSxFQUFFLGlDQUFrQyxDQUFDO0VBQ3RFLElBQUssQ0FBQ0YsS0FBSyxDQUFDSSxHQUFHLENBQUVGLGFBQWMsQ0FBQyxFQUFHO0lBQ2pDRixLQUFLLENBQUNLLEdBQUcsQ0FBRUgsYUFBYSxFQUFFLElBQUlOLE1BQU0sQ0FBMEMsb0JBQW1CTSxhQUFhLENBQUNJLFFBQVMsR0FBRSxFQUFFO01BQzFIQyxTQUFTLEVBQUVDLEtBQUs7TUFDaEJDLFNBQVMsRUFBRVgsT0FBTyxDQUFFSSxhQUFjLENBQUM7TUFDbkNRLGFBQWEsRUFBRSx1RkFBdUY7TUFDdEdDLFlBQVksRUFBRUMsS0FBSyxJQUFJO1FBQ3JCLE9BQU9DLENBQUMsQ0FBQ0MsS0FBSyxDQUFFRixLQUFLLEVBQUVHLE9BQU8sSUFBSXJCLFVBQVUsQ0FBQ3NCLFlBQVksQ0FBRUQsT0FBTyxFQUFFYixhQUFhLENBQUNlLFNBQVUsQ0FBRSxDQUFDO01BQ2pHLENBQUM7TUFDREMsY0FBYyxFQUFFLENBQUVoQixhQUFhLENBQUU7TUFDakNpQixhQUFhLEVBQUVyQixPQUFPLENBQUVJLGFBQWMsQ0FBQyxDQUFDaUIsYUFBYTtNQUNyREMsVUFBVSxFQUFFQSxDQUFFQyxhQUFhLEVBQUVDLFdBQVcsS0FBTTtRQUM1Q0QsYUFBYSxDQUFDRSxNQUFNLEdBQUcsQ0FBQztRQUN4QkYsYUFBYSxDQUFDRyxJQUFJLENBQUUsR0FBRzFCLE9BQU8sQ0FBRUksYUFBYyxDQUFDLENBQUN1QixlQUFlLENBQUVILFdBQVksQ0FBRSxDQUFDO01BQ2xGLENBQUM7TUFDREksNEJBQTRCLEVBQUUsWUFBWTtNQUMxQ0MsV0FBVyxFQUFFOUIsV0FBVyxDQUFDK0IsT0FBTyxDQUFHLGtCQUFpQjFCLGFBQWEsQ0FBQ0ksUUFBUyxHQUFFLEVBQUU7UUFDN0VLLFlBQVksRUFBRUMsS0FBSyxJQUFJQyxDQUFDLENBQUNDLEtBQUssQ0FBRUYsS0FBSyxFQUFFRyxPQUFPLElBQUliLGFBQWEsQ0FBQzJCLGtCQUFrQixDQUFFZCxPQUFRLENBQUU7TUFDaEcsQ0FBRTtJQUNKLENBQUUsQ0FBRSxDQUFDO0VBQ1A7RUFFQSxPQUFPZixLQUFLLENBQUM4QixHQUFHLENBQUU1QixhQUFjLENBQUM7QUFDbkMsQ0FBQztBQUVEUCxlQUFlLENBQUNvQyxRQUFRLENBQUUsa0JBQWtCLEVBQUU5QixnQkFBaUIsQ0FBQztBQUNoRSxlQUFlQSxnQkFBZ0IiLCJpZ25vcmVMaXN0IjpbXX0=