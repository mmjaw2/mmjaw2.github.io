// Copyright 2022-2024, University of Colorado Boulder

/**
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
import tandemNamespace from '../tandemNamespace.js';
import IOTypeCache from '../IOTypeCache.js';

// Cache each parameterized IOType so that it is only created once.
const cache = new IOTypeCache();
const joinKeys = keys => keys.join('|');
const EnumerationIO = enumerationContainer => {
  const enumeration = enumerationContainer.enumeration;

  // This caching implementation should be kept in sync with the other parametric IOType caching implementations.
  if (!cache.has(enumeration)) {
    // Enumeration supports additional documentation, so the values can be described.
    const additionalDocs = enumeration.phetioDocumentation ? ` ${enumeration.phetioDocumentation}` : '';
    const keys = enumeration.keys;
    const values = enumeration.values;
    const ioTypeName = `EnumerationIO(${joinKeys(keys)})`;
    assert && assert(!Array.from(cache.values()).find(ioType => ioType.typeName === ioTypeName), 'There was already another IOType with the same name: ' + ioTypeName);
    cache.set(enumeration, new IOType(ioTypeName, {
      validValues: values,
      documentation: `Possible values: ${keys.join(', ')}.${additionalDocs}`,
      toStateObject: value => enumeration.getKey(value),
      fromStateObject: stateObject => {
        assert && assert(typeof stateObject === 'string', 'unsupported EnumerationIO value type, expected string'); // eslint-disable-line no-simple-type-checking-assertions
        assert && assert(keys.includes(stateObject), `Unrecognized value: ${stateObject}`);
        return enumeration.getValue(stateObject);
      },
      stateSchema: StateSchema.asValue(`${joinKeys(keys)}`, {
        isValidValue: key => keys.includes(key)
      })
    }));
  }
  return cache.get(enumeration);
};
tandemNamespace.register('EnumerationIO', EnumerationIO);
export default EnumerationIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsInRhbmRlbU5hbWVzcGFjZSIsIklPVHlwZUNhY2hlIiwiY2FjaGUiLCJqb2luS2V5cyIsImtleXMiLCJqb2luIiwiRW51bWVyYXRpb25JTyIsImVudW1lcmF0aW9uQ29udGFpbmVyIiwiZW51bWVyYXRpb24iLCJoYXMiLCJhZGRpdGlvbmFsRG9jcyIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJ2YWx1ZXMiLCJpb1R5cGVOYW1lIiwiYXNzZXJ0IiwiQXJyYXkiLCJmcm9tIiwiZmluZCIsImlvVHlwZSIsInR5cGVOYW1lIiwic2V0IiwidmFsaWRWYWx1ZXMiLCJkb2N1bWVudGF0aW9uIiwidG9TdGF0ZU9iamVjdCIsInZhbHVlIiwiZ2V0S2V5IiwiZnJvbVN0YXRlT2JqZWN0Iiwic3RhdGVPYmplY3QiLCJpbmNsdWRlcyIsImdldFZhbHVlIiwic3RhdGVTY2hlbWEiLCJhc1ZhbHVlIiwiaXNWYWxpZFZhbHVlIiwia2V5IiwiZ2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJFbnVtZXJhdGlvbklPLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgRW51bWVyYXRpb25WYWx1ZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvRW51bWVyYXRpb25WYWx1ZS5qcyc7XHJcbmltcG9ydCBURW51bWVyYXRpb24sIHsgRW51bWVyYXRpb25Db250YWluZXIgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvVEVudW1lcmF0aW9uLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcclxuaW1wb3J0IHRhbmRlbU5hbWVzcGFjZSBmcm9tICcuLi90YW5kZW1OYW1lc3BhY2UuanMnO1xyXG5pbXBvcnQgSU9UeXBlQ2FjaGUgZnJvbSAnLi4vSU9UeXBlQ2FjaGUuanMnO1xyXG5cclxuLy8gQ2FjaGUgZWFjaCBwYXJhbWV0ZXJpemVkIElPVHlwZSBzbyB0aGF0IGl0IGlzIG9ubHkgY3JlYXRlZCBvbmNlLlxyXG5jb25zdCBjYWNoZSA9IG5ldyBJT1R5cGVDYWNoZTxURW51bWVyYXRpb248RW51bWVyYXRpb25WYWx1ZT4+KCk7XHJcblxyXG5jb25zdCBqb2luS2V5cyA9ICgga2V5czogc3RyaW5nW10gKSA9PiBrZXlzLmpvaW4oICd8JyApO1xyXG5cclxuY29uc3QgRW51bWVyYXRpb25JTyA9IDxUIGV4dGVuZHMgRW51bWVyYXRpb25WYWx1ZT4oIGVudW1lcmF0aW9uQ29udGFpbmVyOiBFbnVtZXJhdGlvbkNvbnRhaW5lcjxUPiApOiBJT1R5cGUgPT4ge1xyXG4gIGNvbnN0IGVudW1lcmF0aW9uID0gZW51bWVyYXRpb25Db250YWluZXIuZW51bWVyYXRpb247XHJcblxyXG4gIC8vIFRoaXMgY2FjaGluZyBpbXBsZW1lbnRhdGlvbiBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIG90aGVyIHBhcmFtZXRyaWMgSU9UeXBlIGNhY2hpbmcgaW1wbGVtZW50YXRpb25zLlxyXG4gIGlmICggIWNhY2hlLmhhcyggZW51bWVyYXRpb24gKSApIHtcclxuXHJcbiAgICAvLyBFbnVtZXJhdGlvbiBzdXBwb3J0cyBhZGRpdGlvbmFsIGRvY3VtZW50YXRpb24sIHNvIHRoZSB2YWx1ZXMgY2FuIGJlIGRlc2NyaWJlZC5cclxuICAgIGNvbnN0IGFkZGl0aW9uYWxEb2NzID0gZW51bWVyYXRpb24ucGhldGlvRG9jdW1lbnRhdGlvbiA/IGAgJHtlbnVtZXJhdGlvbi5waGV0aW9Eb2N1bWVudGF0aW9ufWAgOiAnJztcclxuXHJcbiAgICBjb25zdCBrZXlzID0gZW51bWVyYXRpb24ua2V5cztcclxuICAgIGNvbnN0IHZhbHVlcyA9IGVudW1lcmF0aW9uLnZhbHVlcztcclxuXHJcbiAgICBjb25zdCBpb1R5cGVOYW1lID0gYEVudW1lcmF0aW9uSU8oJHtqb2luS2V5cygga2V5cyApfSlgO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoXHJcbiAgICAgICFBcnJheS5mcm9tKCBjYWNoZS52YWx1ZXMoKSApLmZpbmQoIGlvVHlwZSA9PiBpb1R5cGUudHlwZU5hbWUgPT09IGlvVHlwZU5hbWUgKSxcclxuICAgICAgJ1RoZXJlIHdhcyBhbHJlYWR5IGFub3RoZXIgSU9UeXBlIHdpdGggdGhlIHNhbWUgbmFtZTogJyArIGlvVHlwZU5hbWVcclxuICAgICk7XHJcblxyXG4gICAgY2FjaGUuc2V0KCBlbnVtZXJhdGlvbiwgbmV3IElPVHlwZTxULCBzdHJpbmc+KCBpb1R5cGVOYW1lLCB7XHJcbiAgICAgIHZhbGlkVmFsdWVzOiB2YWx1ZXMsXHJcbiAgICAgIGRvY3VtZW50YXRpb246IGBQb3NzaWJsZSB2YWx1ZXM6ICR7a2V5cy5qb2luKCAnLCAnICl9LiR7YWRkaXRpb25hbERvY3N9YCxcclxuICAgICAgdG9TdGF0ZU9iamVjdDogKCB2YWx1ZTogVCApID0+IGVudW1lcmF0aW9uLmdldEtleSggdmFsdWUgKSxcclxuICAgICAgZnJvbVN0YXRlT2JqZWN0OiAoIHN0YXRlT2JqZWN0OiBzdHJpbmcgKTogVCA9PiB7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdHlwZW9mIHN0YXRlT2JqZWN0ID09PSAnc3RyaW5nJywgJ3Vuc3VwcG9ydGVkIEVudW1lcmF0aW9uSU8gdmFsdWUgdHlwZSwgZXhwZWN0ZWQgc3RyaW5nJyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNpbXBsZS10eXBlLWNoZWNraW5nLWFzc2VydGlvbnNcclxuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBrZXlzLmluY2x1ZGVzKCBzdGF0ZU9iamVjdCApLCBgVW5yZWNvZ25pemVkIHZhbHVlOiAke3N0YXRlT2JqZWN0fWAgKTtcclxuICAgICAgICByZXR1cm4gZW51bWVyYXRpb24uZ2V0VmFsdWUoIHN0YXRlT2JqZWN0ICk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHN0YXRlU2NoZW1hOiBTdGF0ZVNjaGVtYS5hc1ZhbHVlPEVudW1lcmF0aW9uVmFsdWUsIHN0cmluZz4oIGAke2pvaW5LZXlzKCBrZXlzICl9YCwge1xyXG4gICAgICAgIGlzVmFsaWRWYWx1ZTogKCBrZXk6IHN0cmluZyApID0+IGtleXMuaW5jbHVkZXMoIGtleSApXHJcbiAgICAgIH0gKVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2FjaGUuZ2V0KCBlbnVtZXJhdGlvbiApITtcclxufTtcclxuXHJcbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ0VudW1lcmF0aW9uSU8nLCBFbnVtZXJhdGlvbklPICk7XHJcbmV4cG9ydCBkZWZhdWx0IEVudW1lcmF0aW9uSU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFJQSxPQUFPQSxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLGVBQWUsTUFBTSx1QkFBdUI7QUFDbkQsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjs7QUFFM0M7QUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSUQsV0FBVyxDQUFpQyxDQUFDO0FBRS9ELE1BQU1FLFFBQVEsR0FBS0MsSUFBYyxJQUFNQSxJQUFJLENBQUNDLElBQUksQ0FBRSxHQUFJLENBQUM7QUFFdkQsTUFBTUMsYUFBYSxHQUFpQ0Msb0JBQTZDLElBQWM7RUFDN0csTUFBTUMsV0FBVyxHQUFHRCxvQkFBb0IsQ0FBQ0MsV0FBVzs7RUFFcEQ7RUFDQSxJQUFLLENBQUNOLEtBQUssQ0FBQ08sR0FBRyxDQUFFRCxXQUFZLENBQUMsRUFBRztJQUUvQjtJQUNBLE1BQU1FLGNBQWMsR0FBR0YsV0FBVyxDQUFDRyxtQkFBbUIsR0FBSSxJQUFHSCxXQUFXLENBQUNHLG1CQUFvQixFQUFDLEdBQUcsRUFBRTtJQUVuRyxNQUFNUCxJQUFJLEdBQUdJLFdBQVcsQ0FBQ0osSUFBSTtJQUM3QixNQUFNUSxNQUFNLEdBQUdKLFdBQVcsQ0FBQ0ksTUFBTTtJQUVqQyxNQUFNQyxVQUFVLEdBQUksaUJBQWdCVixRQUFRLENBQUVDLElBQUssQ0FBRSxHQUFFO0lBRXZEVSxNQUFNLElBQUlBLE1BQU0sQ0FDZCxDQUFDQyxLQUFLLENBQUNDLElBQUksQ0FBRWQsS0FBSyxDQUFDVSxNQUFNLENBQUMsQ0FBRSxDQUFDLENBQUNLLElBQUksQ0FBRUMsTUFBTSxJQUFJQSxNQUFNLENBQUNDLFFBQVEsS0FBS04sVUFBVyxDQUFDLEVBQzlFLHVEQUF1RCxHQUFHQSxVQUM1RCxDQUFDO0lBRURYLEtBQUssQ0FBQ2tCLEdBQUcsQ0FBRVosV0FBVyxFQUFFLElBQUlWLE1BQU0sQ0FBYWUsVUFBVSxFQUFFO01BQ3pEUSxXQUFXLEVBQUVULE1BQU07TUFDbkJVLGFBQWEsRUFBRyxvQkFBbUJsQixJQUFJLENBQUNDLElBQUksQ0FBRSxJQUFLLENBQUUsSUFBR0ssY0FBZSxFQUFDO01BQ3hFYSxhQUFhLEVBQUlDLEtBQVEsSUFBTWhCLFdBQVcsQ0FBQ2lCLE1BQU0sQ0FBRUQsS0FBTSxDQUFDO01BQzFERSxlQUFlLEVBQUlDLFdBQW1CLElBQVM7UUFDN0NiLE1BQU0sSUFBSUEsTUFBTSxDQUFFLE9BQU9hLFdBQVcsS0FBSyxRQUFRLEVBQUUsdURBQXdELENBQUMsQ0FBQyxDQUFDO1FBQzlHYixNQUFNLElBQUlBLE1BQU0sQ0FBRVYsSUFBSSxDQUFDd0IsUUFBUSxDQUFFRCxXQUFZLENBQUMsRUFBRyx1QkFBc0JBLFdBQVksRUFBRSxDQUFDO1FBQ3RGLE9BQU9uQixXQUFXLENBQUNxQixRQUFRLENBQUVGLFdBQVksQ0FBQztNQUM1QyxDQUFDO01BQ0RHLFdBQVcsRUFBRS9CLFdBQVcsQ0FBQ2dDLE9BQU8sQ0FBNkIsR0FBRTVCLFFBQVEsQ0FBRUMsSUFBSyxDQUFFLEVBQUMsRUFBRTtRQUNqRjRCLFlBQVksRUFBSUMsR0FBVyxJQUFNN0IsSUFBSSxDQUFDd0IsUUFBUSxDQUFFSyxHQUFJO01BQ3RELENBQUU7SUFDSixDQUFFLENBQUUsQ0FBQztFQUNQO0VBRUEsT0FBTy9CLEtBQUssQ0FBQ2dDLEdBQUcsQ0FBRTFCLFdBQVksQ0FBQztBQUNqQyxDQUFDO0FBRURSLGVBQWUsQ0FBQ21DLFFBQVEsQ0FBRSxlQUFlLEVBQUU3QixhQUFjLENBQUM7QUFDMUQsZUFBZUEsYUFBYSIsImlnbm9yZUxpc3QiOltdfQ==