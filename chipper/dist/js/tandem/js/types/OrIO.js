// Copyright 2020-2024, University of Colorado Boulder

/**
 * Parametric IOType that adds support for serializing an element as multiple types, as a composite. Serialization occurs
 * via a first-come-first-serialize basis, where the first parameterType will be the
 *
 * Sample usage:
 *
 * window.numberOrStringProperty = new Property( 'I am currently a string', {
      tandem: Tandem.GENERAL_MODEL.createTandem( 'numberOrStringProperty' ),
      phetioValueType: OrIO( [ StringIO, NumberIO ] )
    } );
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Validation from '../../../axon/js/Validation.js';
import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
import IOTypeCache from '../IOTypeCache.js';

// cache each parameterized IOType so that it is only created once
const cache = new IOTypeCache();

/**
 * Parametric type constructor function, do not use `new`
 * @param parameterTypes - a list of IOType to combine into a single composite
 */
const OrIO = parameterTypes => {
  assert && assert(Array.isArray(parameterTypes), 'OrIO needs to be an array');
  assert && assert(parameterTypes.length > 1, 'OrIO needs parameterTypes');
  const typeNames = parameterTypes.map(parameterType => parameterType.typeName);
  const key = typeNames.join(',');
  if (!cache.has(key)) {
    const isValidValue = instance => {
      for (let i = 0; i < parameterTypes.length; i++) {
        const parameterType = parameterTypes[i];
        if (Validation.isValueValid(instance, parameterType.validator)) {
          return true;
        }
      }
      return false;
    };
    cache.set(key, new IOType(`OrIO<${typeNames.join(', ')}>`, {
      documentation: 'A PhET-iO Type adding support for a composite type that can be any of its parameters.',
      parameterTypes: parameterTypes,
      isValidValue: isValidValue,
      toStateObject: instance => {
        for (let i = 0; i < parameterTypes.length; i++) {
          const parameterType = parameterTypes[i];
          if (Validation.isValueValid(instance, parameterType.validator)) {
            return {
              index: i,
              state: parameterType.toStateObject(instance)
            };
          }
        }
        throw new Error('somehow the instance was not valid, we should not get here. Why was isValidValue not used before this step?');
      },
      fromStateObject: stateObject => {
        assert && assert(stateObject.hasOwnProperty('index'), 'index required for deserialization');
        assert && assert(stateObject.hasOwnProperty('state'), 'state required for deserialization');
        return parameterTypes[stateObject.index].fromStateObject(stateObject.state);
      },
      stateSchema: StateSchema.asValue(`${typeNames.join('|')}`, {
        isValidValue: stateObject => {
          // Check based on the parameter that serialized the state
          if (typeof stateObject.index === 'number') {
            return parameterTypes[stateObject.index].isStateObjectValid(stateObject.state);
          }
          return false;
        }
      })
    }));
  }
  return cache.get(key);
};
tandemNamespace.register('OrIO', OrIO);
export default OrIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJJT1R5cGVDYWNoZSIsImNhY2hlIiwiT3JJTyIsInBhcmFtZXRlclR5cGVzIiwiYXNzZXJ0IiwiQXJyYXkiLCJpc0FycmF5IiwibGVuZ3RoIiwidHlwZU5hbWVzIiwibWFwIiwicGFyYW1ldGVyVHlwZSIsInR5cGVOYW1lIiwia2V5Iiwiam9pbiIsImhhcyIsImlzVmFsaWRWYWx1ZSIsImluc3RhbmNlIiwiaSIsImlzVmFsdWVWYWxpZCIsInZhbGlkYXRvciIsInNldCIsImRvY3VtZW50YXRpb24iLCJ0b1N0YXRlT2JqZWN0IiwiaW5kZXgiLCJzdGF0ZSIsIkVycm9yIiwiZnJvbVN0YXRlT2JqZWN0Iiwic3RhdGVPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsInN0YXRlU2NoZW1hIiwiYXNWYWx1ZSIsImlzU3RhdGVPYmplY3RWYWxpZCIsImdldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiT3JJTy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMC0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBQYXJhbWV0cmljIElPVHlwZSB0aGF0IGFkZHMgc3VwcG9ydCBmb3Igc2VyaWFsaXppbmcgYW4gZWxlbWVudCBhcyBtdWx0aXBsZSB0eXBlcywgYXMgYSBjb21wb3NpdGUuIFNlcmlhbGl6YXRpb24gb2NjdXJzXHJcbiAqIHZpYSBhIGZpcnN0LWNvbWUtZmlyc3Qtc2VyaWFsaXplIGJhc2lzLCB3aGVyZSB0aGUgZmlyc3QgcGFyYW1ldGVyVHlwZSB3aWxsIGJlIHRoZVxyXG4gKlxyXG4gKiBTYW1wbGUgdXNhZ2U6XHJcbiAqXHJcbiAqIHdpbmRvdy5udW1iZXJPclN0cmluZ1Byb3BlcnR5ID0gbmV3IFByb3BlcnR5KCAnSSBhbSBjdXJyZW50bHkgYSBzdHJpbmcnLCB7XHJcbiAgICAgIHRhbmRlbTogVGFuZGVtLkdFTkVSQUxfTU9ERUwuY3JlYXRlVGFuZGVtKCAnbnVtYmVyT3JTdHJpbmdQcm9wZXJ0eScgKSxcclxuICAgICAgcGhldGlvVmFsdWVUeXBlOiBPcklPKCBbIFN0cmluZ0lPLCBOdW1iZXJJTyBdIClcclxuICAgIH0gKTtcclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBWYWxpZGF0aW9uIGZyb20gJy4uLy4uLy4uL2F4b24vanMvVmFsaWRhdGlvbi5qcyc7XHJcbmltcG9ydCBJbnRlbnRpb25hbEFueSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xyXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi9JT1R5cGUuanMnO1xyXG5pbXBvcnQgU3RhdGVTY2hlbWEgZnJvbSAnLi9TdGF0ZVNjaGVtYS5qcyc7XHJcbmltcG9ydCBJT1R5cGVDYWNoZSBmcm9tICcuLi9JT1R5cGVDYWNoZS5qcyc7XHJcblxyXG4vLyBjYWNoZSBlYWNoIHBhcmFtZXRlcml6ZWQgSU9UeXBlIHNvIHRoYXQgaXQgaXMgb25seSBjcmVhdGVkIG9uY2VcclxuY29uc3QgY2FjaGUgPSBuZXcgSU9UeXBlQ2FjaGU8c3RyaW5nPigpO1xyXG5cclxuLyoqXHJcbiAqIFBhcmFtZXRyaWMgdHlwZSBjb25zdHJ1Y3RvciBmdW5jdGlvbiwgZG8gbm90IHVzZSBgbmV3YFxyXG4gKiBAcGFyYW0gcGFyYW1ldGVyVHlwZXMgLSBhIGxpc3Qgb2YgSU9UeXBlIHRvIGNvbWJpbmUgaW50byBhIHNpbmdsZSBjb21wb3NpdGVcclxuICovXHJcbmNvbnN0IE9ySU8gPSAoIHBhcmFtZXRlclR5cGVzOiBJT1R5cGVbXSApOiBJT1R5cGUgPT4ge1xyXG4gIGFzc2VydCAmJiBhc3NlcnQoIEFycmF5LmlzQXJyYXkoIHBhcmFtZXRlclR5cGVzICksICdPcklPIG5lZWRzIHRvIGJlIGFuIGFycmF5JyApO1xyXG4gIGFzc2VydCAmJiBhc3NlcnQoIHBhcmFtZXRlclR5cGVzLmxlbmd0aCA+IDEsICdPcklPIG5lZWRzIHBhcmFtZXRlclR5cGVzJyApO1xyXG4gIGNvbnN0IHR5cGVOYW1lcyA9IHBhcmFtZXRlclR5cGVzLm1hcCggcGFyYW1ldGVyVHlwZSA9PiBwYXJhbWV0ZXJUeXBlLnR5cGVOYW1lICk7XHJcbiAgY29uc3Qga2V5ID0gdHlwZU5hbWVzLmpvaW4oICcsJyApO1xyXG5cclxuICBpZiAoICFjYWNoZS5oYXMoIGtleSApICkge1xyXG4gICAgY29uc3QgaXNWYWxpZFZhbHVlID0gKCBpbnN0YW5jZTogSW50ZW50aW9uYWxBbnkgKSA9PiB7XHJcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHBhcmFtZXRlclR5cGVzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgICAgIGNvbnN0IHBhcmFtZXRlclR5cGUgPSBwYXJhbWV0ZXJUeXBlc1sgaSBdO1xyXG4gICAgICAgIGlmICggVmFsaWRhdGlvbi5pc1ZhbHVlVmFsaWQoIGluc3RhbmNlLCBwYXJhbWV0ZXJUeXBlLnZhbGlkYXRvciApICkge1xyXG4gICAgICAgICAgcmV0dXJuIHRydWU7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIHJldHVybiBmYWxzZTtcclxuICAgIH07XHJcbiAgICBjYWNoZS5zZXQoIGtleSwgbmV3IElPVHlwZSggYE9ySU88JHt0eXBlTmFtZXMuam9pbiggJywgJyApfT5gLCB7XHJcbiAgICAgIGRvY3VtZW50YXRpb246ICdBIFBoRVQtaU8gVHlwZSBhZGRpbmcgc3VwcG9ydCBmb3IgYSBjb21wb3NpdGUgdHlwZSB0aGF0IGNhbiBiZSBhbnkgb2YgaXRzIHBhcmFtZXRlcnMuJyxcclxuICAgICAgcGFyYW1ldGVyVHlwZXM6IHBhcmFtZXRlclR5cGVzLFxyXG4gICAgICBpc1ZhbGlkVmFsdWU6IGlzVmFsaWRWYWx1ZSxcclxuXHJcbiAgICAgIHRvU3RhdGVPYmplY3Q6IGluc3RhbmNlID0+IHtcclxuICAgICAgICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBwYXJhbWV0ZXJUeXBlcy5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICAgIGNvbnN0IHBhcmFtZXRlclR5cGUgPSBwYXJhbWV0ZXJUeXBlc1sgaSBdO1xyXG4gICAgICAgICAgaWYgKCBWYWxpZGF0aW9uLmlzVmFsdWVWYWxpZCggaW5zdGFuY2UsIHBhcmFtZXRlclR5cGUudmFsaWRhdG9yICkgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiB7XHJcbiAgICAgICAgICAgICAgaW5kZXg6IGksXHJcbiAgICAgICAgICAgICAgc3RhdGU6IHBhcmFtZXRlclR5cGUudG9TdGF0ZU9iamVjdCggaW5zdGFuY2UgKVxyXG4gICAgICAgICAgICB9O1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoICdzb21laG93IHRoZSBpbnN0YW5jZSB3YXMgbm90IHZhbGlkLCB3ZSBzaG91bGQgbm90IGdldCBoZXJlLiBXaHkgd2FzIGlzVmFsaWRWYWx1ZSBub3QgdXNlZCBiZWZvcmUgdGhpcyBzdGVwPycgKTtcclxuICAgICAgfSxcclxuXHJcbiAgICAgIGZyb21TdGF0ZU9iamVjdDogKCBzdGF0ZU9iamVjdDogSW50ZW50aW9uYWxBbnkgKSA9PiB7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggc3RhdGVPYmplY3QuaGFzT3duUHJvcGVydHkoICdpbmRleCcgKSwgJ2luZGV4IHJlcXVpcmVkIGZvciBkZXNlcmlhbGl6YXRpb24nICk7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggc3RhdGVPYmplY3QuaGFzT3duUHJvcGVydHkoICdzdGF0ZScgKSwgJ3N0YXRlIHJlcXVpcmVkIGZvciBkZXNlcmlhbGl6YXRpb24nICk7XHJcbiAgICAgICAgcmV0dXJuIHBhcmFtZXRlclR5cGVzWyBzdGF0ZU9iamVjdC5pbmRleCBdLmZyb21TdGF0ZU9iamVjdCggc3RhdGVPYmplY3Quc3RhdGUgKTtcclxuICAgICAgfSxcclxuICAgICAgc3RhdGVTY2hlbWE6IFN0YXRlU2NoZW1hLmFzVmFsdWUoIGAke3R5cGVOYW1lcy5qb2luKCAnfCcgKX1gLCB7XHJcbiAgICAgICAgaXNWYWxpZFZhbHVlOiBzdGF0ZU9iamVjdCA9PiB7XHJcblxyXG4gICAgICAgICAgLy8gQ2hlY2sgYmFzZWQgb24gdGhlIHBhcmFtZXRlciB0aGF0IHNlcmlhbGl6ZWQgdGhlIHN0YXRlXHJcbiAgICAgICAgICBpZiAoIHR5cGVvZiBzdGF0ZU9iamVjdC5pbmRleCA9PT0gJ251bWJlcicgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBwYXJhbWV0ZXJUeXBlc1sgc3RhdGVPYmplY3QuaW5kZXggXS5pc1N0YXRlT2JqZWN0VmFsaWQoIHN0YXRlT2JqZWN0LnN0YXRlICk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IClcclxuICAgIH0gKSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNhY2hlLmdldCgga2V5ICkhO1xyXG59O1xyXG5cclxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnT3JJTycsIE9ySU8gKTtcclxuZXhwb3J0IGRlZmF1bHQgT3JJTzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxnQ0FBZ0M7QUFFdkQsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7O0FBRTNDO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLElBQUlELFdBQVcsQ0FBUyxDQUFDOztBQUV2QztBQUNBO0FB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