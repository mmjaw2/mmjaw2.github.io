// Copyright 2021-2024, University of Colorado Boulder

/**
 * PhET-iO Type for JS's built-in Map type.
 *
 * NOTE: This has not been reviewed, tested or used in production code yet.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import Validation from '../../../axon/js/Validation.js';
import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
import IOTypeCache from '../IOTypeCache.js';

// Cache each parameterized IOType so that it is only created once.
const cache = new IOTypeCache();
const ARRAY_OF_ARRAY_VALIDATOR = {
  valueType: Array,
  isValidValue: value => Array.isArray(value) && value.every(element => Array.isArray(element))
};
/**
 * Parametric IOType constructor.  Given an element type, this function returns an appropriate map IOType.
 * This caching implementation should be kept in sync with the other parametric IOType caching implementations.
 */
function MapIO(keyType, valueType) {
  const cacheKey = keyType.typeName + ',' + valueType.typeName;
  if (!cache.has(cacheKey)) {
    cache.set(cacheKey, new IOType(`MapIO<${keyType.typeName},${valueType.typeName}>`, {
      valueType: Map,
      isValidValue: map => {
        for (const [key, value] of map) {
          if (!Validation.isValueValid(key, keyType.validator)) {
            return false;
          }
          if (!Validation.isValueValid(value, valueType.validator)) {
            return false;
          }
        }
        return true;
      },
      parameterTypes: [keyType, valueType],
      toStateObject: map => {
        const array = [];
        for (const [key, value] of map) {
          array.push([keyType.toStateObject(key), valueType.toStateObject(value)]);
        }
        return array;
      },
      fromStateObject: outerArray => {
        const result = outerArray.map(tuple => {
          return [keyType.fromStateObject(tuple[0]), valueType.fromStateObject(tuple[1])];
        });

        // @ts-expect-error not sure how to demonstrate that the argument is readonly, since it is dynamically created
        return new Map(result);
      },
      documentation: 'PhET-iO Type for the built-in JS Map type, with the key and value types specified.',
      stateSchema: StateSchema.asValue(`Map<${keyType.typeName},${valueType.typeName}>`, {
        isValidValue: stateObject => {
          if (!Validation.isValueValid(stateObject, ARRAY_OF_ARRAY_VALIDATOR)) {
            return false;
          }
          for (let i = 0; i < stateObject.length; i++) {
            const mapElementArray = stateObject[i];
            if (!Array.isArray(mapElementArray)) {
              return false;
            }
            if (mapElementArray.length !== 2) {
              return false;
            }
            // TODO: check each entry based on the key and value IOType stateSchema, https://github.com/phetsims/tandem/issues/271
          }
          return true;
        }
      })
    }));
  }
  return cache.get(cacheKey);
}
tandemNamespace.register('MapIO', MapIO);
export default MapIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJJT1R5cGVDYWNoZSIsImNhY2hlIiwiQVJSQVlfT0ZfQVJSQVlfVkFMSURBVE9SIiwidmFsdWVUeXBlIiwiQXJyYXkiLCJpc1ZhbGlkVmFsdWUiLCJ2YWx1ZSIsImlzQXJyYXkiLCJldmVyeSIsImVsZW1lbnQiLCJNYXBJTyIsImtleVR5cGUiLCJjYWNoZUtleSIsInR5cGVOYW1lIiwiaGFzIiwic2V0IiwiTWFwIiwibWFwIiwia2V5IiwiaXNWYWx1ZVZhbGlkIiwidmFsaWRhdG9yIiwicGFyYW1ldGVyVHlwZXMiLCJ0b1N0YXRlT2JqZWN0IiwiYXJyYXkiLCJwdXNoIiwiZnJvbVN0YXRlT2JqZWN0Iiwib3V0ZXJBcnJheSIsInJlc3VsdCIsInR1cGxlIiwiZG9jdW1lbnRhdGlvbiIsInN0YXRlU2NoZW1hIiwiYXNWYWx1ZSIsInN0YXRlT2JqZWN0IiwiaSIsImxlbmd0aCIsIm1hcEVsZW1lbnRBcnJheSIsImdldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTWFwSU8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGhFVC1pTyBUeXBlIGZvciBKUydzIGJ1aWx0LWluIE1hcCB0eXBlLlxyXG4gKlxyXG4gKiBOT1RFOiBUaGlzIGhhcyBub3QgYmVlbiByZXZpZXdlZCwgdGVzdGVkIG9yIHVzZWQgaW4gcHJvZHVjdGlvbiBjb2RlIHlldC5cclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZhbGlkYXRpb24gZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9WYWxpZGF0aW9uLmpzJztcclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4uLy4uLy4uL3BoZXQtY29yZS9qcy90eXBlcy9JbnRlbnRpb25hbEFueS5qcyc7XHJcbmltcG9ydCB0YW5kZW1OYW1lc3BhY2UgZnJvbSAnLi4vdGFuZGVtTmFtZXNwYWNlLmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuL0lPVHlwZS5qcyc7XHJcbmltcG9ydCBTdGF0ZVNjaGVtYSBmcm9tICcuL1N0YXRlU2NoZW1hLmpzJztcclxuaW1wb3J0IElPVHlwZUNhY2hlIGZyb20gJy4uL0lPVHlwZUNhY2hlLmpzJztcclxuXHJcbi8vIENhY2hlIGVhY2ggcGFyYW1ldGVyaXplZCBJT1R5cGUgc28gdGhhdCBpdCBpcyBvbmx5IGNyZWF0ZWQgb25jZS5cclxuY29uc3QgY2FjaGUgPSBuZXcgSU9UeXBlQ2FjaGU8c3RyaW5nPigpO1xyXG5cclxuY29uc3QgQVJSQVlfT0ZfQVJSQVlfVkFMSURBVE9SID0ge1xyXG4gIHZhbHVlVHlwZTogQXJyYXksXHJcbiAgaXNWYWxpZFZhbHVlOiAoIHZhbHVlOiBJbnRlbnRpb25hbEFueSApID0+IEFycmF5LmlzQXJyYXkoIHZhbHVlICkgJiYgdmFsdWUuZXZlcnkoIGVsZW1lbnQgPT4gQXJyYXkuaXNBcnJheSggZWxlbWVudCApIClcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIE1hcFN0YXRlT2JqZWN0PEtTdGF0ZSwgVlN0YXRlPiA9IEFycmF5PFsgS1N0YXRlLCBWU3RhdGUgXT47XHJcblxyXG4vKipcclxuICogUGFyYW1ldHJpYyBJT1R5cGUgY29uc3RydWN0b3IuICBHaXZlbiBhbiBlbGVtZW50IHR5cGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBhcHByb3ByaWF0ZSBtYXAgSU9UeXBlLlxyXG4gKiBUaGlzIGNhY2hpbmcgaW1wbGVtZW50YXRpb24gc2hvdWxkIGJlIGtlcHQgaW4gc3luYyB3aXRoIHRoZSBvdGhlciBwYXJhbWV0cmljIElPVHlwZSBjYWNoaW5nIGltcGxlbWVudGF0aW9ucy5cclxuICovXHJcbmZ1bmN0aW9uIE1hcElPPEtUeXBlLCBLU3RhdGVUeXBlLCBWVHlwZSwgVlN0YXRlVHlwZT4oIGtleVR5cGU6IElPVHlwZTxLVHlwZSwgS1N0YXRlVHlwZT4sIHZhbHVlVHlwZTogSU9UeXBlPFZUeXBlLCBWU3RhdGVUeXBlPiApOiBJT1R5cGUge1xyXG5cclxuICBjb25zdCBjYWNoZUtleSA9IGtleVR5cGUudHlwZU5hbWUgKyAnLCcgKyB2YWx1ZVR5cGUudHlwZU5hbWU7XHJcbiAgaWYgKCAhY2FjaGUuaGFzKCBjYWNoZUtleSApICkge1xyXG5cclxuICAgIGNhY2hlLnNldCggY2FjaGVLZXksIG5ldyBJT1R5cGU8TWFwPEtUeXBlLCBWVHlwZT4sIFsgS1N0YXRlVHlwZSwgVlN0YXRlVHlwZSBdW10+KCBgTWFwSU88JHtrZXlUeXBlLnR5cGVOYW1lfSwke3ZhbHVlVHlwZS50eXBlTmFtZX0+YCwge1xyXG4gICAgICB2YWx1ZVR5cGU6IE1hcCxcclxuICAgICAgaXNWYWxpZFZhbHVlOiBtYXAgPT4ge1xyXG4gICAgICAgIGZvciAoIGNvbnN0IFsga2V5LCB2YWx1ZSBdIG9mIG1hcCApIHtcclxuICAgICAgICAgIGlmICggIVZhbGlkYXRpb24uaXNWYWx1ZVZhbGlkKCBrZXksIGtleVR5cGUudmFsaWRhdG9yICkgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlmICggIVZhbGlkYXRpb24uaXNWYWx1ZVZhbGlkKCB2YWx1ZSwgdmFsdWVUeXBlLnZhbGlkYXRvciApICkge1xyXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHJldHVybiB0cnVlO1xyXG4gICAgICB9LFxyXG4gICAgICBwYXJhbWV0ZXJUeXBlczogWyBrZXlUeXBlLCB2YWx1ZVR5cGUgXSxcclxuICAgICAgdG9TdGF0ZU9iamVjdDogbWFwID0+IHtcclxuICAgICAgICBjb25zdCBhcnJheTogTWFwU3RhdGVPYmplY3Q8S1N0YXRlVHlwZSwgVlN0YXRlVHlwZT4gPSBbXTtcclxuICAgICAgICBmb3IgKCBjb25zdCBbIGtleSwgdmFsdWUgXSBvZiBtYXAgKSB7XHJcbiAgICAgICAgICBhcnJheS5wdXNoKCBbIGtleVR5cGUudG9TdGF0ZU9iamVjdCgga2V5ICksIHZhbHVlVHlwZS50b1N0YXRlT2JqZWN0KCB2YWx1ZSApIF0gKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgcmV0dXJuIGFycmF5O1xyXG4gICAgICB9LFxyXG4gICAgICBmcm9tU3RhdGVPYmplY3Q6IG91dGVyQXJyYXkgPT4ge1xyXG4gICAgICAgIGNvbnN0IHJlc3VsdCA9IG91dGVyQXJyYXkubWFwKCB0dXBsZSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gWyBrZXlUeXBlLmZyb21TdGF0ZU9iamVjdCggdHVwbGVbIDAgXSApLCB2YWx1ZVR5cGUuZnJvbVN0YXRlT2JqZWN0KCB0dXBsZVsgMSBdICkgXTtcclxuICAgICAgICB9ICk7XHJcblxyXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3Igbm90IHN1cmUgaG93IHRvIGRlbW9uc3RyYXRlIHRoYXQgdGhlIGFyZ3VtZW50IGlzIHJlYWRvbmx5LCBzaW5jZSBpdCBpcyBkeW5hbWljYWxseSBjcmVhdGVkXHJcbiAgICAgICAgcmV0dXJuIG5ldyBNYXAoIHJlc3VsdCApO1xyXG4gICAgICB9LFxyXG4gICAgICBkb2N1bWVudGF0aW9uOiAnUGhFVC1pTyBUeXBlIGZvciB0aGUgYnVpbHQtaW4gSlMgTWFwIHR5cGUsIHdpdGggdGhlIGtleSBhbmQgdmFsdWUgdHlwZXMgc3BlY2lmaWVkLicsXHJcbiAgICAgIHN0YXRlU2NoZW1hOiBTdGF0ZVNjaGVtYS5hc1ZhbHVlKCBgTWFwPCR7a2V5VHlwZS50eXBlTmFtZX0sJHt2YWx1ZVR5cGUudHlwZU5hbWV9PmAsIHtcclxuICAgICAgICBpc1ZhbGlkVmFsdWU6IHN0YXRlT2JqZWN0ID0+IHtcclxuICAgICAgICAgIGlmICggIVZhbGlkYXRpb24uaXNWYWx1ZVZhbGlkKCBzdGF0ZU9iamVjdCwgQVJSQVlfT0ZfQVJSQVlfVkFMSURBVE9SICkgKSB7XHJcbiAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHN0YXRlT2JqZWN0Lmxlbmd0aDsgaSsrICkge1xyXG4gICAgICAgICAgICBjb25zdCBtYXBFbGVtZW50QXJyYXkgPSBzdGF0ZU9iamVjdFsgaSBdO1xyXG4gICAgICAgICAgICBpZiAoICFBcnJheS5pc0FycmF5KCBtYXBFbGVtZW50QXJyYXkgKSApIHtcclxuICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaWYgKCBtYXBFbGVtZW50QXJyYXkubGVuZ3RoICE9PSAyICkge1xyXG4gICAgICAgICAgICAgIHJldHVybiBmYWxzZTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAvLyBUT0RPOiBjaGVjayBlYWNoIGVudHJ5IGJhc2VkIG9uIHRoZSBrZXkgYW5kIHZhbHVlIElPVHlwZSBzdGF0ZVNjaGVtYSwgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3RhbmRlbS9pc3N1ZXMvMjcxXHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICByZXR1cm4gdHJ1ZTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKVxyXG4gICAgfSApICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gY2FjaGUuZ2V0KCBjYWNoZUtleSApITtcclxufVxyXG5cclxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnTWFwSU8nLCBNYXBJTyApO1xyXG5leHBvcnQgZGVmYXVsdCBNYXBJTzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGdDQUFnQztBQUV2RCxPQUFP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