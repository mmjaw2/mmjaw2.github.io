// Copyright 2018-2024, University of Colorado Boulder

/**
 * PhET-iO Type for JS's built-in number type, but adds explicit support for positive and negative infinity.
 * Typical use cases should use NumberIO, but if you have a case that must support infinities, please
 * use this instead.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
const InfiniteNumberIO = new IOType('InfiniteNumberIO', {
  valueType: 'number',
  documentation: 'PhET-iO Type for Javascript\'s number primitive type',
  toStateObject: value => value === Number.POSITIVE_INFINITY ? 'POSITIVE_INFINITY' : value === Number.NEGATIVE_INFINITY ? 'NEGATIVE_INFINITY' : value,
  fromStateObject: stateObject => stateObject === 'POSITIVE_INFINITY' ? Number.POSITIVE_INFINITY : stateObject === 'NEGATIVE_INFINITY' ? Number.NEGATIVE_INFINITY : stateObject,
  stateSchema: StateSchema.asValue('\'POSITIVE_INFINITY\'|\'NEGATIVE_INFINITY\'|number', {
    isValidValue: value => value === 'POSITIVE_INFINITY' || value === 'NEGATIVE_INFINITY' || typeof value === 'number' && !isNaN(value)
  })
});
tandemNamespace.register('InfiniteNumberIO', InfiniteNumberIO);
export default InfiniteNumberIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsIkluZmluaXRlTnVtYmVySU8iLCJ2YWx1ZVR5cGUiLCJkb2N1bWVudGF0aW9uIiwidG9TdGF0ZU9iamVjdCIsInZhbHVlIiwiTnVtYmVyIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJORUdBVElWRV9JTkZJTklUWSIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0Iiwic3RhdGVTY2hlbWEiLCJhc1ZhbHVlIiwiaXNWYWxpZFZhbHVlIiwiaXNOYU4iLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIkluZmluaXRlTnVtYmVySU8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGhFVC1pTyBUeXBlIGZvciBKUydzIGJ1aWx0LWluIG51bWJlciB0eXBlLCBidXQgYWRkcyBleHBsaWNpdCBzdXBwb3J0IGZvciBwb3NpdGl2ZSBhbmQgbmVnYXRpdmUgaW5maW5pdHkuXHJcbiAqIFR5cGljYWwgdXNlIGNhc2VzIHNob3VsZCB1c2UgTnVtYmVySU8sIGJ1dCBpZiB5b3UgaGF2ZSBhIGNhc2UgdGhhdCBtdXN0IHN1cHBvcnQgaW5maW5pdGllcywgcGxlYXNlXHJcbiAqIHVzZSB0aGlzIGluc3RlYWQuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi9JT1R5cGUuanMnO1xyXG5pbXBvcnQgU3RhdGVTY2hlbWEgZnJvbSAnLi9TdGF0ZVNjaGVtYS5qcyc7XHJcblxyXG5leHBvcnQgdHlwZSBJbmZpbml0ZU51bWJlclN0YXRlT2JqZWN0ID0gbnVtYmVyIHwgJ1BPU0lUSVZFX0lORklOSVRZJyB8ICdORUdBVElWRV9JTkZJTklUWSc7XHJcblxyXG5jb25zdCBJbmZpbml0ZU51bWJlcklPID0gbmV3IElPVHlwZTxudW1iZXIsIEluZmluaXRlTnVtYmVyU3RhdGVPYmplY3Q+KCAnSW5maW5pdGVOdW1iZXJJTycsIHtcclxuICB2YWx1ZVR5cGU6ICdudW1iZXInLFxyXG4gIGRvY3VtZW50YXRpb246ICdQaEVULWlPIFR5cGUgZm9yIEphdmFzY3JpcHRcXCdzIG51bWJlciBwcmltaXRpdmUgdHlwZScsXHJcbiAgdG9TdGF0ZU9iamVjdDogdmFsdWUgPT4gdmFsdWUgPT09IE51bWJlci5QT1NJVElWRV9JTkZJTklUWSA/ICdQT1NJVElWRV9JTkZJTklUWScgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgIHZhbHVlID09PSBOdW1iZXIuTkVHQVRJVkVfSU5GSU5JVFkgPyAnTkVHQVRJVkVfSU5GSU5JVFknIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICB2YWx1ZSxcclxuICBmcm9tU3RhdGVPYmplY3Q6IHN0YXRlT2JqZWN0ID0+IHN0YXRlT2JqZWN0ID09PSAnUE9TSVRJVkVfSU5GSU5JVFknID8gTnVtYmVyLlBPU0lUSVZFX0lORklOSVRZIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlT2JqZWN0ID09PSAnTkVHQVRJVkVfSU5GSU5JVFknID8gTnVtYmVyLk5FR0FUSVZFX0lORklOSVRZIDpcclxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIHN0YXRlT2JqZWN0LFxyXG4gIHN0YXRlU2NoZW1hOiBTdGF0ZVNjaGVtYS5hc1ZhbHVlPG51bWJlciwgSW5maW5pdGVOdW1iZXJTdGF0ZU9iamVjdD4oICdcXCdQT1NJVElWRV9JTkZJTklUWVxcJ3xcXCdORUdBVElWRV9JTkZJTklUWVxcJ3xudW1iZXInLCB7XHJcbiAgICBpc1ZhbGlkVmFsdWU6ICggdmFsdWU6IEluZmluaXRlTnVtYmVyU3RhdGVPYmplY3QgKSA9PiB2YWx1ZSA9PT0gJ1BPU0lUSVZFX0lORklOSVRZJyB8fCB2YWx1ZSA9PT0gJ05FR0FUSVZFX0lORklOSVRZJyB8fCAoIHR5cGVvZiB2YWx1ZSA9PT0gJ251bWJlcicgJiYgIWlzTmFOKCB2YWx1ZSApIClcclxuICB9IClcclxufSApO1xyXG5cclxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnSW5maW5pdGVOdW1iZXJJTycsIEluZmluaXRlTnVtYmVySU8gKTtcclxuZXhwb3J0IGRlZmF1bHQgSW5maW5pdGVOdW1iZXJJTzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBSTFDLE1BQU1DLGdCQUFnQixHQUFHLElBQUlGLE1BQU0sQ0FBcUMsa0JBQWtCLEVBQUU7RUFDMUZHLFNBQVMsRUFBRSxRQUFRO0VBQ25CQyxhQUFhLEVBQUUsc0RBQXNEO0VBQ3JFQyxhQUFhLEVBQUVDLEtBQUssSUFBSUEsS0FBSyxLQUFLQyxNQUFNLENBQUNDLGlCQUFpQixHQUFHLG1CQUFtQixHQUN4REYsS0FBSyxLQUFLQyxNQUFNLENBQUNFLGlCQUFpQixHQUFHLG1CQUFtQixHQUN4REgsS0FBSztFQUM3QkksZUFBZSxFQUFFQyxXQUFXLElBQUlBLFdBQVcsS0FBSyxtQkFBbUIsR0FBR0osTUFBTSxDQUFDQyxpQkFBaUIsR0FDOURHLFdBQVcsS0FBSyxtQkFBbUIsR0FBR0osTUFBTSxDQUFDRSxpQkFBaUIsR0FDOURFLFdBQVc7RUFDM0NDLFdBQVcsRUFBRVgsV0FBVyxDQUFDWSxPQUFPLENBQXFDLG9EQUFvRCxFQUFFO0lBQ3pIQyxZQUFZLEVBQUlSLEtBQWdDLElBQU1BLEtBQUssS0FBSyxtQkFBbUIsSUFBSUEsS0FBSyxLQUFLLG1CQUFtQixJQUFNLE9BQU9BLEtBQUssS0FBSyxRQUFRLElBQUksQ0FBQ1MsS0FBSyxDQUFFVCxLQUFNO0VBQ3ZLLENBQUU7QUFDSixDQUFFLENBQUM7QUFFSFAsZUFBZSxDQUFDaUIsUUFBUSxDQUFFLGtCQUFrQixFQUFFZCxnQkFBaUIsQ0FBQztBQUNoRSxlQUFlQSxnQkFBZ0IiLCJpZ25vcmVMaXN0IjpbXX0=