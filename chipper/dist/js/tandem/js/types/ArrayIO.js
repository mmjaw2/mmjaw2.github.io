// Copyright 2018-2024, University of Colorado Boulder

/**
 * PhET-iO Type for JS's built-in Array type.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Andrew Adare (PhET Interactive Simulations)
 */

import Validation from '../../../axon/js/Validation.js';
import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
import IOTypeCache from '../IOTypeCache.js';

// Cache each parameterized IOType so that it is only created once.
const cache = new IOTypeCache();

/**
 * Parametric IOType constructor.  Given an element type, this function returns an appropriate array IOType.
 * This caching implementation should be kept in sync with the other parametric IOType caching implementations.
 */
const ArrayIO = parameterType => {
  assert && assert(!!parameterType, 'parameterType should be defined');
  if (!cache.has(parameterType)) {
    cache.set(parameterType, new IOType(`ArrayIO<${parameterType.typeName}>`, {
      valueType: Array,
      isValidValue: array => {
        return _.every(array, element => Validation.isValueValid(element, parameterType.validator));
      },
      parameterTypes: [parameterType],
      toStateObject: array => array.map(parameterType.toStateObject),
      fromStateObject: stateObject => stateObject.map(parameterType.fromStateObject),
      documentation: 'PhET-iO Type for the built-in JS array type, with the element type specified.',
      stateSchema: StateSchema.asValue(`Array<${parameterType.typeName}>`, {
        isValidValue: array => _.every(array, element => parameterType.isStateObjectValid(element))
      })
    }));
  }
  return cache.get(parameterType);
};
tandemNamespace.register('ArrayIO', ArrayIO);
export default ArrayIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJJT1R5cGVDYWNoZSIsImNhY2hlIiwiQXJyYXlJTyIsInBhcmFtZXRlclR5cGUiLCJhc3NlcnQiLCJoYXMiLCJzZXQiLCJ0eXBlTmFtZSIsInZhbHVlVHlwZSIsIkFycmF5IiwiaXNWYWxpZFZhbHVlIiwiYXJyYXkiLCJfIiwiZXZlcnkiLCJlbGVtZW50IiwiaXNWYWx1ZVZhbGlkIiwidmFsaWRhdG9yIiwicGFyYW1ldGVyVHlwZXMiLCJ0b1N0YXRlT2JqZWN0IiwibWFwIiwiZnJvbVN0YXRlT2JqZWN0Iiwic3RhdGVPYmplY3QiLCJkb2N1bWVudGF0aW9uIiwic3RhdGVTY2hlbWEiLCJhc1ZhbHVlIiwiaXNTdGF0ZU9iamVjdFZhbGlkIiwiZ2V0IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBcnJheUlPLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFBoRVQtaU8gVHlwZSBmb3IgSlMncyBidWlsdC1pbiBBcnJheSB0eXBlLlxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKiBAYXV0aG9yIEFuZHJldyBBZGFyZSAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVmFsaWRhdGlvbiBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1ZhbGlkYXRpb24uanMnO1xyXG5pbXBvcnQgdGFuZGVtTmFtZXNwYWNlIGZyb20gJy4uL3RhbmRlbU5hbWVzcGFjZS5qcyc7XHJcbmltcG9ydCBJT1R5cGUgZnJvbSAnLi9JT1R5cGUuanMnO1xyXG5pbXBvcnQgU3RhdGVTY2hlbWEgZnJvbSAnLi9TdGF0ZVNjaGVtYS5qcyc7XHJcbmltcG9ydCBJT1R5cGVDYWNoZSBmcm9tICcuLi9JT1R5cGVDYWNoZS5qcyc7XHJcblxyXG4vLyBDYWNoZSBlYWNoIHBhcmFtZXRlcml6ZWQgSU9UeXBlIHNvIHRoYXQgaXQgaXMgb25seSBjcmVhdGVkIG9uY2UuXHJcbmNvbnN0IGNhY2hlID0gbmV3IElPVHlwZUNhY2hlKCk7XHJcblxyXG4vKipcclxuICogUGFyYW1ldHJpYyBJT1R5cGUgY29uc3RydWN0b3IuICBHaXZlbiBhbiBlbGVtZW50IHR5cGUsIHRoaXMgZnVuY3Rpb24gcmV0dXJucyBhbiBhcHByb3ByaWF0ZSBhcnJheSBJT1R5cGUuXHJcbiAqIFRoaXMgY2FjaGluZyBpbXBsZW1lbnRhdGlvbiBzaG91bGQgYmUga2VwdCBpbiBzeW5jIHdpdGggdGhlIG90aGVyIHBhcmFtZXRyaWMgSU9UeXBlIGNhY2hpbmcgaW1wbGVtZW50YXRpb25zLlxyXG4gKi9cclxuY29uc3QgQXJyYXlJTyA9IDxQYXJhbWV0ZXJUeXBlLCBQYXJhbWV0ZXJTdGF0ZVR5cGU+KCBwYXJhbWV0ZXJUeXBlOiBJT1R5cGU8UGFyYW1ldGVyVHlwZSwgUGFyYW1ldGVyU3RhdGVUeXBlPiApOiBJT1R5cGU8UGFyYW1ldGVyVHlwZVtdLCBQYXJhbWV0ZXJTdGF0ZVR5cGVbXT4gPT4ge1xyXG4gIGFzc2VydCAmJiBhc3NlcnQoICEhcGFyYW1ldGVyVHlwZSwgJ3BhcmFtZXRlclR5cGUgc2hvdWxkIGJlIGRlZmluZWQnICk7XHJcbiAgaWYgKCAhY2FjaGUuaGFzKCBwYXJhbWV0ZXJUeXBlICkgKSB7XHJcbiAgICBjYWNoZS5zZXQoIHBhcmFtZXRlclR5cGUsIG5ldyBJT1R5cGU8UGFyYW1ldGVyVHlwZVtdLCBQYXJhbWV0ZXJTdGF0ZVR5cGVbXT4oIGBBcnJheUlPPCR7cGFyYW1ldGVyVHlwZS50eXBlTmFtZX0+YCwge1xyXG4gICAgICB2YWx1ZVR5cGU6IEFycmF5LFxyXG4gICAgICBpc1ZhbGlkVmFsdWU6IGFycmF5ID0+IHtcclxuICAgICAgICByZXR1cm4gXy5ldmVyeSggYXJyYXksIGVsZW1lbnQgPT4gVmFsaWRhdGlvbi5pc1ZhbHVlVmFsaWQoIGVsZW1lbnQsIHBhcmFtZXRlclR5cGUudmFsaWRhdG9yICkgKTtcclxuICAgICAgfSxcclxuICAgICAgcGFyYW1ldGVyVHlwZXM6IFsgcGFyYW1ldGVyVHlwZSBdLFxyXG4gICAgICB0b1N0YXRlT2JqZWN0OiBhcnJheSA9PiBhcnJheS5tYXAoIHBhcmFtZXRlclR5cGUudG9TdGF0ZU9iamVjdCApLFxyXG4gICAgICBmcm9tU3RhdGVPYmplY3Q6IHN0YXRlT2JqZWN0ID0+IHN0YXRlT2JqZWN0Lm1hcCggcGFyYW1ldGVyVHlwZS5mcm9tU3RhdGVPYmplY3QgKSxcclxuICAgICAgZG9jdW1lbnRhdGlvbjogJ1BoRVQtaU8gVHlwZSBmb3IgdGhlIGJ1aWx0LWluIEpTIGFycmF5IHR5cGUsIHdpdGggdGhlIGVsZW1lbnQgdHlwZSBzcGVjaWZpZWQuJyxcclxuICAgICAgc3RhdGVTY2hlbWE6IFN0YXRlU2NoZW1hLmFzVmFsdWUoIGBBcnJheTwke3BhcmFtZXRlclR5cGUudHlwZU5hbWV9PmAsIHtcclxuICAgICAgICBpc1ZhbGlkVmFsdWU6IGFycmF5ID0+IF8uZXZlcnkoIGFycmF5LCBlbGVtZW50ID0+IHBhcmFtZXRlclR5cGUuaXNTdGF0ZU9iamVjdFZhbGlkKCBlbGVtZW50ICkgKVxyXG4gICAgICB9IClcclxuICAgIH0gKSApO1xyXG4gIH1cclxuXHJcbiAgcmV0dXJuIGNhY2hlLmdldCggcGFyYW1ldGVyVHlwZSApITtcclxufTtcclxuXHJcbnRhbmRlbU5hbWVzcGFjZS5yZWdpc3RlciggJ0FycmF5SU8nLCBBcnJheUlPICk7XHJcbmV4cG9ydCBkZWZhdWx0IEFycmF5SU87Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsVUFBVSxNQUFNLGdDQUFnQztBQUN2RCxPQUFPQyxlQUFlLE1BQU0sdUJBQXVCO0FBQ25ELE9BQU9DLE1BQU0sTUFBTSxhQUFhO0FBQ2hDLE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MsV0FBVyxNQUFNLG1CQUFtQjs7QUFFM0M7QUFDQSxNQUFNQyxLQUFLLEdBQUcsSUFBSUQsV0FBVyxDQUFDLENBQUM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTUUsT0FBTyxHQUF3Q0MsYUFBd0QsSUFBcUQ7RUFDaEtDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsQ0FBQ0QsYUFBYSxFQUFFLGlDQUFrQyxDQUFDO0VBQ3RFLElBQUssQ0FBQ0YsS0FBSyxDQUFDSSxHQUFHLENBQUVGLGFBQWMsQ0FBQyxFQUFHO0lBQ2pDRixLQUFLLENBQUNLLEdBQUcsQ0FBRUgsYUFBYSxFQUFFLElBQUlMLE1BQU0sQ0FBMEMsV0FBVUssYUFBYSxDQUFDSSxRQUFTLEdBQUUsRUFBRTtNQUNqSEMsU0FBUyxFQUFFQyxLQUFLO01BQ2hCQyxZQUFZLEVBQUVDLEtBQUssSUFBSTtRQUNyQixPQUFPQyxDQUFDLENBQUNDLEtBQUssQ0FBRUYsS0FBSyxFQUFFRyxPQUFPLElBQUlsQixVQUFVLENBQUNtQixZQUFZLENBQUVELE9BQU8sRUFBRVgsYUFBYSxDQUFDYSxTQUFVLENBQUUsQ0FBQztNQUNqRyxDQUFDO01BQ0RDLGNBQWMsRUFBRSxDQUFFZCxhQUFhLENBQUU7TUFDakNlLGFBQWEsRUFBRVAsS0FBSyxJQUFJQSxLQUFLLENBQUNRLEdBQUcsQ0FBRWhCLGFBQWEsQ0FBQ2UsYUFBYyxDQUFDO01BQ2hFRSxlQUFlLEVBQUVDLFdBQVcsSUFBSUEsV0FBVyxDQUFDRixHQUFHLENBQUVoQixhQUFhLENBQUNpQixlQUFnQixDQUFDO01BQ2hGRSxhQUFhLEVBQUUsK0VBQStFO01BQzlGQyxXQUFXLEVBQUV4QixXQUFXLENBQUN5QixPQUFPLENBQUcsU0FBUXJCLGFBQWEsQ0FBQ0ksUUFBUyxHQUFFLEVBQUU7UUFDcEVHLFlBQVksRUFBRUMsS0FBSyxJQUFJQyxDQUFDLENBQUNDLEtBQUssQ0FBRUYsS0FBSyxFQUFFRyxPQUFPLElBQUlYLGFBQWEsQ0FBQ3NCLGtCQUFrQixDQUFFWCxPQUFRLENBQUU7TUFDaEcsQ0FBRTtJQUNKLENBQUUsQ0FBRSxDQUFDO0VBQ1A7RUFFQSxPQUFPYixLQUFLLENBQUN5QixHQUFHLENBQUV2QixhQUFjLENBQUM7QUFDbkMsQ0FBQztBQUVETixlQUFlLENBQUM4QixRQUFRLENBQUUsU0FBUyxFQUFFekIsT0FBUSxDQUFDO0FBQzlDLGVBQWVBLE9BQU8iLCJpZ25vcmVMaXN0IjpbXX0=