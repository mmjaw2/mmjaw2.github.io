// Copyright 2018-2024, University of Colorado Boulder

/**
 * Parametric IOType that adds support for null values in toStateObject/fromStateObject. This type is to
 * prevent the propagation of null handling, mainly in to/fromStateObject, in each type. This also makes null
 * explicit for phet-io.
 *
 * Sample usage:
 *
 *  this.ageProperty = new Property( null, {
 *    tandem: tandem.createTandem( 'ageProperty' ),
 *    phetioValueType: NullableIO( NumberIO ) // signifies that the Property can be Number or null
 * } );
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import Validation from '../../../axon/js/Validation.js';
import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
import IOTypeCache from '../IOTypeCache.js';

// Cache each parameterized IOType so that it is only created once
const cache = new IOTypeCache();
const NullableIO = parameterType => {
  assert && assert(parameterType, 'NullableIO needs parameterType');
  if (!cache.has(parameterType)) {
    cache.set(parameterType, new IOType(`NullableIO<${parameterType.typeName}>`, {
      documentation: 'A PhET-iO Type adding support for null in addition to the behavior of its parameter.',
      isValidValue: instance => instance === null || Validation.isValueValid(instance, parameterType.validator),
      parameterTypes: [parameterType],
      // If the argument is null, returns null. Otherwise, converts the instance to a state object for serialization.
      toStateObject: instance => instance === null ? null : parameterType.toStateObject(instance),
      // If the argument is null, returns null. Otherwise, converts a state object to an instance of the underlying type.
      fromStateObject: stateObject => stateObject === null ? null : parameterType.fromStateObject(stateObject),
      stateSchema: StateSchema.asValue(`null|<${parameterType.typeName}>`, {
        isValidValue: value => value === null || parameterType.isStateObjectValid(value)
      })
    }));
  }
  return cache.get(parameterType);
};
tandemNamespace.register('NullableIO', NullableIO);
export default NullableIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJWYWxpZGF0aW9uIiwidGFuZGVtTmFtZXNwYWNlIiwiSU9UeXBlIiwiU3RhdGVTY2hlbWEiLCJJT1R5cGVDYWNoZSIsImNhY2hlIiwiTnVsbGFibGVJTyIsInBhcmFtZXRlclR5cGUiLCJhc3NlcnQiLCJoYXMiLCJzZXQiLCJ0eXBlTmFtZSIsImRvY3VtZW50YXRpb24iLCJpc1ZhbGlkVmFsdWUiLCJpbnN0YW5jZSIsImlzVmFsdWVWYWxpZCIsInZhbGlkYXRvciIsInBhcmFtZXRlclR5cGVzIiwidG9TdGF0ZU9iamVjdCIsImZyb21TdGF0ZU9iamVjdCIsInN0YXRlT2JqZWN0Iiwic3RhdGVTY2hlbWEiLCJhc1ZhbHVlIiwidmFsdWUiLCJpc1N0YXRlT2JqZWN0VmFsaWQiLCJnZXQiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIk51bGxhYmxlSU8udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUGFyYW1ldHJpYyBJT1R5cGUgdGhhdCBhZGRzIHN1cHBvcnQgZm9yIG51bGwgdmFsdWVzIGluIHRvU3RhdGVPYmplY3QvZnJvbVN0YXRlT2JqZWN0LiBUaGlzIHR5cGUgaXMgdG9cclxuICogcHJldmVudCB0aGUgcHJvcGFnYXRpb24gb2YgbnVsbCBoYW5kbGluZywgbWFpbmx5IGluIHRvL2Zyb21TdGF0ZU9iamVjdCwgaW4gZWFjaCB0eXBlLiBUaGlzIGFsc28gbWFrZXMgbnVsbFxyXG4gKiBleHBsaWNpdCBmb3IgcGhldC1pby5cclxuICpcclxuICogU2FtcGxlIHVzYWdlOlxyXG4gKlxyXG4gKiAgdGhpcy5hZ2VQcm9wZXJ0eSA9IG5ldyBQcm9wZXJ0eSggbnVsbCwge1xyXG4gKiAgICB0YW5kZW06IHRhbmRlbS5jcmVhdGVUYW5kZW0oICdhZ2VQcm9wZXJ0eScgKSxcclxuICogICAgcGhldGlvVmFsdWVUeXBlOiBOdWxsYWJsZUlPKCBOdW1iZXJJTyApIC8vIHNpZ25pZmllcyB0aGF0IHRoZSBQcm9wZXJ0eSBjYW4gYmUgTnVtYmVyIG9yIG51bGxcclxuICogfSApO1xyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFZhbGlkYXRpb24gZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9WYWxpZGF0aW9uLmpzJztcclxuaW1wb3J0IHRhbmRlbU5hbWVzcGFjZSBmcm9tICcuLi90YW5kZW1OYW1lc3BhY2UuanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcclxuaW1wb3J0IFN0YXRlU2NoZW1hIGZyb20gJy4vU3RhdGVTY2hlbWEuanMnO1xyXG5pbXBvcnQgSU9UeXBlQ2FjaGUgZnJvbSAnLi4vSU9UeXBlQ2FjaGUuanMnO1xyXG5cclxuLy8gQ2FjaGUgZWFjaCBwYXJhbWV0ZXJpemVkIElPVHlwZSBzbyB0aGF0IGl0IGlzIG9ubHkgY3JlYXRlZCBvbmNlXHJcbmNvbnN0IGNhY2hlID0gbmV3IElPVHlwZUNhY2hlKCk7XHJcblxyXG5jb25zdCBOdWxsYWJsZUlPID0gPFBhcmFtZXRlclR5cGUsIFBhcmFtZXRlclN0YXRlVHlwZSBleHRlbmRzIFBhdHRlcm5TdGF0ZVNlbGZUeXBlLCBQYXR0ZXJuU3RhdGVTZWxmVHlwZT4oIHBhcmFtZXRlclR5cGU6IElPVHlwZTxQYXJhbWV0ZXJUeXBlLCBQYXJhbWV0ZXJTdGF0ZVR5cGUsIFBhdHRlcm5TdGF0ZVNlbGZUeXBlPiApOiBJT1R5cGUgPT4ge1xyXG5cclxuICBhc3NlcnQgJiYgYXNzZXJ0KCBwYXJhbWV0ZXJUeXBlLCAnTnVsbGFibGVJTyBuZWVkcyBwYXJhbWV0ZXJUeXBlJyApO1xyXG5cclxuICBpZiAoICFjYWNoZS5oYXMoIHBhcmFtZXRlclR5cGUgKSApIHtcclxuICAgIGNhY2hlLnNldCggcGFyYW1ldGVyVHlwZSwgbmV3IElPVHlwZTxQYXJhbWV0ZXJUeXBlIHwgbnVsbCwgUGFyYW1ldGVyU3RhdGVUeXBlIHwgbnVsbD4oIGBOdWxsYWJsZUlPPCR7cGFyYW1ldGVyVHlwZS50eXBlTmFtZX0+YCwge1xyXG4gICAgICBkb2N1bWVudGF0aW9uOiAnQSBQaEVULWlPIFR5cGUgYWRkaW5nIHN1cHBvcnQgZm9yIG51bGwgaW4gYWRkaXRpb24gdG8gdGhlIGJlaGF2aW9yIG9mIGl0cyBwYXJhbWV0ZXIuJyxcclxuICAgICAgaXNWYWxpZFZhbHVlOiBpbnN0YW5jZSA9PiBpbnN0YW5jZSA9PT0gbnVsbCB8fCBWYWxpZGF0aW9uLmlzVmFsdWVWYWxpZCggaW5zdGFuY2UsIHBhcmFtZXRlclR5cGUudmFsaWRhdG9yICksXHJcbiAgICAgIHBhcmFtZXRlclR5cGVzOiBbIHBhcmFtZXRlclR5cGUgXSxcclxuXHJcbiAgICAgIC8vIElmIHRoZSBhcmd1bWVudCBpcyBudWxsLCByZXR1cm5zIG51bGwuIE90aGVyd2lzZSwgY29udmVydHMgdGhlIGluc3RhbmNlIHRvIGEgc3RhdGUgb2JqZWN0IGZvciBzZXJpYWxpemF0aW9uLlxyXG4gICAgICB0b1N0YXRlT2JqZWN0OiBpbnN0YW5jZSA9PiBpbnN0YW5jZSA9PT0gbnVsbCA/IG51bGwgOiBwYXJhbWV0ZXJUeXBlLnRvU3RhdGVPYmplY3QoIGluc3RhbmNlICksXHJcblxyXG4gICAgICAvLyBJZiB0aGUgYXJndW1lbnQgaXMgbnVsbCwgcmV0dXJucyBudWxsLiBPdGhlcndpc2UsIGNvbnZlcnRzIGEgc3RhdGUgb2JqZWN0IHRvIGFuIGluc3RhbmNlIG9mIHRoZSB1bmRlcmx5aW5nIHR5cGUuXHJcbiAgICAgIGZyb21TdGF0ZU9iamVjdDogc3RhdGVPYmplY3QgPT4gc3RhdGVPYmplY3QgPT09IG51bGwgPyBudWxsIDogcGFyYW1ldGVyVHlwZS5mcm9tU3RhdGVPYmplY3QoIHN0YXRlT2JqZWN0ICksXHJcbiAgICAgIHN0YXRlU2NoZW1hOiBTdGF0ZVNjaGVtYS5hc1ZhbHVlKCBgbnVsbHw8JHtwYXJhbWV0ZXJUeXBlLnR5cGVOYW1lfT5gLCB7XHJcbiAgICAgICAgICBpc1ZhbGlkVmFsdWU6IHZhbHVlID0+IHZhbHVlID09PSBudWxsIHx8IHBhcmFtZXRlclR5cGUuaXNTdGF0ZU9iamVjdFZhbGlkKCB2YWx1ZSApXHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICB9ICkgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjYWNoZS5nZXQoIHBhcmFtZXRlclR5cGUgKSE7XHJcbn07XHJcblxyXG50YW5kZW1OYW1lc3BhY2UucmVnaXN0ZXIoICdOdWxsYWJsZUlPJywgTnVsbGFibGVJTyApO1xyXG5leHBvcnQgZGVmYXVsdCBOdWxsYWJsZUlPOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFVBQVUsTUFBTSxnQ0FBZ0M7QUFDdkQsT0FBT0MsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7O0FBRTNDO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLElBQUlELFdBQVcsQ0FBQyxDQUFDO0FBRS9CLE1BQU1FLFVBQVUsR0FBMkZDLGFBQThFLElBQWM7RUFFck1DLE1BQU0sSUFBSUEsTUFBTSxDQUFFRCxhQUFhLEVBQUUsZ0NBQWlDLENBQUM7RUFFbkUsSUFBSyxDQUFDRixLQUFLLENBQUNJLEdBQUcsQ0FBRUYsYUFBYyxDQUFDLEVBQUc7SUFDakNGLEtBQUssQ0FBQ0ssR0FBRyxDQUFFSCxhQUFhLEVBQUUsSUFBSUwsTUFBTSxDQUFvRCxjQUFhSyxhQUFhLENBQUNJLFFBQVMsR0FBRSxFQUFFO01BQzlIQyxhQUFhLEVBQUUsc0ZBQXNGO01BQ3JHQyxZQUFZLEVBQUVDLFFBQVEsSUFBSUEsUUFBUSxLQUFLLElBQUksSUFBSWQsVUFBVSxDQUFDZSxZQUFZLENBQUVELFFBQVEsRUFBRVAsYUFBYSxDQUFDUyxTQUFVLENBQUM7TUFDM0dDLGNBQWMsRUFBRSxDQUFFVixhQUFhLENBQUU7TUFFakM7TUFDQVcsYUFBYSxFQUFFSixRQUFRLElBQUlBLFFBQVEsS0FBSyxJQUFJLEdBQUcsSUFBSSxHQUFHUCxhQUFhLENBQUNXLGFBQWEsQ0FBRUosUUFBUyxDQUFDO01BRTdGO01BQ0FLLGVBQWUsRUFBRUMsV0FBVyxJQUFJQSxXQUFXLEtBQUssSUFBSSxHQUFHLElBQUksR0FBR2IsYUFBYSxDQUFDWSxlQUFlLENBQUVDLFdBQVksQ0FBQztNQUMxR0MsV0FBVyxFQUFFbEIsV0FBVyxDQUFDbUIsT0FBTyxDQUFHLFNBQVFmLGFBQWEsQ0FBQ0ksUUFBUyxHQUFFLEVBQUU7UUFDbEVFLFlBQVksRUFBRVUsS0FBSyxJQUFJQSxLQUFLLEtBQUssSUFBSSxJQUFJaEIsYUFBYSxDQUFDaUIsa0JBQWtCLENBQUVELEtBQU07TUFDbkYsQ0FDRjtJQUNGLENBQUUsQ0FBRSxDQUFDO0VBQ1A7RUFFQSxPQUFPbEIsS0FBSyxDQUFDb0IsR0FBRyxDQUFFbEIsYUFBYyxDQUFDO0FBQ25DLENBQUM7QUFFRE4sZUFBZSxDQUFDeUIsUUFBUSxDQUFFLFlBQVksRUFBRXBCLFVBQVcsQ0FBQztBQUNwRCxlQUFlQSxVQUFVIiwiaWdub3JlTGlzdCI6W119