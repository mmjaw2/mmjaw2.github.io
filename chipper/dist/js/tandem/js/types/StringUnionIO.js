// Copyright 2022-2024, University of Colorado Boulder

/**
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import tandemNamespace from '../tandemNamespace.js';
import IOType from './IOType.js';
import StateSchema from './StateSchema.js';
import IOTypeCache from '../IOTypeCache.js';

// Cache each parameterized IOType so that it is only created once
const cache = new IOTypeCache();
const StringUnionIO = unionValues => {
  assert && assert(unionValues, 'StringUnionIO needs unionValues');
  if (!cache.has(unionValues)) {
    const typeName = unionValues.join(',');
    cache.set(unionValues, new IOType(`StringUnionIO<${typeName}>`, {
      documentation: 'A PhET-iO Type validating on specific string values.',
      isValidValue: instance => unionValues.includes(instance),
      // serializing strings here
      toStateObject: _.identity,
      fromStateObject: _.identity,
      // TODO: This is the only place that has IO suffix in StateSchema.asValue, see https://github.com/phetsims/tandem/issues/306
      stateSchema: StateSchema.asValue(`StringUnionIO<${typeName}>`, {
        isValidValue: value => unionValues.includes(value)
      })
    }));
  }
  return cache.get(unionValues);
};
tandemNamespace.register('StringUnionIO', StringUnionIO);
export default StringUnionIO;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ0YW5kZW1OYW1lc3BhY2UiLCJJT1R5cGUiLCJTdGF0ZVNjaGVtYSIsIklPVHlwZUNhY2hlIiwiY2FjaGUiLCJTdHJpbmdVbmlvbklPIiwidW5pb25WYWx1ZXMiLCJhc3NlcnQiLCJoYXMiLCJ0eXBlTmFtZSIsImpvaW4iLCJzZXQiLCJkb2N1bWVudGF0aW9uIiwiaXNWYWxpZFZhbHVlIiwiaW5zdGFuY2UiLCJpbmNsdWRlcyIsInRvU3RhdGVPYmplY3QiLCJfIiwiaWRlbnRpdHkiLCJmcm9tU3RhdGVPYmplY3QiLCJzdGF0ZVNjaGVtYSIsImFzVmFsdWUiLCJ2YWx1ZSIsImdldCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiU3RyaW5nVW5pb25JTy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHRhbmRlbU5hbWVzcGFjZSBmcm9tICcuLi90YW5kZW1OYW1lc3BhY2UuanMnO1xyXG5pbXBvcnQgSU9UeXBlIGZyb20gJy4vSU9UeXBlLmpzJztcclxuaW1wb3J0IFN0YXRlU2NoZW1hIGZyb20gJy4vU3RhdGVTY2hlbWEuanMnO1xyXG5pbXBvcnQgSU9UeXBlQ2FjaGUgZnJvbSAnLi4vSU9UeXBlQ2FjaGUuanMnO1xyXG5cclxuLy8gQ2FjaGUgZWFjaCBwYXJhbWV0ZXJpemVkIElPVHlwZSBzbyB0aGF0IGl0IGlzIG9ubHkgY3JlYXRlZCBvbmNlXHJcbmNvbnN0IGNhY2hlID0gbmV3IElPVHlwZUNhY2hlPHJlYWRvbmx5IHN0cmluZ1tdPigpO1xyXG5cclxuY29uc3QgU3RyaW5nVW5pb25JTyA9IDxQYXJhbWV0ZXJUeXBlIGV4dGVuZHMgcmVhZG9ubHkgc3RyaW5nW10+KCB1bmlvblZhbHVlczogUGFyYW1ldGVyVHlwZSApOiBJT1R5cGU8UGFyYW1ldGVyVHlwZSwgc3RyaW5nPiA9PiB7XHJcblxyXG4gIGFzc2VydCAmJiBhc3NlcnQoIHVuaW9uVmFsdWVzLCAnU3RyaW5nVW5pb25JTyBuZWVkcyB1bmlvblZhbHVlcycgKTtcclxuXHJcbiAgaWYgKCAhY2FjaGUuaGFzKCB1bmlvblZhbHVlcyApICkge1xyXG4gICAgY29uc3QgdHlwZU5hbWUgPSB1bmlvblZhbHVlcy5qb2luKCAnLCcgKTtcclxuICAgIGNhY2hlLnNldCggdW5pb25WYWx1ZXMsIG5ldyBJT1R5cGU8c3RyaW5nLCBzdHJpbmc+KCBgU3RyaW5nVW5pb25JTzwke3R5cGVOYW1lfT5gLCB7XHJcbiAgICAgIGRvY3VtZW50YXRpb246ICdBIFBoRVQtaU8gVHlwZSB2YWxpZGF0aW5nIG9uIHNwZWNpZmljIHN0cmluZyB2YWx1ZXMuJyxcclxuICAgICAgaXNWYWxpZFZhbHVlOiBpbnN0YW5jZSA9PiB1bmlvblZhbHVlcy5pbmNsdWRlcyggaW5zdGFuY2UgKSxcclxuXHJcbiAgICAgIC8vIHNlcmlhbGl6aW5nIHN0cmluZ3MgaGVyZVxyXG4gICAgICB0b1N0YXRlT2JqZWN0OiBfLmlkZW50aXR5LFxyXG4gICAgICBmcm9tU3RhdGVPYmplY3Q6IF8uaWRlbnRpdHksXHJcblxyXG4gICAgICAvLyBUT0RPOiBUaGlzIGlzIHRoZSBvbmx5IHBsYWNlIHRoYXQgaGFzIElPIHN1ZmZpeCBpbiBTdGF0ZVNjaGVtYS5hc1ZhbHVlLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3RhbmRlbS9pc3N1ZXMvMzA2XHJcbiAgICAgIHN0YXRlU2NoZW1hOiBTdGF0ZVNjaGVtYS5hc1ZhbHVlKCBgU3RyaW5nVW5pb25JTzwke3R5cGVOYW1lfT5gLCB7XHJcbiAgICAgICAgICBpc1ZhbGlkVmFsdWU6IHZhbHVlID0+IHVuaW9uVmFsdWVzLmluY2x1ZGVzKCB2YWx1ZSApXHJcbiAgICAgICAgfVxyXG4gICAgICApXHJcbiAgICB9ICkgKTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjYWNoZS5nZXQoIHVuaW9uVmFsdWVzICkhO1xyXG59O1xyXG5cclxudGFuZGVtTmFtZXNwYWNlLnJlZ2lzdGVyKCAnU3RyaW5nVW5pb25JTycsIFN0cmluZ1VuaW9uSU8gKTtcclxuZXhwb3J0IGRlZmF1bHQgU3RyaW5nVW5pb25JTzsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHVCQUF1QjtBQUNuRCxPQUFPQyxNQUFNLE1BQU0sYUFBYTtBQUNoQyxPQUFPQyxXQUFXLE1BQU0sa0JBQWtCO0FBQzFDLE9BQU9DLFdBQVcsTUFBTSxtQkFBbUI7O0FBRTNDO0FBQ0EsTUFBTUMsS0FBSyxHQUFHLElBQUlELFdBQVcsQ0FBb0IsQ0FBQztBQUVsRCxNQUFNRSxhQUFhLEdBQThDQyxXQUEwQixJQUFxQztFQUU5SEMsTUFBTSxJQUFJQSxNQUFNLENBQUVELFdBQVcsRUFBRSxpQ0FBa0MsQ0FBQztFQUVsRSxJQUFLLENBQUNGLEtBQUssQ0FBQ0ksR0FBRyxDQUFFRixXQUFZLENBQUMsRUFBRztJQUMvQixNQUFNRyxRQUFRLEdBQUdILFdBQVcsQ0FBQ0ksSUFBSSxDQUFFLEdBQUksQ0FBQztJQUN4Q04sS0FBSyxDQUFDTyxHQUFHLENBQUVMLFdBQVcsRUFBRSxJQUFJTCxNQUFNLENBQW1CLGlCQUFnQlEsUUFBUyxHQUFFLEVBQUU7TUFDaEZHLGFBQWEsRUFBRSxzREFBc0Q7TUFDckVDLFlBQVksRUFBRUMsUUFBUSxJQUFJUixXQUFXLENBQUNTLFFBQVEsQ0FBRUQsUUFBUyxDQUFDO01BRTFEO01BQ0FFLGFBQWEsRUFBRUMsQ0FBQyxDQUFDQyxRQUFRO01BQ3pCQyxlQUFlLEVBQUVGLENBQUMsQ0FBQ0MsUUFBUTtNQUUzQjtNQUNBRSxXQUFXLEVBQUVsQixXQUFXLENBQUNtQixPQUFPLENBQUcsaUJBQWdCWixRQUFTLEdBQUUsRUFBRTtRQUM1REksWUFBWSxFQUFFUyxLQUFLLElBQUloQixXQUFXLENBQUNTLFFBQVEsQ0FBRU8sS0FBTTtNQUNyRCxDQUNGO0lBQ0YsQ0FBRSxDQUFFLENBQUM7RUFDUDtFQUVBLE9BQU9sQixLQUFLLENBQUNtQixHQUFHLENBQUVqQixXQUFZLENBQUM7QUFDakMsQ0FBQztBQUVETixlQUFlLENBQUN3QixRQUFRLENBQUUsZUFBZSxFQUFFbkIsYUFBYyxDQUFDO0FBQzFELGVBQWVBLGFBQWEiLCJpZ25vcmVMaXN0IjpbXX0=