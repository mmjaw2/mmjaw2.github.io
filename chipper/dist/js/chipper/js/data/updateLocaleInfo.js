// Copyright 2024, University of Colorado Boulder

/**
 * @author Matt Pennington (PhET Interactive Simulations)
 */

const child_process = require('child_process');
const fs = require('fs');
const localeInfo = require('./localeInfo');
const newLocaleInfo = {
  _comment: 'This file is automatically generated by js/data/updateLocaleInfo.js. Do not modify it directly.',
  ...localeInfo
};
fs.writeFileSync('../../data/localeInfo.json', JSON.stringify(newLocaleInfo, null, 2));
let newModuleSourceCode = `// Copyright 2015-${new Date().getFullYear()}, University of Colorado Boulder

/**
  * This file is automatically generated by js/data/updateLocaleInfo.js. Do not modify it directly.
  *
  * @author automatically generated by updateLocaleInfo.js
  */

/* eslint-env browser, node */


export default {`;

// Add properties for all locales
for (const locale in localeInfo) {
  newModuleSourceCode += `
  ${locale}: {
    name: '${localeInfo[locale].name}',
    localizedName: '${localeInfo[locale].localizedName}',
    direction: '${localeInfo[locale].direction}'
  },`;
}
// Remove the trailing comma
newModuleSourceCode = newModuleSourceCode.slice(0, -1);
// Close the object
newModuleSourceCode += '\n};';
fs.writeFileSync('./localeInfoModule.js', newModuleSourceCode);
console.log('locale info files updated');
let needsCommit = true;
try {
  // 0 exit code if there are no working copy changes from HEAD.
  child_process.execSync('git diff-index --quiet HEAD --');
} catch (e) {
  needsCommit = false;
  console.log('No locale info changes, no commit needed.');
}
if (needsCommit) {
  try {
    console.log('pulling');

    // Some devs have rebase set by default, and you cannot rebase-pull with working copy changes.
    child_process.execSync('git pull --no-rebase');
    child_process.execSync('git add ../../data/localeInfo.json');
    child_process.execSync('git add ./localeInfoModule.js');
    if (needsCommit) {
      console.log('committing');
      child_process.execSync('git commit --no-verify ../../data/localeInfo.json ./localeInfoModule.js -m "Automatically updated generated localeInfo files"');
      console.log('pushing');
      child_process.execSync('git push');
    }
  } catch (e) {
    console.error('Unable to update files in git.', e);
  }
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGlsZF9wcm9jZXNzIiwicmVxdWlyZSIsImZzIiwibG9jYWxlSW5mbyIsIm5ld0xvY2FsZUluZm8iLCJfY29tbWVudCIsIndyaXRlRmlsZVN5bmMiLCJKU09OIiwic3RyaW5naWZ5IiwibmV3TW9kdWxlU291cmNlQ29kZSIsIkRhdGUiLCJnZXRGdWxsWWVhciIsImxvY2FsZSIsIm5hbWUiLCJsb2NhbGl6ZWROYW1lIiwiZGlyZWN0aW9uIiwic2xpY2UiLCJjb25zb2xlIiwibG9nIiwibmVlZHNDb21taXQiLCJleGVjU3luYyIsImUiLCJlcnJvciJdLCJzb3VyY2VzIjpbInVwZGF0ZUxvY2FsZUluZm8uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEBhdXRob3IgTWF0dCBQZW5uaW5ndG9uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmNvbnN0IGNoaWxkX3Byb2Nlc3MgPSByZXF1aXJlKCAnY2hpbGRfcHJvY2VzcycgKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZnMnICk7XHJcbmNvbnN0IGxvY2FsZUluZm8gPSByZXF1aXJlKCAnLi9sb2NhbGVJbmZvJyApO1xyXG5cclxuY29uc3QgbmV3TG9jYWxlSW5mbyA9IHtcclxuICBfY29tbWVudDogJ1RoaXMgZmlsZSBpcyBhdXRvbWF0aWNhbGx5IGdlbmVyYXRlZCBieSBqcy9kYXRhL3VwZGF0ZUxvY2FsZUluZm8uanMuIERvIG5vdCBtb2RpZnkgaXQgZGlyZWN0bHkuJyxcclxuICAuLi5sb2NhbGVJbmZvXHJcbn07XHJcblxyXG5mcy53cml0ZUZpbGVTeW5jKCAnLi4vLi4vZGF0YS9sb2NhbGVJbmZvLmpzb24nLCBKU09OLnN0cmluZ2lmeSggbmV3TG9jYWxlSW5mbywgbnVsbCwgMiApICk7XHJcblxyXG5cclxubGV0IG5ld01vZHVsZVNvdXJjZUNvZGUgPVxyXG4gIGAvLyBDb3B5cmlnaHQgMjAxNS0ke25ldyBEYXRlKCkuZ2V0RnVsbFllYXIoKX0sIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAgKiBUaGlzIGZpbGUgaXMgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkganMvZGF0YS91cGRhdGVMb2NhbGVJbmZvLmpzLiBEbyBub3QgbW9kaWZ5IGl0IGRpcmVjdGx5LlxyXG4gICpcclxuICAqIEBhdXRob3IgYXV0b21hdGljYWxseSBnZW5lcmF0ZWQgYnkgdXBkYXRlTG9jYWxlSW5mby5qc1xyXG4gICovXHJcblxyXG4vKiBlc2xpbnQtZW52IGJyb3dzZXIsIG5vZGUgKi9cclxuXHJcblxyXG5leHBvcnQgZGVmYXVsdCB7YDtcclxuXHJcblxyXG4vLyBBZGQgcHJvcGVydGllcyBmb3IgYWxsIGxvY2FsZXNcclxuZm9yICggY29uc3QgbG9jYWxlIGluIGxvY2FsZUluZm8gKSB7XHJcbiAgbmV3TW9kdWxlU291cmNlQ29kZSArPSBgXHJcbiAgJHtsb2NhbGV9OiB7XHJcbiAgICBuYW1lOiAnJHtsb2NhbGVJbmZvWyBsb2NhbGUgXS5uYW1lfScsXHJcbiAgICBsb2NhbGl6ZWROYW1lOiAnJHtsb2NhbGVJbmZvWyBsb2NhbGUgXS5sb2NhbGl6ZWROYW1lfScsXHJcbiAgICBkaXJlY3Rpb246ICcke2xvY2FsZUluZm9bIGxvY2FsZSBdLmRpcmVjdGlvbn0nXHJcbiAgfSxgO1xyXG59XHJcbi8vIFJlbW92ZSB0aGUgdHJhaWxpbmcgY29tbWFcclxubmV3TW9kdWxlU291cmNlQ29kZSA9IG5ld01vZHVsZVNvdXJjZUNvZGUuc2xpY2UoIDAsIC0xICk7XHJcbi8vIENsb3NlIHRoZSBvYmplY3RcclxubmV3TW9kdWxlU291cmNlQ29kZSArPSAnXFxufTsnO1xyXG5cclxuXHJcbmZzLndyaXRlRmlsZVN5bmMoICcuL2xvY2FsZUluZm9Nb2R1bGUuanMnLCBuZXdNb2R1bGVTb3VyY2VDb2RlICk7XHJcbmNvbnNvbGUubG9nKCAnbG9jYWxlIGluZm8gZmlsZXMgdXBkYXRlZCcgKTtcclxuXHJcbmxldCBuZWVkc0NvbW1pdCA9IHRydWU7XHJcbnRyeSB7XHJcblxyXG4gIC8vIDAgZXhpdCBjb2RlIGlmIHRoZXJlIGFyZSBubyB3b3JraW5nIGNvcHkgY2hhbmdlcyBmcm9tIEhFQUQuXHJcbiAgY2hpbGRfcHJvY2Vzcy5leGVjU3luYyggJ2dpdCBkaWZmLWluZGV4IC0tcXVpZXQgSEVBRCAtLScgKTtcclxufVxyXG5jYXRjaCggZSApIHtcclxuICBuZWVkc0NvbW1pdCA9IGZhbHNlO1xyXG4gIGNvbnNvbGUubG9nKCAnTm8gbG9jYWxlIGluZm8gY2hhbmdlcywgbm8gY29tbWl0IG5lZWRlZC4nICk7XHJcbn1cclxuXHJcbmlmICggbmVlZHNDb21taXQgKSB7XHJcbiAgdHJ5IHtcclxuXHJcbiAgICBjb25zb2xlLmxvZyggJ3B1bGxpbmcnICk7XHJcblxyXG4gICAgLy8gU29tZSBkZXZzIGhhdmUgcmViYXNlIHNldCBieSBkZWZhdWx0LCBhbmQgeW91IGNhbm5vdCByZWJhc2UtcHVsbCB3aXRoIHdvcmtpbmcgY29weSBjaGFuZ2VzLlxyXG4gICAgY2hpbGRfcHJvY2Vzcy5leGVjU3luYyggJ2dpdCBwdWxsIC0tbm8tcmViYXNlJyApO1xyXG5cclxuICAgIGNoaWxkX3Byb2Nlc3MuZXhlY1N5bmMoICdnaXQgYWRkIC4uLy4uL2RhdGEvbG9jYWxlSW5mby5qc29uJyApO1xyXG4gICAgY2hpbGRfcHJvY2Vzcy5leGVjU3luYyggJ2dpdCBhZGQgLi9sb2NhbGVJbmZvTW9kdWxlLmpzJyApO1xyXG5cclxuICAgIGlmICggbmVlZHNDb21taXQgKSB7XHJcbiAgICAgIGNvbnNvbGUubG9nKCAnY29tbWl0dGluZycgKTtcclxuICAgICAgY2hpbGRfcHJvY2Vzcy5leGVjU3luYyggJ2dpdCBjb21taXQgLS1uby12ZXJpZnkgLi4vLi4vZGF0YS9sb2NhbGVJbmZvLmpzb24gLi9sb2NhbGVJbmZvTW9kdWxlLmpzIC1tIFwiQXV0b21hdGljYWxseSB1cGRhdGVkIGdlbmVyYXRlZCBsb2NhbGVJbmZvIGZpbGVzXCInICk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCAncHVzaGluZycgKTtcclxuICAgICAgY2hpbGRfcHJvY2Vzcy5leGVjU3luYyggJ2dpdCBwdXNoJyApO1xyXG4gICAgfVxyXG4gIH1cclxuICBjYXRjaCggZSApIHtcclxuICAgIGNvbnNvbGUuZXJyb3IoICdVbmFibGUgdG8gdXBkYXRlIGZpbGVzIGluIGdpdC4nLCBlICk7XHJcbiAgfVxyXG59Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsYUFBYSxHQUFHQyxPQUFPLENBQUUsZUFBZ0IsQ0FBQztBQUNoRCxNQUFNQyxFQUFFLEdBQUdELE9BQU8sQ0FBRSxJQUFLLENBQUM7QUFDMUIsTUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUUsY0FBZSxDQUFDO0FBRTVDLE1BQU1HLGFBQWEsR0FBRztFQUNwQkMsUUFBUSxFQUFFLGlHQUFpRztFQUMzRyxHQUFHRjtBQUNMLENBQUM7QUFFREQsRUFBRSxDQUFDSSxhQUFhLENBQUUsNEJBQTRCLEVBQUVDLElBQUksQ0FBQ0MsU0FBUyxDQUFFSixhQUFhLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBRSxDQUFDO0FBRzFGLElBQUlLLG1CQUFtQixHQUNwQixxQkFBb0IsSUFBSUMsSUFBSSxDQUFDLENBQUMsQ0FBQ0MsV0FBVyxDQUFDLENBQUU7QUFDaEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUI7O0FBR2pCO0FBQ0EsS0FBTSxNQUFNQyxNQUFNLElBQUlULFVBQVUsRUFBRztFQUNqQ00sbUJBQW1CLElBQUs7QUFDMUIsSUFBSUcsTUFBTztBQUNYLGFBQWFULFVBQVUsQ0FBRVMsTUFBTSxDQUFFLENBQUNDLElBQUs7QUFDdkMsc0JBQXNCVixVQUFVLENBQUVTLE1BQU0sQ0FBRSxDQUFDRSxhQUFjO0FBQ3pELGtCQUFrQlgsVUFBVSxDQUFFUyxNQUFNLENBQUUsQ0FBQ0csU0FBVTtBQUNqRCxLQUFLO0FBQ0w7QUFDQTtBQUNBTixtQkFBbUIsR0FBR0EsbUJBQW1CLENBQUNPLEtBQUssQ0FBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLENBQUM7QUFDeEQ7QUFDQVAsbUJBQW1CLElBQUksTUFBTTtBQUc3QlAsRUFBRSxDQUFDSSxhQUFhLENBQUUsdUJBQXVCLEVBQUVHLG1CQUFvQixDQUFDO0FBQ2hFUSxPQUFPLENBQUNDLEdBQUcsQ0FBRSwyQkFBNEIsQ0FBQztBQUUxQyxJQUFJQyxXQUFXLEdBQUcsSUFBSTtBQUN0QixJQUFJO0VBRUY7RUFDQW5CLGFBQWEsQ0FBQ29CLFFBQVEsQ0FBRSxnQ0FBaUMsQ0FBQztBQUM1RCxDQUFDLENBQ0QsT0FBT0MsQ0FBQyxFQUFHO0VBQ1RGLFdBQVcsR0FBRyxLQUFLO0VBQ25CRixPQUFPLENBQUNDLEdBQUcsQ0FBRSwyQ0FBNEMsQ0FBQztBQUM1RDtBQUVBLElBQUtDLFdBQVcsRUFBRztFQUNqQixJQUFJO0lBRUZGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLFNBQVUsQ0FBQzs7SUFFeEI7SUFDQWxCLGFBQWEsQ0FBQ29CLFFBQVEsQ0FBRSxzQkFBdUIsQ0FBQztJQUVoRHBCLGFBQWEsQ0FBQ29CLFFBQVEsQ0FBRSxvQ0FBcUMsQ0FBQztJQUM5RHBCLGFBQWEsQ0FBQ29CLFFBQVEsQ0FBRSwrQkFBZ0MsQ0FBQztJQUV6RCxJQUFLRCxXQUFXLEVBQUc7TUFDakJGLE9BQU8sQ0FBQ0MsR0FBRyxDQUFFLFlBQWEsQ0FBQztNQUMzQmxCLGFBQWEsQ0FBQ29CLFFBQVEsQ0FBRSwrSEFBZ0ksQ0FBQztNQUN6SkgsT0FBTyxDQUFDQyxHQUFHLENBQUUsU0FBVSxDQUFDO01BQ3hCbEIsYUFBYSxDQUFDb0IsUUFBUSxDQUFFLFVBQVcsQ0FBQztJQUN0QztFQUNGLENBQUMsQ0FDRCxPQUFPQyxDQUFDLEVBQUc7SUFDVEosT0FBTyxDQUFDSyxLQUFLLENBQUUsZ0NBQWdDLEVBQUVELENBQUUsQ0FBQztFQUN0RDtBQUNGIiwiaWdub3JlTGlzdCI6W119