// Copyright 2021-2024, University of Colorado Boulder

/**
 * @author Sam Reid (PhET Interactive Simulations)
 */

const fs = require('fs');
const phetioCompareAPIs = require('./phetioCompareAPIs');
const _ = require('lodash');
const jsondiffpatch = require('../../../sherpa/lib/jsondiffpatch-v0.3.11.umd').create({});
const assert = require('assert');

/**
 * Compare two sets of APIs using phetioCompareAPIs.
 *
 * @param {string[]} repos
 * @param {Object} proposedAPIs - map where key=repo, value=proposed API for that repo, from generatePhetioMacroAPI()
 * @param {Object} [options]
 * @returns {boolean} ok
 */
module.exports = async (repos, proposedAPIs, options) => {
  let ok = true;
  options = _.assignIn({
    delta: false,
    compareBreakingAPIChanges: true
  }, options);
  repos.forEach(repo => {
    const packageObject = JSON.parse(fs.readFileSync(`../${repo}/package.json`, 'utf8'));
    const phetioSection = packageObject.phet['phet-io'] || {};

    // Fails on missing file or parse error.
    const referenceAPI = JSON.parse(fs.readFileSync(`../phet-io-sim-specific/repos/${repo}/${repo}-phet-io-api.json`, 'utf8'));
    const proposedAPI = proposedAPIs[repo];
    if (!proposedAPI) {
      throw new Error(`No proposedAPI for repo: ${repo}`);
    }
    const comparisonData = phetioCompareAPIs(referenceAPI, proposedAPI, _, assert, {
      compareBreakingAPIChanges: options.compareBreakingAPIChanges,
      compareDesignedAPIChanges: !!phetioSection.compareDesignedAPIChanges // determined from the package.json flag
    });
    if (comparisonData.breakingProblems.length) {
      ok = false;
      console.error(`${repo} BREAKING PROBLEMS`);
      console.error(comparisonData.breakingProblems.join('\n'));
      console.error('\n');
    }
    if (comparisonData.designedProblems.length) {
      ok = false;
      console.error(`${repo} DESIGN PROBLEMS`);
      console.error(comparisonData.designedProblems.join('\n'));
      console.error('\n');
    }
    if (options.delta) {
      const delta = jsondiffpatch.diff(referenceAPI, proposedAPI);
      if (delta) {
        console.log(JSON.stringify(delta, null, 2));
      }
    }
  });
  return ok;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJwaGV0aW9Db21wYXJlQVBJcyIsIl8iLCJqc29uZGlmZnBhdGNoIiwiY3JlYXRlIiwiYXNzZXJ0IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcG9zIiwicHJvcG9zZWRBUElzIiwib3B0aW9ucyIsIm9rIiwiYXNzaWduSW4iLCJkZWx0YSIsImNvbXBhcmVCcmVha2luZ0FQSUNoYW5nZXMiLCJmb3JFYWNoIiwicmVwbyIsInBhY2thZ2VPYmplY3QiLCJKU09OIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJwaGV0aW9TZWN0aW9uIiwicGhldCIsInJlZmVyZW5jZUFQSSIsInByb3Bvc2VkQVBJIiwiRXJyb3IiLCJjb21wYXJpc29uRGF0YSIsImNvbXBhcmVEZXNpZ25lZEFQSUNoYW5nZXMiLCJicmVha2luZ1Byb2JsZW1zIiwibGVuZ3RoIiwiY29uc29sZSIsImVycm9yIiwiam9pbiIsImRlc2lnbmVkUHJvYmxlbXMiLCJkaWZmIiwibG9nIiwic3RyaW5naWZ5Il0sInNvdXJjZXMiOlsicGhldGlvQ29tcGFyZUFQSVNldHMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuY29uc3QgcGhldGlvQ29tcGFyZUFQSXMgPSByZXF1aXJlKCAnLi9waGV0aW9Db21wYXJlQVBJcycgKTtcclxuY29uc3QgXyA9IHJlcXVpcmUoICdsb2Rhc2gnICk7XHJcbmNvbnN0IGpzb25kaWZmcGF0Y2ggPSByZXF1aXJlKCAnLi4vLi4vLi4vc2hlcnBhL2xpYi9qc29uZGlmZnBhdGNoLXYwLjMuMTEudW1kJyApLmNyZWF0ZSgge30gKTtcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSggJ2Fzc2VydCcgKTtcclxuXHJcbi8qKlxyXG4gKiBDb21wYXJlIHR3byBzZXRzIG9mIEFQSXMgdXNpbmcgcGhldGlvQ29tcGFyZUFQSXMuXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nW119IHJlcG9zXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBwcm9wb3NlZEFQSXMgLSBtYXAgd2hlcmUga2V5PXJlcG8sIHZhbHVlPXByb3Bvc2VkIEFQSSBmb3IgdGhhdCByZXBvLCBmcm9tIGdlbmVyYXRlUGhldGlvTWFjcm9BUEkoKVxyXG4gKiBAcGFyYW0ge09iamVjdH0gW29wdGlvbnNdXHJcbiAqIEByZXR1cm5zIHtib29sZWFufSBva1xyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyAoIHJlcG9zLCBwcm9wb3NlZEFQSXMsIG9wdGlvbnMgKSA9PiB7XHJcbiAgbGV0IG9rID0gdHJ1ZTtcclxuICBvcHRpb25zID0gXy5hc3NpZ25Jbigge1xyXG4gICAgZGVsdGE6IGZhbHNlLFxyXG4gICAgY29tcGFyZUJyZWFraW5nQVBJQ2hhbmdlczogdHJ1ZVxyXG4gIH0sIG9wdGlvbnMgKTtcclxuXHJcbiAgcmVwb3MuZm9yRWFjaCggcmVwbyA9PiB7XHJcblxyXG4gICAgY29uc3QgcGFja2FnZU9iamVjdCA9IEpTT04ucGFyc2UoIGZzLnJlYWRGaWxlU3luYyggYC4uLyR7cmVwb30vcGFja2FnZS5qc29uYCwgJ3V0ZjgnICkgKTtcclxuICAgIGNvbnN0IHBoZXRpb1NlY3Rpb24gPSBwYWNrYWdlT2JqZWN0LnBoZXRbICdwaGV0LWlvJyBdIHx8IHt9O1xyXG5cclxuICAgIC8vIEZhaWxzIG9uIG1pc3NpbmcgZmlsZSBvciBwYXJzZSBlcnJvci5cclxuICAgIGNvbnN0IHJlZmVyZW5jZUFQSSA9IEpTT04ucGFyc2UoIGZzLnJlYWRGaWxlU3luYyggYC4uL3BoZXQtaW8tc2ltLXNwZWNpZmljL3JlcG9zLyR7cmVwb30vJHtyZXBvfS1waGV0LWlvLWFwaS5qc29uYCwgJ3V0ZjgnICkgKTtcclxuICAgIGNvbnN0IHByb3Bvc2VkQVBJID0gcHJvcG9zZWRBUElzWyByZXBvIF07XHJcblxyXG4gICAgaWYgKCAhcHJvcG9zZWRBUEkgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggYE5vIHByb3Bvc2VkQVBJIGZvciByZXBvOiAke3JlcG99YCApO1xyXG4gICAgfVxyXG5cclxuICAgIGNvbnN0IGNvbXBhcmlzb25EYXRhID0gcGhldGlvQ29tcGFyZUFQSXMoIHJlZmVyZW5jZUFQSSwgcHJvcG9zZWRBUEksIF8sIGFzc2VydCwge1xyXG4gICAgICBjb21wYXJlQnJlYWtpbmdBUElDaGFuZ2VzOiBvcHRpb25zLmNvbXBhcmVCcmVha2luZ0FQSUNoYW5nZXMsXHJcbiAgICAgIGNvbXBhcmVEZXNpZ25lZEFQSUNoYW5nZXM6ICEhcGhldGlvU2VjdGlvbi5jb21wYXJlRGVzaWduZWRBUElDaGFuZ2VzIC8vIGRldGVybWluZWQgZnJvbSB0aGUgcGFja2FnZS5qc29uIGZsYWdcclxuICAgIH0gKTtcclxuXHJcbiAgICBpZiAoIGNvbXBhcmlzb25EYXRhLmJyZWFraW5nUHJvYmxlbXMubGVuZ3RoICkge1xyXG4gICAgICBvayA9IGZhbHNlO1xyXG4gICAgICBjb25zb2xlLmVycm9yKCBgJHtyZXBvfSBCUkVBS0lORyBQUk9CTEVNU2AgKTtcclxuICAgICAgY29uc29sZS5lcnJvciggY29tcGFyaXNvbkRhdGEuYnJlYWtpbmdQcm9ibGVtcy5qb2luKCAnXFxuJyApICk7XHJcbiAgICAgIGNvbnNvbGUuZXJyb3IoICdcXG4nICk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCBjb21wYXJpc29uRGF0YS5kZXNpZ25lZFByb2JsZW1zLmxlbmd0aCApIHtcclxuICAgICAgb2sgPSBmYWxzZTtcclxuICAgICAgY29uc29sZS5lcnJvciggYCR7cmVwb30gREVTSUdOIFBST0JMRU1TYCApO1xyXG4gICAgICBjb25zb2xlLmVycm9yKCBjb21wYXJpc29uRGF0YS5kZXNpZ25lZFByb2JsZW1zLmpvaW4oICdcXG4nICkgKTtcclxuICAgICAgY29uc29sZS5lcnJvciggJ1xcbicgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIG9wdGlvbnMuZGVsdGEgKSB7XHJcbiAgICAgIGNvbnN0IGRlbHRhID0ganNvbmRpZmZwYXRjaC5kaWZmKCByZWZlcmVuY2VBUEksIHByb3Bvc2VkQVBJICk7XHJcbiAgICAgIGlmICggZGVsdGEgKSB7XHJcbiAgICAgICAgY29uc29sZS5sb2coIEpTT04uc3RyaW5naWZ5KCBkZWx0YSwgbnVsbCwgMiApICk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9ICk7XHJcblxyXG4gIHJldHVybiBvaztcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBRSxJQUFLLENBQUM7QUFDMUIsTUFBTUMsaUJBQWlCLEdBQUdELE9BQU8sQ0FBRSxxQkFBc0IsQ0FBQztBQUMxRCxNQUFNRSxDQUFDLEdBQUdGLE9BQU8sQ0FBRSxRQUFTLENBQUM7QUFDN0IsTUFBTUcsYUFBYSxHQUFHSCxPQUFPLENBQUUsK0NBQWdELENBQUMsQ0FBQ0ksTUFBTSxDQUFFLENBQUMsQ0FBRSxDQUFDO0FBQzdGLE1BQU1DLE1BQU0sR0FBR0wsT0FBTyxDQUFFLFFBQVMsQ0FBQzs7QUFFbEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBTSxNQUFNLENBQUNDLE9BQU8sR0FBRyxPQUFRQyxLQUFLLEVBQUVDLFlBQVksRUFBRUMsT0FBTyxLQUFNO0VBQ3pELElBQUlDLEVBQUUsR0FBRyxJQUFJO0VBQ2JELE9BQU8sR0FBR1IsQ0FBQyxDQUFDVSxRQUFRLENBQUU7SUFDcEJDLEtBQUssRUFBRSxLQUFLO0lBQ1pDLHlCQUF5QixFQUFFO0VBQzdCLENBQUMsRUFBRUosT0FBUSxDQUFDO0VBRVpGLEtBQUssQ0FBQ08sT0FBTyxDQUFFQyxJQUFJLElBQUk7SUFFckIsTUFBTUMsYUFBYSxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBRXBCLEVBQUUsQ0FBQ3FCLFlBQVksQ0FBRyxNQUFLSixJQUFLLGVBQWMsRUFBRSxNQUFPLENBQUUsQ0FBQztJQUN4RixNQUFNSyxhQUFhLEdBQUdKLGFBQWEsQ0FBQ0ssSUFBSSxDQUFFLFNBQVMsQ0FBRSxJQUFJLENBQUMsQ0FBQzs7SUFFM0Q7SUFDQSxNQUFNQyxZQUFZLEdBQUdMLElBQUksQ0FBQ0MsS0FBSyxDQUFFcEIsRUFBRSxDQUFDcUIsWUFBWSxDQUFHLGlDQUFnQ0osSUFBSyxJQUFHQSxJQUFLLG1CQUFrQixFQUFFLE1BQU8sQ0FBRSxDQUFDO0lBQzlILE1BQU1RLFdBQVcsR0FBR2YsWUFBWSxDQUFFTyxJQUFJLENBQUU7SUFFeEMsSUFBSyxDQUFDUSxXQUFXLEVBQUc7TUFDbEIsTUFBTSxJQUFJQyxLQUFLLENBQUcsNEJBQTJCVCxJQUFLLEVBQUUsQ0FBQztJQUN2RDtJQUVBLE1BQU1VLGNBQWMsR0FBR3pCLGlCQUFpQixDQUFFc0IsWUFBWSxFQUFFQyxXQUFXLEVBQUV0QixDQUFDLEVBQUVHLE1BQU0sRUFBRTtNQUM5RVMseUJBQXlCLEVBQUVKLE9BQU8sQ0FBQ0kseUJBQXlCO01BQzVEYSx5QkFBeUIsRUFBRSxDQUFDLENBQUNOLGFBQWEsQ0FBQ00seUJBQXlCLENBQUM7SUFDdkUsQ0FBRSxDQUFDO0lBRUgsSUFBS0QsY0FBYyxDQUFDRSxnQkFBZ0IsQ0FBQ0MsTUFBTSxFQUFHO01BQzVDbEIsRUFBRSxHQUFHLEtBQUs7TUFDVm1CLE9BQU8sQ0FBQ0MsS0FBSyxDQUFHLEdBQUVmLElBQUssb0JBQW9CLENBQUM7TUFDNUNjLE9BQU8sQ0FBQ0MsS0FBSyxDQUFFTCxjQUFjLENBQUNFLGdCQUFnQixDQUFDSSxJQUFJLENBQUUsSUFBSyxDQUFFLENBQUM7TUFDN0RGLE9BQU8sQ0FBQ0MsS0FBSyxDQUFFLElBQUssQ0FBQztJQUN2QjtJQUVBLElBQUtMLGNBQWMsQ0FBQ08sZ0JBQWdCLENBQUNKLE1BQU0sRUFBRztNQUM1Q2xCLEVBQUUsR0FBRyxLQUFLO01BQ1ZtQixPQUFPLENBQUNDLEtBQUssQ0FBRyxHQUFFZixJQUFLLGtCQUFrQixDQUFDO01BQzFDYyxPQUFPLENBQUNDLEtBQUssQ0FBRUwsY0FBYyxDQUFDTyxnQkFBZ0IsQ0FBQ0QsSUFBSSxDQUFFLElBQUssQ0FBRSxDQUFDO01BQzdERixPQUFPLENBQUNDLEtBQUssQ0FBRSxJQUFLLENBQUM7SUFDdkI7SUFFQSxJQUFLckIsT0FBTyxDQUFDRyxLQUFLLEVBQUc7TUFDbkIsTUFBTUEsS0FBSyxHQUFHVixhQUFhLENBQUMrQixJQUFJLENBQUVYLFlBQVksRUFBRUMsV0FBWSxDQUFDO01BQzdELElBQUtYLEtBQUssRUFBRztRQUNYaUIsT0FBTyxDQUFDSyxHQUFHLENBQUVqQixJQUFJLENBQUNrQixTQUFTLENBQUV2QixLQUFLLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBRSxDQUFDO01BQ2pEO0lBQ0Y7RUFDRixDQUFFLENBQUM7RUFFSCxPQUFPRixFQUFFO0FBQ1gsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==