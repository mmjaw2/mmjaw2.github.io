// Copyright 2021-2024, University of Colorado Boulder

const fs = require('fs');
const generatePhetioMacroAPI = require('./generatePhetioMacroAPI');
const formatPhetioAPI = require('./formatPhetioAPI');
const getSimList = require('../common/getSimList');

/**
 * Runs generate-phet-io-api for the specified simulations, or all phet-io sims if not specified. This may take a couple
 * of minutes to run fully, depending on how many sims are being run.
 *
 * USAGE:
 * cd chipper
 * node js/phet-io/output-apis.js [--simList=path] [--sims=sim1,sim2,...] [--temporary]
 *
 * e.g.,
 * node js/phet-io/output-apis.js --simList=../perennial-alias/data/phet-io
 *
 * OPTIONS:
 * It will default to include all phet-io sims unless you specify a subset
 * --sims=sim1,sim2: a listed subset of sims
 * --simList=path/to/list
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
(async () => {
  const repos = getSimList();
  const args = process.argv.slice(2);
  const chunkSize = 4;
  const results = await generatePhetioMacroAPI(repos, {
    showProgressBar: true,
    // Interferes with file output
    chunkSize: chunkSize,
    showMessagesFromSim: false,
    // must be pure JSON
    throwAPIGenerationErrors: false // do the best we can
  });
  repos.forEach(repo => {
    const api = results[repo];
    api && fs.writeFileSync(`../phet-io-sim-specific/repos/${repo}/${repo}-phet-io-api${args.includes('--temporary') ? '-temporary' : ''}.json`, formatPhetioAPI(results[repo]));
  });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJnZW5lcmF0ZVBoZXRpb01hY3JvQVBJIiwiZm9ybWF0UGhldGlvQVBJIiwiZ2V0U2ltTGlzdCIsInJlcG9zIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJjaHVua1NpemUiLCJyZXN1bHRzIiwic2hvd1Byb2dyZXNzQmFyIiwic2hvd01lc3NhZ2VzRnJvbVNpbSIsInRocm93QVBJR2VuZXJhdGlvbkVycm9ycyIsImZvckVhY2giLCJyZXBvIiwiYXBpIiwid3JpdGVGaWxlU3luYyIsImluY2x1ZGVzIl0sInNvdXJjZXMiOlsib3V0cHV0LWFwaXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuY29uc3QgZ2VuZXJhdGVQaGV0aW9NYWNyb0FQSSA9IHJlcXVpcmUoICcuL2dlbmVyYXRlUGhldGlvTWFjcm9BUEknICk7XHJcbmNvbnN0IGZvcm1hdFBoZXRpb0FQSSA9IHJlcXVpcmUoICcuL2Zvcm1hdFBoZXRpb0FQSScgKTtcclxuY29uc3QgZ2V0U2ltTGlzdCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2V0U2ltTGlzdCcgKTtcclxuXHJcbi8qKlxyXG4gKiBSdW5zIGdlbmVyYXRlLXBoZXQtaW8tYXBpIGZvciB0aGUgc3BlY2lmaWVkIHNpbXVsYXRpb25zLCBvciBhbGwgcGhldC1pbyBzaW1zIGlmIG5vdCBzcGVjaWZpZWQuIFRoaXMgbWF5IHRha2UgYSBjb3VwbGVcclxuICogb2YgbWludXRlcyB0byBydW4gZnVsbHksIGRlcGVuZGluZyBvbiBob3cgbWFueSBzaW1zIGFyZSBiZWluZyBydW4uXHJcbiAqXHJcbiAqIFVTQUdFOlxyXG4gKiBjZCBjaGlwcGVyXHJcbiAqIG5vZGUganMvcGhldC1pby9vdXRwdXQtYXBpcy5qcyBbLS1zaW1MaXN0PXBhdGhdIFstLXNpbXM9c2ltMSxzaW0yLC4uLl0gWy0tdGVtcG9yYXJ5XVxyXG4gKlxyXG4gKiBlLmcuLFxyXG4gKiBub2RlIGpzL3BoZXQtaW8vb3V0cHV0LWFwaXMuanMgLS1zaW1MaXN0PS4uL3BlcmVubmlhbC1hbGlhcy9kYXRhL3BoZXQtaW9cclxuICpcclxuICogT1BUSU9OUzpcclxuICogSXQgd2lsbCBkZWZhdWx0IHRvIGluY2x1ZGUgYWxsIHBoZXQtaW8gc2ltcyB1bmxlc3MgeW91IHNwZWNpZnkgYSBzdWJzZXRcclxuICogLS1zaW1zPXNpbTEsc2ltMjogYSBsaXN0ZWQgc3Vic2V0IG9mIHNpbXNcclxuICogLS1zaW1MaXN0PXBhdGgvdG8vbGlzdFxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuKCBhc3luYyAoKSA9PiB7XHJcblxyXG4gIGNvbnN0IHJlcG9zID0gZ2V0U2ltTGlzdCgpO1xyXG4gIGNvbnN0IGFyZ3MgPSBwcm9jZXNzLmFyZ3Yuc2xpY2UoIDIgKTtcclxuXHJcbiAgY29uc3QgY2h1bmtTaXplID0gNDtcclxuICBjb25zdCByZXN1bHRzID0gYXdhaXQgZ2VuZXJhdGVQaGV0aW9NYWNyb0FQSSggcmVwb3MsIHtcclxuICAgIHNob3dQcm9ncmVzc0JhcjogdHJ1ZSwgLy8gSW50ZXJmZXJlcyB3aXRoIGZpbGUgb3V0cHV0XHJcbiAgICBjaHVua1NpemU6IGNodW5rU2l6ZSxcclxuICAgIHNob3dNZXNzYWdlc0Zyb21TaW06IGZhbHNlLCAvLyBtdXN0IGJlIHB1cmUgSlNPTlxyXG4gICAgdGhyb3dBUElHZW5lcmF0aW9uRXJyb3JzOiBmYWxzZSAvLyBkbyB0aGUgYmVzdCB3ZSBjYW5cclxuICB9ICk7XHJcblxyXG4gIHJlcG9zLmZvckVhY2goIHJlcG8gPT4ge1xyXG4gICAgY29uc3QgYXBpID0gcmVzdWx0c1sgcmVwbyBdO1xyXG4gICAgYXBpICYmIGZzLndyaXRlRmlsZVN5bmMoXHJcbiAgICAgIGAuLi9waGV0LWlvLXNpbS1zcGVjaWZpYy9yZXBvcy8ke3JlcG99LyR7cmVwb30tcGhldC1pby1hcGkke2FyZ3MuaW5jbHVkZXMoICctLXRlbXBvcmFyeScgKSA/ICctdGVtcG9yYXJ5JyA6ICcnfS5qc29uYCxcclxuICAgICAgZm9ybWF0UGhldGlvQVBJKCByZXN1bHRzWyByZXBvIF0gKVxyXG4gICAgKTtcclxuICB9ICk7XHJcbn0gKSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsRUFBRSxHQUFHQyxPQUFPLENBQUUsSUFBSyxDQUFDO0FBQzFCLE1BQU1DLHNCQUFzQixHQUFHRCxPQUFPLENBQUUsMEJBQTJCLENBQUM7QUFDcEUsTUFBTUUsZUFBZSxHQUFHRixPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDdEQsTUFBTUcsVUFBVSxHQUFHSCxPQUFPLENBQUUsc0JBQXVCLENBQUM7O0FBRXBEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUUsWUFBWTtFQUVaLE1BQU1JLEtBQUssR0FBR0QsVUFBVSxDQUFDLENBQUM7RUFDMUIsTUFBTUUsSUFBSSxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFFLENBQUUsQ0FBQztFQUVwQyxNQUFNQyxTQUFTLEdBQUcsQ0FBQztFQUNuQixNQUFNQyxPQUFPLEdBQUcsTUFBTVQsc0JBQXNCLENBQUVHLEtBQUssRUFBRTtJQUNuRE8sZUFBZSxFQUFFLElBQUk7SUFBRTtJQUN2QkYsU0FBUyxFQUFFQSxTQUFTO0lBQ3BCRyxtQkFBbUIsRUFBRSxLQUFLO0lBQUU7SUFDNUJDLHdCQUF3QixFQUFFLEtBQUssQ0FBQztFQUNsQyxDQUFFLENBQUM7RUFFSFQsS0FBSyxDQUFDVSxPQUFPLENBQUVDLElBQUksSUFBSTtJQUNyQixNQUFNQyxHQUFHLEdBQUdOLE9BQU8sQ0FBRUssSUFBSSxDQUFFO0lBQzNCQyxHQUFHLElBQUlqQixFQUFFLENBQUNrQixhQUFhLENBQ3BCLGlDQUFnQ0YsSUFBSyxJQUFHQSxJQUFLLGVBQWNWLElBQUksQ0FBQ2EsUUFBUSxDQUFFLGFBQWMsQ0FBQyxHQUFHLFlBQVksR0FBRyxFQUFHLE9BQU0sRUFDckhoQixlQUFlLENBQUVRLE9BQU8sQ0FBRUssSUFBSSxDQUFHLENBQ25DLENBQUM7RUFDSCxDQUFFLENBQUM7QUFDTCxDQUFDLEVBQUcsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==