// Copyright 2023-2024, University of Colorado Boulder

/**
 * The main Property for a translated string (subtyped so we can get the stringKey, or other things in the future).
 *
 * @author Jonathan Olson <jonathan.olson>
 */

import DynamicProperty from '../../axon/js/DynamicProperty.js';
import localeProperty from '../../joist/js/i18n/localeProperty.js';
import StringIO from '../../tandem/js/types/StringIO.js';
import chipper from './chipper.js';
import TandemConstants from '../../tandem/js/TandemConstants.js';
class LocalizedStringProperty extends DynamicProperty {
  constructor(localizedString, tandem, metadata) {
    // Allow phetioReadOnly to be overridden
    const phetioReadOnly = metadata && typeof metadata.phetioReadOnly === 'boolean' ? metadata.phetioReadOnly : TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioReadOnly;

    // All i18n model strings are phetioFeatured by default
    const phetioFeatured = metadata && typeof metadata.phetioFeatured === 'boolean' ? metadata.phetioFeatured : true;

    // Allow phetioDocumentation to be overridden
    const phetioDocumentation = metadata && typeof metadata.phetioDocumentation === 'string' ? metadata.phetioDocumentation : TandemConstants.PHET_IO_OBJECT_METADATA_DEFAULTS.phetioDocumentation;
    super(localeProperty, {
      derive: locale => localizedString.getLocaleSpecificProperty(locale),
      bidirectional: true,
      phetioValueType: StringIO,
      phetioState: false,
      tandem: tandem,
      phetioFeatured: phetioFeatured,
      phetioReadOnly: phetioReadOnly,
      phetioDocumentation: phetioDocumentation
    });
    this.localizedString = localizedString;
  }
  get stringKey() {
    return this.localizedString.stringKey;
  }
}
chipper.register('LocalizedStringProperty', LocalizedStringProperty);
export default LocalizedStringProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEeW5hbWljUHJvcGVydHkiLCJsb2NhbGVQcm9wZXJ0eSIsIlN0cmluZ0lPIiwiY2hpcHBlciIsIlRhbmRlbUNvbnN0YW50cyIsIkxvY2FsaXplZFN0cmluZ1Byb3BlcnR5IiwiY29uc3RydWN0b3IiLCJsb2NhbGl6ZWRTdHJpbmciLCJ0YW5kZW0iLCJtZXRhZGF0YSIsInBoZXRpb1JlYWRPbmx5IiwiUEhFVF9JT19PQkpFQ1RfTUVUQURBVEFfREVGQVVMVFMiLCJwaGV0aW9GZWF0dXJlZCIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJkZXJpdmUiLCJsb2NhbGUiLCJnZXRMb2NhbGVTcGVjaWZpY1Byb3BlcnR5IiwiYmlkaXJlY3Rpb25hbCIsInBoZXRpb1ZhbHVlVHlwZSIsInBoZXRpb1N0YXRlIiwic3RyaW5nS2V5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJMb2NhbGl6ZWRTdHJpbmdQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGUgbWFpbiBQcm9wZXJ0eSBmb3IgYSB0cmFuc2xhdGVkIHN0cmluZyAoc3VidHlwZWQgc28gd2UgY2FuIGdldCB0aGUgc3RyaW5nS2V5LCBvciBvdGhlciB0aGluZ3MgaW4gdGhlIGZ1dHVyZSkuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uPlxyXG4gKi9cclxuXHJcbmltcG9ydCBEeW5hbWljUHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9EeW5hbWljUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbG9jYWxlUHJvcGVydHksIHsgTG9jYWxlIH0gZnJvbSAnLi4vLi4vam9pc3QvanMvaTE4bi9sb2NhbGVQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCBTdHJpbmdJTyBmcm9tICcuLi8uLi90YW5kZW0vanMvdHlwZXMvU3RyaW5nSU8uanMnO1xyXG5pbXBvcnQgY2hpcHBlciBmcm9tICcuL2NoaXBwZXIuanMnO1xyXG5pbXBvcnQgVGFuZGVtQ29uc3RhbnRzIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW1Db25zdGFudHMuanMnO1xyXG5pbXBvcnQgTG9jYWxpemVkU3RyaW5nIGZyb20gJy4vTG9jYWxpemVkU3RyaW5nLmpzJztcclxuXHJcbmNsYXNzIExvY2FsaXplZFN0cmluZ1Byb3BlcnR5IGV4dGVuZHMgRHluYW1pY1Byb3BlcnR5PHN0cmluZywgc3RyaW5nLCBMb2NhbGU+IHtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwdWJsaWMgcmVhZG9ubHkgbG9jYWxpemVkU3RyaW5nOiBMb2NhbGl6ZWRTdHJpbmcsIHRhbmRlbTogVGFuZGVtLCBtZXRhZGF0YT86IFJlY29yZDxzdHJpbmcsIHVua25vd24+ICkge1xyXG5cclxuICAgIC8vIEFsbG93IHBoZXRpb1JlYWRPbmx5IHRvIGJlIG92ZXJyaWRkZW5cclxuICAgIGNvbnN0IHBoZXRpb1JlYWRPbmx5ID0gKCBtZXRhZGF0YSAmJiB0eXBlb2YgbWV0YWRhdGEucGhldGlvUmVhZE9ubHkgPT09ICdib29sZWFuJyApID8gbWV0YWRhdGEucGhldGlvUmVhZE9ubHkgOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICBUYW5kZW1Db25zdGFudHMuUEhFVF9JT19PQkpFQ1RfTUVUQURBVEFfREVGQVVMVFMucGhldGlvUmVhZE9ubHk7XHJcblxyXG4gICAgLy8gQWxsIGkxOG4gbW9kZWwgc3RyaW5ncyBhcmUgcGhldGlvRmVhdHVyZWQgYnkgZGVmYXVsdFxyXG4gICAgY29uc3QgcGhldGlvRmVhdHVyZWQgPSAoIG1ldGFkYXRhICYmIHR5cGVvZiBtZXRhZGF0YS5waGV0aW9GZWF0dXJlZCA9PT0gJ2Jvb2xlYW4nICkgPyBtZXRhZGF0YS5waGV0aW9GZWF0dXJlZCA6IHRydWU7XHJcblxyXG4gICAgLy8gQWxsb3cgcGhldGlvRG9jdW1lbnRhdGlvbiB0byBiZSBvdmVycmlkZGVuXHJcbiAgICBjb25zdCBwaGV0aW9Eb2N1bWVudGF0aW9uID0gKCBtZXRhZGF0YSAmJiB0eXBlb2YgbWV0YWRhdGEucGhldGlvRG9jdW1lbnRhdGlvbiA9PT0gJ3N0cmluZycgKSA/IG1ldGFkYXRhLnBoZXRpb0RvY3VtZW50YXRpb24gOlxyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIFRhbmRlbUNvbnN0YW50cy5QSEVUX0lPX09CSkVDVF9NRVRBREFUQV9ERUZBVUxUUy5waGV0aW9Eb2N1bWVudGF0aW9uO1xyXG5cclxuICAgIHN1cGVyKCBsb2NhbGVQcm9wZXJ0eSwge1xyXG4gICAgICBkZXJpdmU6ICggbG9jYWxlOiBMb2NhbGUgKSA9PiBsb2NhbGl6ZWRTdHJpbmcuZ2V0TG9jYWxlU3BlY2lmaWNQcm9wZXJ0eSggbG9jYWxlICksXHJcbiAgICAgIGJpZGlyZWN0aW9uYWw6IHRydWUsXHJcbiAgICAgIHBoZXRpb1ZhbHVlVHlwZTogU3RyaW5nSU8sXHJcbiAgICAgIHBoZXRpb1N0YXRlOiBmYWxzZSxcclxuICAgICAgdGFuZGVtOiB0YW5kZW0sXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiBwaGV0aW9GZWF0dXJlZCxcclxuICAgICAgcGhldGlvUmVhZE9ubHk6IHBoZXRpb1JlYWRPbmx5LFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiBwaGV0aW9Eb2N1bWVudGF0aW9uXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IHN0cmluZ0tleSgpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIHRoaXMubG9jYWxpemVkU3RyaW5nLnN0cmluZ0tleTtcclxuICB9XHJcbn1cclxuXHJcbmNoaXBwZXIucmVnaXN0ZXIoICdMb2NhbGl6ZWRTdHJpbmdQcm9wZXJ0eScsIExvY2FsaXplZFN0cmluZ1Byb3BlcnR5ICk7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBMb2NhbGl6ZWRTdHJpbmdQcm9wZXJ0eTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLGtDQUFrQztBQUM5RCxPQUFPQyxjQUFjLE1BQWtCLHVDQUF1QztBQUU5RSxPQUFPQyxRQUFRLE1BQU0sbUNBQW1DO0FBQ3hELE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBQ2xDLE9BQU9DLGVBQWUsTUFBTSxvQ0FBb0M7QUFHaEUsTUFBTUMsdUJBQXVCLFNBQVNMLGVBQWUsQ0FBeUI7RUFFckVNLFdBQVdBLENBQWtCQyxlQUFnQyxFQUFFQyxNQUFjLEVBQUVDLFFBQWtDLEVBQUc7SUFFekg7SUFDQSxNQUFNQyxjQUFjLEdBQUtELFFBQVEsSUFBSSxPQUFPQSxRQUFRLENBQUNDLGNBQWMsS0FBSyxTQUFTLEdBQUtELFFBQVEsQ0FBQ0MsY0FBYyxHQUN0Rk4sZUFBZSxDQUFDTyxnQ0FBZ0MsQ0FBQ0QsY0FBYzs7SUFFdEY7SUFDQSxNQUFNRSxjQUFjLEdBQUtILFFBQVEsSUFBSSxPQUFPQSxRQUFRLENBQUNHLGNBQWMsS0FBSyxTQUFTLEdBQUtILFFBQVEsQ0FBQ0csY0FBYyxHQUFHLElBQUk7O0lBRXBIO0lBQ0EsTUFBTUMsbUJBQW1CLEdBQUtKLFFBQVEsSUFBSSxPQUFPQSxRQUFRLENBQUNJLG1CQUFtQixLQUFLLFFBQVEsR0FBS0osUUFBUSxDQUFDSSxtQkFBbUIsR0FDL0ZULGVBQWUsQ0FBQ08sZ0NBQWdDLENBQUNFLG1CQUFtQjtJQUVoRyxLQUFLLENBQUVaLGNBQWMsRUFBRTtNQUNyQmEsTUFBTSxFQUFJQyxNQUFjLElBQU1SLGVBQWUsQ0FBQ1MseUJBQXlCLENBQUVELE1BQU8sQ0FBQztNQUNqRkUsYUFBYSxFQUFFLElBQUk7TUFDbkJDLGVBQWUsRUFBRWhCLFFBQVE7TUFDekJpQixXQUFXLEVBQUUsS0FBSztNQUNsQlgsTUFBTSxFQUFFQSxNQUFNO01BQ2RJLGNBQWMsRUFBRUEsY0FBYztNQUM5QkYsY0FBYyxFQUFFQSxjQUFjO01BQzlCRyxtQkFBbUIsRUFBRUE7SUFDdkIsQ0FBRSxDQUFDO0lBQUMsS0F0QjhCTixlQUFnQyxHQUFoQ0EsZUFBZ0M7RUF1QnBFO0VBRUEsSUFBV2EsU0FBU0EsQ0FBQSxFQUFXO0lBQzdCLE9BQU8sSUFBSSxDQUFDYixlQUFlLENBQUNhLFNBQVM7RUFDdkM7QUFDRjtBQUVBakIsT0FBTyxDQUFDa0IsUUFBUSxDQUFFLHlCQUF5QixFQUFFaEIsdUJBQXdCLENBQUM7QUFFdEUsZUFBZUEsdUJBQXVCIiwiaWdub3JlTGlzdCI6W119