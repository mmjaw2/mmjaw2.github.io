// Copyright 2017-2024, University of Colorado Boulder

/**
 * Determines a list of all dependent repositories (for dependencies.json or other creation)
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const _ = require('lodash');
const assert = require('assert');
const ChipperConstants = require('../common/ChipperConstants');
const grunt = require('grunt');

/**
 * Returns a list of all dependent repositories.
 * @public
 *
 * @param {string} repo
 * @param {string} [brand] - If not specified, it will return the dependencies for all brands.
 * @returns {Array.<string>}
 */
module.exports = function getPhetLibs(repo, brand) {
  assert(typeof repo === 'string', 'Repository required for getPhetLibs');
  if (brand === undefined) {
    return getPhetLibs(repo, ChipperConstants.BRANDS);
  } else if (Array.isArray(brand)) {
    return _.reduce(brand, (dependencies, brand) => {
      return _.uniq(dependencies.concat(getPhetLibs(repo, brand)).sort());
    }, []);
  } else {
    const packageObject = grunt.file.readJSON(`../${repo}/package.json`);
    let buildObject;
    try {
      buildObject = grunt.file.readJSON('../chipper/build.json');
    } catch (e) {
      buildObject = {};
    }

    // start with package.json
    let phetLibs = packageObject && packageObject.phet && packageObject.phet.phetLibs ? packageObject.phet.phetLibs : [];

    // add the repo that's being built
    phetLibs.push(packageObject.name);

    // add common and brand-specific entries from build.json
    ['common', brand].forEach(id => {
      if (buildObject[id] && buildObject[id].phetLibs) {
        phetLibs = phetLibs.concat(buildObject[id].phetLibs);
      }
    });

    // add brand specific dependencies from the package json
    if (packageObject.phet && packageObject.phet[brand] && packageObject.phet[brand].phetLibs) {
      phetLibs = phetLibs.concat(packageObject.phet[brand].phetLibs);
    }

    // wrappers are also marked as phetLibs, so we can get their shas without listing them twice
    if (brand === 'phet-io' && packageObject.phet && packageObject.phet[brand] && packageObject.phet[brand].wrappers) {
      const wrapperRepos = packageObject.phet[brand].wrappers.filter(wrapper => !wrapper.startsWith('phet-io-sim-specific'));
      phetLibs = phetLibs.concat(wrapperRepos);
    }

    // sort and remove duplicates
    return _.uniq(phetLibs.sort());
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsImFzc2VydCIsIkNoaXBwZXJDb25zdGFudHMiLCJncnVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJnZXRQaGV0TGlicyIsInJlcG8iLCJicmFuZCIsInVuZGVmaW5lZCIsIkJSQU5EUyIsIkFycmF5IiwiaXNBcnJheSIsInJlZHVjZSIsImRlcGVuZGVuY2llcyIsInVuaXEiLCJjb25jYXQiLCJzb3J0IiwicGFja2FnZU9iamVjdCIsImZpbGUiLCJyZWFkSlNPTiIsImJ1aWxkT2JqZWN0IiwiZSIsInBoZXRMaWJzIiwicGhldCIsInB1c2giLCJuYW1lIiwiZm9yRWFjaCIsImlkIiwid3JhcHBlcnMiLCJ3cmFwcGVyUmVwb3MiLCJmaWx0ZXIiLCJ3cmFwcGVyIiwic3RhcnRzV2l0aCJdLCJzb3VyY2VzIjpbImdldFBoZXRMaWJzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERldGVybWluZXMgYSBsaXN0IG9mIGFsbCBkZXBlbmRlbnQgcmVwb3NpdG9yaWVzIChmb3IgZGVwZW5kZW5jaWVzLmpzb24gb3Igb3RoZXIgY3JlYXRpb24pXHJcbiAqXHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5cclxuY29uc3QgXyA9IHJlcXVpcmUoICdsb2Rhc2gnICk7XHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoICdhc3NlcnQnICk7XHJcbmNvbnN0IENoaXBwZXJDb25zdGFudHMgPSByZXF1aXJlKCAnLi4vY29tbW9uL0NoaXBwZXJDb25zdGFudHMnICk7XHJcbmNvbnN0IGdydW50ID0gcmVxdWlyZSggJ2dydW50JyApO1xyXG5cclxuLyoqXHJcbiAqIFJldHVybnMgYSBsaXN0IG9mIGFsbCBkZXBlbmRlbnQgcmVwb3NpdG9yaWVzLlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBvXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbYnJhbmRdIC0gSWYgbm90IHNwZWNpZmllZCwgaXQgd2lsbCByZXR1cm4gdGhlIGRlcGVuZGVuY2llcyBmb3IgYWxsIGJyYW5kcy5cclxuICogQHJldHVybnMge0FycmF5LjxzdHJpbmc+fVxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBmdW5jdGlvbiBnZXRQaGV0TGlicyggcmVwbywgYnJhbmQgKSB7XHJcbiAgYXNzZXJ0KCB0eXBlb2YgcmVwbyA9PT0gJ3N0cmluZycsICdSZXBvc2l0b3J5IHJlcXVpcmVkIGZvciBnZXRQaGV0TGlicycgKTtcclxuXHJcbiAgaWYgKCBicmFuZCA9PT0gdW5kZWZpbmVkICkge1xyXG4gICAgcmV0dXJuIGdldFBoZXRMaWJzKCByZXBvLCBDaGlwcGVyQ29uc3RhbnRzLkJSQU5EUyApO1xyXG4gIH1cclxuICBlbHNlIGlmICggQXJyYXkuaXNBcnJheSggYnJhbmQgKSApIHtcclxuICAgIHJldHVybiBfLnJlZHVjZSggYnJhbmQsICggZGVwZW5kZW5jaWVzLCBicmFuZCApID0+IHtcclxuICAgICAgcmV0dXJuIF8udW5pcSggZGVwZW5kZW5jaWVzLmNvbmNhdCggZ2V0UGhldExpYnMoIHJlcG8sIGJyYW5kICkgKS5zb3J0KCkgKTtcclxuICAgIH0sIFtdICk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgY29uc3QgcGFja2FnZU9iamVjdCA9IGdydW50LmZpbGUucmVhZEpTT04oIGAuLi8ke3JlcG99L3BhY2thZ2UuanNvbmAgKTtcclxuICAgIGxldCBidWlsZE9iamVjdDtcclxuICAgIHRyeSB7XHJcbiAgICAgIGJ1aWxkT2JqZWN0ID0gZ3J1bnQuZmlsZS5yZWFkSlNPTiggJy4uL2NoaXBwZXIvYnVpbGQuanNvbicgKTtcclxuICAgIH1cclxuICAgIGNhdGNoKCBlICkge1xyXG4gICAgICBidWlsZE9iamVjdCA9IHt9O1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHN0YXJ0IHdpdGggcGFja2FnZS5qc29uXHJcbiAgICBsZXQgcGhldExpYnMgPSBwYWNrYWdlT2JqZWN0ICYmXHJcbiAgICAgICAgICAgICAgICAgICBwYWNrYWdlT2JqZWN0LnBoZXQgJiZcclxuICAgICAgICAgICAgICAgICAgIHBhY2thZ2VPYmplY3QucGhldC5waGV0TGlicyA/XHJcbiAgICAgICAgICAgICAgICAgICBwYWNrYWdlT2JqZWN0LnBoZXQucGhldExpYnMgOiBbXTtcclxuXHJcbiAgICAvLyBhZGQgdGhlIHJlcG8gdGhhdCdzIGJlaW5nIGJ1aWx0XHJcbiAgICBwaGV0TGlicy5wdXNoKCBwYWNrYWdlT2JqZWN0Lm5hbWUgKTtcclxuXHJcbiAgICAvLyBhZGQgY29tbW9uIGFuZCBicmFuZC1zcGVjaWZpYyBlbnRyaWVzIGZyb20gYnVpbGQuanNvblxyXG4gICAgWyAnY29tbW9uJywgYnJhbmQgXS5mb3JFYWNoKCBpZCA9PiB7XHJcbiAgICAgIGlmICggYnVpbGRPYmplY3RbIGlkIF0gJiYgYnVpbGRPYmplY3RbIGlkIF0ucGhldExpYnMgKSB7XHJcbiAgICAgICAgcGhldExpYnMgPSBwaGV0TGlicy5jb25jYXQoIGJ1aWxkT2JqZWN0WyBpZCBdLnBoZXRMaWJzICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBhZGQgYnJhbmQgc3BlY2lmaWMgZGVwZW5kZW5jaWVzIGZyb20gdGhlIHBhY2thZ2UganNvblxyXG4gICAgaWYgKCBwYWNrYWdlT2JqZWN0LnBoZXQgJiYgcGFja2FnZU9iamVjdC5waGV0WyBicmFuZCBdICYmIHBhY2thZ2VPYmplY3QucGhldFsgYnJhbmQgXS5waGV0TGlicyApIHtcclxuICAgICAgcGhldExpYnMgPSBwaGV0TGlicy5jb25jYXQoIHBhY2thZ2VPYmplY3QucGhldFsgYnJhbmQgXS5waGV0TGlicyApO1xyXG4gICAgfVxyXG5cclxuICAgIC8vIHdyYXBwZXJzIGFyZSBhbHNvIG1hcmtlZCBhcyBwaGV0TGlicywgc28gd2UgY2FuIGdldCB0aGVpciBzaGFzIHdpdGhvdXQgbGlzdGluZyB0aGVtIHR3aWNlXHJcbiAgICBpZiAoIGJyYW5kID09PSAncGhldC1pbycgJiYgcGFja2FnZU9iamVjdC5waGV0ICYmIHBhY2thZ2VPYmplY3QucGhldFsgYnJhbmQgXSAmJiBwYWNrYWdlT2JqZWN0LnBoZXRbIGJyYW5kIF0ud3JhcHBlcnMgKSB7XHJcbiAgICAgIGNvbnN0IHdyYXBwZXJSZXBvcyA9ICggcGFja2FnZU9iamVjdC5waGV0WyBicmFuZCBdLndyYXBwZXJzICkuZmlsdGVyKCB3cmFwcGVyID0+ICF3cmFwcGVyLnN0YXJ0c1dpdGgoICdwaGV0LWlvLXNpbS1zcGVjaWZpYycgKSApO1xyXG4gICAgICBwaGV0TGlicyA9IHBoZXRMaWJzLmNvbmNhdCggd3JhcHBlclJlcG9zICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gc29ydCBhbmQgcmVtb3ZlIGR1cGxpY2F0ZXNcclxuICAgIHJldHVybiBfLnVuaXEoIHBoZXRMaWJzLnNvcnQoKSApO1xyXG4gIH1cclxufTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxNQUFNQSxDQUFDLEdBQUdDLE9BQU8sQ0FBRSxRQUFTLENBQUM7QUFDN0IsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUUsUUFBUyxDQUFDO0FBQ2xDLE1BQU1FLGdCQUFnQixHQUFHRixPQUFPLENBQUUsNEJBQTZCLENBQUM7QUFDaEUsTUFBTUcsS0FBSyxHQUFHSCxPQUFPLENBQUUsT0FBUSxDQUFDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FJLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLFNBQVNDLFdBQVdBLENBQUVDLElBQUksRUFBRUMsS0FBSyxFQUFHO0VBQ25EUCxNQUFNLENBQUUsT0FBT00sSUFBSSxLQUFLLFFBQVEsRUFBRSxxQ0FB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