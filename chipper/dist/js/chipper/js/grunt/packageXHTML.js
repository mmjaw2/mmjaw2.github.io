// Copyright 2018-2024, University of Colorado Boulder

/**
 * Combines all parts of a runnable's built file into an XHTML structure (with separate files)
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

// modules
const assert = require('assert');
const ChipperConstants = require('../common/ChipperConstants');
const ChipperStringUtils = require('../common/ChipperStringUtils');
const getTitleStringKey = require('./getTitleStringKey');
const grunt = require('grunt');
const nodeHTMLEncoder = require('node-html-encoder'); // eslint-disable-line require-statement-match

/**
 * From a given set of config (including the JS and other required things), it creates an XHTML structure.
 * @public
 *
 * @param {string} xhtmlDir
 * @param {Object} config
 * @returns {string} - The HTML for the file.
 */
module.exports = function (xhtmlDir, config) {
  const encoder = new nodeHTMLEncoder.Encoder('entity');
  const {
    repo,
    // {string}
    brand,
    // {string}
    stringMap,
    // {Object}, map[ locale ][ stringKey ] => {string}
    initializationScript,
    // {string} - separate from the rest of the scripts since it needs to be able to run in IE.
    licenseScript,
    // {string}
    scripts,
    // {Array.<string>}
    htmlHeader // {string}
  } = config;
  assert(typeof repo === 'string', 'Requires repo');
  assert(stringMap, 'Requires stringMap');
  assert(scripts, 'Requires scripts');
  assert(typeof htmlHeader === 'string', 'Requires htmlHeader');
  const localizedTitle = stringMap[ChipperConstants.FALLBACK_LOCALE][getTitleStringKey(repo)];
  const licenseScriptFilename = `${repo}_license_${brand}.js`;
  const initializationScriptFilename = `${repo}_initialization_${brand}.js`;
  const script = scripts.join('\n');
  const scriptFilename = `${repo}_${brand}.js`;
  const xhtml = ChipperStringUtils.replacePlaceholders(grunt.file.read('../chipper/templates/sim.xhtml'), {
    PHET_SIM_TITLE: encoder.htmlEncode(localizedTitle),
    PHET_HTML_HEADER: htmlHeader,
    PHET_INITIALIZATION_SCRIPT: `<script type="text/javascript" src="${licenseScriptFilename}" charset="utf-8"></script><script type="text/javascript" src="${initializationScriptFilename}" charset="utf-8"></script>`,
    PHET_SIM_SCRIPTS: `<script type="text/javascript" src="${scriptFilename}" charset="utf-8"></script>`
  });
  grunt.file.write(`${xhtmlDir}/${repo}_all${brand === 'phet' ? '' : `_${brand}`}.xhtml`, xhtml);
  grunt.file.write(`${xhtmlDir}/${licenseScriptFilename}`, licenseScript);
  grunt.file.write(`${xhtmlDir}/${initializationScriptFilename}`, initializationScript);
  grunt.file.write(`${xhtmlDir}/${scriptFilename}`, script);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiQ2hpcHBlckNvbnN0YW50cyIsIkNoaXBwZXJTdHJpbmdVdGlscyIsImdldFRpdGxlU3RyaW5nS2V5IiwiZ3J1bnQiLCJub2RlSFRNTEVuY29kZXIiLCJtb2R1bGUiLCJleHBvcnRzIiwieGh0bWxEaXIiLCJjb25maWciLCJlbmNvZGVyIiwiRW5jb2RlciIsInJlcG8iLCJicmFuZCIsInN0cmluZ01hcCIsImluaXRpYWxpemF0aW9uU2NyaXB0IiwibGljZW5zZVNjcmlwdCIsInNjcmlwdHMiLCJodG1sSGVhZGVyIiwibG9jYWxpemVkVGl0bGUiLCJGQUxMQkFDS19MT0NBTEUiLCJsaWNlbnNlU2NyaXB0RmlsZW5hbWUiLCJpbml0aWFsaXphdGlvblNjcmlwdEZpbGVuYW1lIiwic2NyaXB0Iiwiam9pbiIsInNjcmlwdEZpbGVuYW1lIiwieGh0bWwiLCJyZXBsYWNlUGxhY2Vob2xkZXJzIiwiZmlsZSIsInJlYWQiLCJQSEVUX1NJTV9USVRMRSIsImh0bWxFbmNvZGUiLCJQSEVUX0hUTUxfSEVBREVSIiwiUEhFVF9JTklUSUFMSVpBVElPTl9TQ1JJUFQiLCJQSEVUX1NJTV9TQ1JJUFRTIiwid3JpdGUiXSwic291cmNlcyI6WyJwYWNrYWdlWEhUTUwuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQ29tYmluZXMgYWxsIHBhcnRzIG9mIGEgcnVubmFibGUncyBidWlsdCBmaWxlIGludG8gYW4gWEhUTUwgc3RydWN0dXJlICh3aXRoIHNlcGFyYXRlIGZpbGVzKVxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuXHJcbi8vIG1vZHVsZXNcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSggJ2Fzc2VydCcgKTtcclxuY29uc3QgQ2hpcHBlckNvbnN0YW50cyA9IHJlcXVpcmUoICcuLi9jb21tb24vQ2hpcHBlckNvbnN0YW50cycgKTtcclxuY29uc3QgQ2hpcHBlclN0cmluZ1V0aWxzID0gcmVxdWlyZSggJy4uL2NvbW1vbi9DaGlwcGVyU3RyaW5nVXRpbHMnICk7XHJcbmNvbnN0IGdldFRpdGxlU3RyaW5nS2V5ID0gcmVxdWlyZSggJy4vZ2V0VGl0bGVTdHJpbmdLZXknICk7XHJcbmNvbnN0IGdydW50ID0gcmVxdWlyZSggJ2dydW50JyApO1xyXG5jb25zdCBub2RlSFRNTEVuY29kZXIgPSByZXF1aXJlKCAnbm9kZS1odG1sLWVuY29kZXInICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1zdGF0ZW1lbnQtbWF0Y2hcclxuXHJcbi8qKlxyXG4gKiBGcm9tIGEgZ2l2ZW4gc2V0IG9mIGNvbmZpZyAoaW5jbHVkaW5nIHRoZSBKUyBhbmQgb3RoZXIgcmVxdWlyZWQgdGhpbmdzKSwgaXQgY3JlYXRlcyBhbiBYSFRNTCBzdHJ1Y3R1cmUuXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHhodG1sRGlyXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBjb25maWdcclxuICogQHJldHVybnMge3N0cmluZ30gLSBUaGUgSFRNTCBmb3IgdGhlIGZpbGUuXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCB4aHRtbERpciwgY29uZmlnICkge1xyXG4gIGNvbnN0IGVuY29kZXIgPSBuZXcgbm9kZUhUTUxFbmNvZGVyLkVuY29kZXIoICdlbnRpdHknICk7XHJcblxyXG4gIGNvbnN0IHtcclxuICAgIHJlcG8sIC8vIHtzdHJpbmd9XHJcbiAgICBicmFuZCwgLy8ge3N0cmluZ31cclxuICAgIHN0cmluZ01hcCwgLy8ge09iamVjdH0sIG1hcFsgbG9jYWxlIF1bIHN0cmluZ0tleSBdID0+IHtzdHJpbmd9XHJcbiAgICBpbml0aWFsaXphdGlvblNjcmlwdCwgLy8ge3N0cmluZ30gLSBzZXBhcmF0ZSBmcm9tIHRoZSByZXN0IG9mIHRoZSBzY3JpcHRzIHNpbmNlIGl0IG5lZWRzIHRvIGJlIGFibGUgdG8gcnVuIGluIElFLlxyXG4gICAgbGljZW5zZVNjcmlwdCwgLy8ge3N0cmluZ31cclxuICAgIHNjcmlwdHMsIC8vIHtBcnJheS48c3RyaW5nPn1cclxuICAgIGh0bWxIZWFkZXIgLy8ge3N0cmluZ31cclxuICB9ID0gY29uZmlnO1xyXG4gIGFzc2VydCggdHlwZW9mIHJlcG8gPT09ICdzdHJpbmcnLCAnUmVxdWlyZXMgcmVwbycgKTtcclxuICBhc3NlcnQoIHN0cmluZ01hcCwgJ1JlcXVpcmVzIHN0cmluZ01hcCcgKTtcclxuICBhc3NlcnQoIHNjcmlwdHMsICdSZXF1aXJlcyBzY3JpcHRzJyApO1xyXG4gIGFzc2VydCggdHlwZW9mIGh0bWxIZWFkZXIgPT09ICdzdHJpbmcnLCAnUmVxdWlyZXMgaHRtbEhlYWRlcicgKTtcclxuXHJcbiAgY29uc3QgbG9jYWxpemVkVGl0bGUgPSBzdHJpbmdNYXBbIENoaXBwZXJDb25zdGFudHMuRkFMTEJBQ0tfTE9DQUxFIF1bIGdldFRpdGxlU3RyaW5nS2V5KCByZXBvICkgXTtcclxuXHJcbiAgY29uc3QgbGljZW5zZVNjcmlwdEZpbGVuYW1lID0gYCR7cmVwb31fbGljZW5zZV8ke2JyYW5kfS5qc2A7XHJcbiAgY29uc3QgaW5pdGlhbGl6YXRpb25TY3JpcHRGaWxlbmFtZSA9IGAke3JlcG99X2luaXRpYWxpemF0aW9uXyR7YnJhbmR9LmpzYDtcclxuXHJcbiAgY29uc3Qgc2NyaXB0ID0gc2NyaXB0cy5qb2luKCAnXFxuJyApO1xyXG4gIGNvbnN0IHNjcmlwdEZpbGVuYW1lID0gYCR7cmVwb31fJHticmFuZH0uanNgO1xyXG5cclxuICBjb25zdCB4aHRtbCA9IENoaXBwZXJTdHJpbmdVdGlscy5yZXBsYWNlUGxhY2Vob2xkZXJzKCBncnVudC5maWxlLnJlYWQoICcuLi9jaGlwcGVyL3RlbXBsYXRlcy9zaW0ueGh0bWwnICksIHtcclxuICAgIFBIRVRfU0lNX1RJVExFOiBlbmNvZGVyLmh0bWxFbmNvZGUoIGxvY2FsaXplZFRpdGxlICksXHJcbiAgICBQSEVUX0hUTUxfSEVBREVSOiBodG1sSGVhZGVyLFxyXG4gICAgUEhFVF9JTklUSUFMSVpBVElPTl9TQ1JJUFQ6IGA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCIke2xpY2Vuc2VTY3JpcHRGaWxlbmFtZX1cIiBjaGFyc2V0PVwidXRmLThcIj48L3NjcmlwdD48c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCIke2luaXRpYWxpemF0aW9uU2NyaXB0RmlsZW5hbWV9XCIgY2hhcnNldD1cInV0Zi04XCI+PC9zY3JpcHQ+YCxcclxuICAgIFBIRVRfU0lNX1NDUklQVFM6IGA8c2NyaXB0IHR5cGU9XCJ0ZXh0L2phdmFzY3JpcHRcIiBzcmM9XCIke3NjcmlwdEZpbGVuYW1lfVwiIGNoYXJzZXQ9XCJ1dGYtOFwiPjwvc2NyaXB0PmBcclxuICB9ICk7XHJcbiAgZ3J1bnQuZmlsZS53cml0ZSggYCR7eGh0bWxEaXJ9LyR7cmVwb31fYWxsJHticmFuZCA9PT0gJ3BoZXQnID8gJycgOiBgXyR7YnJhbmR9YH0ueGh0bWxgLCB4aHRtbCApO1xyXG4gIGdydW50LmZpbGUud3JpdGUoIGAke3hodG1sRGlyfS8ke2xpY2Vuc2VTY3JpcHRGaWxlbmFtZX1gLCBsaWNlbnNlU2NyaXB0ICk7XHJcbiAgZ3J1bnQuZmlsZS53cml0ZSggYCR7eGh0bWxEaXJ9LyR7aW5pdGlhbGl6YXRpb25TY3JpcHRGaWxlbmFtZX1gLCBpbml0aWFsaXphdGlvblNjcmlwdCApO1xyXG4gIGdydW50LmZpbGUud3JpdGUoIGAke3hodG1sRGlyfS8ke3NjcmlwdEZpbGVuYW1lfWAsIHNjcmlwdCApO1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFFLFFBQVMsQ0FBQztBQUNsQyxNQUFNQyxnQkFBZ0IsR0FB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