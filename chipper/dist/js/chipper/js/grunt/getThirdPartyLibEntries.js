// Copyright 2015-2024, University of Colorado Boulder

/**
 * This function returns an object literal that describes the third-party libraries that are included in the html deliverable.
 * License info is read from sherpa/lib/license.json, and the format of the object literal is similar to that syntax.
 *
 * See getLicenseEntry.js for a description & syntax of the license entries
 *
 * @author Chris Malley (PixelZoom, Inc.)
 * @author Sam Reid (PhET Interactive Simulations)
 */

// modules
const _ = require('lodash');
const assert = require('assert');
const getLicenseKeys = require('./getLicenseKeys');
const grunt = require('grunt');
const THIRD_PARTY_LICENSES_FILENAME = '../sherpa/lib/license.json'; // contains third-party license info
const LICENSES_DIRECTORY = '../sherpa/licenses/'; // contains third-party licenses themselves.

/**
 * @param {string} repo
 * @param {string} brand
 */
module.exports = function (repo, brand) {
  // Read license info
  const licenseInfo = grunt.file.readJSON(THIRD_PARTY_LICENSES_FILENAME);
  let licenseKeys = getLicenseKeys(repo, brand);

  // Add all dependencies. Duplicates will be removed later.
  for (let i = 0; i < licenseKeys.length; i++) {
    const license = licenseInfo[licenseKeys[i]];
    assert(license, `${THIRD_PARTY_LICENSES_FILENAME}: no entry for key = ${licenseKeys[i]}`);
    const dependencies = license.dependencies;
    if (typeof dependencies === 'object') {
      licenseKeys = licenseKeys.concat(dependencies);
    }
  }

  // Sort keys and remove duplicates
  licenseKeys = _.uniq(_.sortBy(licenseKeys, key => key.toUpperCase()));
  grunt.log.debug(`licenseKeys = ${licenseKeys.toString()}`);

  // Combine all licenses into 1 object literal
  const libEntries = {};
  licenseKeys.forEach(key => {
    const license = licenseInfo[key];

    // verify required keys
    assert(license, `${THIRD_PARTY_LICENSES_FILENAME}: no entry for key = ${key}`);
    assert(license.text, `${THIRD_PARTY_LICENSES_FILENAME}: no text field for key = ${key}`);
    assert(license.license, `${THIRD_PARTY_LICENSES_FILENAME}: no license field for key = ${key}`);
    assert(license.projectURL, `${THIRD_PARTY_LICENSES_FILENAME}: no projectURL field for key = ${key}`);
    assert(license.notes, `${THIRD_PARTY_LICENSES_FILENAME}: no notes field for key = ${key}`);

    // read the license file
    const licenseText = grunt.file.read(`${LICENSES_DIRECTORY + key}.txt`, 'utf-8');
    license.licenseText = licenseText.split(/\r?\n/);
    libEntries[key] = license;
  });
  return libEntries;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfIiwicmVxdWlyZSIsImFzc2VydCIsImdldExpY2Vuc2VLZXlzIiwiZ3J1bnQiLCJUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRSIsIkxJQ0VOU0VTX0RJUkVDVE9SWSIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXBvIiwiYnJhbmQiLCJsaWNlbnNlSW5mbyIsImZpbGUiLCJyZWFkSlNPTiIsImxpY2Vuc2VLZXlzIiwiaSIsImxlbmd0aCIsImxpY2Vuc2UiLCJkZXBlbmRlbmNpZXMiLCJjb25jYXQiLCJ1bmlxIiwic29ydEJ5Iiwia2V5IiwidG9VcHBlckNhc2UiLCJsb2ciLCJkZWJ1ZyIsInRvU3RyaW5nIiwibGliRW50cmllcyIsImZvckVhY2giLCJ0ZXh0IiwicHJvamVjdFVSTCIsIm5vdGVzIiwibGljZW5zZVRleHQiLCJyZWFkIiwic3BsaXQiXSwic291cmNlcyI6WyJnZXRUaGlyZFBhcnR5TGliRW50cmllcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaGlzIGZ1bmN0aW9uIHJldHVybnMgYW4gb2JqZWN0IGxpdGVyYWwgdGhhdCBkZXNjcmliZXMgdGhlIHRoaXJkLXBhcnR5IGxpYnJhcmllcyB0aGF0IGFyZSBpbmNsdWRlZCBpbiB0aGUgaHRtbCBkZWxpdmVyYWJsZS5cclxuICogTGljZW5zZSBpbmZvIGlzIHJlYWQgZnJvbSBzaGVycGEvbGliL2xpY2Vuc2UuanNvbiwgYW5kIHRoZSBmb3JtYXQgb2YgdGhlIG9iamVjdCBsaXRlcmFsIGlzIHNpbWlsYXIgdG8gdGhhdCBzeW50YXguXHJcbiAqXHJcbiAqIFNlZSBnZXRMaWNlbnNlRW50cnkuanMgZm9yIGEgZGVzY3JpcHRpb24gJiBzeW50YXggb2YgdGhlIGxpY2Vuc2UgZW50cmllc1xyXG4gKlxyXG4gKiBAYXV0aG9yIENocmlzIE1hbGxleSAoUGl4ZWxab29tLCBJbmMuKVxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcblxyXG4vLyBtb2R1bGVzXHJcbmNvbnN0IF8gPSByZXF1aXJlKCAnbG9kYXNoJyApO1xyXG5jb25zdCBhc3NlcnQgPSByZXF1aXJlKCAnYXNzZXJ0JyApO1xyXG5jb25zdCBnZXRMaWNlbnNlS2V5cyA9IHJlcXVpcmUoICcuL2dldExpY2Vuc2VLZXlzJyApO1xyXG5jb25zdCBncnVudCA9IHJlcXVpcmUoICdncnVudCcgKTtcclxuXHJcbmNvbnN0IFRISVJEX1BBUlRZX0xJQ0VOU0VTX0ZJTEVOQU1FID0gJy4uL3NoZXJwYS9saWIvbGljZW5zZS5qc29uJzsgLy8gY29udGFpbnMgdGhpcmQtcGFydHkgbGljZW5zZSBpbmZvXHJcbmNvbnN0IExJQ0VOU0VTX0RJUkVDVE9SWSA9ICcuLi9zaGVycGEvbGljZW5zZXMvJzsgLy8gY29udGFpbnMgdGhpcmQtcGFydHkgbGljZW5zZXMgdGhlbXNlbHZlcy5cclxuXHJcbi8qKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwb1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnJhbmRcclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gZnVuY3Rpb24oIHJlcG8sIGJyYW5kICkge1xyXG5cclxuICAvLyBSZWFkIGxpY2Vuc2UgaW5mb1xyXG4gIGNvbnN0IGxpY2Vuc2VJbmZvID0gZ3J1bnQuZmlsZS5yZWFkSlNPTiggVEhJUkRfUEFSVFlfTElDRU5TRVNfRklMRU5BTUUgKTtcclxuXHJcbiAgbGV0IGxpY2Vuc2VLZXlzID0gZ2V0TGljZW5zZUtleXMoIHJlcG8sIGJyYW5kICk7XHJcblxyXG4gIC8vIEFkZCBhbGwgZGVwZW5kZW5jaWVzLiBEdXBsaWNhdGVzIHdpbGwgYmUgcmVtb3ZlZCBsYXRlci5cclxuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBsaWNlbnNlS2V5cy5sZW5ndGg7IGkrKyApIHtcclxuICAgIGNvbnN0IGxpY2Vuc2UgPSBsaWNlbnNlSW5mb1sgbGljZW5zZUtleXNbIGkgXSBdO1xyXG4gICAgYXNzZXJ0KCBsaWNlbnNlLCBgJHtUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRX06IG5vIGVudHJ5IGZvciBrZXkgPSAke2xpY2Vuc2VLZXlzWyBpIF19YCApO1xyXG4gICAgY29uc3QgZGVwZW5kZW5jaWVzID0gbGljZW5zZS5kZXBlbmRlbmNpZXM7XHJcbiAgICBpZiAoIHR5cGVvZiBkZXBlbmRlbmNpZXMgPT09ICdvYmplY3QnICkge1xyXG4gICAgICBsaWNlbnNlS2V5cyA9IGxpY2Vuc2VLZXlzLmNvbmNhdCggZGVwZW5kZW5jaWVzICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICAvLyBTb3J0IGtleXMgYW5kIHJlbW92ZSBkdXBsaWNhdGVzXHJcbiAgbGljZW5zZUtleXMgPSBfLnVuaXEoIF8uc29ydEJ5KCBsaWNlbnNlS2V5cywga2V5ID0+IGtleS50b1VwcGVyQ2FzZSgpICkgKTtcclxuXHJcbiAgZ3J1bnQubG9nLmRlYnVnKCBgbGljZW5zZUtleXMgPSAke2xpY2Vuc2VLZXlzLnRvU3RyaW5nKCl9YCApO1xyXG5cclxuICAvLyBDb21iaW5lIGFsbCBsaWNlbnNlcyBpbnRvIDEgb2JqZWN0IGxpdGVyYWxcclxuICBjb25zdCBsaWJFbnRyaWVzID0ge307XHJcbiAgbGljZW5zZUtleXMuZm9yRWFjaCgga2V5ID0+IHtcclxuXHJcbiAgICBjb25zdCBsaWNlbnNlID0gbGljZW5zZUluZm9bIGtleSBdO1xyXG5cclxuICAgIC8vIHZlcmlmeSByZXF1aXJlZCBrZXlzXHJcbiAgICBhc3NlcnQoIGxpY2Vuc2UsIGAke1RISVJEX1BBUlRZX0xJQ0VOU0VTX0ZJTEVOQU1FfTogbm8gZW50cnkgZm9yIGtleSA9ICR7a2V5fWAgKTtcclxuICAgIGFzc2VydCggbGljZW5zZS50ZXh0LCBgJHtUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRX06IG5vIHRleHQgZmllbGQgZm9yIGtleSA9ICR7a2V5fWAgKTtcclxuICAgIGFzc2VydCggbGljZW5zZS5saWNlbnNlLCBgJHtUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRX06IG5vIGxpY2Vuc2UgZmllbGQgZm9yIGtleSA9ICR7a2V5fWAgKTtcclxuICAgIGFzc2VydCggbGljZW5zZS5wcm9qZWN0VVJMLCBgJHtUSElSRF9QQVJUWV9MSUNFTlNFU19GSUxFTkFNRX06IG5vIHByb2plY3RVUkwgZmllbGQgZm9yIGtleSA9ICR7a2V5fWAgKTtcclxuICAgIGFzc2VydCggbGljZW5zZS5ub3RlcywgYCR7VEhJUkRfUEFSVFlfTElDRU5TRVNfRklMRU5BTUV9OiBubyBub3RlcyBmaWVsZCBmb3Iga2V5ID0gJHtrZXl9YCApO1xyXG5cclxuICAgIC8vIHJlYWQgdGhlIGxpY2Vuc2UgZmlsZVxyXG4gICAgY29uc3QgbGljZW5zZVRleHQgPSBncnVudC5maWxlLnJlYWQoIGAke0xJQ0VOU0VTX0RJUkVDVE9SWSArIGtleX0udHh0YCwgJ3V0Zi04JyApO1xyXG4gICAgbGljZW5zZS5saWNlbnNlVGV4dCA9IGxpY2Vuc2VUZXh0LnNwbGl0KCAvXFxyP1xcbi8gKTtcclxuXHJcbiAgICBsaWJFbnRyaWVzWyBrZXkgXSA9IGxpY2Vuc2U7XHJcbiAgfSApO1xyXG5cclxuICByZXR1cm4gbGliRW50cmllcztcclxufTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQTtBQUNBLE1BQU1BLENBQUMsR0FBR0MsT0FBTyxDQUFFLFFBQVMsQ0FBQztBQUM3QixNQUFNQyxNQUFNLEdBQUdELE9BQU8sQ0FBRSxRQUFTLENBQUM7QUFDbEMsTUFBTUUsY0FBYyxHQUFHRixPQUFPLENBQUUsa0JBQW1CLENBQUM7QUFDcEQsTUFBTUcsS0FBSyxHQUFHSCxPQUFPLENBQUUsT0FBUSxDQUFDO0FBRWhDLE1BQU1JLDZCQUE2QixHQUFHLDRCQUE0QixDQUFDLENBQUM7QUFDcEUsTUFBTUMsa0JBQWtCLEdBQUcscUJBQXFCLENBQUMsQ0FB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