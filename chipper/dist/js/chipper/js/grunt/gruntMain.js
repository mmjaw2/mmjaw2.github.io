// Copyright 2024, University of Colorado Boulder

/**
 * gruntMain.js is the entry point for launching the grunt tasks for the PhET build system.
 *
 * In order to support development with TypeScript for the grunt tasks, transpile before starting and then point
 * to the transpiled version.
 *
 * Since this is the entry point for TypeScript, it and its dependencies must remain in JavaScript.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */

/* eslint-env node */

// Switch between TypeScript and JavaScript
const LAUNCH_FROM_CHIPPER_DIST = false;
if (LAUNCH_FROM_CHIPPER_DIST) {
  const Transpiler = require('../../js/common/Transpiler');
  const commonJSTranspiler = new Transpiler();

  /**
   Transpile the entry points
   These files may have already been transpiled by a watch process. In that case, these lines are a no-op.
   For build servers and other processes that do not have a watch process, or if a developer watch process is not running
   or out-of-date, this will transpile synchronously during startup.
     If we forgot to transpile something, we will get a module not found runtime error, and
   can add more entry points to this list.
     Note that 2 Transpile processes trying to write the same file at the same time may corrupt the file, since
   we do not have atomic writes.
   */
  // TODO: should this be silent?  https://github.com/phetsims/chipper/issues/1437
  commonJSTranspiler.transpileRepoWithModes('chipper', ['commonjs']);
  commonJSTranspiler.transpileRepoWithModes('phet-core', ['commonjs']);
  commonJSTranspiler.transpileRepoWithModes('perennial-alias', ['commonjs']);
  commonJSTranspiler.saveCache();

  // TODO: Make sure the above repos are covered by tsconfig/all, see https://github.com/phetsims/chipper/issues/1437

  // use chipper's gruntfile
  module.exports = require('../../dist/commonjs/chipper/js/grunt/Gruntfile.js');
} else {
  module.exports = require('./Gruntfile.js');
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJMQVVOQ0hfRlJPTV9DSElQUEVSX0RJU1QiLCJUcmFuc3BpbGVyIiwicmVxdWlyZSIsImNvbW1vbkpTVHJhbnNwaWxlciIsInRyYW5zcGlsZVJlcG9XaXRoTW9kZXMiLCJzYXZlQ2FjaGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZ3J1bnRNYWluLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBncnVudE1haW4uanMgaXMgdGhlIGVudHJ5IHBvaW50IGZvciBsYXVuY2hpbmcgdGhlIGdydW50IHRhc2tzIGZvciB0aGUgUGhFVCBidWlsZCBzeXN0ZW0uXHJcbiAqXHJcbiAqIEluIG9yZGVyIHRvIHN1cHBvcnQgZGV2ZWxvcG1lbnQgd2l0aCBUeXBlU2NyaXB0IGZvciB0aGUgZ3J1bnQgdGFza3MsIHRyYW5zcGlsZSBiZWZvcmUgc3RhcnRpbmcgYW5kIHRoZW4gcG9pbnRcclxuICogdG8gdGhlIHRyYW5zcGlsZWQgdmVyc2lvbi5cclxuICpcclxuICogU2luY2UgdGhpcyBpcyB0aGUgZW50cnkgcG9pbnQgZm9yIFR5cGVTY3JpcHQsIGl0IGFuZCBpdHMgZGVwZW5kZW5jaWVzIG11c3QgcmVtYWluIGluIEphdmFTY3JpcHQuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuLyogZXNsaW50LWVudiBub2RlICovXHJcblxyXG4vLyBTd2l0Y2ggYmV0d2VlbiBUeXBlU2NyaXB0IGFuZCBKYXZhU2NyaXB0XHJcbmNvbnN0IExBVU5DSF9GUk9NX0NISVBQRVJfRElTVCA9IGZhbHNlO1xyXG5cclxuaWYgKCBMQVVOQ0hfRlJPTV9DSElQUEVSX0RJU1QgKSB7XHJcblxyXG4gIGNvbnN0IFRyYW5zcGlsZXIgPSByZXF1aXJlKCAnLi4vLi4vanMvY29tbW9uL1RyYW5zcGlsZXInICk7XHJcblxyXG4gIGNvbnN0IGNvbW1vbkpTVHJhbnNwaWxlciA9IG5ldyBUcmFuc3BpbGVyKCk7XHJcblxyXG4gIC8qKlxyXG4gICBUcmFuc3BpbGUgdGhlIGVudHJ5IHBvaW50c1xyXG4gICBUaGVzZSBmaWxlcyBtYXkgaGF2ZSBhbHJlYWR5IGJlZW4gdHJhbnNwaWxlZCBieSBhIHdhdGNoIHByb2Nlc3MuIEluIHRoYXQgY2FzZSwgdGhlc2UgbGluZXMgYXJlIGEgbm8tb3AuXHJcbiAgIEZvciBidWlsZCBzZXJ2ZXJzIGFuZCBvdGhlciBwcm9jZXNzZXMgdGhhdCBkbyBub3QgaGF2ZSBhIHdhdGNoIHByb2Nlc3MsIG9yIGlmIGEgZGV2ZWxvcGVyIHdhdGNoIHByb2Nlc3MgaXMgbm90IHJ1bm5pbmdcclxuICAgb3Igb3V0LW9mLWRhdGUsIHRoaXMgd2lsbCB0cmFuc3BpbGUgc3luY2hyb25vdXNseSBkdXJpbmcgc3RhcnR1cC5cclxuXHJcbiAgIElmIHdlIGZvcmdvdCB0byB0cmFuc3BpbGUgc29tZXRoaW5nLCB3ZSB3aWxsIGdldCBhIG1vZHVsZSBub3QgZm91bmQgcnVudGltZSBlcnJvciwgYW5kXHJcbiAgIGNhbiBhZGQgbW9yZSBlbnRyeSBwb2ludHMgdG8gdGhpcyBsaXN0LlxyXG5cclxuICAgTm90ZSB0aGF0IDIgVHJhbnNwaWxlIHByb2Nlc3NlcyB0cnlpbmcgdG8gd3JpdGUgdGhlIHNhbWUgZmlsZSBhdCB0aGUgc2FtZSB0aW1lIG1heSBjb3JydXB0IHRoZSBmaWxlLCBzaW5jZVxyXG4gICB3ZSBkbyBub3QgaGF2ZSBhdG9taWMgd3JpdGVzLlxyXG4gICAqL1xyXG4gIC8vIFRPRE86IHNob3VsZCB0aGlzIGJlIHNpbGVudD8gIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9jaGlwcGVyL2lzc3Vlcy8xNDM3XHJcbiAgY29tbW9uSlNUcmFuc3BpbGVyLnRyYW5zcGlsZVJlcG9XaXRoTW9kZXMoICdjaGlwcGVyJywgWyAnY29tbW9uanMnIF0gKTtcclxuICBjb21tb25KU1RyYW5zcGlsZXIudHJhbnNwaWxlUmVwb1dpdGhNb2RlcyggJ3BoZXQtY29yZScsIFsgJ2NvbW1vbmpzJyBdICk7XHJcbiAgY29tbW9uSlNUcmFuc3BpbGVyLnRyYW5zcGlsZVJlcG9XaXRoTW9kZXMoICdwZXJlbm5pYWwtYWxpYXMnLCBbICdjb21tb25qcycgXSApO1xyXG4gIGNvbW1vbkpTVHJhbnNwaWxlci5zYXZlQ2FjaGUoKTtcclxuXHJcbiAgLy8gVE9ETzogTWFrZSBzdXJlIHRoZSBhYm92ZSByZXBvcyBhcmUgY292ZXJlZCBieSB0c2NvbmZpZy9hbGwsIHNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvY2hpcHBlci9pc3N1ZXMvMTQzN1xyXG5cclxuICAvLyB1c2UgY2hpcHBlcidzIGdydW50ZmlsZVxyXG4gIG1vZHVsZS5leHBvcnRzID0gcmVxdWlyZSggJy4uLy4uL2Rpc3QvY29tbW9uanMvY2hpcHBlci9qcy9ncnVudC9HcnVudGZpbGUuanMnICk7XHJcbn1cclxuZWxzZSB7XHJcbiAgbW9kdWxlLmV4cG9ydHMgPSByZXF1aXJlKCAnLi9HcnVudGZpbGUuanMnICk7XHJcbn0iXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0EsTUFBTUEsd0JBQXdCLEdBQUcsS0FBSztBQUV0QyxJQUFLQSx3QkFBd0IsRUFBRztFQUU5QixNQUFNQyxVQUFVLEdBQUdDLE9BQU8sQ0FBRSw0QkFBNkIsQ0FBQztFQUUxRCxNQUFNQyxrQkFBa0IsR0FBRyxJQUFJRixVQUFVLENBQUMsQ0FBQzs7RUFFM0M7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFHRTtFQUNBRSxrQkFBa0IsQ0FBQ0Msc0JBQXNCLENBQUUsU0FBUyxFQUFFLENBQUUsVUFBVSxDQUFHLENBQUM7RUFDdEVELGtCQUFrQixDQUFDQyxzQkFBc0IsQ0FBRSxXQUFXLEVBQUUsQ0FBRSxVQUFVLENBQUcsQ0FBQztFQUN4RUQsa0JBQWtCLENBQUNDLHNCQUFzQixDQUFFLGlCQUFpQixFQUFFLENBQUUsVUFBVSxDQUFHLENBQUM7RUFDOUVELGtCQUFrQixDQUFDRSxTQUFTLENBQUMsQ0FBQzs7RUFFOUI7O0VBRUE7RUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUdMLE9BQU8sQ0FBRSxtREFBb0QsQ0FBQztBQUNqRixDQUFDLE1BQ0k7RUFDSEksTUFBTSxDQUFDQyxPQUFPLEdBQUdMLE9BQU8sQ0FBRSxnQkFBaUIsQ0FBQztBQUM5QyIsImlnbm9yZUxpc3QiOltdfQ==