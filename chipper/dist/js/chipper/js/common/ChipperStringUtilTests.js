// Copyright 2019-2024, University of Colorado Boulder

/**
 * Tests for ChipperStringUtils
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

/* eslint-env node*/

const ChipperStringUtils = require('./ChipperStringUtils');
const qunit = require('qunit');
qunit.module('ChipperStringUtils');
qunit.test('forEachString', assert => {
  const map1 = {
    x: {
      value: 'x'
    },
    y: {
      value: 'y',
      z: {
        value: 'z'
      }
    },
    intermediary: {
      a: {
        value: 'a'
      },
      b: {
        value: 'b'
      },
      intermediary2: {
        c: {
          value: 'c'
        }
      }
    }
  };
  let count = 0;
  const expectedKeys = ['x', 'y', 'y.z', 'intermediary.a', 'intermediary.b', 'intermediary.intermediary2.c'];
  ChipperStringUtils.forEachString(map1, key => {
    count++;
    const keyIndex = expectedKeys.indexOf(key);
    assert.ok(keyIndex >= 0, `unexpected key:${key}`);
    expectedKeys.splice(keyIndex, 1); // just remove the single item
  });
  assert.ok(expectedKeys.length === 0, 'all keys should be accounted for');
  assert.ok(count === 6, 'should be three string');
  assert.ok(true, 'success');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGlwcGVyU3RyaW5nVXRpbHMiLCJyZXF1aXJlIiwicXVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0IiwibWFwMSIsIngiLCJ2YWx1ZSIsInkiLCJ6IiwiaW50ZXJtZWRpYXJ5IiwiYSIsImIiLCJpbnRlcm1lZGlhcnkyIiwiYyIsImNvdW50IiwiZXhwZWN0ZWRLZXlzIiwiZm9yRWFjaFN0cmluZyIsImtleSIsImtleUluZGV4IiwiaW5kZXhPZiIsIm9rIiwic3BsaWNlIiwibGVuZ3RoIl0sInNvdXJjZXMiOlsiQ2hpcHBlclN0cmluZ1V0aWxUZXN0cy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBmb3IgQ2hpcHBlclN0cmluZ1V0aWxzXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG4vKiBlc2xpbnQtZW52IG5vZGUqL1xyXG5cclxuXHJcbmNvbnN0IENoaXBwZXJTdHJpbmdVdGlscyA9IHJlcXVpcmUoICcuL0NoaXBwZXJTdHJpbmdVdGlscycgKTtcclxuY29uc3QgcXVuaXQgPSByZXF1aXJlKCAncXVuaXQnICk7XHJcbnF1bml0Lm1vZHVsZSggJ0NoaXBwZXJTdHJpbmdVdGlscycgKTtcclxuXHJcblxyXG5xdW5pdC50ZXN0KCAnZm9yRWFjaFN0cmluZycsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgbWFwMSA9IHtcclxuICAgIHg6IHsgdmFsdWU6ICd4JyB9LFxyXG4gICAgeToge1xyXG4gICAgICB2YWx1ZTogJ3knLFxyXG4gICAgICB6OiB7IHZhbHVlOiAneicgfVxyXG4gICAgfSxcclxuICAgIGludGVybWVkaWFyeToge1xyXG4gICAgICBhOiB7IHZhbHVlOiAnYScgfSxcclxuICAgICAgYjogeyB2YWx1ZTogJ2InIH0sXHJcbiAgICAgIGludGVybWVkaWFyeTI6IHtcclxuICAgICAgICBjOiB7IHZhbHVlOiAnYycgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgbGV0IGNvdW50ID0gMDtcclxuICBjb25zdCBleHBlY3RlZEtleXMgPSBbXHJcbiAgICAneCcsXHJcbiAgICAneScsXHJcbiAgICAneS56JyxcclxuICAgICdpbnRlcm1lZGlhcnkuYScsXHJcbiAgICAnaW50ZXJtZWRpYXJ5LmInLFxyXG4gICAgJ2ludGVybWVkaWFyeS5pbnRlcm1lZGlhcnkyLmMnXHJcbiAgXTtcclxuICBDaGlwcGVyU3RyaW5nVXRpbHMuZm9yRWFjaFN0cmluZyggbWFwMSwga2V5ID0+IHtcclxuICAgIGNvdW50Kys7XHJcbiAgICBjb25zdCBrZXlJbmRleCA9IGV4cGVjdGVkS2V5cy5pbmRleE9mKCBrZXkgKTtcclxuICAgIGFzc2VydC5vaygga2V5SW5kZXggPj0gMCwgYHVuZXhwZWN0ZWQga2V5OiR7a2V5fWAgKTtcclxuICAgIGV4cGVjdGVkS2V5cy5zcGxpY2UoIGtleUluZGV4LCAxICk7IC8vIGp1c3QgcmVtb3ZlIHRoZSBzaW5nbGUgaXRlbVxyXG4gIH0gKTtcclxuICBhc3NlcnQub2soIGV4cGVjdGVkS2V5cy5sZW5ndGggPT09IDAsICdhbGwga2V5cyBzaG91bGQgYmUgYWNjb3VudGVkIGZvcicgKTtcclxuICBhc3NlcnQub2soIGNvdW50ID09PSA2LCAnc2hvdWxkIGJlIHRocmVlIHN0cmluZycgKTtcclxuICBhc3NlcnQub2soIHRydWUsICdzdWNjZXNzJyApO1xyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFHQSxNQUFNQSxrQkFBa0IsR0FBR0MsT0FBTyxDQUFFLHNCQUF1QixDQUFDO0FBQzVELE1BQU1DLEtBQUssR0FBR0QsT0FBTyxDQUFFLE9BQVEsQ0FBQztBQUNoQ0MsS0FBSyxDQUFDQyxNQUFNLENBQUUsb0JBQXFCLENBQUM7QUFHcENELEtBQUssQ0FBQ0UsSUFBSSxDQUFFLGVBQWUsRUFBRUMsTUFBTSxJQUFJO0VBQ3JDLE1BQU1DLElBQUksR0FBRztJQUNYQyxDQUFDLEVBQUU7TUFBRUMsS0FBSyxFQUFFO0lBQUksQ0FBQztJQUNqQkMsQ0FBQyxFQUFFO01BQ0RELEtBQUssRUFBRSxHQUFHO01BQ1ZFLENBQUMsRUFBRTtRQUFFRixLQUFLLEVBQUU7TUFBSTtJQUNsQixDQUFDO0lBQ0RHLFlBQVksRUFBRTtNQUNaQyxDQUFDLEVBQUU7UUFBRUosS0FBSyxFQUFFO01BQUksQ0FBQztNQUNqQkssQ0FBQyxFQUFFO1FBQUVMLEtBQUssRUFBRTtNQUFJLENBQUM7TUFDakJNLGFBQWEsRUFBRTtRQUNiQyxDQUFDLEVBQUU7VUFBRVAsS0FBSyxFQUFFO1FBQUk7TUFDbEI7SUFDRjtFQUNGLENBQUM7RUFFRCxJQUFJUSxLQUFLLEdBQUcsQ0FBQztFQUNiLE1BQU1DLFlBQVksR0FBRyxDQUNuQixHQUFHLEVBQ0gsR0FBRyxFQUNILEtBQUssRUFDTCxnQkFBZ0IsRUFDaEIsZ0JBQWdCLEVBQ2hCLDhCQUE4QixDQUMvQjtFQUNEakIsa0JBQWtCLENBQUNrQixhQUFhLENBQUVaLElBQUksRUFBRWEsR0FBRyxJQUFJO0lBQzdDSCxLQUFLLEVBQUU7SUFDUCxNQUFNSSxRQUFRLEdBQUdILFlBQVksQ0FBQ0ksT0FBTyxDQUFFRixHQUFJLENBQUM7SUFDNUNkLE1BQU0sQ0FBQ2lCLEVBQUUsQ0FBRUYsUUFBUSxJQUFJLENBQUMsRUFBRyxrQkFBaUJELEdBQUksRUFBRSxDQUFDO0lBQ25ERixZQUFZLENBQUNNLE1BQU0sQ0FBRUgsUUFBUSxFQUFFLENBQUUsQ0FBQyxDQUFDLENBQUM7RUFDdEMsQ0FBRSxDQUFDO0VBQ0hmLE1BQU0sQ0FBQ2lCLEVBQUUsQ0FBRUwsWUFBWSxDQUFDTyxNQUFNLEtBQUssQ0FBQyxFQUFFLGtDQUFtQyxDQUFDO0VBQzFFbkIsTUFBTSxDQUFDaUIsRUFBRSxDQUFFTixLQUFLLEtBQUssQ0FBQyxFQUFFLHdCQUF5QixDQUFDO0VBQ2xEWCxNQUFNLENBQUNpQixFQUFFLENBQUUsSUFBSSxFQUFFLFNBQVUsQ0FBQztBQUM5QixDQUFFLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=