// Copyright 2022-2023, University of Colorado Boulder

/**
 * A superclass for a panel of content in the Preferences Dialog. Mostly responsible for visibility of panel content.
 *
 * @author Jesse Greenberg
 */

import joist from '../joist.js';
import { Node } from '../../../scenery/js/imports.js';
import Multilink from '../../../axon/js/Multilink.js';
import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
class PreferencesPanel extends Node {
  /**
   * @param preferencesType - PreferencesType for this panel
   * @param selectedTabProperty - Property representing the selected tab to be displayed.
   * @param tabVisibleProperty - Is the Tab for this panel invisible (so this panel should also be invisible)?
   * @param providedOptions
   */
  constructor(preferencesType, selectedTabProperty, tabVisibleProperty, providedOptions) {
    const options = optionize()({
      // pdom
      tagName: 'div',
      labelTagName: 'h2'
    }, providedOptions);

    // don't instrument the Panel Node itself, though many subclasses make it required for subcomponents
    options.tandem = Tandem.OPT_OUT;
    super(options);

    // This panel is only visible when selected tab is this preferencesType, but it can also be hidden explicitly by
    // PhET-iO.
    Multilink.multilink([selectedTabProperty, tabVisibleProperty], (selectedTab, tabVisible) => {
      this.visible = selectedTab === preferencesType && tabVisible;
    });
  }
}
joist.register('PreferencesPanel', PreferencesPanel);
export default PreferencesPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsIk5vZGUiLCJNdWx0aWxpbmsiLCJvcHRpb25pemUiLCJUYW5kZW0iLCJQcmVmZXJlbmNlc1BhbmVsIiwiY29uc3RydWN0b3IiLCJwcmVmZXJlbmNlc1R5cGUiLCJzZWxlY3RlZFRhYlByb3BlcnR5IiwidGFiVmlzaWJsZVByb3BlcnR5IiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInRhZ05hbWUiLCJsYWJlbFRhZ05hbWUiLCJ0YW5kZW0iLCJPUFRfT1VUIiwibXVsdGlsaW5rIiwic2VsZWN0ZWRUYWIiLCJ0YWJWaXNpYmxlIiwidmlzaWJsZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUHJlZmVyZW5jZXNQYW5lbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHN1cGVyY2xhc3MgZm9yIGEgcGFuZWwgb2YgY29udGVudCBpbiB0aGUgUHJlZmVyZW5jZXMgRGlhbG9nLiBNb3N0bHkgcmVzcG9uc2libGUgZm9yIHZpc2liaWxpdHkgb2YgcGFuZWwgY29udGVudC5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi4vam9pc3QuanMnO1xyXG5pbXBvcnQgeyBOb2RlLCBOb2RlT3B0aW9ucyB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmsgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9NdWx0aWxpbmsuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc1R5cGUgZnJvbSAnLi9QcmVmZXJlbmNlc1R5cGUuanMnO1xyXG5pbXBvcnQgb3B0aW9uaXplLCB7IEVtcHR5U2VsZk9wdGlvbnMgfSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IEVtcHR5U2VsZk9wdGlvbnM7XHJcbmV4cG9ydCB0eXBlIFByZWZlcmVuY2VzUGFuZWxPcHRpb25zID0gU3RyaWN0T21pdDxOb2RlT3B0aW9ucywgJ3RhZ05hbWUnIHwgJ2xhYmVsVGFnTmFtZSc+O1xyXG5cclxuY2xhc3MgUHJlZmVyZW5jZXNQYW5lbCBleHRlbmRzIE5vZGUge1xyXG5cclxuICAvKipcclxuICAgKiBAcGFyYW0gcHJlZmVyZW5jZXNUeXBlIC0gUHJlZmVyZW5jZXNUeXBlIGZvciB0aGlzIHBhbmVsXHJcbiAgICogQHBhcmFtIHNlbGVjdGVkVGFiUHJvcGVydHkgLSBQcm9wZXJ0eSByZXByZXNlbnRpbmcgdGhlIHNlbGVjdGVkIHRhYiB0byBiZSBkaXNwbGF5ZWQuXHJcbiAgICogQHBhcmFtIHRhYlZpc2libGVQcm9wZXJ0eSAtIElzIHRoZSBUYWIgZm9yIHRoaXMgcGFuZWwgaW52aXNpYmxlIChzbyB0aGlzIHBhbmVsIHNob3VsZCBhbHNvIGJlIGludmlzaWJsZSk/XHJcbiAgICogQHBhcmFtIHByb3ZpZGVkT3B0aW9uc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJlZmVyZW5jZXNUeXBlOiBQcmVmZXJlbmNlc1R5cGUsIHNlbGVjdGVkVGFiUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PFByZWZlcmVuY2VzVHlwZT4sIHRhYlZpc2libGVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Ym9vbGVhbj4sIHByb3ZpZGVkT3B0aW9ucz86IFByZWZlcmVuY2VzUGFuZWxPcHRpb25zICkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxQcmVmZXJlbmNlc1BhbmVsT3B0aW9ucywgU2VsZk9wdGlvbnMsIE5vZGVPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBwZG9tXHJcbiAgICAgIHRhZ05hbWU6ICdkaXYnLFxyXG4gICAgICBsYWJlbFRhZ05hbWU6ICdoMidcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIC8vIGRvbid0IGluc3RydW1lbnQgdGhlIFBhbmVsIE5vZGUgaXRzZWxmLCB0aG91Z2ggbWFueSBzdWJjbGFzc2VzIG1ha2UgaXQgcmVxdWlyZWQgZm9yIHN1YmNvbXBvbmVudHNcclxuICAgIG9wdGlvbnMudGFuZGVtID0gVGFuZGVtLk9QVF9PVVQ7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICAvLyBUaGlzIHBhbmVsIGlzIG9ubHkgdmlzaWJsZSB3aGVuIHNlbGVjdGVkIHRhYiBpcyB0aGlzIHByZWZlcmVuY2VzVHlwZSwgYnV0IGl0IGNhbiBhbHNvIGJlIGhpZGRlbiBleHBsaWNpdGx5IGJ5XHJcbiAgICAvLyBQaEVULWlPLlxyXG4gICAgTXVsdGlsaW5rLm11bHRpbGluayggWyBzZWxlY3RlZFRhYlByb3BlcnR5LCB0YWJWaXNpYmxlUHJvcGVydHkgXSwgKCBzZWxlY3RlZFRhYiwgdGFiVmlzaWJsZSApID0+IHtcclxuICAgICAgdGhpcy52aXNpYmxlID0gc2VsZWN0ZWRUYWIgPT09IHByZWZlcmVuY2VzVHlwZSAmJiB0YWJWaXNpYmxlO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdQcmVmZXJlbmNlc1BhbmVsJywgUHJlZmVyZW5jZXNQYW5lbCApO1xyXG5leHBvcnQgZGVmYXVsdCBQcmVmZXJlbmNlc1BhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sYUFBYTtBQUMvQixTQUFTQyxJQUFJLFFBQXFCLGdDQUFnQztBQUNsRSxPQUFPQyxTQUFTLE1BQU0sK0JBQStCO0FBR3JELE9BQU9DLFNBQVMsTUFBNEIsb0NBQW9DO0FBRWhGLE9BQU9DLE1BQU0sTUFBTSw4QkFBOEI7QUFLakQsTUFBTUMsZ0JBQWdCLFNBQVNKLElBQUksQ0FBQztFQUVsQztBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDU0ssV0FBV0EsQ0FBRUMsZUFBZ0MsRUFBRUMsbUJBQXVELEVBQUVDLGtCQUE4QyxFQUFFQyxlQUF5QyxFQUFHO0lBQ3pNLE1BQU1DLE9BQU8sR0FBR1IsU0FBUyxDQUFvRCxDQUFDLENBQUU7TUFFOUU7TUFDQVMsT0FBTyxFQUFFLEtBQUs7TUFDZEMsWUFBWSxFQUFFO0lBQ2hCLENBQUMsRUFBRUgsZUFBZ0IsQ0FBQzs7SUFFcEI7SUFDQUMsT0FBTyxDQUFDRyxNQUFNLEdBQUdWLE1BQU0sQ0FBQ1csT0FBTztJQUUvQixLQUFLLENBQUVKLE9BQVEsQ0FBQzs7SUFFaEI7SUFDQTtJQUNBVCxTQUFTLENBQUNjLFNBQVMsQ0FBRSxDQUFFUixtQkFBbUIsRUFBRUMsa0JBQWtCLENBQUUsRUFBRSxDQUFFUSxXQUFXLEVBQUVDLFVBQVUsS0FBTTtNQUMvRixJQUFJLENBQUNDLE9BQU8sR0FBR0YsV0FBVyxLQUFLVixlQUFlLElBQUlXLFVBQVU7SUFDOUQsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBbEIsS0FBSyxDQUFDb0IsUUFBUSxDQUFFLGtCQUFrQixFQUFFZixnQkFBaUIsQ0FBQztBQUN0RCxlQUFlQSxnQkFBZ0IiLCJpZ25vcmVMaXN0IjpbXX0=