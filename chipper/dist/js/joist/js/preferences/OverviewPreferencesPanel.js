// Copyright 2022-2024, University of Colorado Boulder

/**
 * The content for the "Overview" panel of the Preferences dialog. It includes an introduction blurb
 * about features available in Preferences. This panel is always present in the dialog.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import merge from '../../../phet-core/js/merge.js';
import { VBox, VoicingRichText } from '../../../scenery/js/imports.js';
import isLeftToRightProperty from '../i18n/isLeftToRightProperty.js';
import joist from '../joist.js';
import JoistStrings from '../JoistStrings.js';
import PreferencesDialog from './PreferencesDialog.js';
import PreferencesPanel from './PreferencesPanel.js';
import PreferencesType from './PreferencesType.js';
class OverviewPreferencesPanel extends PreferencesPanel {
  constructor(selectedTabProperty, tabVisibleProperty) {
    super(PreferencesType.OVERVIEW, selectedTabProperty, tabVisibleProperty);
    const introTextOptions = merge({}, PreferencesDialog.PANEL_SECTION_CONTENT_OPTIONS, {
      // using lineWrap instead of default maxWidth for content
      maxWidth: null,
      lineWrap: 600,
      maxHeight: 600,
      tagName: 'p'
    });
    const introParagraphsTexts = [
    // These string keys go through preferences.tabs.general because they used to
    // live in that tab. But now we cannot rename the string keys.
    new VoicingRichText(JoistStrings.preferences.tabs.general.accessibilityIntroStringProperty, introTextOptions), new VoicingRichText(JoistStrings.preferences.tabs.general.moreAccessibilityStringProperty, introTextOptions)];
    const panelContent = new VBox({
      spacing: 10,
      children: introParagraphsTexts
    });
    this.addChild(panelContent);
    const leftToRightListener = isLTR => {
      introParagraphsTexts.forEach(text => {
        const align = isLTR ? 'left' : 'right';
        text.align = align;
        panelContent.align = align;
      });
    };
    isLeftToRightProperty.link(leftToRightListener);
  }
}
joist.register('OverviewPreferencesPanel', OverviewPreferencesPanel);
export default OverviewPreferencesPanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlZCb3giLCJWb2ljaW5nUmljaFRleHQiLCJpc0xlZnRUb1JpZ2h0UHJvcGVydHkiLCJqb2lzdCIsIkpvaXN0U3RyaW5ncyIsIlByZWZlcmVuY2VzRGlhbG9nIiwiUHJlZmVyZW5jZXNQYW5lbCIsIlByZWZlcmVuY2VzVHlwZSIsIk92ZXJ2aWV3UHJlZmVyZW5jZXNQYW5lbCIsImNvbnN0cnVjdG9yIiwic2VsZWN0ZWRUYWJQcm9wZXJ0eSIsInRhYlZpc2libGVQcm9wZXJ0eSIsIk9WRVJWSUVXIiwiaW50cm9UZXh0T3B0aW9ucyIsIlBBTkVMX1NFQ1RJT05fQ09OVEVOVF9PUFRJT05TIiwibWF4V2lkdGgiLCJsaW5lV3JhcCIsIm1heEhlaWdodCIsInRhZ05hbWUiLCJpbnRyb1BhcmFncmFwaHNUZXh0cyIsInByZWZlcmVuY2VzIiwidGFicyIsImdlbmVyYWwiLCJhY2Nlc3NpYmlsaXR5SW50cm9TdHJpbmdQcm9wZXJ0eSIsIm1vcmVBY2Nlc3NpYmlsaXR5U3RyaW5nUHJvcGVydHkiLCJwYW5lbENvbnRlbnQiLCJzcGFjaW5nIiwiY2hpbGRyZW4iLCJhZGRDaGlsZCIsImxlZnRUb1JpZ2h0TGlzdGVuZXIiLCJpc0xUUiIsImZvckVhY2giLCJ0ZXh0IiwiYWxpZ24iLCJsaW5rIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPdmVydmlld1ByZWZlcmVuY2VzUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGhlIGNvbnRlbnQgZm9yIHRoZSBcIk92ZXJ2aWV3XCIgcGFuZWwgb2YgdGhlIFByZWZlcmVuY2VzIGRpYWxvZy4gSXQgaW5jbHVkZXMgYW4gaW50cm9kdWN0aW9uIGJsdXJiXHJcbiAqIGFib3V0IGZlYXR1cmVzIGF2YWlsYWJsZSBpbiBQcmVmZXJlbmNlcy4gVGhpcyBwYW5lbCBpcyBhbHdheXMgcHJlc2VudCBpbiB0aGUgZGlhbG9nLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgeyBWQm94LCBWb2ljaW5nUmljaFRleHQgfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgaXNMZWZ0VG9SaWdodFByb3BlcnR5IGZyb20gJy4uL2kxOG4vaXNMZWZ0VG9SaWdodFByb3BlcnR5LmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IEpvaXN0U3RyaW5ncyBmcm9tICcuLi9Kb2lzdFN0cmluZ3MuanMnO1xyXG5pbXBvcnQgUHJlZmVyZW5jZXNEaWFsb2cgZnJvbSAnLi9QcmVmZXJlbmNlc0RpYWxvZy5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc1BhbmVsIGZyb20gJy4vUHJlZmVyZW5jZXNQYW5lbC5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc1R5cGUgZnJvbSAnLi9QcmVmZXJlbmNlc1R5cGUuanMnO1xyXG5cclxuY2xhc3MgT3ZlcnZpZXdQcmVmZXJlbmNlc1BhbmVsIGV4dGVuZHMgUHJlZmVyZW5jZXNQYW5lbCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBzZWxlY3RlZFRhYlByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxQcmVmZXJlbmNlc1R5cGU+LCB0YWJWaXNpYmxlUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+ICkge1xyXG4gICAgc3VwZXIoIFByZWZlcmVuY2VzVHlwZS5PVkVSVklFVywgc2VsZWN0ZWRUYWJQcm9wZXJ0eSwgdGFiVmlzaWJsZVByb3BlcnR5ICk7XHJcblxyXG4gICAgY29uc3QgaW50cm9UZXh0T3B0aW9ucyA9IG1lcmdlKCB7fSwgUHJlZmVyZW5jZXNEaWFsb2cuUEFORUxfU0VDVElPTl9DT05URU5UX09QVElPTlMsIHtcclxuXHJcbiAgICAgIC8vIHVzaW5nIGxpbmVXcmFwIGluc3RlYWQgb2YgZGVmYXVsdCBtYXhXaWR0aCBmb3IgY29udGVudFxyXG4gICAgICBtYXhXaWR0aDogbnVsbCxcclxuICAgICAgbGluZVdyYXA6IDYwMCxcclxuICAgICAgbWF4SGVpZ2h0OiA2MDAsXHJcbiAgICAgIHRhZ05hbWU6ICdwJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIGNvbnN0IGludHJvUGFyYWdyYXBoc1RleHRzID0gW1xyXG5cclxuICAgICAgLy8gVGhlc2Ugc3RyaW5nIGtleXMgZ28gdGhyb3VnaCBwcmVmZXJlbmNlcy50YWJzLmdlbmVyYWwgYmVjYXVzZSB0aGV5IHVzZWQgdG9cclxuICAgICAgLy8gbGl2ZSBpbiB0aGF0IHRhYi4gQnV0IG5vdyB3ZSBjYW5ub3QgcmVuYW1lIHRoZSBzdHJpbmcga2V5cy5cclxuICAgICAgbmV3IFZvaWNpbmdSaWNoVGV4dCggSm9pc3RTdHJpbmdzLnByZWZlcmVuY2VzLnRhYnMuZ2VuZXJhbC5hY2Nlc3NpYmlsaXR5SW50cm9TdHJpbmdQcm9wZXJ0eSwgaW50cm9UZXh0T3B0aW9ucyApLFxyXG4gICAgICBuZXcgVm9pY2luZ1JpY2hUZXh0KCBKb2lzdFN0cmluZ3MucHJlZmVyZW5jZXMudGFicy5nZW5lcmFsLm1vcmVBY2Nlc3NpYmlsaXR5U3RyaW5nUHJvcGVydHksIGludHJvVGV4dE9wdGlvbnMgKVxyXG4gICAgXTtcclxuXHJcbiAgICBjb25zdCBwYW5lbENvbnRlbnQgPSBuZXcgVkJveCggeyBzcGFjaW5nOiAxMCwgY2hpbGRyZW46IGludHJvUGFyYWdyYXBoc1RleHRzIH0gKTtcclxuICAgIHRoaXMuYWRkQ2hpbGQoIHBhbmVsQ29udGVudCApO1xyXG5cclxuICAgIGNvbnN0IGxlZnRUb1JpZ2h0TGlzdGVuZXIgPSAoIGlzTFRSOiBib29sZWFuICkgPT4ge1xyXG4gICAgICBpbnRyb1BhcmFncmFwaHNUZXh0cy5mb3JFYWNoKCB0ZXh0ID0+IHtcclxuICAgICAgICBjb25zdCBhbGlnbiA9IGlzTFRSID8gJ2xlZnQnIDogJ3JpZ2h0JztcclxuICAgICAgICB0ZXh0LmFsaWduID0gYWxpZ247XHJcbiAgICAgICAgcGFuZWxDb250ZW50LmFsaWduID0gYWxpZ247XHJcbiAgICAgIH0gKTtcclxuICAgIH07XHJcbiAgICBpc0xlZnRUb1JpZ2h0UHJvcGVydHkubGluayggbGVmdFRvUmlnaHRMaXN0ZW5lciApO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdPdmVydmlld1ByZWZlcmVuY2VzUGFuZWwnLCBPdmVydmlld1ByZWZlcmVuY2VzUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgT3ZlcnZpZXdQcmVmZXJlbmNlc1BhbmVsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUdBLE9BQU9BLEtBQUssTUFBTSxnQ0FBZ0M7QUFDbEQsU0FBU0MsSUFBSSxFQUFFQyxlQUFlLFFBQVEsZ0NBQWdDO0FBQ3RFLE9BQU9DLHFCQUFxQixNQUFNLGtDQUFrQztBQUNwRSxPQUFPQyxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyxZQUFZLE1BQU0sb0JBQW9CO0FBQzdDLE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFDcEQsT0FBT0MsZUFBZSxNQUFNLHNCQUFzQjtBQUVsRCxNQUFNQyx3QkFBd0IsU0FBU0YsZ0JBQWdCLENBQUM7RUFDL0NHLFdBQVdBLENBQUVDLG1CQUF1RCxFQUFFQyxrQkFBOEMsRUFBRztJQUM1SCxLQUFLLENBQUVKLGVBQWUsQ0FBQ0ssUUFBUSxFQUFFRixtQkFBbUIsRUFBRUMsa0JBQW1CLENBQUM7SUFFMUUsTUFBTUUsZ0JBQWdCLEdBQUdkLEtBQUssQ0FBRSxDQUFDLENBQUMsRUFBRU0saUJBQWlCLENBQUNTLDZCQUE2QixFQUFFO01BRW5GO01BQ0FDLFFBQVEsRUFBRSxJQUFJO01BQ2RDLFFBQVEsRUFBRSxHQUFHO01BQ2JDLFNBQVMsRUFBRSxHQUFHO01BQ2RDLE9BQU8sRUFBRTtJQUNYLENBQUUsQ0FBQztJQUVILE1BQU1DLG9CQUFvQixHQUFHO0lBRTNCO0lBQ0E7SUFDQSxJQUFJbEIsZUFBZSxDQUFFRyxZQUFZLENBQUNnQixXQUFXLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxnQ0FBZ0MsRUFBRVYsZ0JBQWlCLENBQUMsRUFDL0csSUFBSVosZUFBZSxDQUFFRyxZQUFZLENBQUNnQixXQUFXLENBQUNDLElBQUksQ0FBQ0MsT0FBTyxDQUFDRSwrQkFBK0IsRUFBRVgsZ0JBQWlCLENBQUMsQ0FDL0c7SUFFRCxNQUFNWSxZQUFZLEdBQUcsSUFBSXpCLElBQUksQ0FBRTtNQUFFMEIsT0FBTyxFQUFFLEVBQUU7TUFBRUMsUUFBUSxFQUFFUjtJQUFxQixDQUFFLENBQUM7SUFDaEYsSUFBSSxDQUFDUyxRQUFRLENBQUVILFlBQWEsQ0FBQztJQUU3QixNQUFNSSxtQkFBbUIsR0FBS0MsS0FBYyxJQUFNO01BQ2hEWCxvQkFBb0IsQ0FBQ1ksT0FBTyxDQUFFQyxJQUFJLElBQUk7UUFDcEMsTUFBTUMsS0FBSyxHQUFHSCxLQUFLLEdBQUcsTUFBTSxHQUFHLE9BQU87UUFDdENFLElBQUksQ0FBQ0MsS0FBSyxHQUFHQSxLQUFLO1FBQ2xCUixZQUFZLENBQUNRLEtBQUssR0FBR0EsS0FBSztNQUM1QixDQUFFLENBQUM7SUFDTCxDQUFDO0lBQ0QvQixxQkFBcUIsQ0FBQ2dDLElBQUksQ0FBRUwsbUJBQW9CLENBQUM7RUFDbkQ7QUFDRjtBQUVBMUIsS0FBSyxDQUFDZ0MsUUFBUSxDQUFFLDBCQUEwQixFQUFFM0Isd0JBQXlCLENBQUM7QUFDdEUsZUFBZUEsd0JBQXdCIiwiaWdub3JlTGlzdCI6W119