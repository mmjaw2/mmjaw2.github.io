// Copyright 2022-2024, University of Colorado Boulder

/**
 * RegionAndCultureComboBox is the combo box used to set 'Region and Culture' in Preferences > Localization.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import ComboBox from '../../../sun/js/ComboBox.js';
import joist from '../joist.js';
import { Text } from '../../../scenery/js/imports.js';
import PreferencesDialog from './PreferencesDialog.js';
import optionize from '../../../phet-core/js/optionize.js';
import Tandem from '../../../tandem/js/Tandem.js';
import regionAndCultureProperty, { supportedRegionAndCultureValues } from '../i18n/regionAndCultureProperty.js';
import JoistStrings from '../JoistStrings.js';
// Maps a RegionAndCulture value to a StringProperty.
const STRING_PROPERTY_MAP = {
  africa: JoistStrings.preferences.tabs.localization.regionAndCulture.africaStringProperty,
  africaModest: JoistStrings.preferences.tabs.localization.regionAndCulture.africaModestStringProperty,
  asia: JoistStrings.preferences.tabs.localization.regionAndCulture.asiaStringProperty,
  latinAmerica: JoistStrings.preferences.tabs.localization.regionAndCulture.latinAmericaStringProperty,
  oceania: JoistStrings.preferences.tabs.localization.regionAndCulture.oceaniaStringProperty,
  random: JoistStrings.preferences.tabs.localization.regionAndCulture.randomStringProperty,
  usa: JoistStrings.preferences.tabs.localization.regionAndCulture.unitedStatesOfAmericaStringProperty
};
class RegionAndCultureComboBox extends ComboBox {
  constructor(providedOptions) {
    const options = optionize()({
      // For now, do not instrument Preferences elements, see https://github.com/phetsims/joist/issues/744#issuecomment-1196028362
      tandem: Tandem.OPT_OUT
    }, providedOptions);

    // Sort the region and culture choices. We are sorting on RegionAndCulture tokens, rather than translated strings,
    // because ComboBox does not have an API for changing the order of items in its listbox. Since there are a
    // relatively small number of items here, we felt that having a consistent order here was sufficient, and that
    // the effort to dynamically put the items in alphabetical order was not warranted.
    // See https://github.com/phetsims/joist/issues/955
    const comboBoxItems = supportedRegionAndCultureValues.slice().sort().map(regionAndCulture => {
      return {
        value: regionAndCulture,
        createNode: () => new Text(STRING_PROPERTY_MAP[regionAndCulture], PreferencesDialog.PANEL_SECTION_CONTENT_OPTIONS)
      };
    });

    // TODO: Need a different top layer node for ComboBox here. See https://github.com/phetsims/joist/issues/841
    super(regionAndCultureProperty, comboBoxItems, phet.joist.sim.topLayer, options);
  }
}
joist.register('RegionAndCultureComboBox', RegionAndCultureComboBox);
export default RegionAndCultureComboBox;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb21ib0JveCIsImpvaXN0IiwiVGV4dCIsIlByZWZlcmVuY2VzRGlhbG9nIiwib3B0aW9uaXplIiwiVGFuZGVtIiwicmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5Iiwic3VwcG9ydGVkUmVnaW9uQW5kQ3VsdHVyZVZhbHVlcyIsIkpvaXN0U3RyaW5ncyIsIlNUUklOR19QUk9QRVJUWV9NQVAiLCJhZnJpY2EiLCJwcmVmZXJlbmNlcyIsInRhYnMiLCJsb2NhbGl6YXRpb24iLCJyZWdpb25BbmRDdWx0dXJlIiwiYWZyaWNhU3RyaW5nUHJvcGVydHkiLCJhZnJpY2FNb2Rlc3QiLCJhZnJpY2FNb2Rlc3RTdHJpbmdQcm9wZXJ0eSIsImFzaWEiLCJhc2lhU3RyaW5nUHJvcGVydHkiLCJsYXRpbkFtZXJpY2EiLCJsYXRpbkFtZXJpY2FTdHJpbmdQcm9wZXJ0eSIsIm9jZWFuaWEiLCJvY2VhbmlhU3RyaW5nUHJvcGVydHkiLCJyYW5kb20iLCJyYW5kb21TdHJpbmdQcm9wZXJ0eSIsInVzYSIsInVuaXRlZFN0YXRlc09mQW1lcmljYVN0cmluZ1Byb3BlcnR5IiwiUmVnaW9uQW5kQ3VsdHVyZUNvbWJvQm94IiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwidGFuZGVtIiwiT1BUX09VVCIsImNvbWJvQm94SXRlbXMiLCJzbGljZSIsInNvcnQiLCJtYXAiLCJ2YWx1ZSIsImNyZWF0ZU5vZGUiLCJQQU5FTF9TRUNUSU9OX0NPTlRFTlRfT1BUSU9OUyIsInBoZXQiLCJzaW0iLCJ0b3BMYXllciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiUmVnaW9uQW5kQ3VsdHVyZUNvbWJvQm94LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFJlZ2lvbkFuZEN1bHR1cmVDb21ib0JveCBpcyB0aGUgY29tYm8gYm94IHVzZWQgdG8gc2V0ICdSZWdpb24gYW5kIEN1bHR1cmUnIGluIFByZWZlcmVuY2VzID4gTG9jYWxpemF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgQ29tYm9Cb3gsIHsgQ29tYm9Cb3hPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vc3VuL2pzL0NvbWJvQm94LmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IHsgVGV4dCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQcmVmZXJlbmNlc0RpYWxvZyBmcm9tICcuL1ByZWZlcmVuY2VzRGlhbG9nLmpzJztcclxuaW1wb3J0IG9wdGlvbml6ZSwgeyBFbXB0eVNlbGZPcHRpb25zIH0gZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcbmltcG9ydCByZWdpb25BbmRDdWx0dXJlUHJvcGVydHksIHsgUmVnaW9uQW5kQ3VsdHVyZSwgc3VwcG9ydGVkUmVnaW9uQW5kQ3VsdHVyZVZhbHVlcyB9IGZyb20gJy4uL2kxOG4vcmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5LmpzJztcclxuaW1wb3J0IExvY2FsaXplZFN0cmluZ1Byb3BlcnR5IGZyb20gJy4uLy4uLy4uL2NoaXBwZXIvanMvTG9jYWxpemVkU3RyaW5nUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgSm9pc3RTdHJpbmdzIGZyb20gJy4uL0pvaXN0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBQaWNrT3B0aW9uYWwgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1BpY2tPcHRpb25hbC5qcyc7XHJcblxyXG4vLyBNYXBzIGEgUmVnaW9uQW5kQ3VsdHVyZSB2YWx1ZSB0byBhIFN0cmluZ1Byb3BlcnR5LlxyXG5jb25zdCBTVFJJTkdfUFJPUEVSVFlfTUFQOiBSZWNvcmQ8UmVnaW9uQW5kQ3VsdHVyZSwgTG9jYWxpemVkU3RyaW5nUHJvcGVydHk+ID0ge1xyXG4gIGFmcmljYTogSm9pc3RTdHJpbmdzLnByZWZlcmVuY2VzLnRhYnMubG9jYWxpemF0aW9uLnJlZ2lvbkFuZEN1bHR1cmUuYWZyaWNhU3RyaW5nUHJvcGVydHksXHJcbiAgYWZyaWNhTW9kZXN0OiBKb2lzdFN0cmluZ3MucHJlZmVyZW5jZXMudGFicy5sb2NhbGl6YXRpb24ucmVnaW9uQW5kQ3VsdHVyZS5hZnJpY2FNb2Rlc3RTdHJpbmdQcm9wZXJ0eSxcclxuICBhc2lhOiBKb2lzdFN0cmluZ3MucHJlZmVyZW5jZXMudGFicy5sb2NhbGl6YXRpb24ucmVnaW9uQW5kQ3VsdHVyZS5hc2lhU3RyaW5nUHJvcGVydHksXHJcbiAgbGF0aW5BbWVyaWNhOiBKb2lzdFN0cmluZ3MucHJlZmVyZW5jZXMudGFicy5sb2NhbGl6YXRpb24ucmVnaW9uQW5kQ3VsdHVyZS5sYXRpbkFtZXJpY2FTdHJpbmdQcm9wZXJ0eSxcclxuICBvY2VhbmlhOiBKb2lzdFN0cmluZ3MucHJlZmVyZW5jZXMudGFicy5sb2NhbGl6YXRpb24ucmVnaW9uQW5kQ3VsdHVyZS5vY2VhbmlhU3RyaW5nUHJvcGVydHksXHJcbiAgcmFuZG9tOiBKb2lzdFN0cmluZ3MucHJlZmVyZW5jZXMudGFicy5sb2NhbGl6YXRpb24ucmVnaW9uQW5kQ3VsdHVyZS5yYW5kb21TdHJpbmdQcm9wZXJ0eSxcclxuICB1c2E6IEpvaXN0U3RyaW5ncy5wcmVmZXJlbmNlcy50YWJzLmxvY2FsaXphdGlvbi5yZWdpb25BbmRDdWx0dXJlLnVuaXRlZFN0YXRlc09mQW1lcmljYVN0cmluZ1Byb3BlcnR5XHJcbn07XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxudHlwZSBSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3hPcHRpb25zID0gU2VsZk9wdGlvbnMgJiBQaWNrT3B0aW9uYWw8Q29tYm9Cb3hPcHRpb25zLCAndGFuZGVtJz47XHJcblxyXG5jbGFzcyBSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3ggZXh0ZW5kcyBDb21ib0JveDxSZWdpb25BbmRDdWx0dXJlPiB7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogUmVnaW9uQW5kQ3VsdHVyZUNvbWJvQm94T3B0aW9ucyApIHtcclxuXHJcbiAgICBjb25zdCBvcHRpb25zID0gb3B0aW9uaXplPFJlZ2lvbkFuZEN1bHR1cmVDb21ib0JveE9wdGlvbnMsIFNlbGZPcHRpb25zLCBDb21ib0JveE9wdGlvbnM+KCkoIHtcclxuXHJcbiAgICAgIC8vIEZvciBub3csIGRvIG5vdCBpbnN0cnVtZW50IFByZWZlcmVuY2VzIGVsZW1lbnRzLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaXN0L2lzc3Vlcy83NDQjaXNzdWVjb21tZW50LTExOTYwMjgzNjJcclxuICAgICAgdGFuZGVtOiBUYW5kZW0uT1BUX09VVFxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgLy8gU29ydCB0aGUgcmVnaW9uIGFuZCBjdWx0dXJlIGNob2ljZXMuIFdlIGFyZSBzb3J0aW5nIG9uIFJlZ2lvbkFuZEN1bHR1cmUgdG9rZW5zLCByYXRoZXIgdGhhbiB0cmFuc2xhdGVkIHN0cmluZ3MsXHJcbiAgICAvLyBiZWNhdXNlIENvbWJvQm94IGRvZXMgbm90IGhhdmUgYW4gQVBJIGZvciBjaGFuZ2luZyB0aGUgb3JkZXIgb2YgaXRlbXMgaW4gaXRzIGxpc3Rib3guIFNpbmNlIHRoZXJlIGFyZSBhXHJcbiAgICAvLyByZWxhdGl2ZWx5IHNtYWxsIG51bWJlciBvZiBpdGVtcyBoZXJlLCB3ZSBmZWx0IHRoYXQgaGF2aW5nIGEgY29uc2lzdGVudCBvcmRlciBoZXJlIHdhcyBzdWZmaWNpZW50LCBhbmQgdGhhdFxyXG4gICAgLy8gdGhlIGVmZm9ydCB0byBkeW5hbWljYWxseSBwdXQgdGhlIGl0ZW1zIGluIGFscGhhYmV0aWNhbCBvcmRlciB3YXMgbm90IHdhcnJhbnRlZC5cclxuICAgIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzk1NVxyXG4gICAgY29uc3QgY29tYm9Cb3hJdGVtcyA9IHN1cHBvcnRlZFJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMuc2xpY2UoKS5zb3J0KCkubWFwKCByZWdpb25BbmRDdWx0dXJlID0+IHtcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICB2YWx1ZTogcmVnaW9uQW5kQ3VsdHVyZSxcclxuICAgICAgICBjcmVhdGVOb2RlOiAoKSA9PiBuZXcgVGV4dCggU1RSSU5HX1BST1BFUlRZX01BUFsgcmVnaW9uQW5kQ3VsdHVyZSBdLCBQcmVmZXJlbmNlc0RpYWxvZy5QQU5FTF9TRUNUSU9OX0NPTlRFTlRfT1BUSU9OUyApXHJcbiAgICAgIH07XHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gVE9ETzogTmVlZCBhIGRpZmZlcmVudCB0b3AgbGF5ZXIgbm9kZSBmb3IgQ29tYm9Cb3ggaGVyZS4gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvODQxXHJcbiAgICBzdXBlciggcmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5LCBjb21ib0JveEl0ZW1zLCBwaGV0LmpvaXN0LnNpbS50b3BMYXllciwgb3B0aW9ucyApO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3gnLCBSZWdpb25BbmRDdWx0dXJlQ29tYm9Cb3ggKTtcclxuZXhwb3J0IGRlZmF1bHQgUmVnaW9uQW5kQ3VsdHVyZUNvbWJvQm94OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQTJCLDZCQUE2QjtBQUN2RSxPQUFPQyxLQUFLLE1BQU0sYUFBYTtBQUMvQixTQUFTQyxJQUFJLFFBQVEsZ0NBQWdDO0FBQ3JELE9BQU9DLGlCQUFpQixNQUFNLHdCQUF3QjtBQUN0RCxPQUFPQyxTQUFTLE1BQTRCLG9DQUFvQztBQUNoRixPQUFPQyxNQUFNLE1BQU0sOEJBQThCO0FBQ2pELE9BQU9DLHdCQUF3QixJQUFzQkMsK0JBQStCLFFBQVEscUNBQXFDO0FBRWpJLE9BQU9DLFlBQVksTUFBTSxvQkFBb0I7QUFHN0M7QUFDQSxNQUFNQyxtQkFBc0UsR0FBRztFQUM3RUMsTUFBTSxFQUFFRixZQUFZLENBQUNHLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxZQUFZLENBQUNDLGdCQUFnQixDQUFDQyxvQkFBb0I7RUFDeEZDLFlBQVksRUFBRVIsWUFBWSxDQUFDRyxXQUFXLENBQUNDLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxnQkFBZ0IsQ0FBQ0csMEJBQTBCO0VBQ3BHQyxJQUFJLEVBQUVWLFlBQVksQ0FBQ0csV0FBVyxDQUFDQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsZ0JBQWdCLENBQUNLLGtCQUFrQjtFQUNwRkMsWUFBWSxFQUFFWixZQUFZLENBQUNHLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxZQUFZLENBQUNDLGdCQUFnQixDQUFDTywwQkFBMEI7RUFDcEdDLE9BQU8sRUFBRWQsWUFBWSxDQUFDRyxXQUFXLENBQUNDLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxnQkFBZ0IsQ0FBQ1MscUJBQXFCO0VBQzFGQyxNQUFNLEVBQUVoQixZQUFZLENBQUNHLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxZQUFZLENBQUNDLGdCQUFnQixDQUFDVyxvQkFBb0I7RUFDeEZDLEdBQUcsRUFBRWxCLFlBQVksQ0FBQ0csV0FBVyxDQUFDQyxJQUFJLENBQUNDLFlBQVksQ0FBQ0MsZ0JBQWdCLENBQUNhO0FBQ25FLENBQUM7QUFLRCxNQUFNQyx3QkFBd0IsU0FBUzVCLFFBQVEsQ0FBbUI7RUFFekQ2QixXQUFXQSxDQUFFQyxlQUFpRCxFQUFHO0lBRXRFLE1BQU1DLE9BQU8sR0FBRzNCLFNBQVMsQ0FBZ0UsQ0FBQyxDQUFFO01BRTFGO01BQ0E0QixNQUFNLEVBQUUzQixNQUFNLENBQUM0QjtJQUNqQixDQUFDLEVBQUVILGVBQWdCLENBQUM7O0lBRXBCO0lBQ0E7SUFDQTtJQUNBO0lBQ0E7SUFDQSxNQUFNSSxhQUFhLEdBQUczQiwrQkFBK0IsQ0FBQzRCLEtBQUssQ0FBQyxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDLENBQUNDLEdBQUcsQ0FBRXZCLGdCQUFnQixJQUFJO01BQzVGLE9BQU87UUFDTHdCLEtBQUssRUFBRXhCLGdCQUFnQjtRQUN2QnlCLFVBQVUsRUFBRUEsQ0FBQSxLQUFNLElBQUlyQyxJQUFJLENBQUVPLG1CQUFtQixDQUFFSyxnQkFBZ0IsQ0FBRSxFQUFFWCxpQkFBaUIsQ0FBQ3FDLDZCQUE4QjtNQUN2SCxDQUFDO0lBQ0gsQ0FBRSxDQUFDOztJQUVIO0lBQ0EsS0FBSyxDQUFFbEMsd0JBQXdCLEVBQUU0QixhQUFhLEVBQUVPLElBQUksQ0FBQ3hDLEtBQUssQ0FBQ3lDLEdBQUcsQ0FBQ0MsUUFBUSxFQUFFWixPQUFRLENBQUM7RUFDcEY7QUFDRjtBQUVBOUIsS0FBSyxDQUFDMkMsUUFBUSxDQUFFLDBCQUEwQixFQUFFaEIsd0JBQXlCLENBQUM7QUFDdEUsZUFBZUEsd0JBQXdCIiwiaWdub3JlTGlzdCI6W119