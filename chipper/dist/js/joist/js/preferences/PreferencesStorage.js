// Copyright 2021-2024, University of Colorado Boulder

/**
 * Singleton that can save and load a Property's value to localStorage, and keep it in sync for the next runtime.
 * Must be used with ?preferencesStorage.
 *
 * NOTE: Property values are stringified, so don't try using this with something like `new StringProperty( 'true' )`
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import joist from '../joist.js';
let preferencesStorage = null;
const PREFERENCES_KEY = 'PREFERENCES:';
class PreferencesStorage {
  enabled = true;

  // for debugging
  registedProperties = [];
  constructor() {
    try {
      // Always store the line indices just in case they want to be used by the next run.
      window.localStorage.setItem('test', 'test');
    } catch (e) {
      this.enabled = false; // can't use localStorage with browser settings

      if (e instanceof Error) {
        const safari = window.navigator.userAgent.includes('Safari') && !window.navigator.userAgent.includes('Chrome');
        if (safari && e.message.includes('QuotaExceededError')) {
          console.log('It looks like you are browsing with private mode in Safari. ' + 'Please turn that setting off if you want to use PreferencesStorage');
        } else {
          throw e;
        }
      }
    }
  }
  registerToLocalStorage(property, name) {
    const key = `${PREFERENCES_KEY}${name}`;
    if (window.localStorage.getItem(key)) {
      property.value = JSON.parse(window.localStorage.getItem(key));
    }
    property.link(value => {
      window.localStorage.setItem(key, JSON.stringify(value));
    });
    this.registedProperties.push(property);
  }
  static register(property, name) {
    if (!phet.chipper.queryParameters.preferencesStorage) {
      return property;
    }
    if (!preferencesStorage) {
      preferencesStorage = new PreferencesStorage();
    }
    if (preferencesStorage.enabled) {
      preferencesStorage.registerToLocalStorage(property, name);
    }
    return property;
  }
}
joist.register('PreferencesStorage', PreferencesStorage);
export default PreferencesStorage;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsInByZWZlcmVuY2VzU3RvcmFnZSIsIlBSRUZFUkVOQ0VTX0tFWSIsIlByZWZlcmVuY2VzU3RvcmFnZSIsImVuYWJsZWQiLCJyZWdpc3RlZFByb3BlcnRpZXMiLCJjb25zdHJ1Y3RvciIsIndpbmRvdyIsImxvY2FsU3RvcmFnZSIsInNldEl0ZW0iLCJlIiwiRXJyb3IiLCJzYWZhcmkiLCJuYXZpZ2F0b3IiLCJ1c2VyQWdlbnQiLCJpbmNsdWRlcyIsIm1lc3NhZ2UiLCJjb25zb2xlIiwibG9nIiwicmVnaXN0ZXJUb0xvY2FsU3RvcmFnZSIsInByb3BlcnR5IiwibmFtZSIsImtleSIsImdldEl0ZW0iLCJ2YWx1ZSIsIkpTT04iLCJwYXJzZSIsImxpbmsiLCJzdHJpbmdpZnkiLCJwdXNoIiwicmVnaXN0ZXIiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyJdLCJzb3VyY2VzIjpbIlByZWZlcmVuY2VzU3RvcmFnZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTaW5nbGV0b24gdGhhdCBjYW4gc2F2ZSBhbmQgbG9hZCBhIFByb3BlcnR5J3MgdmFsdWUgdG8gbG9jYWxTdG9yYWdlLCBhbmQga2VlcCBpdCBpbiBzeW5jIGZvciB0aGUgbmV4dCBydW50aW1lLlxyXG4gKiBNdXN0IGJlIHVzZWQgd2l0aCA/cHJlZmVyZW5jZXNTdG9yYWdlLlxyXG4gKlxyXG4gKiBOT1RFOiBQcm9wZXJ0eSB2YWx1ZXMgYXJlIHN0cmluZ2lmaWVkLCBzbyBkb24ndCB0cnkgdXNpbmcgdGhpcyB3aXRoIHNvbWV0aGluZyBsaWtlIGBuZXcgU3RyaW5nUHJvcGVydHkoICd0cnVlJyApYFxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBqb2lzdCBmcm9tICcuLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBJbnRlbnRpb25hbEFueSBmcm9tICcuLi8uLi8uLi9waGV0LWNvcmUvanMvdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xyXG5cclxubGV0IHByZWZlcmVuY2VzU3RvcmFnZTogUHJlZmVyZW5jZXNTdG9yYWdlIHwgbnVsbCA9IG51bGw7XHJcblxyXG5jb25zdCBQUkVGRVJFTkNFU19LRVkgPSAnUFJFRkVSRU5DRVM6JztcclxuXHJcbmNsYXNzIFByZWZlcmVuY2VzU3RvcmFnZSB7XHJcblxyXG4gIHByaXZhdGUgZW5hYmxlZCA9IHRydWU7XHJcblxyXG4gIC8vIGZvciBkZWJ1Z2dpbmdcclxuICBwcml2YXRlIHJlYWRvbmx5IHJlZ2lzdGVkUHJvcGVydGllczogVFByb3BlcnR5PHVua25vd24+W10gPSBbXTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG5cclxuICAgIHRyeSB7XHJcblxyXG4gICAgICAvLyBBbHdheXMgc3RvcmUgdGhlIGxpbmUgaW5kaWNlcyBqdXN0IGluIGNhc2UgdGhleSB3YW50IHRvIGJlIHVzZWQgYnkgdGhlIG5leHQgcnVuLlxyXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oICd0ZXN0JywgJ3Rlc3QnICk7XHJcbiAgICB9XHJcbiAgICBjYXRjaCggZSApIHtcclxuICAgICAgdGhpcy5lbmFibGVkID0gZmFsc2U7IC8vIGNhbid0IHVzZSBsb2NhbFN0b3JhZ2Ugd2l0aCBicm93c2VyIHNldHRpbmdzXHJcblxyXG4gICAgICBpZiAoIGUgaW5zdGFuY2VvZiBFcnJvciApIHtcclxuICAgICAgICBjb25zdCBzYWZhcmkgPSB3aW5kb3cubmF2aWdhdG9yLnVzZXJBZ2VudC5pbmNsdWRlcyggJ1NhZmFyaScgKSAmJiAhd2luZG93Lm5hdmlnYXRvci51c2VyQWdlbnQuaW5jbHVkZXMoICdDaHJvbWUnICk7XHJcblxyXG4gICAgICAgIGlmICggc2FmYXJpICYmIGUubWVzc2FnZS5pbmNsdWRlcyggJ1F1b3RhRXhjZWVkZWRFcnJvcicgKSApIHtcclxuICAgICAgICAgIGNvbnNvbGUubG9nKCAnSXQgbG9va3MgbGlrZSB5b3UgYXJlIGJyb3dzaW5nIHdpdGggcHJpdmF0ZSBtb2RlIGluIFNhZmFyaS4gJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgJ1BsZWFzZSB0dXJuIHRoYXQgc2V0dGluZyBvZmYgaWYgeW91IHdhbnQgdG8gdXNlIFByZWZlcmVuY2VzU3RvcmFnZScgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgZWxzZSB7XHJcbiAgICAgICAgICB0aHJvdyBlO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHJpdmF0ZSByZWdpc3RlclRvTG9jYWxTdG9yYWdlKCBwcm9wZXJ0eTogVFByb3BlcnR5PHVua25vd24+LCBuYW1lOiBzdHJpbmcgKTogdm9pZCB7XHJcbiAgICBjb25zdCBrZXkgPSBgJHtQUkVGRVJFTkNFU19LRVl9JHtuYW1lfWA7XHJcbiAgICBpZiAoIHdpbmRvdy5sb2NhbFN0b3JhZ2UuZ2V0SXRlbSgga2V5ICkgKSB7XHJcbiAgICAgIHByb3BlcnR5LnZhbHVlID0gSlNPTi5wYXJzZSggd2luZG93LmxvY2FsU3RvcmFnZS5nZXRJdGVtKCBrZXkgKSEgKTtcclxuICAgIH1cclxuICAgIHByb3BlcnR5LmxpbmsoICggdmFsdWU6IEludGVudGlvbmFsQW55ICkgPT4ge1xyXG4gICAgICB3aW5kb3cubG9jYWxTdG9yYWdlLnNldEl0ZW0oIGtleSwgSlNPTi5zdHJpbmdpZnkoIHZhbHVlICkgKTtcclxuICAgIH0gKTtcclxuICAgIHRoaXMucmVnaXN0ZWRQcm9wZXJ0aWVzLnB1c2goIHByb3BlcnR5ICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlZ2lzdGVyKCBwcm9wZXJ0eTogVFByb3BlcnR5PHVua25vd24+LCBuYW1lOiBzdHJpbmcgKTogVFByb3BlcnR5PHVua25vd24+IHtcclxuICAgIGlmICggIXBoZXQuY2hpcHBlci5xdWVyeVBhcmFtZXRlcnMucHJlZmVyZW5jZXNTdG9yYWdlICkge1xyXG4gICAgICByZXR1cm4gcHJvcGVydHk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCAhcHJlZmVyZW5jZXNTdG9yYWdlICkge1xyXG4gICAgICBwcmVmZXJlbmNlc1N0b3JhZ2UgPSBuZXcgUHJlZmVyZW5jZXNTdG9yYWdlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgaWYgKCBwcmVmZXJlbmNlc1N0b3JhZ2UuZW5hYmxlZCApIHtcclxuICAgICAgcHJlZmVyZW5jZXNTdG9yYWdlLnJlZ2lzdGVyVG9Mb2NhbFN0b3JhZ2UoIHByb3BlcnR5LCBuYW1lICk7XHJcbiAgICB9XHJcblxyXG4gICAgcmV0dXJuIHByb3BlcnR5O1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdQcmVmZXJlbmNlc1N0b3JhZ2UnLCBQcmVmZXJlbmNlc1N0b3JhZ2UgKTtcclxuZXhwb3J0IGRlZmF1bHQgUHJlZmVyZW5jZXNTdG9yYWdlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFHQSxPQUFPQSxLQUFLLE1BQU0sYUFBYTtBQUcvQixJQUFJQyxrQkFBNkMsR0FBRyxJQUFJO0FBRXhELE1BQU1DLGVBQWUsR0FBRyxjQUFjO0FBRXRDLE1BQU1DLGtCQUFrQixDQUFDO0VBRWZDLE9BQU8sR0FBRyxJQUFJOztFQUV0QjtFQUNpQkMsa0JBQWtCLEdBQXlCLEVBQUU7RUFFdkRDLFdBQVdBLENBQUEsRUFBRztJQUVuQixJQUFJO01BRUY7TUFDQUMsTUFBTSxDQUFDQyxZQUFZLENBQUNDLE9BQU8sQ0FBRSxNQUFNLEVBQUUsTUFBTyxDQUFDO0lBQy9DLENBQUMsQ0FDRCxPQUFPQyxDQUFDLEVBQUc7TUFDVCxJQUFJLENBQUNOLE9BQU8sR0FBRyxLQUFLLENBQUMsQ0FBQzs7TUFFdEIsSUFBS00sQ0FBQyxZQUFZQyxLQUFLLEVBQUc7UUFDeEIsTUFBTUMsTUFBTSxHQUFHTCxNQUFNLENBQUNNLFNBQVMsQ0FBQ0MsU0FBUyxDQUFDQyxRQUFRLENBQUUsUUFBUyxDQUFDLElBQUksQ0FBQ1IsTUFBTSxDQUFDTSxTQUFTLENBQUNDLFNBQVMsQ0FBQ0MsUUFBUSxDQUFFLFFBQVMsQ0FBQztRQUVsSCxJQUFLSCxNQUFNLElBQUlGLENBQUMsQ0FBQ00sT0FBTyxDQUFDRCxRQUFRLENBQUUsb0JBQXFCLENBQUMsRUFBRztVQUMxREUsT0FBTyxDQUFDQyxHQUFHLENBQUUsOERBQThELEdBQzlELG9FQUFxRSxDQUFDO1FBQ3JGLENBQUMsTUFDSTtVQUNILE1BQU1SLENBQUM7UUFDVDtNQUNGO0lBQ0Y7RUFDRjtFQUVRUyxzQkFBc0JBLENBQUVDLFFBQTRCLEVBQUVDLElBQVksRUFBUztJQUNqRixNQUFNQyxHQUFHLEdBQUksR0FBRXBCLGVBQWdCLEdBQUVtQixJQUFLLEVBQUM7SUFDdkMsSUFBS2QsTUFBTSxDQUFDQyxZQUFZLENBQUNlLE9BQU8sQ0FBRUQsR0FBSSxDQUFDLEVBQUc7TUFDeENGLFFBQVEsQ0FBQ0ksS0FBSyxHQUFHQyxJQUFJLENBQUNDLEtBQUssQ0FBRW5CLE1BQU0sQ0FBQ0MsWUFBWSxDQUFDZSxPQUFPLENBQUVELEdBQUksQ0FBRyxDQUFDO0lBQ3BFO0lBQ0FGLFFBQVEsQ0FBQ08sSUFBSSxDQUFJSCxLQUFxQixJQUFNO01BQzFDakIsTUFBTSxDQUFDQyxZQUFZLENBQUNDLE9BQU8sQ0FBRWEsR0FBRyxFQUFFRyxJQUFJLENBQUNHLFNBQVMsQ0FBRUosS0FBTSxDQUFFLENBQUM7SUFDN0QsQ0FBRSxDQUFDO0lBQ0gsSUFBSSxDQUFDbkIsa0JBQWtCLENBQUN3QixJQUFJLENBQUVULFFBQVMsQ0FBQztFQUMxQztFQUVBLE9BQWNVLFFBQVFBLENBQUVWLFFBQTRCLEVBQUVDLElBQVksRUFBdUI7SUFDdkYsSUFBSyxDQUFDVSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsZUFBZSxDQUFDaEMsa0JBQWtCLEVBQUc7TUFDdEQsT0FBT21CLFFBQVE7SUFDakI7SUFFQSxJQUFLLENBQUNuQixrQkFBa0IsRUFBRztNQUN6QkEsa0JBQWtCLEdBQUcsSUFBSUUsa0JBQWtCLENBQUMsQ0FBQztJQUMvQztJQUVBLElBQUtGLGtCQUFrQixDQUFDRyxPQUFPLEVBQUc7TUFDaENILGtCQUFrQixDQUFDa0Isc0JBQXNCLENBQUVDLFFBQVEsRUFBRUMsSUFBSyxDQUFDO0lBQzdEO0lBRUEsT0FBT0QsUUFBUTtFQUNqQjtBQUNGO0FBRUFwQixLQUFLLENBQUM4QixRQUFRLENBQUUsb0JBQW9CLEVBQUUzQixrQkFBbUIsQ0FBQztBQUMxRCxlQUFlQSxrQkFBa0IiLCJpZ25vcmVMaXN0IjpbXX0=