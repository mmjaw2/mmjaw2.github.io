// Copyright 2022-2024, University of Colorado Boulder

/**
 * A UI component that allows you to change language of the simulation at runtime by controlling the localeProperty.
 * It appears in the "Localization" tab of the Preferences dialog.
 *
 * This is a first iteration of this UI component. It may be improved in the future. See
 * https://github.com/phetsims/joist/issues/814 for more history.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import joist from '../joist.js';
import Panel from '../../../sun/js/Panel.js';
import { GridBox } from '../../../scenery/js/imports.js';
import LanguageSelectionNode from './LanguageSelectionNode.js';
import JoistStrings from '../JoistStrings.js';
import StringUtils from '../../../phetcommon/js/util/StringUtils.js';
class LocalePanel extends Panel {
  constructor(localeProperty) {
    const locales = localeProperty.validValues;

    // Sort these properly by their localized name (without using _.sortBy, since string comparison does not provide
    // a good sorting experience). See https://github.com/phetsims/joist/issues/965
    const sortedLocalizedNameLocales = locales.slice().sort((a, b) => {
      const lowerCaseA = StringUtils.localeToLocalizedName(a).toLowerCase();
      const lowerCaseB = StringUtils.localeToLocalizedName(b).toLowerCase();
      return lowerCaseA.localeCompare(lowerCaseB, 'en-US', {
        sensitivity: 'base'
      });
    });

    // All available locales aligned into a grid
    const content = new GridBox({
      xMargin: 5,
      xAlign: 'left',
      autoRows: 15,
      // By inspection, safety net in case there are too many languages. Will scale down this panel without
      // the entire PreferencesDialog scaling down.
      maxWidth: 1000,
      // We don't want the GridBox to resize as selection highlights update with input
      resize: false,
      children: sortedLocalizedNameLocales.map(locale => {
        return new LanguageSelectionNode(localeProperty, locale);
      })
    });
    super(content, {
      // pdom
      tagName: 'div',
      labelTagName: 'h3',
      labelContent: JoistStrings.a11y.preferences.tabs.localization.languageSelection.labelStringProperty,
      descriptionTagName: 'p',
      descriptionContent: JoistStrings.a11y.preferences.tabs.localization.languageSelection.descriptionStringProperty
    });
  }
}
joist.register('LocalePanel', LocalePanel);
export default LocalePanel;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsIlBhbmVsIiwiR3JpZEJveCIsIkxhbmd1YWdlU2VsZWN0aW9uTm9kZSIsIkpvaXN0U3RyaW5ncyIsIlN0cmluZ1V0aWxzIiwiTG9jYWxlUGFuZWwiLCJjb25zdHJ1Y3RvciIsImxvY2FsZVByb3BlcnR5IiwibG9jYWxlcyIsInZhbGlkVmFsdWVzIiwic29ydGVkTG9jYWxpemVkTmFtZUxvY2FsZXMiLCJzbGljZSIsInNvcnQiLCJhIiwiYiIsImxvd2VyQ2FzZUEiLCJsb2NhbGVUb0xvY2FsaXplZE5hbWUiLCJ0b0xvd2VyQ2FzZSIsImxvd2VyQ2FzZUIiLCJsb2NhbGVDb21wYXJlIiwic2Vuc2l0aXZpdHkiLCJjb250ZW50IiwieE1hcmdpbiIsInhBbGlnbiIsImF1dG9Sb3dzIiwibWF4V2lkdGgiLCJyZXNpemUiLCJjaGlsZHJlbiIsIm1hcCIsImxvY2FsZSIsInRhZ05hbWUiLCJsYWJlbFRhZ05hbWUiLCJsYWJlbENvbnRlbnQiLCJhMTF5IiwicHJlZmVyZW5jZXMiLCJ0YWJzIiwibG9jYWxpemF0aW9uIiwibGFuZ3VhZ2VTZWxlY3Rpb24iLCJsYWJlbFN0cmluZ1Byb3BlcnR5IiwiZGVzY3JpcHRpb25UYWdOYW1lIiwiZGVzY3JpcHRpb25Db250ZW50IiwiZGVzY3JpcHRpb25TdHJpbmdQcm9wZXJ0eSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTG9jYWxlUGFuZWwudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBVSSBjb21wb25lbnQgdGhhdCBhbGxvd3MgeW91IHRvIGNoYW5nZSBsYW5ndWFnZSBvZiB0aGUgc2ltdWxhdGlvbiBhdCBydW50aW1lIGJ5IGNvbnRyb2xsaW5nIHRoZSBsb2NhbGVQcm9wZXJ0eS5cclxuICogSXQgYXBwZWFycyBpbiB0aGUgXCJMb2NhbGl6YXRpb25cIiB0YWIgb2YgdGhlIFByZWZlcmVuY2VzIGRpYWxvZy5cclxuICpcclxuICogVGhpcyBpcyBhIGZpcnN0IGl0ZXJhdGlvbiBvZiB0aGlzIFVJIGNvbXBvbmVudC4gSXQgbWF5IGJlIGltcHJvdmVkIGluIHRoZSBmdXR1cmUuIFNlZVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvam9pc3QvaXNzdWVzLzgxNCBmb3IgbW9yZSBoaXN0b3J5LlxyXG4gKlxyXG4gKiBAYXV0aG9yIEplc3NlIEdyZWVuYmVyZyAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi4vam9pc3QuanMnO1xyXG5pbXBvcnQgUGFuZWwgZnJvbSAnLi4vLi4vLi4vc3VuL2pzL1BhbmVsLmpzJztcclxuaW1wb3J0IHsgR3JpZEJveCB9IGZyb20gJy4uLy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IExhbmd1YWdlU2VsZWN0aW9uTm9kZSBmcm9tICcuL0xhbmd1YWdlU2VsZWN0aW9uTm9kZS5qcyc7XHJcbmltcG9ydCB7IExvY2FsZSB9IGZyb20gJy4uL2kxOG4vbG9jYWxlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgSm9pc3RTdHJpbmdzIGZyb20gJy4uL0pvaXN0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBTdHJpbmdVdGlscyBmcm9tICcuLi8uLi8uLi9waGV0Y29tbW9uL2pzL3V0aWwvU3RyaW5nVXRpbHMuanMnO1xyXG5cclxuY2xhc3MgTG9jYWxlUGFuZWwgZXh0ZW5kcyBQYW5lbCB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBsb2NhbGVQcm9wZXJ0eTogUHJvcGVydHk8TG9jYWxlPiApIHtcclxuXHJcbiAgICBjb25zdCBsb2NhbGVzID0gbG9jYWxlUHJvcGVydHkudmFsaWRWYWx1ZXMhO1xyXG5cclxuICAgIC8vIFNvcnQgdGhlc2UgcHJvcGVybHkgYnkgdGhlaXIgbG9jYWxpemVkIG5hbWUgKHdpdGhvdXQgdXNpbmcgXy5zb3J0QnksIHNpbmNlIHN0cmluZyBjb21wYXJpc29uIGRvZXMgbm90IHByb3ZpZGVcclxuICAgIC8vIGEgZ29vZCBzb3J0aW5nIGV4cGVyaWVuY2UpLiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2pvaXN0L2lzc3Vlcy85NjVcclxuICAgIGNvbnN0IHNvcnRlZExvY2FsaXplZE5hbWVMb2NhbGVzID0gbG9jYWxlcy5zbGljZSgpLnNvcnQoICggYSwgYiApID0+IHtcclxuICAgICAgY29uc3QgbG93ZXJDYXNlQSA9IFN0cmluZ1V0aWxzLmxvY2FsZVRvTG9jYWxpemVkTmFtZSggYSApLnRvTG93ZXJDYXNlKCk7XHJcbiAgICAgIGNvbnN0IGxvd2VyQ2FzZUIgPSBTdHJpbmdVdGlscy5sb2NhbGVUb0xvY2FsaXplZE5hbWUoIGIgKS50b0xvd2VyQ2FzZSgpO1xyXG4gICAgICByZXR1cm4gbG93ZXJDYXNlQS5sb2NhbGVDb21wYXJlKCBsb3dlckNhc2VCLCAnZW4tVVMnLCB7IHNlbnNpdGl2aXR5OiAnYmFzZScgfSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIEFsbCBhdmFpbGFibGUgbG9jYWxlcyBhbGlnbmVkIGludG8gYSBncmlkXHJcbiAgICBjb25zdCBjb250ZW50ID0gbmV3IEdyaWRCb3goIHtcclxuICAgICAgeE1hcmdpbjogNSxcclxuICAgICAgeEFsaWduOiAnbGVmdCcsXHJcbiAgICAgIGF1dG9Sb3dzOiAxNSxcclxuXHJcbiAgICAgIC8vIEJ5IGluc3BlY3Rpb24sIHNhZmV0eSBuZXQgaW4gY2FzZSB0aGVyZSBhcmUgdG9vIG1hbnkgbGFuZ3VhZ2VzLiBXaWxsIHNjYWxlIGRvd24gdGhpcyBwYW5lbCB3aXRob3V0XHJcbiAgICAgIC8vIHRoZSBlbnRpcmUgUHJlZmVyZW5jZXNEaWFsb2cgc2NhbGluZyBkb3duLlxyXG4gICAgICBtYXhXaWR0aDogMTAwMCxcclxuXHJcbiAgICAgIC8vIFdlIGRvbid0IHdhbnQgdGhlIEdyaWRCb3ggdG8gcmVzaXplIGFzIHNlbGVjdGlvbiBoaWdobGlnaHRzIHVwZGF0ZSB3aXRoIGlucHV0XHJcbiAgICAgIHJlc2l6ZTogZmFsc2UsXHJcbiAgICAgIGNoaWxkcmVuOiBzb3J0ZWRMb2NhbGl6ZWROYW1lTG9jYWxlcy5tYXAoIGxvY2FsZSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIG5ldyBMYW5ndWFnZVNlbGVjdGlvbk5vZGUoIGxvY2FsZVByb3BlcnR5LCBsb2NhbGUgKTtcclxuICAgICAgfSApXHJcbiAgICB9ICk7XHJcblxyXG4gICAgc3VwZXIoIGNvbnRlbnQsIHtcclxuXHJcbiAgICAgIC8vIHBkb21cclxuICAgICAgdGFnTmFtZTogJ2RpdicsXHJcbiAgICAgIGxhYmVsVGFnTmFtZTogJ2gzJyxcclxuICAgICAgbGFiZWxDb250ZW50OiBKb2lzdFN0cmluZ3MuYTExeS5wcmVmZXJlbmNlcy50YWJzLmxvY2FsaXphdGlvbi5sYW5ndWFnZVNlbGVjdGlvbi5sYWJlbFN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICBkZXNjcmlwdGlvblRhZ05hbWU6ICdwJyxcclxuICAgICAgZGVzY3JpcHRpb25Db250ZW50OiBKb2lzdFN0cmluZ3MuYTExeS5wcmVmZXJlbmNlcy50YWJzLmxvY2FsaXphdGlvbi5sYW5ndWFnZVNlbGVjdGlvbi5kZXNjcmlwdGlvblN0cmluZ1Byb3BlcnR5XHJcbiAgICB9ICk7XHJcbiAgfVxyXG59XHJcblxyXG5qb2lzdC5yZWdpc3RlciggJ0xvY2FsZVBhbmVsJywgTG9jYWxlUGFuZWwgKTtcclxuZXhwb3J0IGRlZmF1bHQgTG9jYWxlUGFuZWw7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLGFBQWE7QUFDL0IsT0FBT0MsS0FBSyxNQUFNLDBCQUEwQjtBQUM1QyxTQUFTQyxPQUFPLFFBQVEsZ0NBQWdDO0FBRXhELE9BQU9DLHFCQUFxQixNQUFNLDRCQUE0QjtBQUU5RCxPQUFPQyxZQUFZLE1BQU0sb0JBQW9CO0FBQzdDLE9BQU9DLFdBQVcsTUFBTSw0Q0FBNEM7QUFFcEUsTUFBTUMsV0FBVyxTQUFTTCxLQUFLLENBQUM7RUFDdkJNLFdBQVdBLENBQUVDLGNBQWdDLEVBQUc7SUFFckQsTUFBTUMsT0FBTyxHQUFHRCxjQUFjLENBQUNFLFdBQVk7O0lBRTNDO0lBQ0E7SUFDQSxNQUFNQywwQkFBMEIsR0FBR0YsT0FBTyxDQUFDRyxLQUFLLENBQUMsQ0FBQyxDQUFDQyxJQUFJLENBQUUsQ0FBRUMsQ0FBQyxFQUFFQyxDQUFDLEtBQU07TUFDbkUsTUFBTUMsVUFBVSxHQUFHWCxXQUFXLENBQUNZLHFCQUFxQixDQUFFSCxDQUFFLENBQUMsQ0FBQ0ksV0FBVyxDQUFDLENBQUM7TUFDdkUsTUFBTUMsVUFBVSxHQUFHZCxXQUFXLENBQUNZLHFCQUFxQixDQUFFRixDQUFFLENBQUMsQ0FBQ0csV0FBVyxDQUFDLENBQUM7TUFDdkUsT0FBT0YsVUFBVSxDQUFDSSxhQUFhLENBQUVELFVBQVUsRUFBRSxPQUFPLEVBQUU7UUFBRUUsV0FBVyxFQUFFO01BQU8sQ0FBRSxDQUFDO0lBQ2pGLENBQUUsQ0FBQzs7SUFFSDtJQUNBLE1BQU1DLE9BQU8sR0FBRyxJQUFJcEIsT0FBTyxDQUFFO01BQzNCcUIsT0FBTyxFQUFFLENBQUM7TUFDVkMsTUFBTSxFQUFFLE1BQU07TUFDZEMsUUFBUSxFQUFFLEVBQUU7TUFFWjtNQUNBO01BQ0FDLFFBQVEsRUFBRSxJQUFJO01BRWQ7TUFDQUMsTUFBTSxFQUFFLEtBQUs7TUFDYkMsUUFBUSxFQUFFakIsMEJBQTBCLENBQUNrQixHQUFHLENBQUVDLE1BQU0sSUFBSTtRQUNsRCxPQUFPLElBQUkzQixxQkFBcUIsQ0FBRUssY0FBYyxFQUFFc0IsTUFBTyxDQUFDO01BQzVELENBQUU7SUFDSixDQUFFLENBQUM7SUFFSCxLQUFLLENBQUVSLE9BQU8sRUFBRTtNQUVkO01BQ0FTLE9BQU8sRUFBRSxLQUFLO01BQ2RDLFlBQVksRUFBRSxJQUFJO01BQ2xCQyxZQUFZLEVBQUU3QixZQUFZLENBQUM4QixJQUFJLENBQUNDLFdBQVcsQ0FBQ0MsSUFBSSxDQUFDQyxZQUFZLENBQUNDLGlCQUFpQixDQUFDQyxtQkFBbUI7TUFDbkdDLGtCQUFrQixFQUFFLEdBQUc7TUFDdkJDLGtCQUFrQixFQUFFckMsWUFBWSxDQUFDOEIsSUFBSSxDQUFDQyxXQUFXLENBQUNDLElBQUksQ0FBQ0MsWUFBWSxDQUFDQyxpQkFBaUIsQ0FBQ0k7SUFDeEYsQ0FBRSxDQUFDO0VBQ0w7QUFDRjtBQUVBMUMsS0FBSyxDQUFDMkMsUUFBUSxDQUFFLGFBQWEsRUFBRXJDLFdBQVksQ0FBQztBQUM1QyxlQUFlQSxXQUFXIiwiaWdub3JlTGlzdCI6W119