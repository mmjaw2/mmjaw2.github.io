// Copyright 2021-2023, University of Colorado Boulder

/**
 * A manager that controls whether all audio is enabled and whether each auditory feature is enabled. Has flags that
 * indicate which auditory features are supported. Also responsible for initializing managers for sub-components
 * of the AudioManager.
 *
 * PhET uses the term "Audio" to describe the collection of all auditory features that are provided by the simulation.
 * Under "Audio" there are currently two sub-features that can be separately enabled and disabled that PhET calls
 * "Sound" and "Voicing". Illustrated below:
 *
 * "Audio" - All auditory output in the sim.
 *  - "Sound" - All sound effects and sonifications that represent the simulation.
 *    - "Extra Sound" - Additional Sounds that can be enabled separately, but may not be beneficial for all users.
 *  - "Voicing" - Spoken text that describes what is happening in the simulation.
 *
 *  Disabling Audio will mute all subcomponents. But each subcomponent can be muted separately.
 *
 * @author Jesse Greenberg
 */

import BooleanProperty from '../../axon/js/BooleanProperty.js';
import DerivedProperty from '../../axon/js/DerivedProperty.js';
import { Display, voicingManager } from '../../scenery/js/imports.js';
import soundManager from '../../tambo/js/soundManager.js';
import PhetioObject from '../../tandem/js/PhetioObject.js';
import Tandem from '../../tandem/js/Tandem.js';
import joist from './joist.js';
import isSettingPhetioStateProperty from '../../tandem/js/isSettingPhetioStateProperty.js';
const ANY_AUDIO_SUPPORTED = phet.chipper.queryParameters.supportsVoicing || phet.chipper.queryParameters.supportsSound;
class AudioManager extends PhetioObject {
  // Whether all features involving audio are enabled (including sound, extra sound, and voicing). When false,
  // everything should be totally silent.

  // Indicates when both Audio and Sound are enabled. When false, the soundManager will not produce any sound.

  // Indicates when both Audio and Voicing are enabled. When false, the voicingManager will not produce any speech.

  // Indicates when any subcomponent of audio is enabled. Note this will still be true when audio is disabled. It is
  // only for subcomponents.

  // Indicates when audio and at least one of its subcomponents are enabled. When false, there should be no auditory output.

  constructor(tandem) {
    super({
      tandem: tandem,
      phetioState: false,
      phetioDocumentation: 'Controls the simulation\'s audio features. This includes sound and voicing. For sims that ' + 'do not support these features, this element and its children can be ignored.'
    });
    this.audioEnabledProperty = new BooleanProperty(phet.chipper.queryParameters.audio === 'enabled', {
      tandem: tandem.createTandem('audioEnabledProperty'),
      phetioFeatured: true,
      phetioDocumentation: 'toggles all audio features on and off; supported only if this sim supports audio features.'
    });
    this.audioAndSoundEnabledProperty = DerivedProperty.and([this.audioEnabledProperty, soundManager.enabledProperty]);
    this.audioAndVoicingEnabledProperty = DerivedProperty.and([this.audioEnabledProperty, voicingManager.enabledProperty]);
    this.anySubcomponentEnabledProperty = new DerivedProperty([soundManager.enabledProperty, voicingManager.enabledProperty], (soundEnabled, voicingEnabled) => {
      return soundEnabled || voicingEnabled;
    });
    this.anyOutputEnabledProperty = new DerivedProperty([this.audioEnabledProperty, this.anySubcomponentEnabledProperty], (audioEnabled, anySubcomponentEnabled) => {
      return audioEnabled && anySubcomponentEnabled;
    });
  }

  /**
   * Initialize the AudioManager and subcomponents.
   */
  initialize(sim) {
    if (sim.preferencesModel.audioModel.supportsSound) {
      soundManager.initialize(sim.isConstructionCompleteProperty, this.audioEnabledProperty, sim.browserTabVisibleProperty, sim.activeProperty, isSettingPhetioStateProperty);
    }
    if (sim.preferencesModel.audioModel.supportsVoicing) {
      voicingManager.initialize(Display.userGestureEmitter, {
        // specify the Properties that control whether or not output is allowed from voicingManager
        speechAllowedProperty: new DerivedProperty([sim.isConstructionCompleteProperty, sim.browserTabVisibleProperty, sim.activeProperty, isSettingPhetioStateProperty, this.audioEnabledProperty], (simConstructionComplete, simVisible, simActive, simSettingPhetioState, audioEnabled) => {
          return simConstructionComplete && simVisible && simActive && !simSettingPhetioState && audioEnabled;
        })
      });
    }

    // If both sound and voicing are enabled, hook up a feature that will turn down the sound level when the speech
    // synthesizer is speaking.  This is called "ducking".
    if (sim.preferencesModel.audioModel.supportsSound && sim.preferencesModel.audioModel.supportsVoicing) {
      // state checking
      assert && assert(voicingManager.initialized, 'voicingManager must be initialized before ducking can be set up');
      assert && assert(soundManager.initialized, 'soundManager must be initialized before ducking can be set up');

      // Set up the ducking Property and hook it to the emitters that indicate when speaking is occurring in the voicing
      // manager.
      const duckSoundProperty = new BooleanProperty(false);
      voicingManager.startSpeakingEmitter.addListener(() => duckSoundProperty.set(true));
      voicingManager.endSpeakingEmitter.addListener(() => duckSoundProperty.set(false));

      // Add the ducking property to the sound manager.
      soundManager.addDuckingProperty(duckSoundProperty);
    }
  }
}
const audioManager = new AudioManager(ANY_AUDIO_SUPPORTED ? Tandem.GENERAL_VIEW.createTandem('audioManager') : Tandem.OPT_OUT);
joist.register('audioManager', audioManager);
export default audioManager;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJCb29sZWFuUHJvcGVydHkiLCJEZXJpdmVkUHJvcGVydHkiLCJEaXNwbGF5Iiwidm9pY2luZ01hbmFnZXIiLCJzb3VuZE1hbmFnZXIiLCJQaGV0aW9PYmplY3QiLCJUYW5kZW0iLCJqb2lzdCIsImlzU2V0dGluZ1BoZXRpb1N0YXRlUHJvcGVydHkiLCJBTllfQVVESU9fU1VQUE9SVEVEIiwicGhldCIsImNoaXBwZXIiLCJxdWVyeVBhcmFtZXRlcnMiLCJzdXBwb3J0c1ZvaWNpbmciLCJzdXBwb3J0c1NvdW5kIiwiQXVkaW9NYW5hZ2VyIiwiY29uc3RydWN0b3IiLCJ0YW5kZW0iLCJwaGV0aW9TdGF0ZSIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJhdWRpb0VuYWJsZWRQcm9wZXJ0eSIsImF1ZGlvIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvRmVhdHVyZWQiLCJhdWRpb0FuZFNvdW5kRW5hYmxlZFByb3BlcnR5IiwiYW5kIiwiZW5hYmxlZFByb3BlcnR5IiwiYXVkaW9BbmRWb2ljaW5nRW5hYmxlZFByb3BlcnR5IiwiYW55U3ViY29tcG9uZW50RW5hYmxlZFByb3BlcnR5Iiwic291bmRFbmFibGVkIiwidm9pY2luZ0VuYWJsZWQiLCJhbnlPdXRwdXRFbmFibGVkUHJvcGVydHkiLCJhdWRpb0VuYWJsZWQiLCJhbnlTdWJjb21wb25lbnRFbmFibGVkIiwiaW5pdGlhbGl6ZSIsInNpbSIsInByZWZlcmVuY2VzTW9kZWwiLCJhdWRpb01vZGVsIiwiaXNDb25zdHJ1Y3Rpb25Db21wbGV0ZVByb3BlcnR5IiwiYnJvd3NlclRhYlZpc2libGVQcm9wZXJ0eSIsImFjdGl2ZVByb3BlcnR5IiwidXNlckdlc3R1cmVFbWl0dGVyIiwic3BlZWNoQWxsb3dlZFByb3BlcnR5Iiwic2ltQ29uc3RydWN0aW9uQ29tcGxldGUiLCJzaW1WaXNpYmxlIiwic2ltQWN0aXZlIiwic2ltU2V0dGluZ1BoZXRpb1N0YXRlIiwiYXNzZXJ0IiwiaW5pdGlhbGl6ZWQiLCJkdWNrU291bmRQcm9wZXJ0eSIsInN0YXJ0U3BlYWtpbmdFbWl0dGVyIiwiYWRkTGlzdGVuZXIiLCJzZXQiLCJlbmRTcGVha2luZ0VtaXR0ZXIiLCJhZGREdWNraW5nUHJvcGVydHkiLCJhdWRpb01hbmFnZXIiLCJHRU5FUkFMX1ZJRVciLCJPUFRfT1VUIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJhdWRpb01hbmFnZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBtYW5hZ2VyIHRoYXQgY29udHJvbHMgd2hldGhlciBhbGwgYXVkaW8gaXMgZW5hYmxlZCBhbmQgd2hldGhlciBlYWNoIGF1ZGl0b3J5IGZlYXR1cmUgaXMgZW5hYmxlZC4gSGFzIGZsYWdzIHRoYXRcclxuICogaW5kaWNhdGUgd2hpY2ggYXVkaXRvcnkgZmVhdHVyZXMgYXJlIHN1cHBvcnRlZC4gQWxzbyByZXNwb25zaWJsZSBmb3IgaW5pdGlhbGl6aW5nIG1hbmFnZXJzIGZvciBzdWItY29tcG9uZW50c1xyXG4gKiBvZiB0aGUgQXVkaW9NYW5hZ2VyLlxyXG4gKlxyXG4gKiBQaEVUIHVzZXMgdGhlIHRlcm0gXCJBdWRpb1wiIHRvIGRlc2NyaWJlIHRoZSBjb2xsZWN0aW9uIG9mIGFsbCBhdWRpdG9yeSBmZWF0dXJlcyB0aGF0IGFyZSBwcm92aWRlZCBieSB0aGUgc2ltdWxhdGlvbi5cclxuICogVW5kZXIgXCJBdWRpb1wiIHRoZXJlIGFyZSBjdXJyZW50bHkgdHdvIHN1Yi1mZWF0dXJlcyB0aGF0IGNhbiBiZSBzZXBhcmF0ZWx5IGVuYWJsZWQgYW5kIGRpc2FibGVkIHRoYXQgUGhFVCBjYWxsc1xyXG4gKiBcIlNvdW5kXCIgYW5kIFwiVm9pY2luZ1wiLiBJbGx1c3RyYXRlZCBiZWxvdzpcclxuICpcclxuICogXCJBdWRpb1wiIC0gQWxsIGF1ZGl0b3J5IG91dHB1dCBpbiB0aGUgc2ltLlxyXG4gKiAgLSBcIlNvdW5kXCIgLSBBbGwgc291bmQgZWZmZWN0cyBhbmQgc29uaWZpY2F0aW9ucyB0aGF0IHJlcHJlc2VudCB0aGUgc2ltdWxhdGlvbi5cclxuICogICAgLSBcIkV4dHJhIFNvdW5kXCIgLSBBZGRpdGlvbmFsIFNvdW5kcyB0aGF0IGNhbiBiZSBlbmFibGVkIHNlcGFyYXRlbHksIGJ1dCBtYXkgbm90IGJlIGJlbmVmaWNpYWwgZm9yIGFsbCB1c2Vycy5cclxuICogIC0gXCJWb2ljaW5nXCIgLSBTcG9rZW4gdGV4dCB0aGF0IGRlc2NyaWJlcyB3aGF0IGlzIGhhcHBlbmluZyBpbiB0aGUgc2ltdWxhdGlvbi5cclxuICpcclxuICogIERpc2FibGluZyBBdWRpbyB3aWxsIG11dGUgYWxsIHN1YmNvbXBvbmVudHMuIEJ1dCBlYWNoIHN1YmNvbXBvbmVudCBjYW4gYmUgbXV0ZWQgc2VwYXJhdGVseS5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmdcclxuICovXHJcblxyXG5pbXBvcnQgQm9vbGVhblByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvQm9vbGVhblByb3BlcnR5LmpzJztcclxuaW1wb3J0IERlcml2ZWRQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IERpc3BsYXksIHZvaWNpbmdNYW5hZ2VyIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IHNvdW5kTWFuYWdlciBmcm9tICcuLi8uLi90YW1iby9qcy9zb3VuZE1hbmFnZXIuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0IGZyb20gJy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgVGFuZGVtIGZyb20gJy4uLy4uL3RhbmRlbS9qcy9UYW5kZW0uanMnO1xyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBTaW0gZnJvbSAnLi9TaW0uanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBpc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5IGZyb20gJy4uLy4uL3RhbmRlbS9qcy9pc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5LmpzJztcclxuXHJcbmNvbnN0IEFOWV9BVURJT19TVVBQT1JURUQgPSBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLnN1cHBvcnRzVm9pY2luZyB8fCBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLnN1cHBvcnRzU291bmQ7XHJcblxyXG5jbGFzcyBBdWRpb01hbmFnZXIgZXh0ZW5kcyBQaGV0aW9PYmplY3Qge1xyXG5cclxuICAvLyBXaGV0aGVyIGFsbCBmZWF0dXJlcyBpbnZvbHZpbmcgYXVkaW8gYXJlIGVuYWJsZWQgKGluY2x1ZGluZyBzb3VuZCwgZXh0cmEgc291bmQsIGFuZCB2b2ljaW5nKS4gV2hlbiBmYWxzZSxcclxuICAvLyBldmVyeXRoaW5nIHNob3VsZCBiZSB0b3RhbGx5IHNpbGVudC5cclxuICBwdWJsaWMgcmVhZG9ubHkgYXVkaW9FbmFibGVkUHJvcGVydHk6IEJvb2xlYW5Qcm9wZXJ0eTtcclxuXHJcbiAgLy8gSW5kaWNhdGVzIHdoZW4gYm90aCBBdWRpbyBhbmQgU291bmQgYXJlIGVuYWJsZWQuIFdoZW4gZmFsc2UsIHRoZSBzb3VuZE1hbmFnZXIgd2lsbCBub3QgcHJvZHVjZSBhbnkgc291bmQuXHJcbiAgcHVibGljIHJlYWRvbmx5IGF1ZGlvQW5kU291bmRFbmFibGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyBJbmRpY2F0ZXMgd2hlbiBib3RoIEF1ZGlvIGFuZCBWb2ljaW5nIGFyZSBlbmFibGVkLiBXaGVuIGZhbHNlLCB0aGUgdm9pY2luZ01hbmFnZXIgd2lsbCBub3QgcHJvZHVjZSBhbnkgc3BlZWNoLlxyXG4gIHB1YmxpYyByZWFkb25seSBhdWRpb0FuZFZvaWNpbmdFbmFibGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyBJbmRpY2F0ZXMgd2hlbiBhbnkgc3ViY29tcG9uZW50IG9mIGF1ZGlvIGlzIGVuYWJsZWQuIE5vdGUgdGhpcyB3aWxsIHN0aWxsIGJlIHRydWUgd2hlbiBhdWRpbyBpcyBkaXNhYmxlZC4gSXQgaXNcclxuICAvLyBvbmx5IGZvciBzdWJjb21wb25lbnRzLlxyXG4gIHB1YmxpYyByZWFkb25seSBhbnlTdWJjb21wb25lbnRFbmFibGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICAvLyBJbmRpY2F0ZXMgd2hlbiBhdWRpbyBhbmQgYXQgbGVhc3Qgb25lIG9mIGl0cyBzdWJjb21wb25lbnRzIGFyZSBlbmFibGVkLiBXaGVuIGZhbHNlLCB0aGVyZSBzaG91bGQgYmUgbm8gYXVkaXRvcnkgb3V0cHV0LlxyXG4gIHB1YmxpYyByZWFkb25seSBhbnlPdXRwdXRFbmFibGVkUHJvcGVydHk6IFRSZWFkT25seVByb3BlcnR5PGJvb2xlYW4+O1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIHRhbmRlbTogVGFuZGVtICkge1xyXG5cclxuICAgIHN1cGVyKCB7XHJcbiAgICAgIHRhbmRlbTogdGFuZGVtLFxyXG4gICAgICBwaGV0aW9TdGF0ZTogZmFsc2UsXHJcbiAgICAgIHBoZXRpb0RvY3VtZW50YXRpb246ICdDb250cm9scyB0aGUgc2ltdWxhdGlvblxcJ3MgYXVkaW8gZmVhdHVyZXMuIFRoaXMgaW5jbHVkZXMgc291bmQgYW5kIHZvaWNpbmcuIEZvciBzaW1zIHRoYXQgJyArXHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICdkbyBub3Qgc3VwcG9ydCB0aGVzZSBmZWF0dXJlcywgdGhpcyBlbGVtZW50IGFuZCBpdHMgY2hpbGRyZW4gY2FuIGJlIGlnbm9yZWQuJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYXVkaW9FbmFibGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCBwaGV0LmNoaXBwZXIucXVlcnlQYXJhbWV0ZXJzLmF1ZGlvID09PSAnZW5hYmxlZCcsIHtcclxuICAgICAgdGFuZGVtOiB0YW5kZW0uY3JlYXRlVGFuZGVtKCAnYXVkaW9FbmFibGVkUHJvcGVydHknICksXHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAndG9nZ2xlcyBhbGwgYXVkaW8gZmVhdHVyZXMgb24gYW5kIG9mZjsgc3VwcG9ydGVkIG9ubHkgaWYgdGhpcyBzaW0gc3VwcG9ydHMgYXVkaW8gZmVhdHVyZXMuJ1xyXG4gICAgfSApO1xyXG5cclxuICAgIHRoaXMuYXVkaW9BbmRTb3VuZEVuYWJsZWRQcm9wZXJ0eSA9IERlcml2ZWRQcm9wZXJ0eS5hbmQoIFsgdGhpcy5hdWRpb0VuYWJsZWRQcm9wZXJ0eSwgc291bmRNYW5hZ2VyLmVuYWJsZWRQcm9wZXJ0eSBdICk7XHJcbiAgICB0aGlzLmF1ZGlvQW5kVm9pY2luZ0VuYWJsZWRQcm9wZXJ0eSA9IERlcml2ZWRQcm9wZXJ0eS5hbmQoIFsgdGhpcy5hdWRpb0VuYWJsZWRQcm9wZXJ0eSwgdm9pY2luZ01hbmFnZXIuZW5hYmxlZFByb3BlcnR5IF0gKTtcclxuXHJcbiAgICB0aGlzLmFueVN1YmNvbXBvbmVudEVuYWJsZWRQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgICAgIFsgc291bmRNYW5hZ2VyLmVuYWJsZWRQcm9wZXJ0eSwgdm9pY2luZ01hbmFnZXIuZW5hYmxlZFByb3BlcnR5IF0sXHJcbiAgICAgICggc291bmRFbmFibGVkLCB2b2ljaW5nRW5hYmxlZCApID0+IHtcclxuICAgICAgICByZXR1cm4gc291bmRFbmFibGVkIHx8IHZvaWNpbmdFbmFibGVkO1xyXG4gICAgICB9XHJcbiAgICApO1xyXG5cclxuICAgIHRoaXMuYW55T3V0cHV0RW5hYmxlZFByb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eShcclxuICAgICAgWyB0aGlzLmF1ZGlvRW5hYmxlZFByb3BlcnR5LCB0aGlzLmFueVN1YmNvbXBvbmVudEVuYWJsZWRQcm9wZXJ0eSBdLFxyXG4gICAgICAoIGF1ZGlvRW5hYmxlZCwgYW55U3ViY29tcG9uZW50RW5hYmxlZCApID0+IHtcclxuICAgICAgICByZXR1cm4gYXVkaW9FbmFibGVkICYmIGFueVN1YmNvbXBvbmVudEVuYWJsZWQ7XHJcbiAgICAgIH1cclxuICAgICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBJbml0aWFsaXplIHRoZSBBdWRpb01hbmFnZXIgYW5kIHN1YmNvbXBvbmVudHMuXHJcbiAgICovXHJcbiAgcHVibGljIGluaXRpYWxpemUoIHNpbTogU2ltICk6IHZvaWQge1xyXG5cclxuICAgIGlmICggc2ltLnByZWZlcmVuY2VzTW9kZWwuYXVkaW9Nb2RlbC5zdXBwb3J0c1NvdW5kICkge1xyXG4gICAgICBzb3VuZE1hbmFnZXIuaW5pdGlhbGl6ZShcclxuICAgICAgICBzaW0uaXNDb25zdHJ1Y3Rpb25Db21wbGV0ZVByb3BlcnR5LFxyXG4gICAgICAgIHRoaXMuYXVkaW9FbmFibGVkUHJvcGVydHksXHJcbiAgICAgICAgc2ltLmJyb3dzZXJUYWJWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgICAgc2ltLmFjdGl2ZVByb3BlcnR5LFxyXG4gICAgICAgIGlzU2V0dGluZ1BoZXRpb1N0YXRlUHJvcGVydHlcclxuICAgICAgKTtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIHNpbS5wcmVmZXJlbmNlc01vZGVsLmF1ZGlvTW9kZWwuc3VwcG9ydHNWb2ljaW5nICkge1xyXG4gICAgICB2b2ljaW5nTWFuYWdlci5pbml0aWFsaXplKCBEaXNwbGF5LnVzZXJHZXN0dXJlRW1pdHRlciwge1xyXG5cclxuICAgICAgICAvLyBzcGVjaWZ5IHRoZSBQcm9wZXJ0aWVzIHRoYXQgY29udHJvbCB3aGV0aGVyIG9yIG5vdCBvdXRwdXQgaXMgYWxsb3dlZCBmcm9tIHZvaWNpbmdNYW5hZ2VyXHJcbiAgICAgICAgc3BlZWNoQWxsb3dlZFByb3BlcnR5OiBuZXcgRGVyaXZlZFByb3BlcnR5KCBbXHJcbiAgICAgICAgICBzaW0uaXNDb25zdHJ1Y3Rpb25Db21wbGV0ZVByb3BlcnR5LFxyXG4gICAgICAgICAgc2ltLmJyb3dzZXJUYWJWaXNpYmxlUHJvcGVydHksXHJcbiAgICAgICAgICBzaW0uYWN0aXZlUHJvcGVydHksXHJcbiAgICAgICAgICBpc1NldHRpbmdQaGV0aW9TdGF0ZVByb3BlcnR5LFxyXG4gICAgICAgICAgdGhpcy5hdWRpb0VuYWJsZWRQcm9wZXJ0eVxyXG4gICAgICAgIF0sICggc2ltQ29uc3RydWN0aW9uQ29tcGxldGUsIHNpbVZpc2libGUsIHNpbUFjdGl2ZSwgc2ltU2V0dGluZ1BoZXRpb1N0YXRlLCBhdWRpb0VuYWJsZWQgKSA9PiB7XHJcbiAgICAgICAgICByZXR1cm4gc2ltQ29uc3RydWN0aW9uQ29tcGxldGUgJiYgc2ltVmlzaWJsZSAmJiBzaW1BY3RpdmUgJiYgIXNpbVNldHRpbmdQaGV0aW9TdGF0ZSAmJiBhdWRpb0VuYWJsZWQ7XHJcbiAgICAgICAgfSApXHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBJZiBib3RoIHNvdW5kIGFuZCB2b2ljaW5nIGFyZSBlbmFibGVkLCBob29rIHVwIGEgZmVhdHVyZSB0aGF0IHdpbGwgdHVybiBkb3duIHRoZSBzb3VuZCBsZXZlbCB3aGVuIHRoZSBzcGVlY2hcclxuICAgIC8vIHN5bnRoZXNpemVyIGlzIHNwZWFraW5nLiAgVGhpcyBpcyBjYWxsZWQgXCJkdWNraW5nXCIuXHJcbiAgICBpZiAoIHNpbS5wcmVmZXJlbmNlc01vZGVsLmF1ZGlvTW9kZWwuc3VwcG9ydHNTb3VuZCAmJiBzaW0ucHJlZmVyZW5jZXNNb2RlbC5hdWRpb01vZGVsLnN1cHBvcnRzVm9pY2luZyApIHtcclxuXHJcbiAgICAgIC8vIHN0YXRlIGNoZWNraW5nXHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHZvaWNpbmdNYW5hZ2VyLmluaXRpYWxpemVkLCAndm9pY2luZ01hbmFnZXIgbXVzdCBiZSBpbml0aWFsaXplZCBiZWZvcmUgZHVja2luZyBjYW4gYmUgc2V0IHVwJyApO1xyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBzb3VuZE1hbmFnZXIuaW5pdGlhbGl6ZWQsICdzb3VuZE1hbmFnZXIgbXVzdCBiZSBpbml0aWFsaXplZCBiZWZvcmUgZHVja2luZyBjYW4gYmUgc2V0IHVwJyApO1xyXG5cclxuICAgICAgLy8gU2V0IHVwIHRoZSBkdWNraW5nIFByb3BlcnR5IGFuZCBob29rIGl0IHRvIHRoZSBlbWl0dGVycyB0aGF0IGluZGljYXRlIHdoZW4gc3BlYWtpbmcgaXMgb2NjdXJyaW5nIGluIHRoZSB2b2ljaW5nXHJcbiAgICAgIC8vIG1hbmFnZXIuXHJcbiAgICAgIGNvbnN0IGR1Y2tTb3VuZFByb3BlcnR5ID0gbmV3IEJvb2xlYW5Qcm9wZXJ0eSggZmFsc2UgKTtcclxuICAgICAgdm9pY2luZ01hbmFnZXIuc3RhcnRTcGVha2luZ0VtaXR0ZXIuYWRkTGlzdGVuZXIoICgpID0+IGR1Y2tTb3VuZFByb3BlcnR5LnNldCggdHJ1ZSApICk7XHJcbiAgICAgIHZvaWNpbmdNYW5hZ2VyLmVuZFNwZWFraW5nRW1pdHRlci5hZGRMaXN0ZW5lciggKCkgPT4gZHVja1NvdW5kUHJvcGVydHkuc2V0KCBmYWxzZSApICk7XHJcblxyXG4gICAgICAvLyBBZGQgdGhlIGR1Y2tpbmcgcHJvcGVydHkgdG8gdGhlIHNvdW5kIG1hbmFnZXIuXHJcbiAgICAgIHNvdW5kTWFuYWdlci5hZGREdWNraW5nUHJvcGVydHkoIGR1Y2tTb3VuZFByb3BlcnR5ICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcblxyXG5jb25zdCBhdWRpb01hbmFnZXIgPSBuZXcgQXVkaW9NYW5hZ2VyKCBBTllfQVVESU9fU1VQUE9SVEVEID8gVGFuZGVtLkdFTkVSQUxfVklFVy5jcmVhdGVUYW5kZW0oICdhdWRpb01hbmFnZXInICkgOiBUYW5kZW0uT1BUX09VVCApO1xyXG5cclxuam9pc3QucmVnaXN0ZXIoICdhdWRpb01hbmFnZXInLCBhdWRpb01hbmFnZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgYXVkaW9NYW5hZ2VyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGVBQWUsTUFBTSxrQ0FBa0M7QUFDOUQsT0FBT0MsZUFBZSxNQUFNLGtDQUFrQztBQUM5RCxTQUFTQyxPQUFPLEVBQUVDLGNBQWMsUUFBUSw2QkFBNkI7QUFDckUsT0FBT0MsWUFBWSxNQUFNLGdDQUFnQztBQUN6RCxPQUFPQyxZQUFZLE1BQU0saUNBQWlDO0FBQzFELE9BQU9DLE1BQU0sTUFBTSwyQkFBMkI7QUFDOUMsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFHOUIsT0FBT0MsNEJBQTRCLE1BQU0saURBQWlEO0FBRTFGLE1BQU1DLG1CQUFtQixHQUFHQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsZUFBZSxDQUFDQyxlQUFlLElBQUlILElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNFLGFBQWE7QUFFdEgsTUFBTUMsWUFBWSxTQUFTVixZQUFZLENBQUM7RUFFdEM7RUFDQTs7RUFHQTs7RUFHQTs7RUFHQTtFQUNBOztFQUdBOztFQUdPVyxXQUFXQSxDQUFFQyxNQUFjLEVBQUc7SUFFbkMsS0FBSyxDQUFFO01BQ0xBLE1BQU0sRUFBRUEsTUFBTTtNQUNkQyxXQUFXLEVBQUUsS0FBSztNQUNsQkMsbUJBQW1CLEVBQUUsNEZBQTRGLEdBQzVGO0lBQ3ZCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0Msb0JBQW9CLEdBQUcsSUFBSXBCLGVBQWUsQ0FBRVUsSUFBSSxDQUFDQyxPQUFPLENBQUNDLGVBQWUsQ0FBQ1MsS0FBSyxLQUFLLFNBQVMsRUFBRTtNQUNqR0osTUFBTSxFQUFFQSxNQUFNLENBQUNLLFlBQVksQ0FBRSxzQkFBdUIsQ0FBQztNQUNyREMsY0FBYyxFQUFFLElBQUk7TUFDcEJKLG1CQUFtQixFQUFFO0lBQ3ZCLENBQUUsQ0FBQztJQUVILElBQUksQ0FBQ0ssNEJBQTRCLEdBQUd2QixlQUFlLENBQUN3QixHQUFHLENBQUUsQ0FBRSxJQUFJLENBQUNMLG9CQUFvQixFQUFFaEIsWUFBWSxDQUFDc0IsZUFBZSxDQUFHLENBQUM7SUFDdEgsSUFBSSxDQUFDQyw4QkFBOEIsR0FBRzFCLGVBQWUsQ0FBQ3dCLEdBQUcsQ0FBRSxDQUFFLElBQUksQ0FBQ0wsb0JBQW9CLEVBQUVqQixjQUFjLENBQUN1QixlQUFlLENBQUcsQ0FBQztJQUUxSCxJQUFJLENBQUNFLDhCQUE4QixHQUFHLElBQUkzQixlQUFlLENBQ3ZELENBQUVHLFlBQVksQ0FBQ3NCLGVBQWUsRUFBRXZCLGNBQWMsQ0FBQ3VCLGVBQWUsQ0FBRSxFQUNoRSxDQUFFRyxZQUFZLEVBQUVDLGNBQWMsS0FBTTtNQUNsQyxPQUFPRCxZQUFZLElBQUlDLGNBQWM7SUFDdkMsQ0FDRixDQUFDO0lBRUQsSUFBSSxDQUFDQyx3QkFBd0IsR0FBRyxJQUFJOUIsZUFBZSxDQUNqRCxDQUFFLElBQUksQ0FBQ21CLG9CQUFvQixFQUFFLElBQUksQ0FBQ1EsOEJBQThCLENBQUUsRUFDbEUsQ0FBRUksWUFBWSxFQUFFQyxzQkFBc0IsS0FBTTtNQUMxQyxPQUFPRCxZQUFZLElBQUlDLHNCQUFzQjtJQUMvQyxDQUNGLENBQUM7RUFDSDs7RUFFQTtBQUNGO0FBQ0E7RUFDU0MsVUFBVUEsQ0FBRUMsR0FBUSxFQUFTO0lBRWxDLElBQUtBLEdBQUcsQ0FBQ0MsZ0JBQWdCLENBQUNDLFVBQVUsQ0FBQ3ZCLGFBQWEsRUFBRztNQUNuRFYsWUFBWSxDQUFDOEIsVUFBVSxDQUNyQkMsR0FBRyxDQUFDRyw4QkFBOEIsRUFDbEMsSUFBSSxDQUFDbEIsb0JBQW9CLEVBQ3pCZSxHQUFHLENBQUNJLHlCQUF5QixFQUM3QkosR0FBRyxDQUFDSyxjQUFjLEVBQ2xCaEMsNEJBQ0YsQ0FBQztJQUNIO0lBRUEsSUFBSzJCLEdBQUcsQ0FBQ0MsZ0JBQWdCLENBQUNDLFVBQVUsQ0FBQ3hCLGVBQWUsRUFBRztNQUNyRFYsY0FBYyxDQUFDK0IsVUFBVSxDQUFFaEMsT0FBTyxDQUFDdUMsa0JBQWtCLEVBQUU7UUFFckQ7UUFDQUMscUJBQXFCLEVBQUUsSUFBSXpDLGVBQWUsQ0FBRSxDQUMxQ2tDLEdBQUcsQ0FBQ0csOEJBQThCLEVBQ2xDSCxHQUFHLENBQUNJLHlCQUF5QixFQUM3QkosR0FBRyxDQUFDSyxjQUFjLEVBQ2xCaEMsNEJBQTRCLEVBQzVCLElBQUksQ0FBQ1ksb0JBQW9CLENBQzFCLEVBQUUsQ0FBRXVCLHVCQUF1QixFQUFFQyxVQUFVLEVBQUVDLFNBQVMsRUFBRUMscUJBQXFCLEVBQUVkLFlBQVksS0FBTTtVQUM1RixPQUFPVyx1QkFBdUIsSUFBSUMsVUFBVSxJQUFJQyxTQUFTLElBQUksQ0FBQ0MscUJBQXFCLElBQUlkLFlBQVk7UUFDckcsQ0FBRTtNQUNKLENBQUUsQ0FBQztJQUNMOztJQUVBO0lBQ0E7SUFDQSxJQUFLRyxHQUFHLENBQUNDLGdCQUFnQixDQUFDQyxVQUFVLENBQUN2QixhQUFhLElBQUlxQixHQUFHLENBQUNDLGdCQUFnQixDQUFDQyxVQUFVLENBQUN4QixlQUFlLEVBQUc7TUFFdEc7TUFDQWtDLE1BQU0sSUFBSUEsTUFBTSxDQUFFNUMsY0FBYyxDQUFDNkMsV0FBVyxFQUFFLGlFQUFrRSxDQUFDO01BQ2pIRCxNQUFNLElBQUlBLE1BQU0sQ0FBRTNDLFlBQVksQ0FBQzRDLFdBQVcsRUFBRSwrREFBZ0UsQ0FBQzs7TUFFN0c7TUFDQTtNQUNBLE1BQU1DLGlCQUFpQixHQUFHLElBQUlqRCxlQUFlLENBQUUsS0FBTSxDQUFDO01BQ3RERyxjQUFjLENBQUMrQyxvQkFBb0IsQ0FBQ0MsV0FBVyxDQUFFLE1BQU1GLGlCQUFpQixDQUFDRyxHQUFHLENBQUUsSUFBSyxDQUFFLENBQUM7TUFDdEZqRCxjQUFjLENBQUNrRCxrQkFBa0IsQ0FBQ0YsV0FBVyxDQUFFLE1BQU1GLGlCQUFpQixDQUFDRyxHQUFHLENBQUUsS0FBTSxDQUFFLENBQUM7O01BRXJGO01BQ0FoRCxZQUFZLENBQUNrRCxrQkFBa0IsQ0FBRUwsaUJBQWtCLENBQUM7SUFDdEQ7RUFDRjtBQUNGO0FBRUEsTUFBTU0sWUFBWSxHQUFHLElBQUl4QyxZQUFZLENBQUVOLG1CQUFtQixHQUFHSCxNQUFNLENBQUNrRCxZQUFZLENBQUNsQyxZQUFZLENBQUUsY0FBZSxDQUFDLEdBQUdoQixNQUFNLENBQUNtRCxPQUFRLENBQUM7QUFFbElsRCxLQUFLLENBQUNtRCxRQUFRLENBQUUsY0FBYyxFQUFFSCxZQUFhLENBQUM7QUFDOUMsZUFBZUEsWUFBWSIsImlnbm9yZUxpc3QiOltdfQ==