// Copyright 2015-2024, University of Colorado Boulder

/**
 * UI parts for update-related dialogs
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import merge from '../../phet-core/js/merge.js';
import StringUtils from '../../phetcommon/js/util/StringUtils.js';
import PhetFont from '../../scenery-phet/js/PhetFont.js';
import SpinningIndicatorNode from '../../scenery-phet/js/SpinningIndicatorNode.js';
import { allowLinksProperty, HBox, openPopup, Path, Rectangle, RichText, VBox, VoicingText, VStrut } from '../../scenery/js/imports.js';
import checkSolidShape from '../../sherpa/js/fontawesome-5/checkSolidShape.js';
import exclamationTriangleSolidShape from '../../sherpa/js/fontawesome-5/exclamationTriangleSolidShape.js';
import TextPushButton from '../../sun/js/buttons/TextPushButton.js';
import joist from './joist.js';
import JoistStrings from './JoistStrings.js';
import updateCheck from './updateCheck.js';
import UpdateState from './UpdateState.js';
import DerivedProperty from '../../axon/js/DerivedProperty.js';

// constants
const UPDATE_TEXT_FONT = new PhetFont(14);
const MAX_WIDTH = 550; // Maximum width of the resulting update items

const UpdateNodes = {
  /**
   * "Checking" state node. With two size options (if options.big == true, it will be bigger)
   *
   * [options] - passed to the Node
   * returns step( dt ) and stepListener (bound to the node itself)
   * (joist-internal)
   */
  createCheckingNode: function (options) {
    const spinningIndicatorNode = new SpinningIndicatorNode({
      diameter: options.big ? 24 : 18
    });
    const checkingNode = new HBox(merge({
      spacing: options.big ? 10 : 8,
      maxWidth: MAX_WIDTH,
      children: [spinningIndicatorNode, new VoicingText(JoistStrings.updates.checkingStringProperty, {
        font: new PhetFont(options.big ? 16 : 14),
        fontWeight: options.big ? 'bold' : 'normal'
      })]
    }, options));
    checkingNode.step = function (dt) {
      if (updateCheck.stateProperty.value === UpdateState.CHECKING) {
        spinningIndicatorNode.step(dt);
      }
    };
    checkingNode.stepListener = checkingNode.step.bind(checkingNode);
    return checkingNode;
  },
  /**
   * "Up-to-date" state node
   * [options] - passed to the Node
   * (joist-internal)
   */
  createUpToDateNode: function (options) {
    return new HBox(merge({
      spacing: 8,
      maxWidth: MAX_WIDTH,
      children: [new Rectangle(0, 0, 20, 20, 5, 5, {
        fill: '#5c3',
        scale: options.big ? 1.2 : 1,
        children: [new Path(checkSolidShape, {
          fill: '#fff',
          scale: 0.029,
          centerX: 10,
          centerY: 10
        })]
      }), new VoicingText(JoistStrings.updates.upToDateStringProperty, {
        font: new PhetFont(options.big ? 16 : 14),
        fontWeight: options.big ? 'bold' : 'normal'
      })]
    }, options));
  },
  /**
   * "Out-of-date" state node for the "About" dialog.
   * [options] - passed to the Node
   * (joist-internal)
   */
  createOutOfDateAboutNode: function (options) {
    const stringProperty = new DerivedProperty([JoistStrings.updates.outOfDateStringProperty, allowLinksProperty], (outOfDateString, allowLinks) => {
      return allowLinks ? `<a href="{{url}}">${outOfDateString}</a>` : outOfDateString;
    });
    const links = {
      url: updateCheck.updateURL
    };
    const linkNode = new RichText(stringProperty, {
      links: links,
      font: UPDATE_TEXT_FONT
    });
    return new HBox(merge({
      spacing: 8,
      maxWidth: MAX_WIDTH,
      children: [new Path(exclamationTriangleSolidShape, {
        fill: '#E87600',
        // "safety orange", according to Wikipedia
        scale: 0.03
      }), linkNode],
      // pdom
      tagName: 'div'
    }, options));
  },
  /**
   * "Out-of-date" state node for the "Check for update" dialog.
   * dialog - the dialog, so that it can be closed with the "No thanks..." button
   * [options] - passed to the Node
   * (joist-internal)
   */
  createOutOfDateDialogNode: function (dialog, ourVersionString, latestVersionString, options) {
    const latestVersionStringProperty = new DerivedProperty([JoistStrings.updates.newVersionAvailableStringProperty], string => {
      return StringUtils.format(string, latestVersionString);
    });
    const ourVersionStringProperty = new DerivedProperty([JoistStrings.updates.yourCurrentVersionStringProperty], string => {
      return StringUtils.format(string, ourVersionString);
    });
    return new VBox(merge({
      spacing: 15,
      maxWidth: MAX_WIDTH,
      children: [new VBox({
        spacing: 5,
        align: 'left',
        children: [new VoicingText(latestVersionStringProperty, {
          font: new PhetFont(16),
          fontWeight: 'bold'
        }), new VoicingText(ourVersionStringProperty, {
          font: UPDATE_TEXT_FONT
        })]
      }), new HBox({
        spacing: 25,
        children: [new TextPushButton(JoistStrings.updates.getUpdateStringProperty, {
          visibleProperty: allowLinksProperty,
          baseColor: '#6f6',
          font: UPDATE_TEXT_FONT,
          listener: function () {
            openPopup(updateCheck.updateURL); // open in a new window/tab
          }
        }), new TextPushButton(JoistStrings.updates.noThanksStringProperty, {
          baseColor: '#ddd',
          font: UPDATE_TEXT_FONT,
          listener: function () {
            dialog.hide();

            // Closing the dialog is handled by the Dialog listener itself, no need to add code to close it here.
          }
        })]
      })]
    }, options));
  },
  /**
   * "Offline" state node
   * [options] - passed to the Node
   * (joist-internal)
   */
  createOfflineNode: function (options) {
    return new HBox(merge({
      spacing: 0,
      maxWidth: MAX_WIDTH,
      children: [new VStrut(20),
      // spacer to match layout of other nodes
      new VoicingText(JoistStrings.updates.offlineStringProperty, {
        font: new PhetFont(options.big ? 16 : 14),
        fontWeight: options.big ? 'bold' : 'normal'
      })]
    }, options));
  }
};
joist.register('UpdateNodes', UpdateNodes);
export default UpdateNodes;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIlN0cmluZ1V0aWxzIiwiUGhldEZvbnQiLCJTcGlubmluZ0luZGljYXRvck5vZGUiLCJhbGxvd0xpbmtzUHJvcGVydHkiLCJIQm94Iiwib3BlblBvcHVwIiwiUGF0aCIsIlJlY3RhbmdsZSIsIlJpY2hUZXh0IiwiVkJveCIsIlZvaWNpbmdUZXh0IiwiVlN0cnV0IiwiY2hlY2tTb2xpZFNoYXBlIiwiZXhjbGFtYXRpb25UcmlhbmdsZVNvbGlkU2hhcGUiLCJUZXh0UHVzaEJ1dHRvbiIsImpvaXN0IiwiSm9pc3RTdHJpbmdzIiwidXBkYXRlQ2hlY2siLCJVcGRhdGVTdGF0ZSIsIkRlcml2ZWRQcm9wZXJ0eSIsIlVQREFURV9URVhUX0ZPTlQiLCJNQVhfV0lEVEgiLCJVcGRhdGVOb2RlcyIsImNyZWF0ZUNoZWNraW5nTm9kZSIsIm9wdGlvbnMiLCJzcGlubmluZ0luZGljYXRvck5vZGUiLCJkaWFtZXRlciIsImJpZyIsImNoZWNraW5nTm9kZSIsInNwYWNpbmciLCJtYXhXaWR0aCIsImNoaWxkcmVuIiwidXBkYXRlcyIsImNoZWNraW5nU3RyaW5nUHJvcGVydHkiLCJmb250IiwiZm9udFdlaWdodCIsInN0ZXAiLCJkdCIsInN0YXRlUHJvcGVydHkiLCJ2YWx1ZSIsIkNIRUNLSU5HIiwic3RlcExpc3RlbmVyIiwiYmluZCIsImNyZWF0ZVVwVG9EYXRlTm9kZSIsImZpbGwiLCJzY2FsZSIsImNlbnRlclgiLCJjZW50ZXJZIiwidXBUb0RhdGVTdHJpbmdQcm9wZXJ0eSIsImNyZWF0ZU91dE9mRGF0ZUFib3V0Tm9kZSIsInN0cmluZ1Byb3BlcnR5Iiwib3V0T2ZEYXRlU3RyaW5nUHJvcGVydHkiLCJvdXRPZkRhdGVTdHJpbmciLCJhbGxvd0xpbmtzIiwibGlua3MiLCJ1cmwiLCJ1cGRhdGVVUkwiLCJsaW5rTm9kZSIsInRhZ05hbWUiLCJjcmVhdGVPdXRPZkRhdGVEaWFsb2dOb2RlIiwiZGlhbG9nIiwib3VyVmVyc2lvblN0cmluZyIsImxhdGVzdFZlcnNpb25TdHJpbmciLCJsYXRlc3RWZXJzaW9uU3RyaW5nUHJvcGVydHkiLCJuZXdWZXJzaW9uQXZhaWxhYmxlU3RyaW5nUHJvcGVydHkiLCJzdHJpbmciLCJmb3JtYXQiLCJvdXJWZXJzaW9uU3RyaW5nUHJvcGVydHkiLCJ5b3VyQ3VycmVudFZlcnNpb25TdHJpbmdQcm9wZXJ0eSIsImFsaWduIiwiZ2V0VXBkYXRlU3RyaW5nUHJvcGVydHkiLCJ2aXNpYmxlUHJvcGVydHkiLCJiYXNlQ29sb3IiLCJsaXN0ZW5lciIsIm5vVGhhbmtzU3RyaW5nUHJvcGVydHkiLCJoaWRlIiwiY3JlYXRlT2ZmbGluZU5vZGUiLCJvZmZsaW5lU3RyaW5nUHJvcGVydHkiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlVwZGF0ZU5vZGVzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE1LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFVJIHBhcnRzIGZvciB1cGRhdGUtcmVsYXRlZCBkaWFsb2dzXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFN0cmluZ1V0aWxzIGZyb20gJy4uLy4uL3BoZXRjb21tb24vanMvdXRpbC9TdHJpbmdVdGlscy5qcyc7XHJcbmltcG9ydCBQaGV0Rm9udCBmcm9tICcuLi8uLi9zY2VuZXJ5LXBoZXQvanMvUGhldEZvbnQuanMnO1xyXG5pbXBvcnQgU3Bpbm5pbmdJbmRpY2F0b3JOb2RlIGZyb20gJy4uLy4uL3NjZW5lcnktcGhldC9qcy9TcGlubmluZ0luZGljYXRvck5vZGUuanMnO1xyXG5pbXBvcnQgeyBhbGxvd0xpbmtzUHJvcGVydHksIEhCb3gsIE5vZGUsIG9wZW5Qb3B1cCwgUGF0aCwgUmVjdGFuZ2xlLCBSaWNoVGV4dCwgUmljaFRleHRMaW5rcywgVkJveCwgVm9pY2luZ1RleHQsIFZTdHJ1dCB9IGZyb20gJy4uLy4uL3NjZW5lcnkvanMvaW1wb3J0cy5qcyc7XHJcbmltcG9ydCBjaGVja1NvbGlkU2hhcGUgZnJvbSAnLi4vLi4vc2hlcnBhL2pzL2ZvbnRhd2Vzb21lLTUvY2hlY2tTb2xpZFNoYXBlLmpzJztcclxuaW1wb3J0IGV4Y2xhbWF0aW9uVHJpYW5nbGVTb2xpZFNoYXBlIGZyb20gJy4uLy4uL3NoZXJwYS9qcy9mb250YXdlc29tZS01L2V4Y2xhbWF0aW9uVHJpYW5nbGVTb2xpZFNoYXBlLmpzJztcclxuaW1wb3J0IFRleHRQdXNoQnV0dG9uIGZyb20gJy4uLy4uL3N1bi9qcy9idXR0b25zL1RleHRQdXNoQnV0dG9uLmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4vam9pc3QuanMnO1xyXG5pbXBvcnQgSm9pc3RTdHJpbmdzIGZyb20gJy4vSm9pc3RTdHJpbmdzLmpzJztcclxuaW1wb3J0IHVwZGF0ZUNoZWNrIGZyb20gJy4vdXBkYXRlQ2hlY2suanMnO1xyXG5pbXBvcnQgVXBkYXRlU3RhdGUgZnJvbSAnLi9VcGRhdGVTdGF0ZS5qcyc7XHJcbmltcG9ydCBVcGRhdGVEaWFsb2cgZnJvbSAnLi9VcGRhdGVEaWFsb2cuanMnO1xyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5IGZyb20gJy4uLy4uL2F4b24vanMvRGVyaXZlZFByb3BlcnR5LmpzJztcclxuXHJcbi8vIGNvbnN0YW50c1xyXG5jb25zdCBVUERBVEVfVEVYVF9GT05UID0gbmV3IFBoZXRGb250KCAxNCApO1xyXG5jb25zdCBNQVhfV0lEVEggPSA1NTA7IC8vIE1heGltdW0gd2lkdGggb2YgdGhlIHJlc3VsdGluZyB1cGRhdGUgaXRlbXNcclxuXHJcbnR5cGUgT3B0aW9ucyA9IHtcclxuICBiaWc/OiBib29sZWFuO1xyXG4gIGNlbnRlclg/OiBudW1iZXI7XHJcbiAgY2VudGVyWT86IG51bWJlcjtcclxuICBsZWZ0PzogbnVtYmVyO1xyXG4gIHRvcD86IG51bWJlcjtcclxufTtcclxuXHJcbnR5cGUgVFN0ZXAgPSB7XHJcbiAgc3RlcDogKCBkdDogbnVtYmVyICkgPT4gdm9pZDtcclxuICBzdGVwTGlzdGVuZXI6ICggZHQ6IG51bWJlciApID0+IHZvaWQ7XHJcbn07XHJcblxyXG50eXBlIFRTdGVwSEJveCA9IFRTdGVwICYgSEJveDtcclxuXHJcbmNvbnN0IFVwZGF0ZU5vZGVzID0ge1xyXG5cclxuICAvKipcclxuICAgKiBcIkNoZWNraW5nXCIgc3RhdGUgbm9kZS4gV2l0aCB0d28gc2l6ZSBvcHRpb25zIChpZiBvcHRpb25zLmJpZyA9PSB0cnVlLCBpdCB3aWxsIGJlIGJpZ2dlcilcclxuICAgKlxyXG4gICAqIFtvcHRpb25zXSAtIHBhc3NlZCB0byB0aGUgTm9kZVxyXG4gICAqIHJldHVybnMgc3RlcCggZHQgKSBhbmQgc3RlcExpc3RlbmVyIChib3VuZCB0byB0aGUgbm9kZSBpdHNlbGYpXHJcbiAgICogKGpvaXN0LWludGVybmFsKVxyXG4gICAqL1xyXG4gIGNyZWF0ZUNoZWNraW5nTm9kZTogZnVuY3Rpb24oIG9wdGlvbnM6IE9wdGlvbnMgKTogTm9kZSAmIFRTdGVwIHtcclxuICAgIGNvbnN0IHNwaW5uaW5nSW5kaWNhdG9yTm9kZSA9IG5ldyBTcGlubmluZ0luZGljYXRvck5vZGUoIHsgZGlhbWV0ZXI6IG9wdGlvbnMuYmlnID8gMjQgOiAxOCB9ICk7XHJcbiAgICBjb25zdCBjaGVja2luZ05vZGUgPSBuZXcgSEJveCggbWVyZ2UoIHtcclxuICAgICAgc3BhY2luZzogb3B0aW9ucy5iaWcgPyAxMCA6IDgsXHJcbiAgICAgIG1heFdpZHRoOiBNQVhfV0lEVEgsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgc3Bpbm5pbmdJbmRpY2F0b3JOb2RlLFxyXG4gICAgICAgIG5ldyBWb2ljaW5nVGV4dCggSm9pc3RTdHJpbmdzLnVwZGF0ZXMuY2hlY2tpbmdTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCBvcHRpb25zLmJpZyA/IDE2IDogMTQgKSxcclxuICAgICAgICAgIGZvbnRXZWlnaHQ6IG9wdGlvbnMuYmlnID8gJ2JvbGQnIDogJ25vcm1hbCdcclxuICAgICAgICB9IClcclxuICAgICAgXVxyXG4gICAgfSwgb3B0aW9ucyApICkgYXMgVFN0ZXBIQm94O1xyXG4gICAgY2hlY2tpbmdOb2RlLnN0ZXAgPSBmdW5jdGlvbiggZHQgKSB7XHJcbiAgICAgIGlmICggdXBkYXRlQ2hlY2suc3RhdGVQcm9wZXJ0eS52YWx1ZSA9PT0gVXBkYXRlU3RhdGUuQ0hFQ0tJTkcgKSB7XHJcbiAgICAgICAgc3Bpbm5pbmdJbmRpY2F0b3JOb2RlLnN0ZXAoIGR0ICk7XHJcbiAgICAgIH1cclxuICAgIH07XHJcbiAgICBjaGVja2luZ05vZGUuc3RlcExpc3RlbmVyID0gY2hlY2tpbmdOb2RlLnN0ZXAuYmluZCggY2hlY2tpbmdOb2RlICk7XHJcbiAgICByZXR1cm4gY2hlY2tpbmdOb2RlO1xyXG4gIH0sXHJcblxyXG4gIC8qKlxyXG4gICAqIFwiVXAtdG8tZGF0ZVwiIHN0YXRlIG5vZGVcclxuICAgKiBbb3B0aW9uc10gLSBwYXNzZWQgdG8gdGhlIE5vZGVcclxuICAgKiAoam9pc3QtaW50ZXJuYWwpXHJcbiAgICovXHJcbiAgY3JlYXRlVXBUb0RhdGVOb2RlOiBmdW5jdGlvbiggb3B0aW9uczogT3B0aW9ucyApOiBOb2RlIHtcclxuICAgIHJldHVybiBuZXcgSEJveCggbWVyZ2UoIHtcclxuICAgICAgc3BhY2luZzogOCxcclxuICAgICAgbWF4V2lkdGg6IE1BWF9XSURUSCxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgUmVjdGFuZ2xlKCAwLCAwLCAyMCwgMjAsIDUsIDUsIHtcclxuICAgICAgICAgIGZpbGw6ICcjNWMzJyxcclxuICAgICAgICAgIHNjYWxlOiBvcHRpb25zLmJpZyA/IDEuMiA6IDEsXHJcbiAgICAgICAgICBjaGlsZHJlbjogW1xyXG4gICAgICAgICAgICBuZXcgUGF0aCggY2hlY2tTb2xpZFNoYXBlLCB7XHJcbiAgICAgICAgICAgICAgZmlsbDogJyNmZmYnLFxyXG4gICAgICAgICAgICAgIHNjYWxlOiAwLjAyOSxcclxuICAgICAgICAgICAgICBjZW50ZXJYOiAxMCxcclxuICAgICAgICAgICAgICBjZW50ZXJZOiAxMFxyXG4gICAgICAgICAgICB9IClcclxuICAgICAgICAgIF1cclxuICAgICAgICB9ICksXHJcbiAgICAgICAgbmV3IFZvaWNpbmdUZXh0KCBKb2lzdFN0cmluZ3MudXBkYXRlcy51cFRvRGF0ZVN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgICBmb250OiBuZXcgUGhldEZvbnQoIG9wdGlvbnMuYmlnID8gMTYgOiAxNCApLFxyXG4gICAgICAgICAgZm9udFdlaWdodDogb3B0aW9ucy5iaWcgPyAnYm9sZCcgOiAnbm9ybWFsJ1xyXG4gICAgICAgIH0gKVxyXG4gICAgICBdXHJcbiAgICB9LCBvcHRpb25zICkgKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBcIk91dC1vZi1kYXRlXCIgc3RhdGUgbm9kZSBmb3IgdGhlIFwiQWJvdXRcIiBkaWFsb2cuXHJcbiAgICogW29wdGlvbnNdIC0gcGFzc2VkIHRvIHRoZSBOb2RlXHJcbiAgICogKGpvaXN0LWludGVybmFsKVxyXG4gICAqL1xyXG4gIGNyZWF0ZU91dE9mRGF0ZUFib3V0Tm9kZTogZnVuY3Rpb24oIG9wdGlvbnM6IE9wdGlvbnMgKTogTm9kZSB7XHJcbiAgICBjb25zdCBzdHJpbmdQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgSm9pc3RTdHJpbmdzLnVwZGF0ZXMub3V0T2ZEYXRlU3RyaW5nUHJvcGVydHksIGFsbG93TGlua3NQcm9wZXJ0eSBdLCAoIG91dE9mRGF0ZVN0cmluZywgYWxsb3dMaW5rcyApID0+IHtcclxuICAgICAgcmV0dXJuIGFsbG93TGlua3MgPyBgPGEgaHJlZj1cInt7dXJsfX1cIj4ke291dE9mRGF0ZVN0cmluZ308L2E+YCA6IG91dE9mRGF0ZVN0cmluZztcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsaW5rczogUmljaFRleHRMaW5rcyA9IHsgdXJsOiB1cGRhdGVDaGVjay51cGRhdGVVUkwgfTtcclxuXHJcbiAgICBjb25zdCBsaW5rTm9kZSA9IG5ldyBSaWNoVGV4dCggc3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgbGlua3M6IGxpbmtzLFxyXG4gICAgICBmb250OiBVUERBVEVfVEVYVF9GT05UXHJcbiAgICB9ICk7XHJcbiAgICByZXR1cm4gbmV3IEhCb3goIG1lcmdlKCB7XHJcbiAgICAgIHNwYWNpbmc6IDgsXHJcbiAgICAgIG1heFdpZHRoOiBNQVhfV0lEVEgsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IFBhdGgoIGV4Y2xhbWF0aW9uVHJpYW5nbGVTb2xpZFNoYXBlLCB7XHJcbiAgICAgICAgICBmaWxsOiAnI0U4NzYwMCcsIC8vIFwic2FmZXR5IG9yYW5nZVwiLCBhY2NvcmRpbmcgdG8gV2lraXBlZGlhXHJcbiAgICAgICAgICBzY2FsZTogMC4wM1xyXG4gICAgICAgIH0gKSxcclxuICAgICAgICBsaW5rTm9kZVxyXG4gICAgICBdLFxyXG5cclxuICAgICAgLy8gcGRvbVxyXG4gICAgICB0YWdOYW1lOiAnZGl2J1xyXG4gICAgfSwgb3B0aW9ucyApICk7XHJcbiAgfSxcclxuXHJcbiAgLyoqXHJcbiAgICogXCJPdXQtb2YtZGF0ZVwiIHN0YXRlIG5vZGUgZm9yIHRoZSBcIkNoZWNrIGZvciB1cGRhdGVcIiBkaWFsb2cuXHJcbiAgICogZGlhbG9nIC0gdGhlIGRpYWxvZywgc28gdGhhdCBpdCBjYW4gYmUgY2xvc2VkIHdpdGggdGhlIFwiTm8gdGhhbmtzLi4uXCIgYnV0dG9uXHJcbiAgICogW29wdGlvbnNdIC0gcGFzc2VkIHRvIHRoZSBOb2RlXHJcbiAgICogKGpvaXN0LWludGVybmFsKVxyXG4gICAqL1xyXG4gIGNyZWF0ZU91dE9mRGF0ZURpYWxvZ05vZGU6IGZ1bmN0aW9uKCBkaWFsb2c6IFVwZGF0ZURpYWxvZywgb3VyVmVyc2lvblN0cmluZzogc3RyaW5nLCBsYXRlc3RWZXJzaW9uU3RyaW5nOiBzdHJpbmcsIG9wdGlvbnM6IE9wdGlvbnMgKTogTm9kZSB7XHJcblxyXG4gICAgY29uc3QgbGF0ZXN0VmVyc2lvblN0cmluZ1Byb3BlcnR5ID0gbmV3IERlcml2ZWRQcm9wZXJ0eSggWyBKb2lzdFN0cmluZ3MudXBkYXRlcy5uZXdWZXJzaW9uQXZhaWxhYmxlU3RyaW5nUHJvcGVydHkgXSwgc3RyaW5nID0+IHtcclxuICAgICAgcmV0dXJuIFN0cmluZ1V0aWxzLmZvcm1hdCggc3RyaW5nLCBsYXRlc3RWZXJzaW9uU3RyaW5nICk7XHJcbiAgICB9ICk7XHJcbiAgICBjb25zdCBvdXJWZXJzaW9uU3RyaW5nUHJvcGVydHkgPSBuZXcgRGVyaXZlZFByb3BlcnR5KCBbIEpvaXN0U3RyaW5ncy51cGRhdGVzLnlvdXJDdXJyZW50VmVyc2lvblN0cmluZ1Byb3BlcnR5IF0sIHN0cmluZyA9PiB7XHJcbiAgICAgIHJldHVybiBTdHJpbmdVdGlscy5mb3JtYXQoIHN0cmluZywgb3VyVmVyc2lvblN0cmluZyApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHJldHVybiBuZXcgVkJveCggbWVyZ2UoIHtcclxuICAgICAgc3BhY2luZzogMTUsXHJcbiAgICAgIG1heFdpZHRoOiBNQVhfV0lEVEgsXHJcbiAgICAgIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgbmV3IFZCb3goIHtcclxuICAgICAgICAgIHNwYWNpbmc6IDUsIGFsaWduOiAnbGVmdCcsIGNoaWxkcmVuOiBbXHJcbiAgICAgICAgICAgIG5ldyBWb2ljaW5nVGV4dCggbGF0ZXN0VmVyc2lvblN0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCAxNiApLCBmb250V2VpZ2h0OiAnYm9sZCdcclxuICAgICAgICAgICAgfSApLFxyXG4gICAgICAgICAgICBuZXcgVm9pY2luZ1RleHQoIG91clZlcnNpb25TdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgICAgIGZvbnQ6IFVQREFURV9URVhUX0ZPTlRcclxuICAgICAgICAgICAgfSApXHJcbiAgICAgICAgICBdXHJcbiAgICAgICAgfSApLFxyXG4gICAgICAgIG5ldyBIQm94KCB7XHJcbiAgICAgICAgICBzcGFjaW5nOiAyNSwgY2hpbGRyZW46IFtcclxuICAgICAgICAgICAgbmV3IFRleHRQdXNoQnV0dG9uKCBKb2lzdFN0cmluZ3MudXBkYXRlcy5nZXRVcGRhdGVTdHJpbmdQcm9wZXJ0eSwge1xyXG4gICAgICAgICAgICAgIHZpc2libGVQcm9wZXJ0eTogYWxsb3dMaW5rc1Byb3BlcnR5LFxyXG4gICAgICAgICAgICAgIGJhc2VDb2xvcjogJyM2ZjYnLCBmb250OiBVUERBVEVfVEVYVF9GT05ULCBsaXN0ZW5lcjogZnVuY3Rpb24oKSB7XHJcbiAgICAgICAgICAgICAgICBvcGVuUG9wdXAoIHVwZGF0ZUNoZWNrLnVwZGF0ZVVSTCApOyAvLyBvcGVuIGluIGEgbmV3IHdpbmRvdy90YWJcclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gKSxcclxuICAgICAgICAgICAgbmV3IFRleHRQdXNoQnV0dG9uKCBKb2lzdFN0cmluZ3MudXBkYXRlcy5ub1RoYW5rc1N0cmluZ1Byb3BlcnR5LCB7XHJcbiAgICAgICAgICAgICAgYmFzZUNvbG9yOiAnI2RkZCcsIGZvbnQ6IFVQREFURV9URVhUX0ZPTlQsIGxpc3RlbmVyOiBmdW5jdGlvbigpIHtcclxuICAgICAgICAgICAgICAgIGRpYWxvZy5oaWRlKCk7XHJcblxyXG4gICAgICAgICAgICAgICAgLy8gQ2xvc2luZyB0aGUgZGlhbG9nIGlzIGhhbmRsZWQgYnkgdGhlIERpYWxvZyBsaXN0ZW5lciBpdHNlbGYsIG5vIG5lZWQgdG8gYWRkIGNvZGUgdG8gY2xvc2UgaXQgaGVyZS5cclxuICAgICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIH0gKVxyXG4gICAgICAgICAgXVxyXG4gICAgICAgIH0gKVxyXG4gICAgICBdXHJcbiAgICB9LCBvcHRpb25zICkgKTtcclxuICB9LFxyXG5cclxuICAvKipcclxuICAgKiBcIk9mZmxpbmVcIiBzdGF0ZSBub2RlXHJcbiAgICogW29wdGlvbnNdIC0gcGFzc2VkIHRvIHRoZSBOb2RlXHJcbiAgICogKGpvaXN0LWludGVybmFsKVxyXG4gICAqL1xyXG4gIGNyZWF0ZU9mZmxpbmVOb2RlOiBmdW5jdGlvbiggb3B0aW9uczogT3B0aW9ucyApOiBOb2RlIHtcclxuICAgIHJldHVybiBuZXcgSEJveCggbWVyZ2UoIHtcclxuICAgICAgc3BhY2luZzogMCxcclxuICAgICAgbWF4V2lkdGg6IE1BWF9XSURUSCxcclxuICAgICAgY2hpbGRyZW46IFtcclxuICAgICAgICBuZXcgVlN0cnV0KCAyMCApLCAvLyBzcGFjZXIgdG8gbWF0Y2ggbGF5b3V0IG9mIG90aGVyIG5vZGVzXHJcbiAgICAgICAgbmV3IFZvaWNpbmdUZXh0KCBKb2lzdFN0cmluZ3MudXBkYXRlcy5vZmZsaW5lU3RyaW5nUHJvcGVydHksIHtcclxuICAgICAgICAgIGZvbnQ6IG5ldyBQaGV0Rm9udCggb3B0aW9ucy5iaWcgPyAxNiA6IDE0ICksXHJcbiAgICAgICAgICBmb250V2VpZ2h0OiBvcHRpb25zLmJpZyA/ICdib2xkJyA6ICdub3JtYWwnXHJcbiAgICAgICAgfSApXHJcbiAgICAgIF1cclxuICAgIH0sIG9wdGlvbnMgKSApO1xyXG4gIH1cclxufTtcclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnVXBkYXRlTm9kZXMnLCBVcGRhdGVOb2RlcyApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgVXBkYXRlTm9kZXM7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sNkJBQTZCO0FBQy9DLE9BQU9DLFdBQVcsTUFBTSx5Q0FBeUM7QUFDakUsT0FBT0MsUUFBUSxNQUFNLG1DQUFtQztBQUN4RCxPQUFPQyxxQkFBcUIsTUFBTSxnREFBZ0Q7QUFDbEYsU0FBU0Msa0JBQWtCLEVB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Q1J5QixPQUFPLEVBQUUsRUFBRTtRQUFFRSxRQUFRLEVBQUUsQ0FDckIsSUFBSWpCLGNBQWMsQ0FBRUUsWUFBWSxDQUFDZ0IsT0FBTyxDQUFDc0MsdUJBQXVCLEVBQUU7VUFDaEVDLGVBQWUsRUFBRXBFLGtCQUFrQjtVQUNuQ3FFLFNBQVMsRUFBRSxNQUFNO1VBQUV0QyxJQUFJLEVBQUVkLGdCQUFnQjtVQUFFcUQsUUFBUSxFQUFFLFNBQUFBLENBQUEsRUFBVztZQUM5RHBFLFNBQVMsQ0FBRVksV0FBVyxDQUFDdUMsU0FBVSxDQUFDLENBQUMsQ0FBQztVQUN0QztRQUNGLENBQUUsQ0FBQyxFQUNILElBQUkxQyxjQUFjLENBQUVFLFlBQVksQ0FBQ2dCLE9BQU8sQ0FBQzBDLHNCQUFzQixFQUFFO1VBQy9ERixTQUFTLEVBQUUsTUFBTTtVQUFFdEMsSUFBSSxFQUFFZCxnQkFBZ0I7VUFBRXFELFFBQVEsRUFBRSxTQUFBQSxDQUFBLEVBQVc7WUFDOURiLE1BQU0sQ0FBQ2UsSUFBSSxDQUFDLENBQUM7O1lBRWI7VUFDRjtRQUNGLENBQUUsQ0FBQztNQUVQLENBQUUsQ0FBQztJQUVQLENBQUMsRUFBRW5ELE9BQVEsQ0FBRSxDQUFDO0VBQ2hCLENBQUM7RUFFRDtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ0VvRCxpQkFBaUIsRUFBRSxTQUFBQSxDQUFVcEQsT0FBZ0IsRUFBUztJQUNwRCxPQUFPLElBQUlwQixJQUFJLENBQUVMLEtBQUssQ0FBRTtNQUN0QjhCLE9BQU8sRUFBRSxDQUFDO01BQ1ZDLFFBQVEsRUFBRVQsU0FBUztNQUNuQlUsUUFBUSxFQUFFLENBQ1IsSUFBSXBCLE1BQU0sQ0FBRSxFQUFHLENBQUM7TUFBRTtNQUNsQixJQUFJRCxXQUFXLENBQUVNLFlBQVksQ0FBQ2dCLE9BQU8sQ0FBQzZDLHFCQUFxQixFQUFFO1FBQzNEM0MsSUFBSSxFQUFFLElBQUlqQyxRQUFRLENBQUV1QixPQUFPLENBQUNHLEdBQUcsR0FBRyxFQUFFLEdBQUcsRUFBRyxDQUFDO1FBQzNDUSxVQUFVLEVBQUVYLE9BQU8sQ0FBQ0csR0FBRyxHQUFHLE1BQU0sR0FBRztNQUNyQyxDQUFFLENBQUM7SUFFUCxDQUFDLEVBQUVILE9BQVEsQ0FBRSxDQUFDO0VBQ2hCO0FBQ0YsQ0FBQztBQUVEVCxLQUFLLENBQUMrRCxRQUFRLENBQUUsYUFBYSxFQUFFeEQsV0FBWSxDQUFDO0FBRTVDLGVBQWVBLFdBQVciLCJpZ25vcmVMaXN0IjpbXX0=