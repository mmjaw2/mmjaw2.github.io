// Copyright 2022-2024, University of Colorado Boulder

/**
 * Stores the ground-truth order of locales used in translation fallback, with the first attempted (highest priority)
 * locale listed first.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import joist from '../joist.js';
import localeProperty from './localeProperty.js';
const FALLBACK_LOCALE = 'en';
const localeOrderProperty = new DerivedProperty([localeProperty], locale => {
  const localeOrder = [locale];

  // Duplicates will be filtered out below
  const potentialFallbackLocales = [
  // standard fallback locales (defined by localeData)
  ...(phet.chipper.localeData[locale].fallbackLocales || []),
  // always fall back to 'en'
  FALLBACK_LOCALE];

  // Add custom fallback locales (e.g. phet-io) if not already in the order
  for (let i = 0; i < potentialFallbackLocales.length; i++) {
    const fallbackLocale = potentialFallbackLocales[i];
    if (!localeOrder.includes(fallbackLocale)) {
      localeOrder.push(fallbackLocale);
    }
  }
  const fallbackIndex = localeOrder.indexOf(FALLBACK_LOCALE);
  assert && assert(fallbackIndex >= 0, `Required local in localeOrderProperty: ${FALLBACK_LOCALE}`);

  // Optimization: Ignore locales past our fallback, because it will include a value for every single key.
  return localeOrder.slice(0, fallbackIndex + 1);
});
joist.register('localeOrderProperty', localeOrderProperty);
export default localeOrderProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJqb2lzdCIsImxvY2FsZVByb3BlcnR5IiwiRkFMTEJBQ0tfTE9DQUxFIiwibG9jYWxlT3JkZXJQcm9wZXJ0eSIsImxvY2FsZSIsImxvY2FsZU9yZGVyIiwicG90ZW50aWFsRmFsbGJhY2tMb2NhbGVzIiwicGhldCIsImNoaXBwZXIiLCJsb2NhbGVEYXRhIiwiZmFsbGJhY2tMb2NhbGVzIiwiaSIsImxlbmd0aCIsImZhbGxiYWNrTG9jYWxlIiwiaW5jbHVkZXMiLCJwdXNoIiwiZmFsbGJhY2tJbmRleCIsImluZGV4T2YiLCJhc3NlcnQiLCJzbGljZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsibG9jYWxlT3JkZXJQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBTdG9yZXMgdGhlIGdyb3VuZC10cnV0aCBvcmRlciBvZiBsb2NhbGVzIHVzZWQgaW4gdHJhbnNsYXRpb24gZmFsbGJhY2ssIHdpdGggdGhlIGZpcnN0IGF0dGVtcHRlZCAoaGlnaGVzdCBwcmlvcml0eSlcclxuICogbG9jYWxlIGxpc3RlZCBmaXJzdC5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi4vam9pc3QuanMnO1xyXG5pbXBvcnQgbG9jYWxlUHJvcGVydHkgZnJvbSAnLi9sb2NhbGVQcm9wZXJ0eS5qcyc7XHJcblxyXG5jb25zdCBGQUxMQkFDS19MT0NBTEUgPSAnZW4nO1xyXG5cclxuY29uc3QgbG9jYWxlT3JkZXJQcm9wZXJ0eSA9IG5ldyBEZXJpdmVkUHJvcGVydHkoIFsgbG9jYWxlUHJvcGVydHkgXSwgbG9jYWxlID0+IHtcclxuXHJcbiAgY29uc3QgbG9jYWxlT3JkZXIgPSBbIGxvY2FsZSBdO1xyXG5cclxuICAvLyBEdXBsaWNhdGVzIHdpbGwgYmUgZmlsdGVyZWQgb3V0IGJlbG93XHJcbiAgY29uc3QgcG90ZW50aWFsRmFsbGJhY2tMb2NhbGVzID0gW1xyXG5cclxuICAgIC8vIHN0YW5kYXJkIGZhbGxiYWNrIGxvY2FsZXMgKGRlZmluZWQgYnkgbG9jYWxlRGF0YSlcclxuICAgIC4uLnBoZXQuY2hpcHBlci5sb2NhbGVEYXRhWyBsb2NhbGUgXS5mYWxsYmFja0xvY2FsZXMgfHwgW10sXHJcblxyXG4gICAgLy8gYWx3YXlzIGZhbGwgYmFjayB0byAnZW4nXHJcbiAgICBGQUxMQkFDS19MT0NBTEVcclxuICBdO1xyXG5cclxuICAvLyBBZGQgY3VzdG9tIGZhbGxiYWNrIGxvY2FsZXMgKGUuZy4gcGhldC1pbykgaWYgbm90IGFscmVhZHkgaW4gdGhlIG9yZGVyXHJcbiAgZm9yICggbGV0IGkgPSAwOyBpIDwgcG90ZW50aWFsRmFsbGJhY2tMb2NhbGVzLmxlbmd0aDsgaSsrICkge1xyXG4gICAgY29uc3QgZmFsbGJhY2tMb2NhbGUgPSBwb3RlbnRpYWxGYWxsYmFja0xvY2FsZXNbIGkgXTtcclxuICAgIGlmICggIWxvY2FsZU9yZGVyLmluY2x1ZGVzKCBmYWxsYmFja0xvY2FsZSApICkge1xyXG4gICAgICBsb2NhbGVPcmRlci5wdXNoKCBmYWxsYmFja0xvY2FsZSApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgY29uc3QgZmFsbGJhY2tJbmRleCA9IGxvY2FsZU9yZGVyLmluZGV4T2YoIEZBTExCQUNLX0xPQ0FMRSApO1xyXG4gIGFzc2VydCAmJiBhc3NlcnQoIGZhbGxiYWNrSW5kZXggPj0gMCwgYFJlcXVpcmVkIGxvY2FsIGluIGxvY2FsZU9yZGVyUHJvcGVydHk6ICR7RkFMTEJBQ0tfTE9DQUxFfWAgKTtcclxuXHJcbiAgLy8gT3B0aW1pemF0aW9uOiBJZ25vcmUgbG9jYWxlcyBwYXN0IG91ciBmYWxsYmFjaywgYmVjYXVzZSBpdCB3aWxsIGluY2x1ZGUgYSB2YWx1ZSBmb3IgZXZlcnkgc2luZ2xlIGtleS5cclxuICByZXR1cm4gbG9jYWxlT3JkZXIuc2xpY2UoIDAsIGZhbGxiYWNrSW5kZXggKyAxICk7XHJcbn0gKTtcclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnbG9jYWxlT3JkZXJQcm9wZXJ0eScsIGxvY2FsZU9yZGVyUHJvcGVydHkgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IGxvY2FsZU9yZGVyUHJvcGVydHk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFNLHFDQUFxQztBQUNqRSxPQUFPQyxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyxjQUFjLE1BQU0scUJBQXFCO0FBRWhELE1BQU1DLGVBQWUsR0FBRyxJQUFJO0FBRTVCLE1BQU1DLG1CQUFtQixHQUFHLElBQUlKLGVBQWUsQ0FBRSxDQUFFRSxjQUFjLENBQUUsRUFBRUcsTUFBTSxJQUFJO0VBRTdFLE1BQU1DLFdBQVcsR0FBRyxDQUFFRCxNQUFNLENBQUU7O0VBRTlCO0VBQ0EsTUFBTUUsd0JBQXdCLEdBQUc7RUFFL0I7RUFDQSxJQUFHQyxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsVUFBVSxDQUFFTCxNQUFNLENBQUUsQ0FBQ00sZUFBZSxJQUFJLEVBQUU7RUFFMUQ7RUFDQVIsZUFBZSxDQUNoQjs7RUFFRDtFQUNBLEtBQU0sSUFBSVMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTCx3QkFBd0IsQ0FBQ00sTUFBTSxFQUFFRCxDQUFDLEVBQUUsRUFBRztJQUMxRCxNQUFNRSxjQUFjLEdBQUdQLHdCQUF3QixDQUFFSyxDQUFDLENBQUU7SUFDcEQsSUFBSyxDQUFDTixXQUFXLENBQUNTLFFBQVEsQ0FBRUQsY0FBZSxDQUFDLEVBQUc7TUFDN0NSLFdBQVcsQ0FBQ1UsSUFBSSxDQUFFRixjQUFlLENBQUM7SUFDcEM7RUFDRjtFQUVBLE1BQU1HLGFBQWEsR0FBR1gsV0FBVyxDQUFDWSxPQUFPLENBQUVmLGVBQWdCLENBQUM7RUFDNURnQixNQUFNLElBQUlBLE1BQU0sQ0FBRUYsYUFBYSxJQUFJLENBQUMsRUFBRywwQ0FBeUNkLGVBQWdCLEVBQUUsQ0FBQzs7RUFFbkc7RUFDQSxPQUFPRyxXQUFXLENBQUNjLEtBQUssQ0FBRSxDQUFDLEVBQUVILGFBQWEsR0FBRyxDQUFFLENBQUM7QUFDbEQsQ0FBRSxDQUFDO0FBRUhoQixLQUFLLENBQUNvQixRQUFRLENBQUUscUJBQXFCLEVBQUVqQixtQkFBb0IsQ0FBQztBQUU1RCxlQUFlQSxtQkFBbUIiLCJpZ25vcmVMaXN0IjpbXX0=