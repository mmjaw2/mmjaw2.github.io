// Copyright 2024, University of Colorado Boulder

/**
 * A Property whose value will change with the "region and culture", and will take a value that can be used with Images.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import { DerivedProperty1 } from '../../../axon/js/DerivedProperty.js';
import joist from '../joist.js';
import concreteRegionAndCultureProperty, { concreteRegionAndCultureValues } from './concreteRegionAndCultureProperty.js';
export default class LocalizedImageProperty extends DerivedProperty1 {
  constructor(
  // The name of the image, for debugging purposes (from the ${repo}-images.json file)
  imageName,
  // Allow optional, so that we can support a subset of regionAndCultures.
  // BUT also require the usa regionAndCulture, so that we can always have a fallback.
  imageMap) {
    assert && Object.keys(imageMap).forEach(regionAndCulture => {
      assert && assert(concreteRegionAndCultureValues.includes(regionAndCulture), `Unsupported regionAndCulture provided to LocalizedImageProperty: ${regionAndCulture}`);
    });
    assert && concreteRegionAndCultureValues.forEach(regionAndCulture => {
      assert && assert(regionAndCulture in imageMap, `Missing image for regionAndCulture: ${regionAndCulture}`);
    });
    super([concreteRegionAndCultureProperty], regionAndCulture => {
      const image = imageMap[regionAndCulture];
      assert && assert(image);
      return image;
    });
    this.imageName = imageName;
    this.imageMap = imageMap;
  }
}
joist.register('LocalizedImageProperty', LocalizedImageProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkxIiwiam9pc3QiLCJjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSIsImNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVZhbHVlcyIsIkxvY2FsaXplZEltYWdlUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsImltYWdlTmFtZSIsImltYWdlTWFwIiwiYXNzZXJ0IiwiT2JqZWN0Iiwia2V5cyIsImZvckVhY2giLCJyZWdpb25BbmRDdWx0dXJlIiwiaW5jbHVkZXMiLCJpbWFnZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiTG9jYWxpemVkSW1hZ2VQcm9wZXJ0eS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBQcm9wZXJ0eSB3aG9zZSB2YWx1ZSB3aWxsIGNoYW5nZSB3aXRoIHRoZSBcInJlZ2lvbiBhbmQgY3VsdHVyZVwiLCBhbmQgd2lsbCB0YWtlIGEgdmFsdWUgdGhhdCBjYW4gYmUgdXNlZCB3aXRoIEltYWdlcy5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCB7IERlcml2ZWRQcm9wZXJ0eTEgfSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCB7IEltYWdlYWJsZUltYWdlIH0gZnJvbSAnLi4vLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IGNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5LCB7IENvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZSwgY29uY3JldGVSZWdpb25BbmRDdWx0dXJlVmFsdWVzIH0gZnJvbSAnLi9jb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBMb2NhbGl6ZWRJbWFnZVByb3BlcnR5IGV4dGVuZHMgRGVyaXZlZFByb3BlcnR5MTxJbWFnZWFibGVJbWFnZSwgQ29uY3JldGVSZWdpb25BbmRDdWx0dXJlPiB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgLy8gVGhlIG5hbWUgb2YgdGhlIGltYWdlLCBmb3IgZGVidWdnaW5nIHB1cnBvc2VzIChmcm9tIHRoZSAke3JlcG99LWltYWdlcy5qc29uIGZpbGUpXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgaW1hZ2VOYW1lOiBzdHJpbmcsXHJcblxyXG4gICAgLy8gQWxsb3cgb3B0aW9uYWwsIHNvIHRoYXQgd2UgY2FuIHN1cHBvcnQgYSBzdWJzZXQgb2YgcmVnaW9uQW5kQ3VsdHVyZXMuXHJcbiAgICAvLyBCVVQgYWxzbyByZXF1aXJlIHRoZSB1c2EgcmVnaW9uQW5kQ3VsdHVyZSwgc28gdGhhdCB3ZSBjYW4gYWx3YXlzIGhhdmUgYSBmYWxsYmFjay5cclxuICAgIHByaXZhdGUgcmVhZG9ubHkgaW1hZ2VNYXA6IHsgWyByZWdpb25BbmRDdWx0dXJlIGluIENvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZSBdPzogSW1hZ2VhYmxlSW1hZ2UgfSAmIHsgdXNhOiBJbWFnZWFibGVJbWFnZSB9XHJcbiAgKSB7XHJcbiAgICBhc3NlcnQgJiYgT2JqZWN0LmtleXMoIGltYWdlTWFwICkuZm9yRWFjaCggcmVnaW9uQW5kQ3VsdHVyZSA9PiB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVZhbHVlcy5pbmNsdWRlcyggcmVnaW9uQW5kQ3VsdHVyZSBhcyBDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmUgKSxcclxuICAgICAgICBgVW5zdXBwb3J0ZWQgcmVnaW9uQW5kQ3VsdHVyZSBwcm92aWRlZCB0byBMb2NhbGl6ZWRJbWFnZVByb3BlcnR5OiAke3JlZ2lvbkFuZEN1bHR1cmV9YCApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIGFzc2VydCAmJiBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMuZm9yRWFjaCggcmVnaW9uQW5kQ3VsdHVyZSA9PiB7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIHJlZ2lvbkFuZEN1bHR1cmUgaW4gaW1hZ2VNYXAsIGBNaXNzaW5nIGltYWdlIGZvciByZWdpb25BbmRDdWx0dXJlOiAke3JlZ2lvbkFuZEN1bHR1cmV9YCApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIHN1cGVyKCBbIGNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5IF0sICggcmVnaW9uQW5kQ3VsdHVyZTogQ29uY3JldGVSZWdpb25BbmRDdWx0dXJlICkgPT4ge1xyXG4gICAgICBjb25zdCBpbWFnZSA9IGltYWdlTWFwWyByZWdpb25BbmRDdWx0dXJlIF0hO1xyXG4gICAgICBhc3NlcnQgJiYgYXNzZXJ0KCBpbWFnZSApO1xyXG5cclxuICAgICAgcmV0dXJuIGltYWdlO1xyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdMb2NhbGl6ZWRJbWFnZVByb3BlcnR5JywgTG9jYWxpemVkSW1hZ2VQcm9wZXJ0eSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxTQUFTQSxnQkFBZ0IsUUFBUSxxQ0FBcUM7QUFFdEUsT0FBT0MsS0FBSyxNQUFNLGFBQWE7QUFDL0IsT0FBT0MsZ0NBQWdDLElBQThCQyw4QkFBOEIsUUFBUSx1Q0FBdUM7QUFFbEosZUFBZSxNQUFNQyxzQkFBc0IsU0FBU0osZ0JBQWdCLENBQTJDO0VBQ3RHSyxXQUFXQTtFQUNoQjtFQUNnQkMsU0FBaUI7RUFFakM7RUFDQTtFQUNpQkMsUUFBeUcsRUFDMUg7SUFDQUMsTUFBTSxJQUFJQyxNQUFNLENBQUNDLElBQUksQ0FBRUgsUUFBUyxDQUFDLENBQUNJLE9BQU8sQ0FBRUMsZ0JBQWdCLElBQUk7TUFDN0RKLE1BQU0sSUFBSUEsTUFBTSxDQUFFTCw4QkFBOEIsQ0FBQ1UsUUFBUSxDQUFFRCxnQkFBNkMsQ0FBQyxFQUN0RyxvRUFBbUVBLGdCQUFpQixFQUFFLENBQUM7SUFDNUYsQ0FBRSxDQUFDO0lBRUhKLE1BQU0sSUFBSUwsOEJBQThCLENBQUNRLE9BQU8sQ0FBRUMsZ0JBQWdCLElBQUk7TUFDcEVKLE1BQU0sSUFBSUEsTUFBTSxDQUFFSSxnQkFBZ0IsSUFBSUwsUUFBUSxFQUFHLHVDQUFzQ0ssZ0JBQWlCLEVBQUUsQ0FBQztJQUM3RyxDQUFFLENBQUM7SUFFSCxLQUFLLENBQUUsQ0FBRVYsZ0NBQWdDLENBQUUsRUFBSVUsZ0JBQTBDLElBQU07TUFDN0YsTUFBTUUsS0FBSyxHQUFHUCxRQUFRLENBQUVLLGdCQUFnQixDQUFHO01BQzNDSixNQUFNLElBQUlBLE1BQU0sQ0FBRU0sS0FBTSxDQUFDO01BRXpCLE9BQU9BLEtBQUs7SUFDZCxDQUFFLENBQUM7SUFBQyxLQXBCWVIsU0FBaUIsR0FBakJBLFNBQWlCO0lBQUEsS0FJaEJDLFFBQXlHLEdBQXpHQSxRQUF5RztFQWlCNUg7QUFDRjtBQUVBTixLQUFLLENBQUNjLFFBQVEsQ0FBRSx3QkFBd0IsRUFBRVgsc0JBQXVCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=