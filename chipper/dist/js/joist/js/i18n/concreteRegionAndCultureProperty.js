// Copyright 2024, University of Colorado Boulder

/**
 * Like regionAndCultureProperty, but excludes the "random" option, since it doesn't represent a concrete region and culture.
 * "random" means to randomly select one of the other choices that is supported by the sim.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 * @author Chris Malley (PixelZoom, Inc.)
 */

import joist from '../joist.js';
import regionAndCultureProperty, { supportedRegionAndCultureValues } from './regionAndCultureProperty.js';
import DerivedProperty from '../../../axon/js/DerivedProperty.js';
import dotRandom from '../../../dot/js/dotRandom.js';

// The complete set of RegionAndCulture values, minus 'random'.

// The values supported by the sim at runtime, minus 'random'.
export const concreteRegionAndCultureValues = supportedRegionAndCultureValues.filter(regionAndCulture => regionAndCulture !== 'random');

// The previous value of concreteRegionAndCultureProperty.
let previousConcreteRegionAndCulture = null;

// When 'random' is selected, randomly select one of the other choices, but not the previous choice.
export const concreteRegionAndCultureProperty = new DerivedProperty([regionAndCultureProperty], regionAndCulture => {
  const concreteRegionAndCulture = regionAndCulture === 'random' ? dotRandom.sample(supportedRegionAndCultureValues.filter(regionAndCulture => {
    return regionAndCulture !== 'random' && regionAndCulture !== previousConcreteRegionAndCulture;
  })) : regionAndCulture;
  previousConcreteRegionAndCulture = concreteRegionAndCulture;
  return concreteRegionAndCulture;
}, {
  strictAxonDependencies: false
});
joist.register('concreteRegionAndCultureProperty', concreteRegionAndCultureProperty);
export default concreteRegionAndCultureProperty;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsInJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSIsInN1cHBvcnRlZFJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMiLCJEZXJpdmVkUHJvcGVydHkiLCJkb3RSYW5kb20iLCJjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMiLCJmaWx0ZXIiLCJyZWdpb25BbmRDdWx0dXJlIiwicHJldmlvdXNDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmUiLCJjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSIsImNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZSIsInNhbXBsZSIsInN0cmljdEF4b25EZXBlbmRlbmNpZXMiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbImNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVByb3BlcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBMaWtlIHJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSwgYnV0IGV4Y2x1ZGVzIHRoZSBcInJhbmRvbVwiIG9wdGlvbiwgc2luY2UgaXQgZG9lc24ndCByZXByZXNlbnQgYSBjb25jcmV0ZSByZWdpb24gYW5kIGN1bHR1cmUuXHJcbiAqIFwicmFuZG9tXCIgbWVhbnMgdG8gcmFuZG9tbHkgc2VsZWN0IG9uZSBvZiB0aGUgb3RoZXIgY2hvaWNlcyB0aGF0IGlzIHN1cHBvcnRlZCBieSB0aGUgc2ltLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqIEBhdXRob3IgQ2hyaXMgTWFsbGV5IChQaXhlbFpvb20sIEluYy4pXHJcbiAqL1xyXG5cclxuaW1wb3J0IGpvaXN0IGZyb20gJy4uL2pvaXN0LmpzJztcclxuaW1wb3J0IHJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSwgeyBSZWdpb25BbmRDdWx0dXJlLCBzdXBwb3J0ZWRSZWdpb25BbmRDdWx0dXJlVmFsdWVzIH0gZnJvbSAnLi9yZWdpb25BbmRDdWx0dXJlUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgVFJlYWRPbmx5UHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBEZXJpdmVkUHJvcGVydHkgZnJvbSAnLi4vLi4vLi4vYXhvbi9qcy9EZXJpdmVkUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgZG90UmFuZG9tIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9kb3RSYW5kb20uanMnO1xyXG5cclxuLy8gVGhlIGNvbXBsZXRlIHNldCBvZiBSZWdpb25BbmRDdWx0dXJlIHZhbHVlcywgbWludXMgJ3JhbmRvbScuXHJcbmV4cG9ydCB0eXBlIENvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZSA9IEV4Y2x1ZGU8UmVnaW9uQW5kQ3VsdHVyZSwgJ3JhbmRvbSc+O1xyXG5cclxuLy8gVGhlIHZhbHVlcyBzdXBwb3J0ZWQgYnkgdGhlIHNpbSBhdCBydW50aW1lLCBtaW51cyAncmFuZG9tJy5cclxuZXhwb3J0IGNvbnN0IGNvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZVZhbHVlczogQ29uY3JldGVSZWdpb25BbmRDdWx0dXJlW10gPVxyXG4gIHN1cHBvcnRlZFJlZ2lvbkFuZEN1bHR1cmVWYWx1ZXMuZmlsdGVyKCByZWdpb25BbmRDdWx0dXJlID0+IHJlZ2lvbkFuZEN1bHR1cmUgIT09ICdyYW5kb20nICkgYXMgQ29uY3JldGVSZWdpb25BbmRDdWx0dXJlW107XHJcblxyXG4vLyBUaGUgcHJldmlvdXMgdmFsdWUgb2YgY29uY3JldGVSZWdpb25BbmRDdWx0dXJlUHJvcGVydHkuXHJcbmxldCBwcmV2aW91c0NvbmNyZXRlUmVnaW9uQW5kQ3VsdHVyZTogQ29uY3JldGVSZWdpb25BbmRDdWx0dXJlIHwgbnVsbCA9IG51bGw7XHJcblxyXG4vLyBXaGVuICdyYW5kb20nIGlzIHNlbGVjdGVkLCByYW5kb21seSBzZWxlY3Qgb25lIG9mIHRoZSBvdGhlciBjaG9pY2VzLCBidXQgbm90IHRoZSBwcmV2aW91cyBjaG9pY2UuXHJcbmV4cG9ydCBjb25zdCBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8Q29uY3JldGVSZWdpb25BbmRDdWx0dXJlPiA9IG5ldyBEZXJpdmVkUHJvcGVydHkoXHJcbiAgWyByZWdpb25BbmRDdWx0dXJlUHJvcGVydHkgXSwgKCByZWdpb25BbmRDdWx0dXJlID0+IHtcclxuXHJcbiAgY29uc3QgY29uY3JldGVSZWdpb25BbmRDdWx0dXJlID0gcmVnaW9uQW5kQ3VsdHVyZSA9PT0gJ3JhbmRvbScgPyBkb3RSYW5kb20uc2FtcGxlKCBzdXBwb3J0ZWRSZWdpb25BbmRDdWx0dXJlVmFsdWVzLmZpbHRlciggcmVnaW9uQW5kQ3VsdHVyZSA9PiB7XHJcbiAgICByZXR1cm4gcmVnaW9uQW5kQ3VsdHVyZSAhPT0gJ3JhbmRvbScgJiYgcmVnaW9uQW5kQ3VsdHVyZSAhPT0gcHJldmlvdXNDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmU7XHJcbiAgfSApICkgYXMgQ29uY3JldGVSZWdpb25BbmRDdWx0dXJlIDogcmVnaW9uQW5kQ3VsdHVyZTtcclxuXHJcbiAgcHJldmlvdXNDb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmUgPSBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmU7XHJcblxyXG4gIHJldHVybiBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmU7XHJcbn0gKSwge1xyXG4gIHN0cmljdEF4b25EZXBlbmRlbmNpZXM6IGZhbHNlXHJcbn0gKTtcclxuXHJcbmpvaXN0LnJlZ2lzdGVyKCAnY29uY3JldGVSZWdpb25BbmRDdWx0dXJlUHJvcGVydHknLCBjb25jcmV0ZVJlZ2lvbkFuZEN1bHR1cmVQcm9wZXJ0eSApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY29uY3JldGVSZWdpb25BbmRDdWx0dXJlUHJvcGVydHk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxLQUFLLE1BQU0sYUFBYTtBQUMvQixPQUFPQyx3QkFBd0IsSUFBc0JDLCtCQUErQixRQUFRLCtCQUErQjtBQUUzSCxPQUFPQyxlQUFlLE1BQU0scUNBQXFDO0FBQ2pFLE9BQU9DLFNBQVMsTUFBTSw4QkFBOEI7O0FBRXBEOztBQUdBO0FBQ0EsT0FBTyxNQUFNQyw4QkFBMEQsR0FDckVILCtCQUErQixDQUFDSSxNQUFNLENBQUVDLGdCQUFnQixJQUFJQSxnQkFBZ0IsS0FBSyxRQUFTLENBQStCOztBQUUzSDtBQUNBLElBQUlDLGdDQUFpRSxHQUFHLElBQUk7O0FBRTVFO0FBQ0EsT0FBTyxNQUFNQyxnQ0FBNkUsR0FBRyxJQUFJTixlQUFlLENBQzlHLENBQUVGLHdCQUF3QixDQUFFLEVBQUlNLGdCQUFnQixJQUFJO0VBRXBELE1BQU1HLHdCQUF3QixHQUFHSCxnQkFBZ0IsS0FBSyxRQUFRLEdBQUdILFNBQVMsQ0FBQ08sTUFBTSxDQUFFVCwrQkFBK0IsQ0FBQ0ksTUFBTSxDQUFFQyxnQkFBZ0IsSUFBSTtJQUM3SSxPQUFPQSxnQkFBZ0IsS0FBSyxRQUFRLElBQUlBLGdCQUFnQixLQUFLQyxnQ0FBZ0M7RUFDL0YsQ0FBRSxDQUFFLENBQUMsR0FBK0JELGdCQUFnQjtFQUVwREMsZ0NBQWdDLEdBQUdFLHdCQUF3QjtFQUUzRCxPQUFPQSx3QkFBd0I7QUFDakMsQ0FBQyxFQUFJO0VBQ0hFLHNCQUFzQixFQUFFO0FBQzFCLENBQUUsQ0FBQztBQUVIWixLQUFLLENBQUNhLFFBQVEsQ0FBRSxrQ0FBa0MsRUFBRUosZ0NBQWlDLENBQUM7QUFFdEYsZUFBZUEsZ0NBQWdDIiwiaWdub3JlTGlzdCI6W119