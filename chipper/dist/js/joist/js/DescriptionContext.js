// Copyright 2023-2024, University of Colorado Boulder

/**
 * API Context for description plugins.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import joist from './joist.js';
import DescriptionRegistry from '../../tandem/js/DescriptionRegistry.js';
import TinyProperty from '../../axon/js/TinyProperty.js';
import localeOrderProperty from './i18n/localeOrderProperty.js';
import Multilink from '../../axon/js/Multilink.js';
import dotRandom from '../../dot/js/dotRandom.js';
export default class DescriptionContext {
  links = [];
  listens = [];
  assignments = [];
  propertyAssignments = [];
  multilinks = [];
  get(tandemID) {
    return DescriptionRegistry.map.get(tandemID) || null;
  }
  link(property, listener) {
    // TS just... lets us do this?
    property.link(listener);
    this.links.push(new Link(property, listener));
  }
  lazyLink(property, listener) {
    // TS just... lets us do this?
    property.lazyLink(listener);
    this.links.push(new Link(property, listener));
  }
  unlink(property, listener) {
    property.unlink(listener);
    const index = this.links.findIndex(link => link.property === property && link.listener === listener);
    assert && assert(index >= 0);
    this.links.splice(index, 1);
  }
  multilink(dependencies, callback) {
    const multilink = Multilink.multilinkAny(dependencies, callback);
    this.multilinks.push(multilink);
    return multilink;
  }
  addListener(emitter, listener) {
    emitter.addListener(listener);
    this.listens.push(new Listen(emitter, listener));
  }
  removeListener(emitter, listener) {
    emitter.removeListener(listener);
    const index = this.listens.findIndex(listen => listen.emitter === emitter && listen.listener === listener);
    assert && assert(index >= 0);
    this.listens.splice(index, 1);
  }
  nodeSet(node, property, value) {
    const index = this.assignments.findIndex(assignment => assignment.target === node && assignment.property === property);
    if (index < 0) {
      this.assignments.push(new Assignment(node, property, node[property]));
    }

    // @ts-expect-error
    node[property] = value;
  }
  propertySet(property, value) {
    const index = this.propertyAssignments.findIndex(assignment => assignment.property === property);
    if (index < 0) {
      this.propertyAssignments.push(new PropertyAssignment(property, property.value));
    }
    property.value = value;
  }
  dispose() {
    // NOTE: can links/listens be tied to a tandem/object? So that if we "remove" the object, we will assume it's disposed?

    while (this.links.length) {
      const link = this.links.pop();
      if (!link.property.isDisposed) {
        link.property.unlink(link.listener);
      }
    }
    while (this.listens.length) {
      const listen = this.listens.pop();

      // @ts-expect-error
      if (!listen.emitter.isDisposed) {
        listen.emitter.removeListener(listen.listener);
      }
    }
    while (this.assignments.length) {
      const assignment = this.assignments.pop();
      if (!assignment.target.isDisposed) {
        // @ts-expect-error
        assignment.target[assignment.property] = assignment.initialValue;
      }
    }
    while (this.propertyAssignments.length) {
      const assignment = this.propertyAssignments.pop();
      if (!assignment.property.isDisposed) {
        assignment.property.value = assignment.initialValue;
      }
    }
    while (this.multilinks.length) {
      const multilink = this.multilinks.pop();

      // @ts-expect-error TODO how to support this? https://github.com/phetsims/joist/issues/941
      if (!multilink.isDisposed) {
        multilink.dispose();
      }
    }
  }

  // What is available and registered
  static stringsMap = new Map();
  static logicProperty = new TinyProperty(null);
  static isStartupCompleteProperty = new TinyProperty(false);
  static activeContextProperty = new TinyProperty(null);
  static startupComplete() {
    DescriptionContext.isStartupCompleteProperty.value = true;
    localeOrderProperty.link(() => {
      this.reload();
    });
    DescriptionRegistry.addedEmitter.addListener((tandemID, obj) => {
      const logic = this.logicProperty.value;
      if (this.activeContextProperty.value && logic) {
        logic.added(tandemID, obj);
      }
    });
    DescriptionRegistry.removedEmitter.addListener((tandemID, obj) => {
      const logic = this.logicProperty.value;
      if (this.activeContextProperty.value && logic) {
        logic.removed(tandemID, obj);
      }
    });
  }
  static reload() {
    // If we haven't started up yet, don't do anything (we'll reload when we start up).
    if (!this.isStartupCompleteProperty.value) {
      return;
    }
    if (this.activeContextProperty.value) {
      this.activeContextProperty.value.dispose();
    }
    const logic = this.logicProperty.value;
    if (logic === null) {
      return;
    }
    const locales = localeOrderProperty.value;
    const strings = {};
    let addedStrings = false;

    // Search in locale fallback order for the best description strings to use. We'll pull out each individual
    // function with fallback.
    for (let i = locales.length - 1; i >= 0; i--) {
      const locale = locales[i];
      if (DescriptionContext.stringsMap.has(locale)) {
        addedStrings = true;
        const localeStrings = DescriptionContext.stringsMap.get(locale);
        for (const key of Object.keys(localeStrings)) {
          // @ts-expect-error
          strings[key] = localeStrings[key];
        }
      }
    }
    if (!addedStrings) {
      return;
    }
    this.activeContextProperty.value = new DescriptionContext();
    logic.launch(this.activeContextProperty.value, strings);
  }
  static registerStrings(strings) {
    const needsReload = localeOrderProperty.value.includes(strings.locale);
    DescriptionContext.stringsMap.set(strings.locale, strings);
    if (needsReload) {
      DescriptionContext.reload();
    }
    return strings;
  }
  static registerLogic(logic) {
    DescriptionContext.logicProperty.value = logic;
    DescriptionContext.reload();
    return logic;
  }
  static async externalLoad(str) {
    const dataURI = `data:text/javascript;base64,${btoa(`${dotRandom.nextDouble()};${str}`)}`;
    (await import(dataURI)).default();
  }
}
class Link {
  constructor(property, listener) {
    this.property = property;
    this.listener = listener;
  }
}
class Listen {
  constructor(emitter, listener) {
    this.emitter = emitter;
    this.listener = listener;
  }
}
class Assignment {
  constructor(target, property, initialValue) {
    this.target = target;
    this.property = property;
    this.initialValue = initialValue;
  }
}
class PropertyAssignment {
  constructor(property, initialValue) {
    this.property = property;
    this.initialValue = initialValue;
  }
}
joist.register('DescriptionContext', DescriptionContext);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJqb2lzdCIsIkRlc2NyaXB0aW9uUmVnaXN0cnkiLCJUaW55UHJvcGVydHkiLCJsb2NhbGVPcmRlclByb3BlcnR5IiwiTXVsdGlsaW5rIiwiZG90UmFuZG9tIiwiRGVzY3JpcHRpb25Db250ZXh0IiwibGlua3MiLCJsaXN0ZW5zIiwiYXNzaWdubWVudHMiLCJwcm9wZXJ0eUFzc2lnbm1lbnRzIiwibXVsdGlsaW5rcyIsImdldCIsInRhbmRlbUlEIiwibWFwIiwibGluayIsInByb3BlcnR5IiwibGlzdGVuZXIiLCJwdXNoIiwiTGluayIsImxhenlMaW5rIiwidW5saW5rIiwiaW5kZXgiLCJmaW5kSW5kZXgiLCJhc3NlcnQiLCJzcGxpY2UiLCJtdWx0aWxpbmsiLCJkZXBlbmRlbmNpZXMiLCJjYWxsYmFjayIsIm11bHRpbGlua0FueSIsImFkZExpc3RlbmVyIiwiZW1pdHRlciIsIkxpc3RlbiIsInJlbW92ZUxpc3RlbmVyIiwibGlzdGVuIiwibm9kZVNldCIsIm5vZGUiLCJ2YWx1ZSIsImFzc2lnbm1lbnQiLCJ0YXJnZXQiLCJBc3NpZ25tZW50IiwicHJvcGVydHlTZXQiLCJQcm9wZXJ0eUFzc2lnbm1lbnQiLCJkaXNwb3NlIiwibGVuZ3RoIiwicG9wIiwiaXNEaXNwb3NlZCIsImluaXRpYWxWYWx1ZSIsInN0cmluZ3NNYXAiLCJNYXAiLCJsb2dpY1Byb3BlcnR5IiwiaXNTdGFydHVwQ29tcGxldGVQcm9wZXJ0eSIsImFjdGl2ZUNvbnRleHRQcm9wZXJ0eSIsInN0YXJ0dXBDb21wbGV0ZSIsInJlbG9hZCIsImFkZGVkRW1pdHRlciIsIm9iaiIsImxvZ2ljIiwiYWRkZWQiLCJyZW1vdmVkRW1pdHRlciIsInJlbW92ZWQiLCJsb2NhbGVzIiwic3RyaW5ncyIsImFkZGVkU3RyaW5ncyIsImkiLCJsb2NhbGUiLCJoYXMiLCJsb2NhbGVTdHJpbmdzIiwia2V5IiwiT2JqZWN0Iiwia2V5cyIsImxhdW5jaCIsInJlZ2lzdGVyU3RyaW5ncyIsIm5lZWRzUmVsb2FkIiwiaW5jbHVkZXMiLCJzZXQiLCJyZWdpc3RlckxvZ2ljIiwiZXh0ZXJuYWxMb2FkIiwic3RyIiwiZGF0YVVSSSIsImJ0b2EiLCJuZXh0RG91YmxlIiwiZGVmYXVsdCIsImNvbnN0cnVjdG9yIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEZXNjcmlwdGlvbkNvbnRleHQudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQVBJIENvbnRleHQgZm9yIGRlc2NyaXB0aW9uIHBsdWdpbnMuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgeyBOb2RlIH0gZnJvbSAnLi4vLi4vc2NlbmVyeS9qcy9pbXBvcnRzLmpzJztcclxuaW1wb3J0IGpvaXN0IGZyb20gJy4vam9pc3QuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0IGZyb20gJy4uLy4uL3RhbmRlbS9qcy9QaGV0aW9PYmplY3QuanMnO1xyXG5pbXBvcnQgRGVzY3JpcHRpb25SZWdpc3RyeSBmcm9tICcuLi8uLi90YW5kZW0vanMvRGVzY3JpcHRpb25SZWdpc3RyeS5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSwgeyBQcm9wZXJ0eUxhenlMaW5rTGlzdGVuZXIsIFByb3BlcnR5TGlua0xpc3RlbmVyLCBQcm9wZXJ0eUxpc3RlbmVyIH0gZnJvbSAnLi4vLi4vYXhvbi9qcy9UUmVhZE9ubHlQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBURW1pdHRlciwgeyBURW1pdHRlckxpc3RlbmVyLCBUUmVhZE9ubHlFbWl0dGVyIH0gZnJvbSAnLi4vLi4vYXhvbi9qcy9URW1pdHRlci5qcyc7XHJcbmltcG9ydCB7IExvY2FsZSB9IGZyb20gJy4vaTE4bi9sb2NhbGVQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBUaW55UHJvcGVydHkgZnJvbSAnLi4vLi4vYXhvbi9qcy9UaW55UHJvcGVydHkuanMnO1xyXG5pbXBvcnQgbG9jYWxlT3JkZXJQcm9wZXJ0eSBmcm9tICcuL2kxOG4vbG9jYWxlT3JkZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNdWx0aWxpbmssIHsgVW5rbm93bk11bHRpbGluayB9IGZyb20gJy4uLy4uL2F4b24vanMvTXVsdGlsaW5rLmpzJztcclxuaW1wb3J0IGRvdFJhbmRvbSBmcm9tICcuLi8uLi9kb3QvanMvZG90UmFuZG9tLmpzJztcclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1RQcm9wZXJ0eS5qcyc7XHJcblxyXG5leHBvcnQgdHlwZSBEZXNjcmlwdGlvblN0cmluZ3MgPSB7XHJcbiAgbG9jYWxlOiBMb2NhbGU7XHJcbn07XHJcblxyXG5leHBvcnQgdHlwZSBEZXNjcmlwdGlvbkxvZ2ljID0ge1xyXG4gIGxhdW5jaCggY29udGV4dDogRGVzY3JpcHRpb25Db250ZXh0LCBzdHJpbmdzOiBEZXNjcmlwdGlvblN0cmluZ3MgKTogdm9pZDtcclxuICBhZGRlZCggdGFuZGVtSUQ6IHN0cmluZywgb2JqOiBQaGV0aW9PYmplY3QgKTogdm9pZDtcclxuICByZW1vdmVkKCB0YW5kZW1JRDogc3RyaW5nLCBvYmo6IFBoZXRpb09iamVjdCApOiB2b2lkO1xyXG59O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVzY3JpcHRpb25Db250ZXh0IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSBsaW5rczogTGlua1tdID0gW107XHJcbiAgcHJpdmF0ZSByZWFkb25seSBsaXN0ZW5zOiBMaXN0ZW5bXSA9IFtdO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgYXNzaWdubWVudHM6IEFzc2lnbm1lbnRbXSA9IFtdO1xyXG4gIHByaXZhdGUgcmVhZG9ubHkgcHJvcGVydHlBc3NpZ25tZW50czogUHJvcGVydHlBc3NpZ25tZW50W10gPSBbXTtcclxuICBwcml2YXRlIHJlYWRvbmx5IG11bHRpbGlua3M6IFVua25vd25NdWx0aWxpbmtbXSA9IFtdO1xyXG5cclxuICBwdWJsaWMgZ2V0KCB0YW5kZW1JRDogc3RyaW5nICk6IFBoZXRpb09iamVjdCB8IG51bGwge1xyXG4gICAgcmV0dXJuIERlc2NyaXB0aW9uUmVnaXN0cnkubWFwLmdldCggdGFuZGVtSUQgKSB8fCBudWxsO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGxpbmsoIHByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTx1bmtub3duPiwgbGlzdGVuZXI6IFByb3BlcnR5TGlua0xpc3RlbmVyPHVua25vd24+ICk6IHZvaWQge1xyXG4gICAgLy8gVFMganVzdC4uLiBsZXRzIHVzIGRvIHRoaXM/XHJcbiAgICBwcm9wZXJ0eS5saW5rKCBsaXN0ZW5lciApO1xyXG5cclxuICAgIHRoaXMubGlua3MucHVzaCggbmV3IExpbmsoIHByb3BlcnR5LCBsaXN0ZW5lciApICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgbGF6eUxpbmsoIHByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTx1bmtub3duPiwgbGlzdGVuZXI6IFByb3BlcnR5TGF6eUxpbmtMaXN0ZW5lcjx1bmtub3duPiApOiB2b2lkIHtcclxuICAgIC8vIFRTIGp1c3QuLi4gbGV0cyB1cyBkbyB0aGlzP1xyXG4gICAgcHJvcGVydHkubGF6eUxpbmsoIGxpc3RlbmVyICk7XHJcblxyXG4gICAgdGhpcy5saW5rcy5wdXNoKCBuZXcgTGluayggcHJvcGVydHksIGxpc3RlbmVyICkgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB1bmxpbmsoIHByb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTx1bmtub3duPiwgbGlzdGVuZXI6IFByb3BlcnR5TGF6eUxpbmtMaXN0ZW5lcjx1bmtub3duPiApOiB2b2lkIHtcclxuICAgIHByb3BlcnR5LnVubGluayggbGlzdGVuZXIgKTtcclxuXHJcbiAgICBjb25zdCBpbmRleCA9IHRoaXMubGlua3MuZmluZEluZGV4KCBsaW5rID0+IGxpbmsucHJvcGVydHkgPT09IHByb3BlcnR5ICYmIGxpbmsubGlzdGVuZXIgPT09IGxpc3RlbmVyICk7XHJcblxyXG4gICAgYXNzZXJ0ICYmIGFzc2VydCggaW5kZXggPj0gMCApO1xyXG5cclxuICAgIHRoaXMubGlua3Muc3BsaWNlKCBpbmRleCwgMSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG11bHRpbGluayggZGVwZW5kZW5jaWVzOiBSZWFkb25seTxUUmVhZE9ubHlQcm9wZXJ0eTx1bmtub3duPltdPiwgY2FsbGJhY2s6ICgpID0+IHZvaWQgKTogVW5rbm93bk11bHRpbGluayB7XHJcbiAgICBjb25zdCBtdWx0aWxpbmsgPSBNdWx0aWxpbmsubXVsdGlsaW5rQW55KCBkZXBlbmRlbmNpZXMsIGNhbGxiYWNrICk7XHJcblxyXG4gICAgdGhpcy5tdWx0aWxpbmtzLnB1c2goIG11bHRpbGluayApO1xyXG5cclxuICAgIHJldHVybiBtdWx0aWxpbms7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgYWRkTGlzdGVuZXIoIGVtaXR0ZXI6IFRSZWFkT25seUVtaXR0ZXI8dW5rbm93bltdPiwgbGlzdGVuZXI6IFRFbWl0dGVyTGlzdGVuZXI8dW5rbm93bltdPiApOiB2b2lkIHtcclxuICAgIGVtaXR0ZXIuYWRkTGlzdGVuZXIoIGxpc3RlbmVyICk7XHJcblxyXG4gICAgdGhpcy5saXN0ZW5zLnB1c2goIG5ldyBMaXN0ZW4oIGVtaXR0ZXIsIGxpc3RlbmVyICkgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyByZW1vdmVMaXN0ZW5lciggZW1pdHRlcjogVEVtaXR0ZXI8dW5rbm93bltdPiwgbGlzdGVuZXI6IFRFbWl0dGVyTGlzdGVuZXI8dW5rbm93bltdPiApOiB2b2lkIHtcclxuICAgIGVtaXR0ZXIucmVtb3ZlTGlzdGVuZXIoIGxpc3RlbmVyICk7XHJcblxyXG4gICAgY29uc3QgaW5kZXggPSB0aGlzLmxpc3RlbnMuZmluZEluZGV4KCBsaXN0ZW4gPT4gbGlzdGVuLmVtaXR0ZXIgPT09IGVtaXR0ZXIgJiYgbGlzdGVuLmxpc3RlbmVyID09PSBsaXN0ZW5lciApO1xyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGluZGV4ID49IDAgKTtcclxuXHJcbiAgICB0aGlzLmxpc3RlbnMuc3BsaWNlKCBpbmRleCwgMSApO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG5vZGVTZXQoIG5vZGU6IE5vZGUsIHByb3BlcnR5OiBrZXlvZiBOb2RlLCB2YWx1ZTogdW5rbm93biApOiB2b2lkIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5hc3NpZ25tZW50cy5maW5kSW5kZXgoIGFzc2lnbm1lbnQgPT4gYXNzaWdubWVudC50YXJnZXQgPT09IG5vZGUgJiYgYXNzaWdubWVudC5wcm9wZXJ0eSA9PT0gcHJvcGVydHkgKTtcclxuICAgIGlmICggaW5kZXggPCAwICkge1xyXG4gICAgICB0aGlzLmFzc2lnbm1lbnRzLnB1c2goIG5ldyBBc3NpZ25tZW50KCBub2RlLCBwcm9wZXJ0eSwgbm9kZVsgcHJvcGVydHkgXSApICk7XHJcbiAgICB9XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgbm9kZVsgcHJvcGVydHkgXSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHByb3BlcnR5U2V0KCBwcm9wZXJ0eTogVFByb3BlcnR5PHVua25vd24+LCB2YWx1ZTogdW5rbm93biApOiB2b2lkIHtcclxuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5wcm9wZXJ0eUFzc2lnbm1lbnRzLmZpbmRJbmRleCggYXNzaWdubWVudCA9PiBhc3NpZ25tZW50LnByb3BlcnR5ID09PSBwcm9wZXJ0eSApO1xyXG4gICAgaWYgKCBpbmRleCA8IDAgKSB7XHJcbiAgICAgIHRoaXMucHJvcGVydHlBc3NpZ25tZW50cy5wdXNoKCBuZXcgUHJvcGVydHlBc3NpZ25tZW50KCBwcm9wZXJ0eSwgcHJvcGVydHkudmFsdWUgKSApO1xyXG4gICAgfVxyXG5cclxuICAgIHByb3BlcnR5LnZhbHVlID0gdmFsdWU7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZGlzcG9zZSgpOiB2b2lkIHtcclxuICAgIC8vIE5PVEU6IGNhbiBsaW5rcy9saXN0ZW5zIGJlIHRpZWQgdG8gYSB0YW5kZW0vb2JqZWN0PyBTbyB0aGF0IGlmIHdlIFwicmVtb3ZlXCIgdGhlIG9iamVjdCwgd2Ugd2lsbCBhc3N1bWUgaXQncyBkaXNwb3NlZD9cclxuXHJcbiAgICB3aGlsZSAoIHRoaXMubGlua3MubGVuZ3RoICkge1xyXG4gICAgICBjb25zdCBsaW5rID0gdGhpcy5saW5rcy5wb3AoKSE7XHJcblxyXG4gICAgICBpZiAoICFsaW5rLnByb3BlcnR5LmlzRGlzcG9zZWQgKSB7XHJcbiAgICAgICAgbGluay5wcm9wZXJ0eS51bmxpbmsoIGxpbmsubGlzdGVuZXIgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgd2hpbGUgKCB0aGlzLmxpc3RlbnMubGVuZ3RoICkge1xyXG4gICAgICBjb25zdCBsaXN0ZW4gPSB0aGlzLmxpc3RlbnMucG9wKCkhO1xyXG5cclxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvclxyXG4gICAgICBpZiAoICFsaXN0ZW4uZW1pdHRlci5pc0Rpc3Bvc2VkICkge1xyXG4gICAgICAgIGxpc3Rlbi5lbWl0dGVyLnJlbW92ZUxpc3RlbmVyKCBsaXN0ZW4ubGlzdGVuZXIgKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgd2hpbGUgKCB0aGlzLmFzc2lnbm1lbnRzLmxlbmd0aCApIHtcclxuICAgICAgY29uc3QgYXNzaWdubWVudCA9IHRoaXMuYXNzaWdubWVudHMucG9wKCkhO1xyXG5cclxuICAgICAgaWYgKCAhYXNzaWdubWVudC50YXJnZXQuaXNEaXNwb3NlZCApIHtcclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgYXNzaWdubWVudC50YXJnZXRbIGFzc2lnbm1lbnQucHJvcGVydHkgXSA9IGFzc2lnbm1lbnQuaW5pdGlhbFZhbHVlO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB3aGlsZSAoIHRoaXMucHJvcGVydHlBc3NpZ25tZW50cy5sZW5ndGggKSB7XHJcbiAgICAgIGNvbnN0IGFzc2lnbm1lbnQgPSB0aGlzLnByb3BlcnR5QXNzaWdubWVudHMucG9wKCkhO1xyXG5cclxuICAgICAgaWYgKCAhYXNzaWdubWVudC5wcm9wZXJ0eS5pc0Rpc3Bvc2VkICkge1xyXG4gICAgICAgIGFzc2lnbm1lbnQucHJvcGVydHkudmFsdWUgPSBhc3NpZ25tZW50LmluaXRpYWxWYWx1ZTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgd2hpbGUgKCB0aGlzLm11bHRpbGlua3MubGVuZ3RoICkge1xyXG4gICAgICBjb25zdCBtdWx0aWxpbmsgPSB0aGlzLm11bHRpbGlua3MucG9wKCkhO1xyXG5cclxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBUT0RPIGhvdyB0byBzdXBwb3J0IHRoaXM/IGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9qb2lzdC9pc3N1ZXMvOTQxXHJcbiAgICAgIGlmICggIW11bHRpbGluay5pc0Rpc3Bvc2VkICkge1xyXG4gICAgICAgIG11bHRpbGluay5kaXNwb3NlKCk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8vIFdoYXQgaXMgYXZhaWxhYmxlIGFuZCByZWdpc3RlcmVkXHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgc3RyaW5nc01hcCA9IG5ldyBNYXA8TG9jYWxlLCBEZXNjcmlwdGlvblN0cmluZ3M+KCk7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgbG9naWNQcm9wZXJ0eSA9IG5ldyBUaW55UHJvcGVydHk8RGVzY3JpcHRpb25Mb2dpYyB8IG51bGw+KCBudWxsICk7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgaXNTdGFydHVwQ29tcGxldGVQcm9wZXJ0eSA9IG5ldyBUaW55UHJvcGVydHk8Ym9vbGVhbj4oIGZhbHNlICk7XHJcbiAgcHJpdmF0ZSBzdGF0aWMgcmVhZG9ubHkgYWN0aXZlQ29udGV4dFByb3BlcnR5ID0gbmV3IFRpbnlQcm9wZXJ0eTxEZXNjcmlwdGlvbkNvbnRleHQgfCBudWxsPiggbnVsbCApO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHN0YXJ0dXBDb21wbGV0ZSgpOiB2b2lkIHtcclxuICAgIERlc2NyaXB0aW9uQ29udGV4dC5pc1N0YXJ0dXBDb21wbGV0ZVByb3BlcnR5LnZhbHVlID0gdHJ1ZTtcclxuXHJcbiAgICBsb2NhbGVPcmRlclByb3BlcnR5LmxpbmsoICgpID0+IHtcclxuICAgICAgdGhpcy5yZWxvYWQoKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBEZXNjcmlwdGlvblJlZ2lzdHJ5LmFkZGVkRW1pdHRlci5hZGRMaXN0ZW5lciggKCB0YW5kZW1JRCwgb2JqICkgPT4ge1xyXG4gICAgICBjb25zdCBsb2dpYyA9IHRoaXMubG9naWNQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgaWYgKCB0aGlzLmFjdGl2ZUNvbnRleHRQcm9wZXJ0eS52YWx1ZSAmJiBsb2dpYyApIHtcclxuICAgICAgICBsb2dpYy5hZGRlZCggdGFuZGVtSUQsIG9iaiApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcblxyXG4gICAgRGVzY3JpcHRpb25SZWdpc3RyeS5yZW1vdmVkRW1pdHRlci5hZGRMaXN0ZW5lciggKCB0YW5kZW1JRCwgb2JqICkgPT4ge1xyXG4gICAgICBjb25zdCBsb2dpYyA9IHRoaXMubG9naWNQcm9wZXJ0eS52YWx1ZTtcclxuICAgICAgaWYgKCB0aGlzLmFjdGl2ZUNvbnRleHRQcm9wZXJ0eS52YWx1ZSAmJiBsb2dpYyApIHtcclxuICAgICAgICBsb2dpYy5yZW1vdmVkKCB0YW5kZW1JRCwgb2JqICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuICB9XHJcblxyXG4gIHByaXZhdGUgc3RhdGljIHJlbG9hZCgpOiB2b2lkIHtcclxuICAgIC8vIElmIHdlIGhhdmVuJ3Qgc3RhcnRlZCB1cCB5ZXQsIGRvbid0IGRvIGFueXRoaW5nICh3ZSdsbCByZWxvYWQgd2hlbiB3ZSBzdGFydCB1cCkuXHJcbiAgICBpZiAoICF0aGlzLmlzU3RhcnR1cENvbXBsZXRlUHJvcGVydHkudmFsdWUgKSB7XHJcbiAgICAgIHJldHVybjtcclxuICAgIH1cclxuXHJcbiAgICBpZiAoIHRoaXMuYWN0aXZlQ29udGV4dFByb3BlcnR5LnZhbHVlICkge1xyXG4gICAgICB0aGlzLmFjdGl2ZUNvbnRleHRQcm9wZXJ0eS52YWx1ZS5kaXNwb3NlKCk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbG9naWMgPSB0aGlzLmxvZ2ljUHJvcGVydHkudmFsdWU7XHJcbiAgICBpZiAoIGxvZ2ljID09PSBudWxsICkge1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3QgbG9jYWxlcyA9IGxvY2FsZU9yZGVyUHJvcGVydHkudmFsdWU7XHJcblxyXG4gICAgY29uc3Qgc3RyaW5nczogRGVzY3JpcHRpb25TdHJpbmdzID0ge30gYXMgRGVzY3JpcHRpb25TdHJpbmdzO1xyXG4gICAgbGV0IGFkZGVkU3RyaW5ncyA9IGZhbHNlO1xyXG5cclxuICAgIC8vIFNlYXJjaCBpbiBsb2NhbGUgZmFsbGJhY2sgb3JkZXIgZm9yIHRoZSBiZXN0IGRlc2NyaXB0aW9uIHN0cmluZ3MgdG8gdXNlLiBXZSdsbCBwdWxsIG91dCBlYWNoIGluZGl2aWR1YWxcclxuICAgIC8vIGZ1bmN0aW9uIHdpdGggZmFsbGJhY2suXHJcbiAgICBmb3IgKCBsZXQgaSA9IGxvY2FsZXMubGVuZ3RoIC0gMTsgaSA+PSAwOyBpLS0gKSB7XHJcbiAgICAgIGNvbnN0IGxvY2FsZSA9IGxvY2FsZXNbIGkgXTtcclxuXHJcbiAgICAgIGlmICggRGVzY3JpcHRpb25Db250ZXh0LnN0cmluZ3NNYXAuaGFzKCBsb2NhbGUgKSApIHtcclxuICAgICAgICBhZGRlZFN0cmluZ3MgPSB0cnVlO1xyXG5cclxuICAgICAgICBjb25zdCBsb2NhbGVTdHJpbmdzID0gRGVzY3JpcHRpb25Db250ZXh0LnN0cmluZ3NNYXAuZ2V0KCBsb2NhbGUgKSE7XHJcbiAgICAgICAgZm9yICggY29uc3Qga2V5IG9mIE9iamVjdC5rZXlzKCBsb2NhbGVTdHJpbmdzICkgKSB7XHJcbiAgICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yXHJcbiAgICAgICAgICBzdHJpbmdzWyBrZXkgXSA9IGxvY2FsZVN0cmluZ3NbIGtleSBdO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG5cclxuICAgIGlmICggIWFkZGVkU3RyaW5ncyApIHtcclxuICAgICAgcmV0dXJuO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuYWN0aXZlQ29udGV4dFByb3BlcnR5LnZhbHVlID0gbmV3IERlc2NyaXB0aW9uQ29udGV4dCgpO1xyXG5cclxuICAgIGxvZ2ljLmxhdW5jaCggdGhpcy5hY3RpdmVDb250ZXh0UHJvcGVydHkudmFsdWUsIHN0cmluZ3MgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgcmVnaXN0ZXJTdHJpbmdzKCBzdHJpbmdzOiBEZXNjcmlwdGlvblN0cmluZ3MgKTogRGVzY3JpcHRpb25TdHJpbmdzIHtcclxuICAgIGNvbnN0IG5lZWRzUmVsb2FkID0gbG9jYWxlT3JkZXJQcm9wZXJ0eS52YWx1ZS5pbmNsdWRlcyggc3RyaW5ncy5sb2NhbGUgKTtcclxuXHJcbiAgICBEZXNjcmlwdGlvbkNvbnRleHQuc3RyaW5nc01hcC5zZXQoIHN0cmluZ3MubG9jYWxlLCBzdHJpbmdzICk7XHJcblxyXG4gICAgaWYgKCBuZWVkc1JlbG9hZCApIHtcclxuICAgICAgRGVzY3JpcHRpb25Db250ZXh0LnJlbG9hZCgpO1xyXG4gICAgfVxyXG5cclxuICAgIHJldHVybiBzdHJpbmdzO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyByZWdpc3RlckxvZ2ljKCBsb2dpYzogRGVzY3JpcHRpb25Mb2dpYyApOiBEZXNjcmlwdGlvbkxvZ2ljIHtcclxuICAgIERlc2NyaXB0aW9uQ29udGV4dC5sb2dpY1Byb3BlcnR5LnZhbHVlID0gbG9naWM7XHJcblxyXG4gICAgRGVzY3JpcHRpb25Db250ZXh0LnJlbG9hZCgpO1xyXG5cclxuICAgIHJldHVybiBsb2dpYztcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzdGF0aWMgYXN5bmMgZXh0ZXJuYWxMb2FkKCBzdHI6IHN0cmluZyApOiBQcm9taXNlPHZvaWQ+IHtcclxuICAgIGNvbnN0IGRhdGFVUkkgPSBgZGF0YTp0ZXh0L2phdmFzY3JpcHQ7YmFzZTY0LCR7YnRvYSggYCR7ZG90UmFuZG9tLm5leHREb3VibGUoKX07JHtzdHJ9YCApfWA7XHJcblxyXG4gICAgKCBhd2FpdCBpbXBvcnQoIGRhdGFVUkkgKSApLmRlZmF1bHQoKTtcclxuICB9XHJcbn1cclxuXHJcbmNsYXNzIExpbmsge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByZWFkb25seSBwcm9wZXJ0eTogVFJlYWRPbmx5UHJvcGVydHk8dW5rbm93bj4sXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgbGlzdGVuZXI6IFByb3BlcnR5TGlzdGVuZXI8dW5rbm93bj5cclxuICApIHt9XHJcbn1cclxuXHJcbmNsYXNzIExpc3RlbiB7XHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGVtaXR0ZXI6IFRSZWFkT25seUVtaXR0ZXI8dW5rbm93bltdPixcclxuICAgIHB1YmxpYyByZWFkb25seSBsaXN0ZW5lcjogVEVtaXR0ZXJMaXN0ZW5lcjx1bmtub3duW10+XHJcbiAgKSB7fVxyXG59XHJcblxyXG5jbGFzcyBBc3NpZ25tZW50IHtcclxuICBwdWJsaWMgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgcmVhZG9ubHkgdGFyZ2V0OiBOb2RlLFxyXG4gICAgcHVibGljIHJlYWRvbmx5IHByb3BlcnR5OiBrZXlvZiBOb2RlLFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGluaXRpYWxWYWx1ZTogc3RyaW5nXHJcbiAgKSB7fVxyXG59XHJcblxyXG5jbGFzcyBQcm9wZXJ0eUFzc2lnbm1lbnQge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyByZWFkb25seSBwcm9wZXJ0eTogVFByb3BlcnR5PHVua25vd24+LFxyXG4gICAgcHVibGljIHJlYWRvbmx5IGluaXRpYWxWYWx1ZTogdW5rbm93blxyXG4gICkge31cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdEZXNjcmlwdGlvbkNvbnRleHQnLCBEZXNjcmlwdGlvbkNvbnRleHQgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBR0EsT0FBT0EsS0FBSyxNQUFNLFlBQVk7QUFFOUIsT0FBT0MsbUJBQW1CLE1BQU0sd0NBQXdDO0FBSXhFLE9BQU9DLFlBQVksTUFBTSwrQkFBK0I7QUFDeEQsT0FBT0MsbUJBQW1CLE1BQU0sK0JBQStCO0FBQy9ELE9BQU9DLFNBQVMsTUFBNEIsNEJBQTRCO0FBQ3hFLE9BQU9DLFNBQVMsTUFBTSwyQkFBMkI7QUFhakQsZUFBZSxNQUFNQyxrQkFBa0IsQ0FBQztFQUVyQkMsS0FBSyxHQUFXLEVBQUU7RUFDbEJDLE9BQU8sR0FBYSxFQUFFO0VBQ3RCQyxXQUFXLEdBQWlCLEVBQUU7RUFDOUJDLG1CQUFtQixHQUF5QixFQUFFO0VBQzlDQyxVQUFVLEdBQXVCLEVBQUU7RUFFN0NDLEdBQUdBLENBQUVDLFFBQWdCLEVBQXdCO0lBQ2xELE9BQU9aLG1CQUFtQixDQUFDYSxHQUFHLENBQUNGLEdBQUcsQ0FBRUMsUUFBUyxDQUFDLElBQUksSUFBSTtFQUN4RDtFQUVPRSxJQUFJQSxDQUFFQyxRQUFvQyxFQUFFQyxRQUF1QyxFQUFTO0lBQ2pHO0lBQ0FELFFBQVEsQ0FBQ0QsSUFBSSxDQUFFRSxRQUFTLENBQUM7SUFFekIsSUFBSSxDQUFDVixLQUFLLENBQUNXLElBQUksQ0FBRSxJQUFJQyxJQUFJLENBQUVILFFBQVEsRUFBRUMsUUFBUyxDQUFFLENBQUM7RUFDbkQ7RUFFT0csUUFBUUEsQ0FBRUosUUFBb0MsRUFBRUMsUUFBMkMsRUFBUztJQUN6RztJQUNBRCxRQUFRLENBQUNJLFFBQVEsQ0FBRUgsUUFBUyxDQUFDO0lBRTdCLElBQUksQ0FBQ1YsS0FBSyxDQUFDVyxJQUFJLENBQUUsSUFBSUMsSUFBSSxDQUFFSCxRQUFRLEVBQUVDLFFBQVMsQ0FBRSxDQUFDO0VBQ25EO0VBRU9JLE1BQU1BLENBQUVMLFFBQW9DLEVBQUVDLFFBQTJDLEVBQVM7SUFDdkdELFFBQVEsQ0FBQ0ssTUFBTSxDQUFFSixRQUFTLENBQUM7SUFFM0IsTUFBTUssS0FBSyxHQUFHLElBQUksQ0FBQ2YsS0FBSyxDQUFDZ0IsU0FBUyxDQUFFUixJQUFJLElBQUlBLElBQUksQ0FBQ0MsUUFBUSxLQUFLQSxRQUFRLElBQUlELElBQUksQ0FBQ0UsUUFBUSxLQUFLQSxRQUFTLENBQUM7SUFFdEdPLE1BQU0sSUFBSUEsTUFBTSxDQUFFRixLQUFLLElBQUksQ0FBRSxDQUFDO0lBRTlCLElBQUksQ0FBQ2YsS0FBSyxDQUFDa0IsTUFBTSxDQUFFSCxLQUFLLEVBQUUsQ0FBRSxDQUFDO0VBQy9CO0VBRU9JLFNBQVNBLENBQUVDLFlBQW9ELEVBQUVDLFFBQW9CLEVBQXFCO0lBQy9HLE1BQU1GLFNBQVMsR0FBR3RCLFNBQVMsQ0FBQ3lCLFlBQVksQ0FBRUYsWUFBWSxFQUFFQyxRQUFTLENBQUM7SUFFbEUsSUFBSSxDQUFDakIsVUFBVSxDQUFDTyxJQUFJLENBQUVRLFNBQVUsQ0FBQztJQUVqQyxPQUFPQSxTQUFTO0VBQ2xCO0VBRU9JLFdBQVdBLENBQUVDLE9BQW9DLEVBQUVkLFFBQXFDLEVBQVM7SUFDdEdjLE9BQU8sQ0FBQ0QsV0FBVyxDQUFFYixRQUFTLENBQUM7SUFFL0IsSUFBSSxDQUFDVCxPQUFPLENBQUNVLElBQUksQ0FBRSxJQUFJYyxNQUFNLENBQUVELE9BQU8sRUFBRWQsUUFBUyxDQUFFLENBQUM7RUFDdEQ7RUFFT2dCLGNBQWNBLENBQUVGLE9BQTRCLEVBQUVkLFFBQXFDLEVBQVM7SUFDakdjLE9BQU8sQ0FBQ0UsY0FBYyxDQUFFaEIsUUFBUyxDQUFDO0lBRWxDLE1BQU1LLEtBQUssR0FBRyxJQUFJLENBQUNkLE9BQU8sQ0FBQ2UsU0FBUyxDQUFFVyxNQUFNLElBQUlBLE1BQU0sQ0FBQ0gsT0FBTyxLQUFLQSxPQUFPLElBQUlHLE1BQU0sQ0FBQ2pCLFFBQVEsS0FBS0EsUUFBUyxDQUFDO0lBRTVHTyxNQUFNLElBQUlBLE1BQU0sQ0FBRUYsS0FBSyxJQUFJLENBQUUsQ0FBQztJQUU5QixJQUFJLENBQUNkLE9BQU8sQ0FBQ2lCLE1BQU0sQ0FBRUgsS0FBSyxFQUFFLENBQUUsQ0FBQztFQUNqQztFQUVPYSxPQUFPQSxDQUFFQyxJQUFVLEVBQUVwQixRQUFvQixFQUFFcUIsS0FBYyxFQUFTO0lBQ3ZFLE1BQU1mLEtBQUssR0FBRyxJQUFJLENBQUNiLFdBQVcsQ0FBQ2MsU0FBUyxDQUFFZSxVQUFVLElBQUlBLFVBQVUsQ0FBQ0MsTUFBTSxLQUFLSCxJQUFJLElBQUlFLFVBQVUsQ0FBQ3RCLFFBQVEsS0FBS0EsUUFBUyxDQUFDO0lBQ3hILElBQUtNLEtBQUssR0FBRyxDQUFDLEVBQUc7TUFDZixJQUFJLENBQUNiLFdBQVcsQ0FBQ1MsSUFBSSxDQUFFLElBQUlzQixVQUFVLENBQUVKLElBQUksRUFBRXBCLFFBQVEsRUFBRW9CLElBQUksQ0FBRXBCLFFBQVEsQ0FBRyxDQUFFLENBQUM7SUFDN0U7O0lBRUE7SUFDQW9CLElBQUksQ0FBRXBCLFFBQVEsQ0FBRSxHQUFHcUIsS0FBSztFQUMxQjtFQUVPSSxXQUFXQSxDQUFFekIsUUFBNEIsRUFBRXFCLEtBQWMsRUFBUztJQUN2RSxNQUFNZixLQUFLLEdBQUcsSUFBSSxDQUFDWixtQkFBbUIsQ0FBQ2EsU0FBUyxDQUFFZSxVQUFVLElBQUlBLFVBQVUsQ0FBQ3RCLFFBQVEsS0FBS0EsUUFBUyxDQUFDO0lBQ2xHLElBQUtNLEtBQUssR0FBRyxDQUFDLEVBQUc7TUFDZixJQUFJLENBQUNaLG1CQUFtQixDQUFDUSxJQUFJLENBQUUsSUFBSXdCLGtCQUFrQixDQUFFMUIsUUFBUSxFQUFFQSxRQUFRLENBQUNxQixLQUFNLENBQUUsQ0FBQztJQUNyRjtJQUVBckIsUUFBUSxDQUFDcUIsS0FBSyxHQUFHQSxLQUFLO0VBQ3hCO0VBRU9NLE9BQU9BLENBQUEsRUFBUztJQUNyQjs7SUFFQSxPQUFRLElBQUksQ0FBQ3BDLEtBQUssQ0FBQ3FDLE1BQU0sRUFBRztNQUMxQixNQUFNN0IsSUFBSSxHQUFHLElBQUksQ0FBQ1IsS0FBSyxDQUFDc0MsR0FBRyxDQUFDLENBQUU7TUFFOUIsSUFBSyxDQUFDOUIsSUFBSSxDQUFDQyxRQUFRLENBQUM4QixVQUFVLEVBQUc7UUFDL0IvQixJQUFJLENBQUNDLFFBQVEsQ0FBQ0ssTUFBTSxDQUFFTixJQUFJLENBQUNFLFFBQVMsQ0FBQztNQUN2QztJQUNGO0lBQ0EsT0FBUSxJQUFJLENBQUNULE9BQU8sQ0FBQ29DLE1BQU0sRUFBRztNQUM1QixNQUFNVixNQUFNLEdBQUcsSUFBSSxDQUFDMUIsT0FBTyxDQUFDcUMsR0FBRyxDQUFDLENBQUU7O01BRWxDO01BQ0EsSUFBSyxDQUFDWCxNQUFNLENBQUNILE9BQU8sQ0FBQ2UsVUFBVSxFQUFHO1FBQ2hDWixNQUFNLENBQUNILE9BQU8sQ0FBQ0UsY0FBYyxDQUFFQyxNQUFNLENBQUNqQixRQUFTLENBQUM7TUFDbEQ7SUFDRjtJQUNBLE9BQVEsSUFBSSxDQUFDUixXQUFXLENBQUNtQyxNQUFNLEVBQUc7TUFDaEMsTUFBTU4sVUFBVSxHQUFHLElBQUksQ0FBQzdCLFdBQVcsQ0FBQ29DLEdBQUcsQ0FBQyxDQUFFO01BRTFDLElBQUssQ0FBQ1AsVUFBVSxDQUFDQyxNQUFNLENBQUNPLFVBQVUsRUFBRztRQUNuQztRQUNBUixVQUFVLENBQUNDLE1BQU0sQ0FBRUQsVUFBVSxDQUFDdEIsUUFBUSxDQUFFLEdBQUdzQixVQUFVLENBQUNTLFlBQVk7TUFDcEU7SUFDRjtJQUNBLE9BQVEsSUFBSSxDQUFDckMsbUJBQW1CLENBQUNrQyxNQUFNLEVBQUc7TUFDeEMsTUFBTU4sVUFBVSxHQUFHLElBQUksQ0FBQzVCLG1CQUFtQixDQUFDbUMsR0FBRyxDQUFDLENBQUU7TUFFbEQsSUFBSyxDQUFDUCxVQUFVLENBQUN0QixRQUFRLENBQUM4QixVQUFVLEVBQUc7UUFDckNSLFVBQVUsQ0FBQ3RCLFFBQVEsQ0FBQ3FCLEtBQUssR0FBR0MsVUFBVSxDQUFDUyxZQUFZO01BQ3JEO0lBQ0Y7SUFDQSxPQUFRLElBQUksQ0FBQ3BDLFVBQVUsQ0FBQ2lDLE1BQU0sRUFBRztNQUMvQixNQUFNbEIsU0FBUyxHQUFHLElBQUksQ0FBQ2YsVUFBVSxDQUFDa0MsR0FBRyxDQUFDLENBQUU7O01BRXhDO01BQ0EsSUFBSyxDQUFDbkIsU0FBUyxDQUFDb0IsVUFBVSxFQUFHO1FBQzNCcEIsU0FBUyxDQUFDaUIsT0FBTyxDQUFDLENBQUM7TUFDckI7SUFDRjtFQUNGOztFQUVBO0VBQ0EsT0FBd0JLLFVBQVUsR0FBRyxJQUFJQyxHQUFHLENBQTZCLENBQUM7RUFDMUUsT0FBd0JDLGFBQWEsR0FBRyxJQUFJaEQsWUFBWSxDQUEyQixJQUFLLENBQUM7RUFDekYsT0FBd0JpRCx5QkFBeUIsR0FBRyxJQUFJakQsWUFBWSxDQUFXLEtBQU0sQ0FBQztFQUN0RixPQUF3QmtELHFCQUFxQixHQUFHLElBQUlsRCxZQUFZLENBQTZCLElBQUssQ0FBQztFQUVuRyxPQUFjbUQsZUFBZUEsQ0FBQSxFQUFTO0lBQ3BDL0Msa0JBQWtCLENBQUM2Qyx5QkFBeUIsQ0FBQ2QsS0FBSyxHQUFHLElBQUk7SUFFekRsQyxtQkFBbUIsQ0FBQ1ksSUFBSSxDQUFFLE1BQU07TUFDOUIsSUFBSSxDQUFDdUMsTUFBTSxDQUFDLENBQUM7SUFDZixDQUFFLENBQUM7SUFFSHJELG1CQUFtQixDQUFDc0QsWUFBWSxDQUFDekIsV0FBVyxDQUFFLENBQUVqQixRQUFRLEVBQUUyQyxHQUFHLEtBQU07TUFDakUsTUFBTUMsS0FBSyxHQUFHLElBQUksQ0FBQ1AsYUFBYSxDQUFDYixLQUFLO01BQ3RDLElBQUssSUFBSSxDQUFDZSxxQkFBcUIsQ0FBQ2YsS0FBSyxJQUFJb0IsS0FBSyxFQUFHO1FBQy9DQSxLQUFLLENBQUNDLEtBQUssQ0FBRTdDLFFBQVEsRUFBRTJDLEdBQUksQ0FBQztNQUM5QjtJQUNGLENBQUUsQ0FBQztJQUVIdkQsbUJBQW1CLENBQUMwRCxjQUFjLENBQUM3QixXQUFXLENBQUUsQ0FBRWpCLFFBQVEsRUFBRTJDLEdBQUcsS0FBTTtNQUNuRSxNQUFNQyxLQUFLLEdBQUcsSUFBSSxDQUFDUCxhQUFhLENBQUNiLEtBQUs7TUFDdEMsSUFBSyxJQUFJLENBQUNlLHFCQUFxQixDQUFDZixLQUFLLElBQUlvQixLQUFLLEVBQUc7UUFDL0NBLEtBQUssQ0FBQ0csT0FBTyxDQUFFL0MsUUFBUSxFQUFFMkMsR0FBSSxDQUFDO01BQ2hDO0lBQ0YsQ0FBRSxDQUFDO0VBQ0w7RUFFQSxPQUFlRixNQUFNQSxDQUFBLEVBQVM7SUFDNUI7SUFDQSxJQUFLLENBQUMsSUFBSSxDQUFDSCx5QkFBeUIsQ0FBQ2QsS0FBSyxFQUFHO01BQzNDO0lBQ0Y7SUFFQSxJQUFLLElBQUksQ0FBQ2UscUJBQXFCLENBQUNmLEtBQUssRUFBRztNQUN0QyxJQUFJLENBQUNlLHFCQUFxQixDQUFDZixLQUFLLENBQUNNLE9BQU8sQ0FBQyxDQUFDO0lBQzVDO0lBRUEsTUFBTWMsS0FBSyxHQUFHLElBQUksQ0FBQ1AsYUFBYSxDQUFDYixLQUFLO0lBQ3RDLElBQUtvQixLQUFLLEtBQUssSUFBSSxFQUFHO01BQ3BCO0lBQ0Y7SUFFQSxNQUFNSSxPQUFPLEdBQUcxRCxtQkFBbUIsQ0FBQ2tDLEtBQUs7SUFFekMsTUFBTXlCLE9BQTJCLEdBQUcsQ0FBQyxDQUF1QjtJQUM1RCxJQUFJQyxZQUFZLEdBQUcsS0FBSzs7SUFFeEI7SUFDQTtJQUNBLEtBQU0sSUFBSUMsQ0FBQyxHQUFHSCxPQUFPLENBQUNqQixNQUFNLEdBQUcsQ0FBQyxFQUFFb0IsQ0FBQyxJQUFJLENBQUMsRUFBRUEsQ0FBQyxFQUFFLEVBQUc7TUFDOUMsTUFBTUMsTUFBTSxHQUFHSixPQUFPLENBQUVHLENBQUMsQ0FBRTtNQUUzQixJQUFLMUQsa0JBQWtCLENBQUMwQyxVQUFVLENBQUNrQixHQUFHLENBQUVELE1BQU8sQ0FBQyxFQUFHO1FBQ2pERixZQUFZLEdBQUcsSUFBSTtRQUVuQixNQUFNSSxhQUFhLEdBQUc3RCxrQkFBa0IsQ0FBQzBDLFVBQVUsQ0FBQ3BDLEdBQUcsQ0FBRXFELE1BQU8sQ0FBRTtRQUNsRSxLQUFNLE1BQU1HLEdBQUcsSUFBSUMsTUFBTSxDQUFDQyxJQUFJLENBQUVILGFBQWMsQ0FBQyxFQUFHO1VBQ2hEO1VBQ0FMLE9BQU8sQ0FBRU0sR0FBRyxDQUFFLEdBQUdELGFBQWEsQ0FBRUMsR0FBRyxDQUFFO1FBQ3ZDO01BQ0Y7SUFDRjtJQUVBLElBQUssQ0FBQ0wsWUFBWSxFQUFHO01BQ25CO0lBQ0Y7SUFFQSxJQUFJLENBQUNYLHFCQUFxQixDQUFDZixLQUFLLEdBQUcsSUFBSS9CLGtCQUFrQixDQUFDLENBQUM7SUFFM0RtRCxLQUFLLENBQUNjLE1BQU0sQ0FBRSxJQUFJLENBQUNuQixxQkFBcUIsQ0FBQ2YsS0FBSyxFQUFFeUIsT0FBUSxDQUFDO0VBQzNEO0VBRUEsT0FBY1UsZUFBZUEsQ0FBRVYsT0FBMkIsRUFBdUI7SUFDL0UsTUFBTVcsV0FBVyxHQUFHdEUsbUJBQW1CLENBQUNrQyxLQUFLLENBQUNxQyxRQUFRLENBQUVaLE9BQU8sQ0FBQ0csTUFBTyxDQUFDO0lBRXhFM0Qsa0JBQWtCLENBQUMwQyxVQUFVLENBQUMyQixHQUFHLENBQUViLE9BQU8sQ0FBQ0csTUFBTSxFQUFFSCxPQUFRLENBQUM7SUFFNUQsSUFBS1csV0FBVyxFQUFHO01BQ2pCbkUsa0JBQWtCLENBQUNnRCxNQUFNLENBQUMsQ0FBQztJQUM3QjtJQUVBLE9BQU9RLE9BQU87RUFDaEI7RUFFQSxPQUFjYyxhQUFhQSxDQUFFbkIsS0FBdUIsRUFBcUI7SUFDdkVuRCxrQkFBa0IsQ0FBQzRDLGFBQWEsQ0FBQ2IsS0FBSyxHQUFHb0IsS0FBSztJQUU5Q25ELGtCQUFrQixDQUFDZ0QsTUFBTSxDQUFDLENBQUM7SUFFM0IsT0FBT0csS0FBSztFQUNkO0VBRUEsYUFBb0JvQixZQUFZQSxDQUFFQyxHQUFXLEVBQWtCO0lBQzdELE1BQU1DLE9BQU8sR0FBSSwrQkFBOEJDLElBQUksQ0FBRyxHQUFFM0UsU0FBUyxDQUFDNEUsVUFBVSxDQUFDLENBQUUsSUFBR0gsR0FBSSxFQUFFLENBQUUsRUFBQztJQUUzRixDQUFFLE1BQU0sTUFBTSxDQUFFQyxPQUFRLENBQUMsRUFBR0csT0FBTyxDQUFDLENBQUM7RUFDdkM7QUFDRjtBQUVBLE1BQU0vRCxJQUFJLENBQUM7RUFDRmdFLFdBQVdBLENBQ0FuRSxRQUFvQyxFQUNwQ0MsUUFBbUMsRUFDbkQ7SUFBQSxLQUZnQkQsUUFBb0MsR0FBcENBLFFBQW9DO0lBQUEsS0FDcENDLFFBQW1DLEdBQW5DQSxRQUFtQztFQUNsRDtBQUNMO0FBRUEsTUFBTWUsTUFBTSxDQUFDO0VBQ0ptRCxXQUFXQSxDQUNBcEQsT0FBb0MsRUFDcENkLFFBQXFDLEVBQ3JEO0lBQUEsS0FGZ0JjLE9BQW9DLEdBQXBDQSxPQUFvQztJQUFBLEtBQ3BDZCxRQUFxQyxHQUFyQ0EsUUFBcUM7RUFDcEQ7QUFDTDtBQUVBLE1BQU11QixVQUFVLENBQUM7RUFDUjJDLFdBQVdBLENBQ0E1QyxNQUFZLEVBQ1p2QixRQUFvQixFQUNwQitCLFlBQW9CLEVBQ3BDO0lBQUEsS0FIZ0JSLE1BQVksR0FBWkEsTUFBWTtJQUFBLEtBQ1p2QixRQUFvQixHQUFwQkEsUUFBb0I7SUFBQSxLQUNwQitCLFlBQW9CLEdBQXBCQSxZQUFvQjtFQUNuQztBQUNMO0FBRUEsTUFBTUwsa0JBQWtCLENBQUM7RUFDaEJ5QyxXQUFXQSxDQUNBbkUsUUFBNEIsRUFDNUIrQixZQUFxQixFQUNyQztJQUFBLEtBRmdCL0IsUUFBNEIsR0FBNUJBLFFBQTRCO0lBQUEsS0FDNUIrQixZQUFxQixHQUFyQkEsWUFBcUI7RUFDcEM7QUFDTDtBQUVBL0MsS0FBSyxDQUFDb0YsUUFBUSxDQUFFLG9CQUFvQixFQUFFOUUsa0JBQW1CLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=