// Copyright 2020-2023, University of Colorado Boulder

/**
 * HomeScreenSoundGenerator is responsible for generating sounds that are associated with the home screen, such as the
 * sound for switching between screen icons and the sound for returning to the home screen from a sim screen.
 *
 * @author John Blanco (PhET Interactive Simulations)
 */

import MultiClip from '../../tambo/js/sound-generators/MultiClip.js';
import screenSelectionHomeV3_mp3 from '../sounds/screenSelectionHomeV3_mp3.js';
import switchingScreenSelectorIcons003_mp3 from '../sounds/switchingScreenSelectorIcons003_mp3.js';
import joist from './joist.js';
import Enumeration from '../../phet-core/js/Enumeration.js';
import EnumerationValue from '../../phet-core/js/EnumerationValue.js';
class SoundType extends EnumerationValue {
  static HOME_SCREEN_SELECTED = new SoundType();
  static DIFFERENT_ICON_SELECTED = new SoundType();
  static enumeration = new Enumeration(SoundType);
}
class HomeScreenSoundGenerator extends MultiClip {
  constructor(homeScreenModel, providedOptions) {
    // create the map of home screen actions to sounds
    const valuesToSoundsMap = new Map([[SoundType.HOME_SCREEN_SELECTED, screenSelectionHomeV3_mp3], [SoundType.DIFFERENT_ICON_SELECTED, switchingScreenSelectorIcons003_mp3]]);
    super(valuesToSoundsMap, providedOptions);
    homeScreenModel.screenProperty.lazyLink(screen => {
      if (screen.model === homeScreenModel) {
        this.playAssociatedSound(SoundType.HOME_SCREEN_SELECTED);
      }
    });

    // play the sound when the user selects a different icon on the home screen
    homeScreenModel.selectedScreenProperty.lazyLink(() => {
      if (homeScreenModel.screenProperty.value.model === homeScreenModel) {
        this.playAssociatedSound(SoundType.DIFFERENT_ICON_SELECTED);
      }
    });
  }
}
joist.register('HomeScreenSoundGenerator', HomeScreenSoundGenerator);
export default HomeScreenSoundGenerator;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJNdWx0aUNsaXAiLCJzY3JlZW5TZWxlY3Rpb25Ib21lVjNfbXAzIiwic3dpdGNoaW5nU2NyZWVuU2VsZWN0b3JJY29uczAwM19tcDMiLCJqb2lzdCIsIkVudW1lcmF0aW9uIiwiRW51bWVyYXRpb25WYWx1ZSIsIlNvdW5kVHlwZSIsIkhPTUVfU0NSRUVOX1NFTEVDVEVEIiwiRElGRkVSRU5UX0lDT05fU0VMRUNURUQiLCJlbnVtZXJhdGlvbiIsIkhvbWVTY3JlZW5Tb3VuZEdlbmVyYXRvciIsImNvbnN0cnVjdG9yIiwiaG9tZVNjcmVlbk1vZGVsIiwicHJvdmlkZWRPcHRpb25zIiwidmFsdWVzVG9Tb3VuZHNNYXAiLCJNYXAiLCJzY3JlZW5Qcm9wZXJ0eSIsImxhenlMaW5rIiwic2NyZWVuIiwibW9kZWwiLCJwbGF5QXNzb2NpYXRlZFNvdW5kIiwic2VsZWN0ZWRTY3JlZW5Qcm9wZXJ0eSIsInZhbHVlIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJIb21lU2NyZWVuU291bmRHZW5lcmF0b3IudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogSG9tZVNjcmVlblNvdW5kR2VuZXJhdG9yIGlzIHJlc3BvbnNpYmxlIGZvciBnZW5lcmF0aW5nIHNvdW5kcyB0aGF0IGFyZSBhc3NvY2lhdGVkIHdpdGggdGhlIGhvbWUgc2NyZWVuLCBzdWNoIGFzIHRoZVxyXG4gKiBzb3VuZCBmb3Igc3dpdGNoaW5nIGJldHdlZW4gc2NyZWVuIGljb25zIGFuZCB0aGUgc291bmQgZm9yIHJldHVybmluZyB0byB0aGUgaG9tZSBzY3JlZW4gZnJvbSBhIHNpbSBzY3JlZW4uXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9obiBCbGFuY28gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IE11bHRpQ2xpcCwgeyBNdWx0aUNsaXBPcHRpb25zIH0gZnJvbSAnLi4vLi4vdGFtYm8vanMvc291bmQtZ2VuZXJhdG9ycy9NdWx0aUNsaXAuanMnO1xyXG5pbXBvcnQgc2NyZWVuU2VsZWN0aW9uSG9tZVYzX21wMyBmcm9tICcuLi9zb3VuZHMvc2NyZWVuU2VsZWN0aW9uSG9tZVYzX21wMy5qcyc7XHJcbmltcG9ydCBzd2l0Y2hpbmdTY3JlZW5TZWxlY3Rvckljb25zMDAzX21wMyBmcm9tICcuLi9zb3VuZHMvc3dpdGNoaW5nU2NyZWVuU2VsZWN0b3JJY29uczAwM19tcDMuanMnO1xyXG5pbXBvcnQgam9pc3QgZnJvbSAnLi9qb2lzdC5qcyc7XHJcbmltcG9ydCBIb21lU2NyZWVuTW9kZWwgZnJvbSAnLi9Ib21lU2NyZWVuTW9kZWwuanMnO1xyXG5pbXBvcnQgRW51bWVyYXRpb24gZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uVmFsdWUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL0VudW1lcmF0aW9uVmFsdWUuanMnO1xyXG5cclxuY2xhc3MgU291bmRUeXBlIGV4dGVuZHMgRW51bWVyYXRpb25WYWx1ZSB7XHJcbiAgcHVibGljIHN0YXRpYyByZWFkb25seSBIT01FX1NDUkVFTl9TRUxFQ1RFRCA9IG5ldyBTb3VuZFR5cGUoKTtcclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IERJRkZFUkVOVF9JQ09OX1NFTEVDVEVEID0gbmV3IFNvdW5kVHlwZSgpO1xyXG5cclxuICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IGVudW1lcmF0aW9uID0gbmV3IEVudW1lcmF0aW9uKCBTb3VuZFR5cGUgKTtcclxufVxyXG5cclxuY2xhc3MgSG9tZVNjcmVlblNvdW5kR2VuZXJhdG9yIGV4dGVuZHMgTXVsdGlDbGlwPFNvdW5kVHlwZT4ge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaG9tZVNjcmVlbk1vZGVsOiBIb21lU2NyZWVuTW9kZWwsIHByb3ZpZGVkT3B0aW9ucz86IE11bHRpQ2xpcE9wdGlvbnMgKSB7XHJcblxyXG4gICAgLy8gY3JlYXRlIHRoZSBtYXAgb2YgaG9tZSBzY3JlZW4gYWN0aW9ucyB0byBzb3VuZHNcclxuICAgIGNvbnN0IHZhbHVlc1RvU291bmRzTWFwID0gbmV3IE1hcCggW1xyXG4gICAgICBbIFNvdW5kVHlwZS5IT01FX1NDUkVFTl9TRUxFQ1RFRCwgc2NyZWVuU2VsZWN0aW9uSG9tZVYzX21wMyBdLFxyXG4gICAgICBbIFNvdW5kVHlwZS5ESUZGRVJFTlRfSUNPTl9TRUxFQ1RFRCwgc3dpdGNoaW5nU2NyZWVuU2VsZWN0b3JJY29uczAwM19tcDMgXVxyXG4gICAgXSApO1xyXG5cclxuICAgIHN1cGVyKCB2YWx1ZXNUb1NvdW5kc01hcCwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgaG9tZVNjcmVlbk1vZGVsLnNjcmVlblByb3BlcnR5LmxhenlMaW5rKCBzY3JlZW4gPT4ge1xyXG4gICAgICBpZiAoIHNjcmVlbi5tb2RlbCA9PT0gaG9tZVNjcmVlbk1vZGVsICkge1xyXG4gICAgICAgIHRoaXMucGxheUFzc29jaWF0ZWRTb3VuZCggU291bmRUeXBlLkhPTUVfU0NSRUVOX1NFTEVDVEVEICk7XHJcbiAgICAgIH1cclxuICAgIH0gKTtcclxuXHJcbiAgICAvLyBwbGF5IHRoZSBzb3VuZCB3aGVuIHRoZSB1c2VyIHNlbGVjdHMgYSBkaWZmZXJlbnQgaWNvbiBvbiB0aGUgaG9tZSBzY3JlZW5cclxuICAgIGhvbWVTY3JlZW5Nb2RlbC5zZWxlY3RlZFNjcmVlblByb3BlcnR5LmxhenlMaW5rKCAoKSA9PiB7XHJcbiAgICAgIGlmICggaG9tZVNjcmVlbk1vZGVsLnNjcmVlblByb3BlcnR5LnZhbHVlLm1vZGVsID09PSBob21lU2NyZWVuTW9kZWwgKSB7XHJcbiAgICAgICAgdGhpcy5wbGF5QXNzb2NpYXRlZFNvdW5kKCBTb3VuZFR5cGUuRElGRkVSRU5UX0lDT05fU0VMRUNURUQgKTtcclxuICAgICAgfVxyXG4gICAgfSApO1xyXG4gIH1cclxufVxyXG5cclxuam9pc3QucmVnaXN0ZXIoICdIb21lU2NyZWVuU291bmRHZW5lcmF0b3InLCBIb21lU2NyZWVuU291bmRHZW5lcmF0b3IgKTtcclxuZXhwb3J0IGRlZmF1bHQgSG9tZVNjcmVlblNvdW5kR2VuZXJhdG9yOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLFNBQVMsTUFBNEIsOENBQThDO0FBQzFGLE9BQU9DLHlCQUF5QixNQUFNLHdDQUF3QztBQUM5RSxPQUFPQyxtQ0FBbUMsTUFBTSxrREFBa0Q7QUFDbEcsT0FBT0MsS0FBSyxNQUFNLFlBQVk7QUFFOUIsT0FBT0MsV0FBVyxNQUFNLG1DQUFtQztBQUMzRCxPQUFPQyxnQkFBZ0IsTUFBTSx3Q0FBd0M7QUFFckUsTUFBTUMsU0FBUyxTQUFTRCxnQkFBZ0IsQ0FBQztFQUN2QyxPQUF1QkUsb0JBQW9CLEdBQUcsSUFBSUQsU0FBUyxDQUFDLENBQUM7RUFDN0QsT0FBdUJFLHVCQUF1QixHQUFHLElBQUlGLFNBQVMsQ0FBQyxDQUFDO0VBRWhFLE9BQXVCRyxXQUFXLEdBQUcsSUFBSUwsV0FBVyxDQUFFRSxTQUFVLENBQUM7QUFDbkU7QUFFQSxNQUFNSSx3QkFBd0IsU0FBU1YsU0FBUyxDQUFZO0VBQ25EVyxXQUFXQSxDQUFFQyxlQUFnQyxFQUFFQyxlQUFrQyxFQUFHO0lBRXpGO0lBQ0EsTUFBTUMsaUJBQWlCLEdBQUcsSUFBSUMsR0FBRyxDQUFFLENBQ2pDLENBQUVULFNBQVMsQ0FBQ0Msb0JBQW9CLEVBQUVOLHlCQUF5QixDQUFFLEVBQzdELENBQUVLLFNBQVMsQ0FBQ0UsdUJBQXVCLEVBQUVOLG1DQUFtQyxDQUFFLENBQzFFLENBQUM7SUFFSCxLQUFLLENBQUVZLGlCQUFpQixFQUFFRCxlQUFnQixDQUFDO0lBRTNDRCxlQUFlLENBQUNJLGNBQWMsQ0FBQ0MsUUFBUSxDQUFFQyxNQUFNLElBQUk7TUFDakQsSUFBS0EsTUFBTSxDQUFDQyxLQUFLLEtBQUtQLGVBQWUsRUFBRztRQUN0QyxJQUFJLENBQUNRLG1CQUFtQixDQUFFZCxTQUFTLENBQUNDLG9CQUFxQixDQUFDO01BQzVEO0lBQ0YsQ0FBRSxDQUFDOztJQUVIO0lBQ0FLLGVBQWUsQ0FBQ1Msc0JBQXNCLENBQUNKLFFBQVEsQ0FBRSxNQUFNO01BQ3JELElBQUtMLGVBQWUsQ0FBQ0ksY0FBYyxDQUFDTSxLQUFLLENBQUNILEtBQUssS0FBS1AsZUFBZSxFQUFHO1FBQ3BFLElBQUksQ0FBQ1EsbUJBQW1CLENBQUVkLFNBQVMsQ0FBQ0UsdUJBQXdCLENBQUM7TUFDL0Q7SUFDRixDQUFFLENBQUM7RUFDTDtBQUNGO0FBRUFMLEtBQUssQ0FBQ29CLFFBQVEsQ0FBRSwwQkFBMEIsRUFBRWIsd0JBQXlCLENBQUM7QUFDdEUsZUFBZUEsd0JBQXdCIiwiaWdub3JlTGlzdCI6W119