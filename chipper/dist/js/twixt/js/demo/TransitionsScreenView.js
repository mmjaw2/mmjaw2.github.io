// Copyright 2020-2023, University of Colorado Boulder

/**
 * Demos how TransitionNode works
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../../axon/js/Property.js';
import Bounds2 from '../../../dot/js/Bounds2.js';
import Dimension2 from '../../../dot/js/Dimension2.js';
import dotRandom from '../../../dot/js/dotRandom.js';
import Range from '../../../dot/js/Range.js';
import ScreenView from '../../../joist/js/ScreenView.js';
import merge from '../../../phet-core/js/merge.js';
import ResetAllButton from '../../../scenery-phet/js/buttons/ResetAllButton.js';
import PhetFont from '../../../scenery-phet/js/PhetFont.js';
import { Color, HBox, Node, Rectangle, Text, VBox } from '../../../scenery/js/imports.js';
import RectangularPushButton from '../../../sun/js/buttons/RectangularPushButton.js';
import HSlider from '../../../sun/js/HSlider.js';
import Easing from '../Easing.js';
import TransitionNode from '../TransitionNode.js';
import twixt from '../twixt.js';
import EasingComboBox from './EasingComboBox.js';
import Tandem from '../../../tandem/js/Tandem.js';
export default class TransitionsScreenView extends ScreenView {
  constructor() {
    super({
      tandem: Tandem.OPT_OUT
    });
    const bounds = new Bounds2(0, 0, 320, 240);
    const easingProperty = new Property(Easing.QUADRATIC_IN_OUT);
    const durationProperty = new Property(0.3);
    this.transitionNode = new TransitionNode(new Property(bounds), {
      content: createSomething(bounds)
    });
    const listParent = new Node();
    const comboBox = new EasingComboBox(easingProperty, listParent, {
      centerX: this.layoutBounds.centerX,
      bottom: this.transitionNode.top - 10
    });
    const durationSlider = createSliderGroup(durationProperty, new Range(0.1, 2), 'Duration', [0.1, 0.5, 1, 2], {
      left: 10,
      top: 10
    });

    // Function of TransitionNode that we want to demonstrate
    const transitionFunctions = [this.transitionNode.slideLeftTo.bind(this.transitionNode), this.transitionNode.slideRightTo.bind(this.transitionNode), this.transitionNode.slideUpTo.bind(this.transitionNode), this.transitionNode.slideDownTo.bind(this.transitionNode), this.transitionNode.wipeLeftTo.bind(this.transitionNode), this.transitionNode.wipeRightTo.bind(this.transitionNode), this.transitionNode.wipeUpTo.bind(this.transitionNode), this.transitionNode.wipeDownTo.bind(this.transitionNode), this.transitionNode.dissolveTo.bind(this.transitionNode)];

    // Create a button to demonstrate each transition function.
    const transitionButtons = transitionFunctions.map(transitionFunction => {
      return new RectangularPushButton({
        content: new Text(transitionFunction.name, {
          font: new PhetFont(20)
        }),
        listener: () => transitionFunction(createSomething(bounds), {
          duration: durationProperty.value,
          targetOptions: {
            easing: easingProperty.value
          }
        })
      });
    });

    // Create rows of buttons.
    const transitionButtonRows = _.chunk(transitionButtons, 4).map(children => {
      return new HBox({
        children: children,
        spacing: 10
      });
    });
    this.addChild(new VBox({
      children: [durationSlider, comboBox, this.transitionNode, ...transitionButtonRows],
      spacing: 10,
      center: this.layoutBounds.center
    }));

    // Reset All button
    const resetAllButton = new ResetAllButton({
      listener: () => {
        durationProperty.reset();
        easingProperty.reset();
      },
      right: this.layoutBounds.maxX - 10,
      bottom: this.layoutBounds.maxY - 10
    });
    this.addChild(resetAllButton);
    this.addChild(listParent);
  }
  step(dt) {
    this.transitionNode.step(dt);
  }
}
function createSomething(bounds) {
  function randomColor() {
    return new Color(dotRandom.nextInt(256), dotRandom.nextInt(256), dotRandom.nextInt(256));
  }
  function randomString() {
    return _.range(0, 7).map(() => String.fromCharCode(dotRandom.nextIntBetween(65, 122))).join('');
  }
  return Rectangle.bounds(bounds, {
    fill: randomColor(),
    children: [new Text(randomString(), {
      font: new PhetFont(60),
      center: bounds.center
    })]
  });
}
function createSliderGroup(property, range, label, majorTicks, options) {
  const labelNode = new Text(label, {
    font: new PhetFont(20)
  });
  const slider = new HSlider(property, range, {
    trackSize: new Dimension2(300, 5)
  });
  majorTicks.forEach(tick => slider.addMajorTick(tick, new Text(tick, {
    font: new PhetFont(20)
  })));
  return new VBox(merge({
    children: [labelNode, slider],
    spacing: 10
  }, options));
}
twixt.register('TransitionsScreenView', TransitionsScreenView);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIkJvdW5kczIiLCJEaW1lbnNpb24yIiwiZG90UmFuZG9tIiwiUmFuZ2UiLCJTY3JlZW5WaWV3IiwibWVyZ2UiLCJSZXNldEFsbEJ1dHRvbiIsIlBoZXRGb250IiwiQ29sb3IiLCJIQm94IiwiTm9kZSIsIlJlY3RhbmdsZSIsIlRleHQiLCJWQm94IiwiUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIiwiSFNsaWRlciIsIkVhc2luZyIsIlRyYW5zaXRpb25Ob2RlIiwidHdpeHQiLCJFYXNpbmdDb21ib0JveCIsIlRhbmRlbSIsIlRyYW5zaXRpb25zU2NyZWVuVmlldyIsImNvbnN0cnVjdG9yIiwidGFuZGVtIiwiT1BUX09VVCIsImJvdW5kcyIsImVhc2luZ1Byb3BlcnR5IiwiUVVBRFJBVElDX0lOX09VVCIsImR1cmF0aW9uUHJvcGVydHkiLCJ0cmFuc2l0aW9uTm9kZSIsImNvbnRlbnQiLCJjcmVhdGVTb21ldGhpbmciLCJsaXN0UGFyZW50IiwiY29tYm9Cb3giLCJjZW50ZXJYIiwibGF5b3V0Qm91bmRzIiwiYm90dG9tIiwidG9wIiwiZHVyYXRpb25TbGlkZXIiLCJjcmVhdGVTbGlkZXJHcm91cCIsImxlZnQiLCJ0cmFuc2l0aW9uRnVuY3Rpb25zIiwic2xpZGVMZWZ0VG8iLCJiaW5kIiwic2xpZGVSaWdodFRvIiwic2xpZGVVcFRvIiwic2xpZGVEb3duVG8iLCJ3aXBlTGVmdFRvIiwid2lwZVJpZ2h0VG8iLCJ3aXBlVXBUbyIsIndpcGVEb3duVG8iLCJkaXNzb2x2ZVRvIiwidHJhbnNpdGlvbkJ1dHRvbnMiLCJtYXAiLCJ0cmFuc2l0aW9uRnVuY3Rpb24iLCJuYW1lIiwiZm9udCIsImxpc3RlbmVyIiwiZHVyYXRpb24iLCJ2YWx1ZSIsInRhcmdldE9wdGlvbnMiLCJlYXNpbmciLCJ0cmFuc2l0aW9uQnV0dG9uUm93cyIsIl8iLCJjaHVuayIsImNoaWxkcmVuIiwic3BhY2luZyIsImFkZENoaWxkIiwiY2VudGVyIiwicmVzZXRBbGxCdXR0b24iLCJyZXNldCIsInJpZ2h0IiwibWF4WCIsIm1heFkiLCJzdGVwIiwiZHQiLCJyYW5kb21Db2xvciIsIm5leHRJbnQiLCJyYW5kb21TdHJpbmciLCJyYW5nZSIsIlN0cmluZyIsImZyb21DaGFyQ29kZSIsIm5leHRJbnRCZXR3ZWVuIiwiam9pbiIsImZpbGwiLCJwcm9wZXJ0eSIsImxhYmVsIiwibWFqb3JUaWNrcyIsIm9wdGlvbnMiLCJsYWJlbE5vZGUiLCJzbGlkZXIiLCJ0cmFja1NpemUiLCJmb3JFYWNoIiwidGljayIsImFkZE1ham9yVGljayIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiVHJhbnNpdGlvbnNTY3JlZW5WaWV3LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIERlbW9zIGhvdyBUcmFuc2l0aW9uTm9kZSB3b3Jrc1xyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4uLy4uLy4uL2F4b24vanMvUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBEaW1lbnNpb24yIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9EaW1lbnNpb24yLmpzJztcclxuaW1wb3J0IGRvdFJhbmRvbSBmcm9tICcuLi8uLi8uLi9kb3QvanMvZG90UmFuZG9tLmpzJztcclxuaW1wb3J0IFJhbmdlIGZyb20gJy4uLy4uLy4uL2RvdC9qcy9SYW5nZS5qcyc7XHJcbmltcG9ydCBTY3JlZW5WaWV3IGZyb20gJy4uLy4uLy4uL2pvaXN0L2pzL1NjcmVlblZpZXcuanMnO1xyXG5pbXBvcnQgbWVyZ2UgZnJvbSAnLi4vLi4vLi4vcGhldC1jb3JlL2pzL21lcmdlLmpzJztcclxuaW1wb3J0IFJlc2V0QWxsQnV0dG9uIGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9idXR0b25zL1Jlc2V0QWxsQnV0dG9uLmpzJztcclxuaW1wb3J0IFBoZXRGb250IGZyb20gJy4uLy4uLy4uL3NjZW5lcnktcGhldC9qcy9QaGV0Rm9udC5qcyc7XHJcbmltcG9ydCB7IENvbG9yLCBIQm94LCBOb2RlLCBOb2RlVHJhbnNsYXRpb25PcHRpb25zLCBSZWN0YW5nbGUsIFRleHQsIFZCb3ggfSBmcm9tICcuLi8uLi8uLi9zY2VuZXJ5L2pzL2ltcG9ydHMuanMnO1xyXG5pbXBvcnQgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uIGZyb20gJy4uLy4uLy4uL3N1bi9qcy9idXR0b25zL1JlY3Rhbmd1bGFyUHVzaEJ1dHRvbi5qcyc7XHJcbmltcG9ydCBIU2xpZGVyIGZyb20gJy4uLy4uLy4uL3N1bi9qcy9IU2xpZGVyLmpzJztcclxuaW1wb3J0IEVhc2luZyBmcm9tICcuLi9FYXNpbmcuanMnO1xyXG5pbXBvcnQgVHJhbnNpdGlvbk5vZGUgZnJvbSAnLi4vVHJhbnNpdGlvbk5vZGUuanMnO1xyXG5pbXBvcnQgdHdpeHQgZnJvbSAnLi4vdHdpeHQuanMnO1xyXG5pbXBvcnQgRWFzaW5nQ29tYm9Cb3ggZnJvbSAnLi9FYXNpbmdDb21ib0JveC5qcyc7XHJcbmltcG9ydCBUYW5kZW0gZnJvbSAnLi4vLi4vLi4vdGFuZGVtL2pzL1RhbmRlbS5qcyc7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBUcmFuc2l0aW9uc1NjcmVlblZpZXcgZXh0ZW5kcyBTY3JlZW5WaWV3IHtcclxuXHJcbiAgcHJpdmF0ZSByZWFkb25seSB0cmFuc2l0aW9uTm9kZTogVHJhbnNpdGlvbk5vZGU7XHJcblxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvcigpIHtcclxuXHJcbiAgICBzdXBlcigge1xyXG4gICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgYm91bmRzID0gbmV3IEJvdW5kczIoIDAsIDAsIDMyMCwgMjQwICk7XHJcblxyXG4gICAgY29uc3QgZWFzaW5nUHJvcGVydHkgPSBuZXcgUHJvcGVydHkoIEVhc2luZy5RVUFEUkFUSUNfSU5fT1VUICk7XHJcbiAgICBjb25zdCBkdXJhdGlvblByb3BlcnR5ID0gbmV3IFByb3BlcnR5KCAwLjMgKTtcclxuXHJcbiAgICB0aGlzLnRyYW5zaXRpb25Ob2RlID0gbmV3IFRyYW5zaXRpb25Ob2RlKCBuZXcgUHJvcGVydHkoIGJvdW5kcyApLCB7XHJcbiAgICAgIGNvbnRlbnQ6IGNyZWF0ZVNvbWV0aGluZyggYm91bmRzIClcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsaXN0UGFyZW50ID0gbmV3IE5vZGUoKTtcclxuXHJcbiAgICBjb25zdCBjb21ib0JveCA9IG5ldyBFYXNpbmdDb21ib0JveCggZWFzaW5nUHJvcGVydHksIGxpc3RQYXJlbnQsIHtcclxuICAgICAgY2VudGVyWDogdGhpcy5sYXlvdXRCb3VuZHMuY2VudGVyWCxcclxuICAgICAgYm90dG9tOiB0aGlzLnRyYW5zaXRpb25Ob2RlLnRvcCAtIDEwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgY29uc3QgZHVyYXRpb25TbGlkZXIgPSBjcmVhdGVTbGlkZXJHcm91cCggZHVyYXRpb25Qcm9wZXJ0eSwgbmV3IFJhbmdlKCAwLjEsIDIgKSwgJ0R1cmF0aW9uJywgWyAwLjEsIDAuNSwgMSwgMiBdLCB7XHJcbiAgICAgIGxlZnQ6IDEwLFxyXG4gICAgICB0b3A6IDEwXHJcbiAgICB9ICk7XHJcblxyXG4gICAgLy8gRnVuY3Rpb24gb2YgVHJhbnNpdGlvbk5vZGUgdGhhdCB3ZSB3YW50IHRvIGRlbW9uc3RyYXRlXHJcbiAgICBjb25zdCB0cmFuc2l0aW9uRnVuY3Rpb25zID0gW1xyXG4gICAgICB0aGlzLnRyYW5zaXRpb25Ob2RlLnNsaWRlTGVmdFRvLmJpbmQoIHRoaXMudHJhbnNpdGlvbk5vZGUgKSxcclxuICAgICAgdGhpcy50cmFuc2l0aW9uTm9kZS5zbGlkZVJpZ2h0VG8uYmluZCggdGhpcy50cmFuc2l0aW9uTm9kZSApLFxyXG4gICAgICB0aGlzLnRyYW5zaXRpb25Ob2RlLnNsaWRlVXBUby5iaW5kKCB0aGlzLnRyYW5zaXRpb25Ob2RlICksXHJcbiAgICAgIHRoaXMudHJhbnNpdGlvbk5vZGUuc2xpZGVEb3duVG8uYmluZCggdGhpcy50cmFuc2l0aW9uTm9kZSApLFxyXG4gICAgICB0aGlzLnRyYW5zaXRpb25Ob2RlLndpcGVMZWZ0VG8uYmluZCggdGhpcy50cmFuc2l0aW9uTm9kZSApLFxyXG4gICAgICB0aGlzLnRyYW5zaXRpb25Ob2RlLndpcGVSaWdodFRvLmJpbmQoIHRoaXMudHJhbnNpdGlvbk5vZGUgKSxcclxuICAgICAgdGhpcy50cmFuc2l0aW9uTm9kZS53aXBlVXBUby5iaW5kKCB0aGlzLnRyYW5zaXRpb25Ob2RlICksXHJcbiAgICAgIHRoaXMudHJhbnNpdGlvbk5vZGUud2lwZURvd25Uby5iaW5kKCB0aGlzLnRyYW5zaXRpb25Ob2RlICksXHJcbiAgICAgIHRoaXMudHJhbnNpdGlvbk5vZGUuZGlzc29sdmVUby5iaW5kKCB0aGlzLnRyYW5zaXRpb25Ob2RlIClcclxuICAgIF07XHJcblxyXG4gICAgLy8gQ3JlYXRlIGEgYnV0dG9uIHRvIGRlbW9uc3RyYXRlIGVhY2ggdHJhbnNpdGlvbiBmdW5jdGlvbi5cclxuICAgIGNvbnN0IHRyYW5zaXRpb25CdXR0b25zID0gdHJhbnNpdGlvbkZ1bmN0aW9ucy5tYXAoIHRyYW5zaXRpb25GdW5jdGlvbiA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgUmVjdGFuZ3VsYXJQdXNoQnV0dG9uKCB7XHJcbiAgICAgICAgY29udGVudDogbmV3IFRleHQoIHRyYW5zaXRpb25GdW5jdGlvbi5uYW1lLCB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSB9ICksXHJcbiAgICAgICAgbGlzdGVuZXI6ICgpID0+IHRyYW5zaXRpb25GdW5jdGlvbiggY3JlYXRlU29tZXRoaW5nKCBib3VuZHMgKSwge1xyXG4gICAgICAgICAgZHVyYXRpb246IGR1cmF0aW9uUHJvcGVydHkudmFsdWUsXHJcbiAgICAgICAgICB0YXJnZXRPcHRpb25zOiB7XHJcbiAgICAgICAgICAgIGVhc2luZzogZWFzaW5nUHJvcGVydHkudmFsdWVcclxuICAgICAgICAgIH1cclxuICAgICAgICB9IClcclxuICAgICAgfSApO1xyXG4gICAgfSApO1xyXG5cclxuICAgIC8vIENyZWF0ZSByb3dzIG9mIGJ1dHRvbnMuXHJcbiAgICBjb25zdCB0cmFuc2l0aW9uQnV0dG9uUm93cyA9IF8uY2h1bmsoIHRyYW5zaXRpb25CdXR0b25zLCA0ICkubWFwKCBjaGlsZHJlbiA9PiB7XHJcbiAgICAgIHJldHVybiBuZXcgSEJveCgge1xyXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlbixcclxuICAgICAgICBzcGFjaW5nOiAxMFxyXG4gICAgICB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgdGhpcy5hZGRDaGlsZCggbmV3IFZCb3goIHtcclxuICAgICAgY2hpbGRyZW46IFsgZHVyYXRpb25TbGlkZXIsIGNvbWJvQm94LCB0aGlzLnRyYW5zaXRpb25Ob2RlLCAuLi50cmFuc2l0aW9uQnV0dG9uUm93cyBdLFxyXG4gICAgICBzcGFjaW5nOiAxMCxcclxuICAgICAgY2VudGVyOiB0aGlzLmxheW91dEJvdW5kcy5jZW50ZXJcclxuICAgIH0gKSApO1xyXG5cclxuICAgIC8vIFJlc2V0IEFsbCBidXR0b25cclxuICAgIGNvbnN0IHJlc2V0QWxsQnV0dG9uID0gbmV3IFJlc2V0QWxsQnV0dG9uKCB7XHJcbiAgICAgIGxpc3RlbmVyOiAoKSA9PiB7XHJcbiAgICAgICAgZHVyYXRpb25Qcm9wZXJ0eS5yZXNldCgpO1xyXG4gICAgICAgIGVhc2luZ1Byb3BlcnR5LnJlc2V0KCk7XHJcbiAgICAgIH0sXHJcbiAgICAgIHJpZ2h0OiB0aGlzLmxheW91dEJvdW5kcy5tYXhYIC0gMTAsXHJcbiAgICAgIGJvdHRvbTogdGhpcy5sYXlvdXRCb3VuZHMubWF4WSAtIDEwXHJcbiAgICB9ICk7XHJcbiAgICB0aGlzLmFkZENoaWxkKCByZXNldEFsbEJ1dHRvbiApO1xyXG5cclxuICAgIHRoaXMuYWRkQ2hpbGQoIGxpc3RQYXJlbnQgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBvdmVycmlkZSBzdGVwKCBkdDogbnVtYmVyICk6IHZvaWQge1xyXG4gICAgdGhpcy50cmFuc2l0aW9uTm9kZS5zdGVwKCBkdCApO1xyXG4gIH1cclxufVxyXG5cclxuZnVuY3Rpb24gY3JlYXRlU29tZXRoaW5nKCBib3VuZHM6IEJvdW5kczIgKTogTm9kZSB7XHJcblxyXG4gIGZ1bmN0aW9uIHJhbmRvbUNvbG9yKCk6IENvbG9yIHtcclxuICAgIHJldHVybiBuZXcgQ29sb3IoIGRvdFJhbmRvbS5uZXh0SW50KCAyNTYgKSwgZG90UmFuZG9tLm5leHRJbnQoIDI1NiApLCBkb3RSYW5kb20ubmV4dEludCggMjU2ICkgKTtcclxuICB9XHJcblxyXG4gIGZ1bmN0aW9uIHJhbmRvbVN0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIF8ucmFuZ2UoIDAsIDcgKVxyXG4gICAgICAubWFwKCAoKSA9PiBTdHJpbmcuZnJvbUNoYXJDb2RlKCBkb3RSYW5kb20ubmV4dEludEJldHdlZW4oIDY1LCAxMjIgKSApIClcclxuICAgICAgLmpvaW4oICcnICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gUmVjdGFuZ2xlLmJvdW5kcyggYm91bmRzLCB7XHJcbiAgICBmaWxsOiByYW5kb21Db2xvcigpLFxyXG4gICAgY2hpbGRyZW46IFtcclxuICAgICAgbmV3IFRleHQoIHJhbmRvbVN0cmluZygpLCB7XHJcbiAgICAgICAgZm9udDogbmV3IFBoZXRGb250KCA2MCApLFxyXG4gICAgICAgIGNlbnRlcjogYm91bmRzLmNlbnRlclxyXG4gICAgICB9IClcclxuICAgIF1cclxuICB9ICk7XHJcbn1cclxuXHJcbmZ1bmN0aW9uIGNyZWF0ZVNsaWRlckdyb3VwKCBwcm9wZXJ0eTogUHJvcGVydHk8bnVtYmVyPiwgcmFuZ2U6IFJhbmdlLCBsYWJlbDogc3RyaW5nLCBtYWpvclRpY2tzOiBudW1iZXJbXSwgb3B0aW9ucz86IE5vZGVUcmFuc2xhdGlvbk9wdGlvbnMgKTogTm9kZSB7XHJcbiAgY29uc3QgbGFiZWxOb2RlID0gbmV3IFRleHQoIGxhYmVsLCB7IGZvbnQ6IG5ldyBQaGV0Rm9udCggMjAgKSB9ICk7XHJcbiAgY29uc3Qgc2xpZGVyID0gbmV3IEhTbGlkZXIoIHByb3BlcnR5LCByYW5nZSwge1xyXG4gICAgdHJhY2tTaXplOiBuZXcgRGltZW5zaW9uMiggMzAwLCA1IClcclxuICB9ICk7XHJcbiAgbWFqb3JUaWNrcy5mb3JFYWNoKFxyXG4gICAgdGljayA9PiBzbGlkZXIuYWRkTWFqb3JUaWNrKCB0aWNrLCBuZXcgVGV4dCggdGljaywgeyBmb250OiBuZXcgUGhldEZvbnQoIDIwICkgfSApIClcclxuICApO1xyXG4gIHJldHVybiBuZXcgVkJveCggbWVyZ2UoIHtcclxuICAgIGNoaWxkcmVuOiBbIGxhYmVsTm9kZSwgc2xpZGVyIF0sXHJcbiAgICBzcGFjaW5nOiAxMFxyXG4gIH0sIG9wdGlvbnMgKSApO1xyXG59XHJcblxyXG50d2l4dC5yZWdpc3RlciggJ1RyYW5zaXRpb25zU2NyZWVuVmlldycsIFRyYW5zaXRpb25zU2NyZWVuVmlldyApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sOEJBQThCO0FBQ25ELE9BQU9DLE9BQU8sTUFBTSw0QkFBNEI7QUFDaEQsT0FBT0MsVUFBVSxNQUFNLCtCQUErQjtBQUN0RCxPQUFPQyxTQUFTLE1BQU0sOEJBQThCO0FBQ3BELE9BQU9DLEtBQUssTUFBTSwwQkFBMEI7QUFDNUMsT0FBT0MsVUFBVSxNQUFNLGlDQUFpQztBQUN4RCxPQUFPQyxLQUFLLE1BQU0sZ0NBQWdDO0FBQ2xELE9BQU9DLGNBQWMsTUFBTSxvREFBb0Q7QUFDL0UsT0FBT0MsUUFBUSxNQUFNLHNDQUFzQztBQUMzRCxTQUFTQyxLQUFLLEVBQUVDLElBQUksRUFBRUMsSUFB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