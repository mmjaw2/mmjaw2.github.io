// Copyright 2017-2023, University of Colorado Boulder

/**
 * Main file for the Twixt demo.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import Property from '../../axon/js/Property.js';
import Screen from '../../joist/js/Screen.js';
import Sim from '../../joist/js/Sim.js';
import simLauncher from '../../joist/js/simLauncher.js';
import AnimationScreenView from './demo/AnimationScreenView.js';
import DampedMotionScreenView from './demo/DampedMotionScreenView.js';
import TransitionsScreenView from './demo/TransitionsScreenView.js';
import TwixtStrings from './TwixtStrings.js';
import Tandem from '../../tandem/js/Tandem.js';
class EmptyModel {
  reset() {
    // do nothing
  }
}
simLauncher.launch(() => {
  const screens = [new Screen(() => new EmptyModel(), model => new AnimationScreenView(), {
    name: TwixtStrings.screen.animationStringProperty,
    backgroundColorProperty: new Property('white'),
    tandem: Tandem.OPT_OUT
  }), new Screen(() => new EmptyModel(), model => new DampedMotionScreenView(), {
    name: TwixtStrings.screen.dampedMotionStringProperty,
    backgroundColorProperty: new Property('white'),
    tandem: Tandem.OPT_OUT
  }), new Screen(() => new EmptyModel(), model => new TransitionsScreenView(), {
    name: TwixtStrings.screen.transitionsStringProperty,
    backgroundColorProperty: new Property('white'),
    tandem: Tandem.OPT_OUT
  })];
  const simOptions = {
    credits: {
      leadDesign: 'PhET'
    }
  };
  new Sim(TwixtStrings.twixt.titleStringProperty, screens, simOptions).start();
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJQcm9wZXJ0eSIsIlNjcmVlbiIsIlNpbSIsInNpbUxhdW5jaGVyIiwiQW5pbWF0aW9uU2NyZWVuVmlldyIsIkRhbXBlZE1vdGlvblNjcmVlblZpZXciLCJUcmFuc2l0aW9uc1NjcmVlblZpZXciLCJUd2l4dFN0cmluZ3MiLCJUYW5kZW0iLCJFbXB0eU1vZGVsIiwicmVzZXQiLCJsYXVuY2giLCJzY3JlZW5zIiwibW9kZWwiLCJuYW1lIiwic2NyZWVuIiwiYW5pbWF0aW9uU3RyaW5nUHJvcGVydHkiLCJiYWNrZ3JvdW5kQ29sb3JQcm9wZXJ0eSIsInRhbmRlbSIsIk9QVF9PVVQiLCJkYW1wZWRNb3Rpb25TdHJpbmdQcm9wZXJ0eSIsInRyYW5zaXRpb25zU3RyaW5nUHJvcGVydHkiLCJzaW1PcHRpb25zIiwiY3JlZGl0cyIsImxlYWREZXNpZ24iLCJ0d2l4dCIsInRpdGxlU3RyaW5nUHJvcGVydHkiLCJzdGFydCJdLCJzb3VyY2VzIjpbInR3aXh0LW1haW4udHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTctMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogTWFpbiBmaWxlIGZvciB0aGUgVHdpeHQgZGVtby5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBQcm9wZXJ0eSBmcm9tICcuLi8uLi9heG9uL2pzL1Byb3BlcnR5LmpzJztcclxuaW1wb3J0IFNjcmVlbiBmcm9tICcuLi8uLi9qb2lzdC9qcy9TY3JlZW4uanMnO1xyXG5pbXBvcnQgU2ltLCB7IFNpbU9wdGlvbnMgfSBmcm9tICcuLi8uLi9qb2lzdC9qcy9TaW0uanMnO1xyXG5pbXBvcnQgc2ltTGF1bmNoZXIgZnJvbSAnLi4vLi4vam9pc3QvanMvc2ltTGF1bmNoZXIuanMnO1xyXG5pbXBvcnQgQW5pbWF0aW9uU2NyZWVuVmlldyBmcm9tICcuL2RlbW8vQW5pbWF0aW9uU2NyZWVuVmlldy5qcyc7XHJcbmltcG9ydCBEYW1wZWRNb3Rpb25TY3JlZW5WaWV3IGZyb20gJy4vZGVtby9EYW1wZWRNb3Rpb25TY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IFRyYW5zaXRpb25zU2NyZWVuVmlldyBmcm9tICcuL2RlbW8vVHJhbnNpdGlvbnNTY3JlZW5WaWV3LmpzJztcclxuaW1wb3J0IFR3aXh0U3RyaW5ncyBmcm9tICcuL1R3aXh0U3RyaW5ncy5qcyc7XHJcbmltcG9ydCBUTW9kZWwgZnJvbSAnLi4vLi4vam9pc3QvanMvVE1vZGVsLmpzJztcclxuaW1wb3J0IFRhbmRlbSBmcm9tICcuLi8uLi90YW5kZW0vanMvVGFuZGVtLmpzJztcclxuXHJcbmNsYXNzIEVtcHR5TW9kZWwgaW1wbGVtZW50cyBUTW9kZWwge1xyXG4gIHB1YmxpYyByZXNldCgpOiB2b2lkIHtcclxuICAgIC8vIGRvIG5vdGhpbmdcclxuICB9XHJcbn1cclxuXHJcbnNpbUxhdW5jaGVyLmxhdW5jaCggKCkgPT4ge1xyXG5cclxuICBjb25zdCBzY3JlZW5zID0gW1xyXG4gICAgbmV3IFNjcmVlbjxFbXB0eU1vZGVsLCBBbmltYXRpb25TY3JlZW5WaWV3PihcclxuICAgICAgKCkgPT4gbmV3IEVtcHR5TW9kZWwoKSxcclxuICAgICAgbW9kZWwgPT4gbmV3IEFuaW1hdGlvblNjcmVlblZpZXcoKSxcclxuICAgICAge1xyXG4gICAgICAgIG5hbWU6IFR3aXh0U3RyaW5ncy5zY3JlZW4uYW5pbWF0aW9uU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggJ3doaXRlJyApLFxyXG4gICAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgICAgfVxyXG4gICAgKSxcclxuICAgIG5ldyBTY3JlZW4oXHJcbiAgICAgICgpID0+IG5ldyBFbXB0eU1vZGVsKCksXHJcbiAgICAgIG1vZGVsID0+IG5ldyBEYW1wZWRNb3Rpb25TY3JlZW5WaWV3KCksXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBUd2l4dFN0cmluZ3Muc2NyZWVuLmRhbXBlZE1vdGlvblN0cmluZ1Byb3BlcnR5LFxyXG4gICAgICAgIGJhY2tncm91bmRDb2xvclByb3BlcnR5OiBuZXcgUHJvcGVydHkoICd3aGl0ZScgKSxcclxuICAgICAgICB0YW5kZW06IFRhbmRlbS5PUFRfT1VUXHJcbiAgICAgIH1cclxuICAgICksXHJcbiAgICBuZXcgU2NyZWVuKFxyXG4gICAgICAoKSA9PiBuZXcgRW1wdHlNb2RlbCgpLFxyXG4gICAgICBtb2RlbCA9PiBuZXcgVHJhbnNpdGlvbnNTY3JlZW5WaWV3KCksXHJcbiAgICAgIHtcclxuICAgICAgICBuYW1lOiBUd2l4dFN0cmluZ3Muc2NyZWVuLnRyYW5zaXRpb25zU3RyaW5nUHJvcGVydHksXHJcbiAgICAgICAgYmFja2dyb3VuZENvbG9yUHJvcGVydHk6IG5ldyBQcm9wZXJ0eSggJ3doaXRlJyApLFxyXG4gICAgICAgIHRhbmRlbTogVGFuZGVtLk9QVF9PVVRcclxuICAgICAgfVxyXG4gICAgKVxyXG4gIF07XHJcblxyXG4gIGNvbnN0IHNpbU9wdGlvbnM6IFNpbU9wdGlvbnMgPSB7XHJcbiAgICBjcmVkaXRzOiB7XHJcbiAgICAgIGxlYWREZXNpZ246ICdQaEVUJ1xyXG4gICAgfVxyXG4gIH07XHJcblxyXG4gIG5ldyBTaW0oIFR3aXh0U3RyaW5ncy50d2l4dC50aXRsZVN0cmluZ1Byb3BlcnR5LCBzY3JlZW5zLCBzaW1PcHRpb25zICkuc3RhcnQoKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxRQUFRLE1BQU0sMkJBQTJCO0FBQ2hELE9BQU9DLE1BQU0sTUFBTSwwQkFBMEI7QUFDN0MsT0FBT0MsR0FBRyxNQUFzQix1QkFBdUI7QUFDdkQsT0FBT0MsV0FBVyxNQUFNLCtCQUErQjtBQUN2RCxPQUFPQyxtQkFBbUIsTUFBTSwrQkFBK0I7QUFDL0QsT0FBT0Msc0JBQXNCLE1BQU0sa0NBQWtDO0FBQ3JFLE9BQU9DLHFCQUFxQixNQUFNLGlDQUFpQztBQUNuRSxPQUFPQyxZQUFZLE1BQU0sbUJBQW1CO0FBRTVDLE9BQU9DLE1BQU0sTUFBTSwyQkFBMkI7QUFFOUMsTUFBTUMsVUFBVSxDQUFtQjtFQUMxQkMsS0FBS0EsQ0FBQSxFQUFTO0lBQ25CO0VBQUE7QUFFSjtBQUVBUCxXQUFXLENBQUNRLE1BQU0sQ0FBRSxNQUFNO0VBRXhCLE1BQU1DLE9BQU8sR0FBRyxDQUNkLElBQUlYLE1BQU0sQ0FDUixNQUFNLElBQUlRLFVBQVUsQ0FBQyxDQUFDLEVBQ3RCSSxLQUFLLElBQUksSUFBSVQsbUJBQW1CLENBQUMsQ0FBQyxFQUNsQztJQUNFVSxJQUFJLEVBQUVQLFlBQVksQ0FBQ1EsTUFBTSxDQUFDQyx1QkFBdUI7SUFDakRDLHVCQUF1QixFQUFFLElBQUlqQixRQUFRLENBQUUsT0FBUSxDQUFDO0lBQ2hEa0IsTUFBTSxFQUFFVixNQUFNLENBQUNXO0VBQ2pCLENBQ0YsQ0FBQyxFQUNELElBQUlsQixNQUFNLENBQ1IsTUFBTSxJQUFJUSxVQUFVLENBQUMsQ0FBQyxFQUN0QkksS0FBSyxJQUFJLElBQUlSLHNCQUFzQixDQUFDLENBQUMsRUFDckM7SUFDRVMsSUFBSSxFQUFFUCxZQUFZLENBQUNRLE1BQU0sQ0FBQ0ssMEJBQTBCO0lBQ3BESCx1QkFBdUIsRUFBRSxJQUFJakIsUUFBUSxDQUFFLE9BQVEsQ0FBQztJQUNoRGtCLE1BQU0sRUFBRVYsTUFBTSxDQUFDVztFQUNqQixDQUNGLENBQUMsRUFDRCxJQUFJbEIsTUFBTSxDQUNSLE1BQU0sSUFBSVEsVUFBVSxDQUFDLENBQUMsRUFDdEJJLEtBQUssSUFBSSxJQUFJUCxxQkFBcUIsQ0FBQyxDQUFDLEVBQ3BDO0lBQ0VRLElBQUksRUFBRVAsWUFBWSxDQUFDUSxNQUFNLENBQUNNLHlCQUF5QjtJQUNuREosdUJBQXVCLEVBQUUsSUFBSWpCLFFBQVEsQ0FBRSxPQUFRLENBQUM7SUFDaERrQixNQUFNLEVBQUVWLE1BQU0sQ0FBQ1c7RUFDakIsQ0FDRixDQUFDLENBQ0Y7RUFFRCxNQUFNRyxVQUFzQixHQUFHO0lBQzdCQyxPQUFPLEVBQUU7TUFDUEMsVUFBVSxFQUFFO0lBQ2Q7RUFDRixDQUFDO0VBRUQsSUFBSXRCLEdBQUcsQ0FBRUssWUFBWSxDQUFDa0IsS0FBSyxDQUFDQyxtQkFBbUIsRUFBRWQsT0FBTyxFQUFFVSxVQUFXLENBQUMsQ0FBQ0ssS0FBSyxDQUFDLENBQUM7QUFDaEYsQ0FBRSxDQUFDIiwiaWdub3JlTGlzdCI6W119