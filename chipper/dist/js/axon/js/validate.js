// Copyright 2019-2024, University of Colorado Boulder

/**
 * Throws an assertion error if assertions are enabled and the value is invalid, otherwise returns the value.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import axon from './axon.js';
import Validation from './Validation.js';

/**
 * If assertions are enabled, assert out if the value does not adhere to the validator. No-op without assertions.
 * @deprecated - this solution is worse than a direct assertion (or otherwise call Validation.getValidationError directly)
 */
const validate = (value, validator, providedOptions) => {
  if (assert) {
    // Throws an error if not valid
    const result = Validation.getValidationError(value, validator, providedOptions);
    if (result) {
      // Just pick the helpful keys to print for the assertion message, so stub out the type of this
      const validatorKeys = _.pick(validator, Validation.VALIDATOR_KEYS);
      if (validatorKeys.phetioType) {
        validatorKeys.phetioType = _.pick(validator.phetioType, ['validator', 'typeName']);
      }
      const prunedValidator = JSON.stringify(validatorKeys, null, 2);
      assert && assert(false, 'validation failed for value:', value, result, 'prunedValidator:', prunedValidator);
    }
  }
};
axon.register('validate', validate);
export default validate;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiVmFsaWRhdGlvbiIsInZhbGlkYXRlIiwidmFsdWUiLCJ2YWxpZGF0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJhc3NlcnQiLCJyZXN1bHQiLCJnZXRWYWxpZGF0aW9uRXJyb3IiLCJ2YWxpZGF0b3JLZXlzIiwiXyIsInBpY2siLCJWQUxJREFUT1JfS0VZUyIsInBoZXRpb1R5cGUiLCJwcnVuZWRWYWxpZGF0b3IiLCJKU09OIiwic3RyaW5naWZ5IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJ2YWxpZGF0ZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOS0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUaHJvd3MgYW4gYXNzZXJ0aW9uIGVycm9yIGlmIGFzc2VydGlvbnMgYXJlIGVuYWJsZWQgYW5kIHRoZSB2YWx1ZSBpcyBpbnZhbGlkLCBvdGhlcndpc2UgcmV0dXJucyB0aGUgdmFsdWUuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xyXG5pbXBvcnQgSW50ZW50aW9uYWxBbnkgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL0ludGVudGlvbmFsQW55LmpzJztcclxuaW1wb3J0IFZhbGlkYXRpb24sIHsgSXNWYWxpZFZhbHVlT3B0aW9ucywgVmFsaWRhdG9yIH0gZnJvbSAnLi9WYWxpZGF0aW9uLmpzJztcclxuXHJcbi8qKlxyXG4gKiBJZiBhc3NlcnRpb25zIGFyZSBlbmFibGVkLCBhc3NlcnQgb3V0IGlmIHRoZSB2YWx1ZSBkb2VzIG5vdCBhZGhlcmUgdG8gdGhlIHZhbGlkYXRvci4gTm8tb3Agd2l0aG91dCBhc3NlcnRpb25zLlxyXG4gKiBAZGVwcmVjYXRlZCAtIHRoaXMgc29sdXRpb24gaXMgd29yc2UgdGhhbiBhIGRpcmVjdCBhc3NlcnRpb24gKG9yIG90aGVyd2lzZSBjYWxsIFZhbGlkYXRpb24uZ2V0VmFsaWRhdGlvbkVycm9yIGRpcmVjdGx5KVxyXG4gKi9cclxuY29uc3QgdmFsaWRhdGUgPSA8VD4oIHZhbHVlOiBJbnRlbnRpb25hbEFueSwgdmFsaWRhdG9yOiBWYWxpZGF0b3I8VD4sIHByb3ZpZGVkT3B0aW9ucz86IElzVmFsaWRWYWx1ZU9wdGlvbnMgKTogdm9pZCA9PiB7XHJcblxyXG4gIGlmICggYXNzZXJ0ICkge1xyXG5cclxuICAgIC8vIFRocm93cyBhbiBlcnJvciBpZiBub3QgdmFsaWRcclxuICAgIGNvbnN0IHJlc3VsdCA9IFZhbGlkYXRpb24uZ2V0VmFsaWRhdGlvbkVycm9yKCB2YWx1ZSwgdmFsaWRhdG9yLCBwcm92aWRlZE9wdGlvbnMgKTtcclxuICAgIGlmICggcmVzdWx0ICkge1xyXG5cclxuICAgICAgLy8gSnVzdCBwaWNrIHRoZSBoZWxwZnVsIGtleXMgdG8gcHJpbnQgZm9yIHRoZSBhc3NlcnRpb24gbWVzc2FnZSwgc28gc3R1YiBvdXQgdGhlIHR5cGUgb2YgdGhpc1xyXG4gICAgICBjb25zdCB2YWxpZGF0b3JLZXlzOiBJbnRlbnRpb25hbEFueSA9IF8ucGljayggdmFsaWRhdG9yLCBWYWxpZGF0aW9uLlZBTElEQVRPUl9LRVlTICk7XHJcbiAgICAgIGlmICggdmFsaWRhdG9yS2V5cy5waGV0aW9UeXBlICkge1xyXG4gICAgICAgIHZhbGlkYXRvcktleXMucGhldGlvVHlwZSA9IF8ucGljayggdmFsaWRhdG9yLnBoZXRpb1R5cGUsIFsgJ3ZhbGlkYXRvcicsICd0eXBlTmFtZScgXSApO1xyXG4gICAgICB9XHJcbiAgICAgIGNvbnN0IHBydW5lZFZhbGlkYXRvciA9IEpTT04uc3RyaW5naWZ5KCB2YWxpZGF0b3JLZXlzLCBudWxsLCAyICk7XHJcbiAgICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAndmFsaWRhdGlvbiBmYWlsZWQgZm9yIHZhbHVlOicsIHZhbHVlLCByZXN1bHQsICdwcnVuZWRWYWxpZGF0b3I6JywgcHJ1bmVkVmFsaWRhdG9yICk7XHJcbiAgICB9XHJcbiAgfVxyXG59O1xyXG5cclxuXHJcbmF4b24ucmVnaXN0ZXIoICd2YWxpZGF0ZScsIHZhbGlkYXRlICk7XHJcbmV4cG9ydCBkZWZhdWx0IHZhbGlkYXRlOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLElBQUksTUFBTSxXQUFXO0FBRTVCLE9BQU9DLFVBQVUsTUFBMEMsaUJBQWlCOztBQUU1RTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1DLFFBQVEsR0FBR0EsQ0FBS0MsS0FBcUIsRUFBRUMsU0FBdUIsRUFBRUMsZUFBcUMsS0FBWTtFQUVySCxJQUFLQyxNQUFNLEVBQUc7SUFFWjtJQUNBLE1BQU1DLE1BQU0sR0FBR04sVUFBVSxDQUFDTyxrQkFBa0IsQ0FBRUwsS0FBSyxFQUFFQyxTQUFTLEVBQUVDLGVBQWdCLENBQUM7SUFDakYsSUFBS0UsTUFBTSxFQUFHO01BRVo7TUFDQSxNQUFNRSxhQUE2QixHQUFHQyxDQUFDLENBQUNDLElBQUksQ0FBRVAsU0FBUyxFQUFFSCxVQUFVLENBQUNXLGNBQWUsQ0FBQztNQUNwRixJQUFLSCxhQUFhLENBQUNJLFVBQVUsRUFBRztRQUM5QkosYUFBYSxDQUFDSSxVQUFVLEdBQUdILENBQUMsQ0FBQ0MsSUFBSSxDQUFFUCxTQUFTLENBQUNTLFVBQVUsRUFBRSxDQUFFLFdBQVcsRUFBRSxVQUFVLENBQUcsQ0FBQztNQUN4RjtNQUNBLE1BQU1DLGVBQWUsR0FBR0MsSUFBSSxDQUFDQyxTQUFTLENBQUVQLGFBQWEsRUFBRSxJQUFJLEVBQUUsQ0FBRSxDQUFDO01BQ2hFSCxNQUFNLElBQUlBLE1BQU0sQ0FBRSxLQUFLLEVBQUUsOEJBQThCLEVBQUVILEtBQUssRUFBRUksTUFBTSxFQUFFLGtCQUFrQixFQUFFTyxlQUFnQixDQUFDO0lBQy9HO0VBQ0Y7QUFDRixDQUFDO0FBR0RkLElBQUksQ0FBQ2lCLFFBQVEsQ0FBRSxVQUFVLEVBQUVmLFFBQVMsQ0FBQztBQUNyQyxlQUFlQSxRQUFRIiwiaWdub3JlTGlzdCI6W119