// Copyright 2022-2024, University of Colorado Boulder

/**
 * A base class to help with managing disposal. Creates a disposeEmitter that will be fired when disposing. This occurs
 * AFTER all prototype dispose() methods have been called up the hierarchy, so be aware of potential disposal order
 * issues if using disposeEmitter and dispose() logic together.
 *
 * This class also includes a public flag set to true when disposed.
 *
 * You can also opt into asserting out when disposing, preventing disposal on your class, see Disposable.isDisposable
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import axon from './axon.js';
import TinyEmitter from './TinyEmitter.js';

// Used in subclasses to support mutate.

class Disposable {
  // Called after all code that is directly in `dispose()` methods. Be careful with mixing this pattern and the
  // `this.disposeMyClass()` pattern.
  _disposeEmitter = new TinyEmitter();

  // Keep track if this instance supports disposing. If set to false, then an assertion will fire if trying to dispose
  // this instance.
  _isDisposable = true;

  // Marked true when this Disposable has had dispose() called on it (after disposeEmitter is fired)
  _isDisposed = false;

  // Most time, Disposable should only be used by subtypes, only instantiate it if you run into multiple inheritance issues.
  constructor(providedOptions) {
    providedOptions && this.initializeDisposable(providedOptions);
    if (assert) {
      // Wrap the prototype dispose method with a check. NOTE: We will not catch devious cases where the dispose() is
      // overridden after the Node constructor (which may happen).
      const protoDispose = this.dispose;
      this.dispose = () => {
        assert && assert(!this._isDisposed, 'This Disposable has already been disposed, and cannot be disposed again');
        protoDispose.call(this);
        assert && assert(this._isDisposed, 'Disposable.dispose() call is missing from an overridden dispose method');
      };
    }
  }
  getDisposeEmitter() {
    return this._disposeEmitter;
  }
  get disposeEmitter() {
    return this.getDisposeEmitter();
  }
  get isDisposed() {
    return this._isDisposed;
  }
  get isDisposable() {
    return this._isDisposable;
  }
  set isDisposable(isDisposable) {
    this._isDisposable = isDisposable;
  }
  initializeDisposable(options) {
    if (options && options.hasOwnProperty('isDisposable')) {
      this._isDisposable = options.isDisposable;
    }
  }
  dispose() {
    assert && !this._isDisposable && Disposable.assertNotDisposable();
    assert && assert(!this._isDisposed, 'Disposable can only be disposed once');
    this._disposeEmitter.emit();
    this._disposeEmitter.dispose();
    this._isDisposed = true;
  }
  static assertNotDisposable() {
    // eslint-disable-next-line bad-sim-text
    assert && assert(false, 'dispose is not supported, exists for the lifetime of the sim');
  }
}
axon.register('Disposable', Disposable);
export default Disposable;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiVGlueUVtaXR0ZXIiLCJEaXNwb3NhYmxlIiwiX2Rpc3Bvc2VFbWl0dGVyIiwiX2lzRGlzcG9zYWJsZSIsIl9pc0Rpc3Bvc2VkIiwiY29uc3RydWN0b3IiLCJwcm92aWRlZE9wdGlvbnMiLCJpbml0aWFsaXplRGlzcG9zYWJsZSIsImFzc2VydCIsInByb3RvRGlzcG9zZSIsImRpc3Bvc2UiLCJjYWxsIiwiZ2V0RGlzcG9zZUVtaXR0ZXIiLCJkaXNwb3NlRW1pdHRlciIsImlzRGlzcG9zZWQiLCJpc0Rpc3Bvc2FibGUiLCJvcHRpb25zIiwiaGFzT3duUHJvcGVydHkiLCJhc3NlcnROb3REaXNwb3NhYmxlIiwiZW1pdCIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRGlzcG9zYWJsZS50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIGJhc2UgY2xhc3MgdG8gaGVscCB3aXRoIG1hbmFnaW5nIGRpc3Bvc2FsLiBDcmVhdGVzIGEgZGlzcG9zZUVtaXR0ZXIgdGhhdCB3aWxsIGJlIGZpcmVkIHdoZW4gZGlzcG9zaW5nLiBUaGlzIG9jY3Vyc1xyXG4gKiBBRlRFUiBhbGwgcHJvdG90eXBlIGRpc3Bvc2UoKSBtZXRob2RzIGhhdmUgYmVlbiBjYWxsZWQgdXAgdGhlIGhpZXJhcmNoeSwgc28gYmUgYXdhcmUgb2YgcG90ZW50aWFsIGRpc3Bvc2FsIG9yZGVyXHJcbiAqIGlzc3VlcyBpZiB1c2luZyBkaXNwb3NlRW1pdHRlciBhbmQgZGlzcG9zZSgpIGxvZ2ljIHRvZ2V0aGVyLlxyXG4gKlxyXG4gKiBUaGlzIGNsYXNzIGFsc28gaW5jbHVkZXMgYSBwdWJsaWMgZmxhZyBzZXQgdG8gdHJ1ZSB3aGVuIGRpc3Bvc2VkLlxyXG4gKlxyXG4gKiBZb3UgY2FuIGFsc28gb3B0IGludG8gYXNzZXJ0aW5nIG91dCB3aGVuIGRpc3Bvc2luZywgcHJldmVudGluZyBkaXNwb3NhbCBvbiB5b3VyIGNsYXNzLCBzZWUgRGlzcG9zYWJsZS5pc0Rpc3Bvc2FibGVcclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBheG9uIGZyb20gJy4vYXhvbi5qcyc7XHJcbmltcG9ydCBURW1pdHRlciwgeyBUUmVhZE9ubHlFbWl0dGVyIH0gZnJvbSAnLi9URW1pdHRlci5qcyc7XHJcbmltcG9ydCBUaW55RW1pdHRlciBmcm9tICcuL1RpbnlFbWl0dGVyLmpzJztcclxuXHJcbi8vIFVzZWQgaW4gc3ViY2xhc3NlcyB0byBzdXBwb3J0IG11dGF0ZS5cclxuZXhwb3J0IHR5cGUgRGlzcG9zYWJsZU9wdGlvbnMgPSB7XHJcbiAgaXNEaXNwb3NhYmxlPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmNsYXNzIERpc3Bvc2FibGUge1xyXG5cclxuICAvLyBDYWxsZWQgYWZ0ZXIgYWxsIGNvZGUgdGhhdCBpcyBkaXJlY3RseSBpbiBgZGlzcG9zZSgpYCBtZXRob2RzLiBCZSBjYXJlZnVsIHdpdGggbWl4aW5nIHRoaXMgcGF0dGVybiBhbmQgdGhlXHJcbiAgLy8gYHRoaXMuZGlzcG9zZU15Q2xhc3MoKWAgcGF0dGVybi5cclxuICBwcml2YXRlIHJlYWRvbmx5IF9kaXNwb3NlRW1pdHRlcjogVEVtaXR0ZXIgPSBuZXcgVGlueUVtaXR0ZXIoKTtcclxuXHJcbiAgLy8gS2VlcCB0cmFjayBpZiB0aGlzIGluc3RhbmNlIHN1cHBvcnRzIGRpc3Bvc2luZy4gSWYgc2V0IHRvIGZhbHNlLCB0aGVuIGFuIGFzc2VydGlvbiB3aWxsIGZpcmUgaWYgdHJ5aW5nIHRvIGRpc3Bvc2VcclxuICAvLyB0aGlzIGluc3RhbmNlLlxyXG4gIHByaXZhdGUgX2lzRGlzcG9zYWJsZSA9IHRydWU7XHJcblxyXG4gIC8vIE1hcmtlZCB0cnVlIHdoZW4gdGhpcyBEaXNwb3NhYmxlIGhhcyBoYWQgZGlzcG9zZSgpIGNhbGxlZCBvbiBpdCAoYWZ0ZXIgZGlzcG9zZUVtaXR0ZXIgaXMgZmlyZWQpXHJcbiAgcHJpdmF0ZSBfaXNEaXNwb3NlZCA9IGZhbHNlO1xyXG5cclxuICAvLyBNb3N0IHRpbWUsIERpc3Bvc2FibGUgc2hvdWxkIG9ubHkgYmUgdXNlZCBieSBzdWJ0eXBlcywgb25seSBpbnN0YW50aWF0ZSBpdCBpZiB5b3UgcnVuIGludG8gbXVsdGlwbGUgaW5oZXJpdGFuY2UgaXNzdWVzLlxyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggcHJvdmlkZWRPcHRpb25zPzogRGlzcG9zYWJsZU9wdGlvbnMgKSB7XHJcblxyXG4gICAgcHJvdmlkZWRPcHRpb25zICYmIHRoaXMuaW5pdGlhbGl6ZURpc3Bvc2FibGUoIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIGlmICggYXNzZXJ0ICkge1xyXG5cclxuICAgICAgLy8gV3JhcCB0aGUgcHJvdG90eXBlIGRpc3Bvc2UgbWV0aG9kIHdpdGggYSBjaGVjay4gTk9URTogV2Ugd2lsbCBub3QgY2F0Y2ggZGV2aW91cyBjYXNlcyB3aGVyZSB0aGUgZGlzcG9zZSgpIGlzXHJcbiAgICAgIC8vIG92ZXJyaWRkZW4gYWZ0ZXIgdGhlIE5vZGUgY29uc3RydWN0b3IgKHdoaWNoIG1heSBoYXBwZW4pLlxyXG4gICAgICBjb25zdCBwcm90b0Rpc3Bvc2UgPSB0aGlzLmRpc3Bvc2U7XHJcbiAgICAgIHRoaXMuZGlzcG9zZSA9ICgpID0+IHtcclxuICAgICAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhdGhpcy5faXNEaXNwb3NlZCwgJ1RoaXMgRGlzcG9zYWJsZSBoYXMgYWxyZWFkeSBiZWVuIGRpc3Bvc2VkLCBhbmQgY2Fubm90IGJlIGRpc3Bvc2VkIGFnYWluJyApO1xyXG4gICAgICAgIHByb3RvRGlzcG9zZS5jYWxsKCB0aGlzICk7XHJcbiAgICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5faXNEaXNwb3NlZCwgJ0Rpc3Bvc2FibGUuZGlzcG9zZSgpIGNhbGwgaXMgbWlzc2luZyBmcm9tIGFuIG92ZXJyaWRkZW4gZGlzcG9zZSBtZXRob2QnICk7XHJcbiAgICAgIH07XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0RGlzcG9zZUVtaXR0ZXIoKTogVFJlYWRPbmx5RW1pdHRlciB7XHJcbiAgICByZXR1cm4gdGhpcy5fZGlzcG9zZUVtaXR0ZXI7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGRpc3Bvc2VFbWl0dGVyKCk6IFRSZWFkT25seUVtaXR0ZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZ2V0RGlzcG9zZUVtaXR0ZXIoKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgaXNEaXNwb3NlZCgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB0aGlzLl9pc0Rpc3Bvc2VkO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCBpc0Rpc3Bvc2FibGUoKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5faXNEaXNwb3NhYmxlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHNldCBpc0Rpc3Bvc2FibGUoIGlzRGlzcG9zYWJsZTogYm9vbGVhbiApIHtcclxuICAgIHRoaXMuX2lzRGlzcG9zYWJsZSA9IGlzRGlzcG9zYWJsZTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBpbml0aWFsaXplRGlzcG9zYWJsZSggb3B0aW9ucz86IERpc3Bvc2FibGVPcHRpb25zICk6IHZvaWQge1xyXG4gICAgaWYgKCBvcHRpb25zICYmIG9wdGlvbnMuaGFzT3duUHJvcGVydHkoICdpc0Rpc3Bvc2FibGUnICkgKSB7XHJcbiAgICAgIHRoaXMuX2lzRGlzcG9zYWJsZSA9IG9wdGlvbnMuaXNEaXNwb3NhYmxlITtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHB1YmxpYyBkaXNwb3NlKCk6IHZvaWQge1xyXG4gICAgYXNzZXJ0ICYmICF0aGlzLl9pc0Rpc3Bvc2FibGUgJiYgRGlzcG9zYWJsZS5hc3NlcnROb3REaXNwb3NhYmxlKCk7XHJcbiAgICBhc3NlcnQgJiYgYXNzZXJ0KCAhdGhpcy5faXNEaXNwb3NlZCwgJ0Rpc3Bvc2FibGUgY2FuIG9ubHkgYmUgZGlzcG9zZWQgb25jZScgKTtcclxuICAgIHRoaXMuX2Rpc3Bvc2VFbWl0dGVyLmVtaXQoKTtcclxuICAgIHRoaXMuX2Rpc3Bvc2VFbWl0dGVyLmRpc3Bvc2UoKTtcclxuICAgIHRoaXMuX2lzRGlzcG9zZWQgPSB0cnVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIHN0YXRpYyBhc3NlcnROb3REaXNwb3NhYmxlKCk6IHZvaWQge1xyXG5cclxuICAgIC8vIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBiYWQtc2ltLXRleHRcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIGZhbHNlLCAnZGlzcG9zZSBpcyBub3Qgc3VwcG9ydGVkLCBleGlzdHMgZm9yIHRoZSBsaWZldGltZSBvZiB0aGUgc2ltJyApO1xyXG4gIH1cclxufVxyXG5cclxuYXhvbi5yZWdpc3RlciggJ0Rpc3Bvc2FibGUnLCBEaXNwb3NhYmxlICk7XHJcbmV4cG9ydCBkZWZhdWx0IERpc3Bvc2FibGU7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsSUFBSSxNQUFNLFdBQVc7QUFFNUIsT0FBT0MsV0FBVyxNQUFNLGtCQUFrQjs7QUFFMUM7O0FBS0EsTUFBTUMsVUFBVSxDQUFDO0VBRWY7RUFDQTtFQUNpQkMsZUFBZSxHQUFhLElBQUlGLFdBQVcsQ0FBQyxDQUFDOztFQUU5RDtFQUNBO0VBQ1FHLGFBQWEsR0FBRyxJQUFJOztFQUU1QjtFQUNRQyxXQUFXLEdBQUcsS0FBSzs7RUFFM0I7RUFDT0MsV0FBV0EsQ0FBRUMsZUFBbUMsRUFBRztJQUV4REEsZUFBZSxJQUFJLElBQUksQ0FBQ0Msb0JBQW9CLENBQUVELGVBQWdCLENBQUM7SUFFL0QsSUFBS0UsTUFBTSxFQUFHO01BRVo7TUFDQTtNQUNBLE1BQU1DLFlBQVksR0FBRyxJQUFJLENBQUNDLE9BQU87TUFDakMsSUFBSSxDQUFDQSxPQUFPLEdBQUcsTUFBTTtRQUNuQkYsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQyxJQUFJLENBQUNKLFdBQVcsRUFBRSx5RUFBMEUsQ0FBQztRQUNoSEssWUFBWSxDQUFDRSxJQUFJLENBQUUsSUFBSyxDQUFDO1FBQ3pCSCxNQUFNLElBQUlBLE1BQU0sQ0FBRSxJQUFJLENBQUNKLFdBQVcsRUFBRSx3RUFBeUUsQ0FBQztNQUNoSCxDQUFDO0lBQ0g7RUFDRjtFQUVPUSxpQkFBaUJBLENBQUEsRUFBcUI7SUFDM0MsT0FBTyxJQUFJLENBQUNWLGVBQWU7RUFDN0I7RUFFQSxJQUFXVyxjQUFjQSxDQUFBLEVBQXFCO0lBQzVDLE9BQU8sSUFBSSxDQUFDRCxpQkFBaUIsQ0FBQyxDQUFDO0VBQ2pDO0VBRUEsSUFBV0UsVUFBVUEsQ0FBQSxFQUFZO0lBQy9CLE9BQU8sSUFBSSxDQUFDVixXQUFXO0VBQ3pCO0VBRUEsSUFBV1csWUFBWUEsQ0FBQSxFQUFZO0lBQ2pDLE9BQU8sSUFBSSxDQUFDWixhQUFhO0VBQzNCO0VBRUEsSUFBV1ksWUFBWUEsQ0FBRUEsWUFBcUIsRUFBRztJQUMvQyxJQUFJLENBQUNaLGFBQWEsR0FBR1ksWUFBWTtFQUNuQztFQUVPUixvQkFBb0JBLENBQUVTLE9BQTJCLEVBQVM7SUFDL0QsSUFBS0EsT0FBTyxJQUFJQSxPQUFPLENBQUNDLGNBQWMsQ0FBRSxjQUFlLENBQUMsRUFBRztNQUN6RCxJQUFJLENBQUNkLGFBQWEsR0FBR2EsT0FBTyxDQUFDRCxZQUFhO0lBQzVDO0VBQ0Y7RUFFT0wsT0FBT0EsQ0FBQSxFQUFTO0lBQ3JCRixNQUFNLElBQUksQ0FBQyxJQUFJLENBQUNMLGFBQWEsSUFBSUYsVUFBVSxDQUFDaUIsbUJBQW1CLENBQUMsQ0FBQztJQUNqRVYsTUFBTSxJQUFJQSxNQUFNLENBQUUsQ0FBQyxJQUFJLENBQUNKLFdBQVcsRUFBRSxzQ0FBdUMsQ0FBQztJQUM3RSxJQUFJLENBQUNGLGVBQWUsQ0FBQ2lCLElBQUksQ0FBQyxDQUFDO0lBQzNCLElBQUksQ0FBQ2pCLGVBQWUsQ0FBQ1EsT0FBTyxDQUFDLENBQUM7SUFDOUIsSUFBSSxDQUFDTixXQUFXLEdBQUcsSUFBSTtFQUN6QjtFQUVBLE9BQWNjLG1CQUFtQkEsQ0FBQSxFQUFTO0lBRXhDO0lBQ0FWLE1BQU0sSUFBSUEsTUFBTSxDQUFFLEtBQUssRUFBRSw4REFBK0QsQ0FBQztFQUMzRjtBQUNGO0FBRUFULElBQUksQ0FBQ3FCLFFBQVEsQ0FBRSxZQUFZLEVBQUVuQixVQUFXLENBQUM7QUFDekMsZUFBZUEsVUFBVSIsImlnbm9yZUxpc3QiOltdfQ==