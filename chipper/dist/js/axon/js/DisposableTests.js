// Copyright 2022-2024, University of Colorado Boulder

/**
 * QUnit tests for Disposable
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Disposable from './Disposable.js';
QUnit.module('Disposable');
QUnit.test('Disposable basics', assert => {
  assert.ok(true, 'initial test');
  class MyDisposable extends Disposable {
    constructor() {
      super();
    }
  }
  const object1 = new MyDisposable();
  assert.ok(!!object1.disposeEmitter, 'disposeEmitter needed');
  const object2 = new MyDisposable();
  object1.disposeEmitter.addListener(() => object2.dispose());
  assert.ok(!object1.isDisposed, '1 is not disposed');
  assert.ok(!object2.isDisposed, '2 is not disposed');
  object1.dispose();
  assert.ok(object1.isDisposed, '1 is disposed');
  assert.ok(object2.isDisposed, '2 is disposed');

  // @ts-expect-error isDisposed is not on TEmitter, but should be in place if assertions are enabled
  window.assert && assert.ok(object1.disposeEmitter.isDisposed, 'disposeEmitter should be disposed too');
});
QUnit.test('Disposable.isDisposable', assert => {
  assert.ok(true, 'when assertions are not enabled');
  class MyDisposable extends Disposable {
    constructor(options) {
      super(options);
    }
  }
  const object1 = new MyDisposable({
    isDisposable: true
  });
  const object2 = new MyDisposable();
  object1.dispose();
  object2.dispose();
  const object3 = new MyDisposable({
    isDisposable: false
  });
  const object4 = new MyDisposable();
  object4.isDisposable = false;
  if (window.assert) {
    assert.throws(() => object3.dispose(), 'should throw if isDisposable is false1');
    assert.throws(() => object4.dispose(), 'should throw if isDisposable is false2');
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEaXNwb3NhYmxlIiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0Iiwib2siLCJNeURpc3Bvc2FibGUiLCJjb25zdHJ1Y3RvciIsIm9iamVjdDEiLCJkaXNwb3NlRW1pdHRlciIsIm9iamVjdDIiLCJhZGRMaXN0ZW5lciIsImRpc3Bvc2UiLCJpc0Rpc3Bvc2VkIiwid2luZG93Iiwib3B0aW9ucyIsImlzRGlzcG9zYWJsZSIsIm9iamVjdDMiLCJvYmplY3Q0IiwidGhyb3dzIl0sInNvdXJjZXMiOlsiRGlzcG9zYWJsZVRlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFFVbml0IHRlc3RzIGZvciBEaXNwb3NhYmxlXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgRGlzcG9zYWJsZSwgeyBEaXNwb3NhYmxlT3B0aW9ucyB9IGZyb20gJy4vRGlzcG9zYWJsZS5qcyc7XHJcblxyXG5RVW5pdC5tb2R1bGUoICdEaXNwb3NhYmxlJyApO1xyXG5cclxuUVVuaXQudGVzdCggJ0Rpc3Bvc2FibGUgYmFzaWNzJywgYXNzZXJ0ID0+IHtcclxuICBhc3NlcnQub2soIHRydWUsICdpbml0aWFsIHRlc3QnICk7XHJcblxyXG4gIGNsYXNzIE15RGlzcG9zYWJsZSBleHRlbmRzIERpc3Bvc2FibGUge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCkgeyBzdXBlcigpO31cclxuICB9XHJcblxyXG4gIGNvbnN0IG9iamVjdDEgPSBuZXcgTXlEaXNwb3NhYmxlKCk7XHJcbiAgYXNzZXJ0Lm9rKCAhIW9iamVjdDEuZGlzcG9zZUVtaXR0ZXIsICdkaXNwb3NlRW1pdHRlciBuZWVkZWQnICk7XHJcbiAgY29uc3Qgb2JqZWN0MiA9IG5ldyBNeURpc3Bvc2FibGUoKTtcclxuICBvYmplY3QxLmRpc3Bvc2VFbWl0dGVyLmFkZExpc3RlbmVyKCAoKSA9PiBvYmplY3QyLmRpc3Bvc2UoKSApO1xyXG5cclxuICBhc3NlcnQub2soICFvYmplY3QxLmlzRGlzcG9zZWQsICcxIGlzIG5vdCBkaXNwb3NlZCcgKTtcclxuICBhc3NlcnQub2soICFvYmplY3QyLmlzRGlzcG9zZWQsICcyIGlzIG5vdCBkaXNwb3NlZCcgKTtcclxuXHJcbiAgb2JqZWN0MS5kaXNwb3NlKCk7XHJcbiAgYXNzZXJ0Lm9rKCBvYmplY3QxLmlzRGlzcG9zZWQsICcxIGlzIGRpc3Bvc2VkJyApO1xyXG4gIGFzc2VydC5vayggb2JqZWN0Mi5pc0Rpc3Bvc2VkLCAnMiBpcyBkaXNwb3NlZCcgKTtcclxuXHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciBpc0Rpc3Bvc2VkIGlzIG5vdCBvbiBURW1pdHRlciwgYnV0IHNob3VsZCBiZSBpbiBwbGFjZSBpZiBhc3NlcnRpb25zIGFyZSBlbmFibGVkXHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQub2soIG9iamVjdDEuZGlzcG9zZUVtaXR0ZXIuaXNEaXNwb3NlZCwgJ2Rpc3Bvc2VFbWl0dGVyIHNob3VsZCBiZSBkaXNwb3NlZCB0b28nICk7XHJcbn0gKTtcclxuXHJcblxyXG5RVW5pdC50ZXN0KCAnRGlzcG9zYWJsZS5pc0Rpc3Bvc2FibGUnLCBhc3NlcnQgPT4ge1xyXG4gIGFzc2VydC5vayggdHJ1ZSwgJ3doZW4gYXNzZXJ0aW9ucyBhcmUgbm90IGVuYWJsZWQnICk7XHJcblxyXG4gIGNsYXNzIE15RGlzcG9zYWJsZSBleHRlbmRzIERpc3Bvc2FibGUge1xyXG4gICAgcHVibGljIGNvbnN0cnVjdG9yKCBvcHRpb25zPzogRGlzcG9zYWJsZU9wdGlvbnMgKSB7c3VwZXIoIG9wdGlvbnMgKTt9XHJcbiAgfVxyXG5cclxuICBjb25zdCBvYmplY3QxID0gbmV3IE15RGlzcG9zYWJsZSgge1xyXG4gICAgaXNEaXNwb3NhYmxlOiB0cnVlXHJcbiAgfSApO1xyXG4gIGNvbnN0IG9iamVjdDIgPSBuZXcgTXlEaXNwb3NhYmxlKCk7XHJcblxyXG4gIG9iamVjdDEuZGlzcG9zZSgpO1xyXG4gIG9iamVjdDIuZGlzcG9zZSgpO1xyXG5cclxuICBjb25zdCBvYmplY3QzID0gbmV3IE15RGlzcG9zYWJsZSgge1xyXG4gICAgaXNEaXNwb3NhYmxlOiBmYWxzZVxyXG4gIH0gKTtcclxuICBjb25zdCBvYmplY3Q0ID0gbmV3IE15RGlzcG9zYWJsZSgpO1xyXG4gIG9iamVjdDQuaXNEaXNwb3NhYmxlID0gZmFsc2U7XHJcblxyXG4gIGlmICggd2luZG93LmFzc2VydCApIHtcclxuICAgIGFzc2VydC50aHJvd3MoICgpID0+IG9iamVjdDMuZGlzcG9zZSgpLCAnc2hvdWxkIHRocm93IGlmIGlzRGlzcG9zYWJsZSBpcyBmYWxzZTEnICk7XHJcbiAgICBhc3NlcnQudGhyb3dzKCAoKSA9PiBvYmplY3Q0LmRpc3Bvc2UoKSwgJ3Nob3VsZCB0aHJvdyBpZiBpc0Rpc3Bvc2FibGUgaXMgZmFsc2UyJyApO1xyXG4gIH1cclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxVQUFVLE1BQTZCLGlCQUFpQjtBQUUvREMsS0FBSyxDQUFDQyxNQUFNLENBQUUsWUFBYSxDQUFDO0FBRTVCRCxLQUFLLENBQUNFLElBQUksQ0FBRSxtQkFBbUIsRUFBRUMsTUFBTSxJQUFJO0VBQ3pDQSxNQUFNLENBQUNDLEVBQUUsQ0FBRSxJQUFJLEVBQUUsY0FBZSxDQUFDO0VBRWpDLE1BQU1DLFlBQVksU0FBU04sVUFBVSxDQUFDO0lBQzdCTyxXQUFXQSxDQUFBLEVBQUc7TUFBRSxLQUFLLENBQUMsQ0FBQztJQUFDO0VBQ2pDO0VBRUEsTUFBTUMsT0FBTyxHQUFHLElBQUlGLFlBQVksQ0FBQyxDQUFDO0VBQ2xDRixNQUFNLENBQUNDLEVBQUUsQ0FBRSxDQUFDLENBQUNHLE9BQU8sQ0FBQ0MsY0FBYyxFQUFFLHVCQUF3QixDQUFDO0VBQzlELE1BQU1DLE9BQU8sR0FBRyxJQUFJSixZQUFZLENBQUMsQ0FBQztFQUNsQ0UsT0FBTyxDQUFDQyxjQUFjLENBQUNFLFdBQVcsQ0FBRSxNQUFNRCxPQUFPLENBQUNFLE9BQU8sQ0FBQyxDQUFFLENBQUM7RUFFN0RSLE1BQU0sQ0FBQ0MsRUFBRSxDQUFFLENBQUNHLE9BQU8sQ0FBQ0ssVUFBVSxFQUFFLG1CQUFvQixDQUFDO0VBQ3JEVCxNQUFNLENBQUNDLEVBQUUsQ0FBRSxDQUFDSyxPQUFPLENBQUNHLFVBQVUsRUFBRSxtQkFBb0IsQ0FBQztFQUVyREwsT0FBTyxDQUFDSSxPQUFPLENBQUMsQ0FBQztFQUNqQlIsTUFBTSxDQUFDQyxFQUFFLENBQUVHLE9BQU8sQ0FBQ0ssVUFBVSxFQUFFLGVBQWdCLENBQUM7RUFDaERULE1BQU0sQ0FBQ0MsRUFBRSxDQUFFSyxPQUFPLENBQUNHLFVBQVUsRUFBRSxlQUFnQixDQUFDOztFQUVoRDtFQUNBQyxNQUFNLENBQUNWLE1BQU0sSUFBSUEsTUFBTSxDQUFDQyxFQUFFLENBQUVHLE9BQU8sQ0FBQ0MsY0FBYyxDQUFDSSxVQUFVLEVBQUUsdUNBQXdDLENBQUM7QUFDMUcsQ0FBRSxDQUFDO0FBR0haLEtBQUssQ0FBQ0UsSUFBSSxDQUFFLHlCQUF5QixFQUFFQyxNQUFNLElBQUk7RUFDL0NBLE1BQU0sQ0FBQ0MsRUFBRSxDQUFFLElBQUksRUFBRSxpQ0FBa0MsQ0FBQztFQUVwRCxNQUFNQyxZQUFZLFNBQVNOLFVBQVUsQ0FBQztJQUM3Qk8sV0FBV0EsQ0FBRVEsT0FBMkIsRUFBRztNQUFDLEtBQUssQ0FBRUEsT0FBUSxDQUFDO0lBQUM7RUFDdEU7RUFFQSxNQUFNUCxPQUFPLEdBQUcsSUFBSUYsWUFBWSxDQUFFO0lBQ2hDVSxZQUFZLEVBQUU7RUFDaEIsQ0FBRSxDQUFDO0VBQ0gsTUFBTU4sT0FBTyxHQUFHLElBQUlKLFlBQVksQ0FBQyxDQUFDO0VBRWxDRSxPQUFPLENBQUNJLE9BQU8sQ0FBQyxDQUFDO0VBQ2pCRixPQUFPLENBQUNFLE9BQU8sQ0FBQyxDQUFDO0VBRWpCLE1BQU1LLE9BQU8sR0FBRyxJQUFJWCxZQUFZLENBQUU7SUFDaENVLFlBQVksRUFBRTtFQUNoQixDQUFFLENBQUM7RUFDSCxNQUFNRSxPQUFPLEdBQUcsSUFBSVosWUFBWSxDQUFDLENBQUM7RUFDbENZLE9BQU8sQ0FBQ0YsWUFBWSxHQUFHLEtBQUs7RUFFNUIsSUFBS0YsTUFBTSxDQUFDVixNQUFNLEVBQUc7SUFDbkJBLE1BQU0sQ0FBQ2UsTUFBTSxDQUFFLE1BQU1GLE9BQU8sQ0FBQ0wsT0FBTyxDQUFDLENBQUMsRUFBRSx3Q0FBeUMsQ0FBQztJQUNsRlIsTUFBTSxDQUFDZSxNQUFNLENBQUUsTUFBTUQsT0FBTyxDQUFDTixPQUFPLENBQUMsQ0FBQyxFQUFFLHdDQUF5QyxDQUFDO0VBQ3BGO0FBQ0YsQ0FBRSxDQUFDIiwiaWdub3JlTGlzdCI6W119