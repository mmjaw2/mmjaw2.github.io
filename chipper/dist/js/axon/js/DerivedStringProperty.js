// Copyright 2023-2024, University of Colorado Boulder

/**
 * DerivedStringProperty is typically used for strings that are derived from LocalizedStringProperty
 * (translatable strings, generated from the {{REPO}}-strings_en.json file via 'grunt modulify') and/or other instances
 * of DerivedStringProperty. Using this class ensures that code follows PhET-iO instrumentation standards,
 * and makes occurrences of this type of string Property easier to identify.
 *
 * Responsibilities include:
 *  - ensures that the derivation returns a string
 *  - adds proper PhET-iO metadata, with defaults that have been specified by PhET-iO design, which can be
 *    overridden where appropriate (e.g. phetioFeatured) and are not part of the public API where they should
 *    not be overridable (e.g. phetioValueType)
 *
 * Note that you can also use DerivedStringProperty for model/logic strings that are not translated. But you'll
 * need to consider whether you want to override the default of phetioFeatured: true, which was chosen as the default
 * for translated strings.
 *
 * See https://github.com/phetsims/phet-io/issues/1943
 *
 * @author Chris Malley (PixelZoom, Inc.)
 */

import DerivedProperty from './DerivedProperty.js';
import optionize from '../../phet-core/js/optionize.js';
import StringIO from '../../tandem/js/types/StringIO.js';
import axon from './axon.js';

// the derivation returns a string

export default class DerivedStringProperty extends DerivedProperty {
  constructor(dependencies, derivation, providedOptions) {
    const options = optionize()({
      phetioFeatured: true,
      // featured by default, see https://github.com/phetsims/phet-io/issues/1943
      phetioValueType: StringIO,
      tandemNameSuffix: 'StringProperty' // Change only with caution
    }, providedOptions);
    super(dependencies, derivation, options);
  }
}
axon.register('DerivedStringProperty', DerivedStringProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZXJpdmVkUHJvcGVydHkiLCJvcHRpb25pemUiLCJTdHJpbmdJTyIsImF4b24iLCJEZXJpdmVkU3RyaW5nUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsImRlcGVuZGVuY2llcyIsImRlcml2YXRpb24iLCJwcm92aWRlZE9wdGlvbnMiLCJvcHRpb25zIiwicGhldGlvRmVhdHVyZWQiLCJwaGV0aW9WYWx1ZVR5cGUiLCJ0YW5kZW1OYW1lU3VmZml4IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJEZXJpdmVkU3RyaW5nUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjMtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogRGVyaXZlZFN0cmluZ1Byb3BlcnR5IGlzIHR5cGljYWxseSB1c2VkIGZvciBzdHJpbmdzIHRoYXQgYXJlIGRlcml2ZWQgZnJvbSBMb2NhbGl6ZWRTdHJpbmdQcm9wZXJ0eVxyXG4gKiAodHJhbnNsYXRhYmxlIHN0cmluZ3MsIGdlbmVyYXRlZCBmcm9tIHRoZSB7e1JFUE99fS1zdHJpbmdzX2VuLmpzb24gZmlsZSB2aWEgJ2dydW50IG1vZHVsaWZ5JykgYW5kL29yIG90aGVyIGluc3RhbmNlc1xyXG4gKiBvZiBEZXJpdmVkU3RyaW5nUHJvcGVydHkuIFVzaW5nIHRoaXMgY2xhc3MgZW5zdXJlcyB0aGF0IGNvZGUgZm9sbG93cyBQaEVULWlPIGluc3RydW1lbnRhdGlvbiBzdGFuZGFyZHMsXHJcbiAqIGFuZCBtYWtlcyBvY2N1cnJlbmNlcyBvZiB0aGlzIHR5cGUgb2Ygc3RyaW5nIFByb3BlcnR5IGVhc2llciB0byBpZGVudGlmeS5cclxuICpcclxuICogUmVzcG9uc2liaWxpdGllcyBpbmNsdWRlOlxyXG4gKiAgLSBlbnN1cmVzIHRoYXQgdGhlIGRlcml2YXRpb24gcmV0dXJucyBhIHN0cmluZ1xyXG4gKiAgLSBhZGRzIHByb3BlciBQaEVULWlPIG1ldGFkYXRhLCB3aXRoIGRlZmF1bHRzIHRoYXQgaGF2ZSBiZWVuIHNwZWNpZmllZCBieSBQaEVULWlPIGRlc2lnbiwgd2hpY2ggY2FuIGJlXHJcbiAqICAgIG92ZXJyaWRkZW4gd2hlcmUgYXBwcm9wcmlhdGUgKGUuZy4gcGhldGlvRmVhdHVyZWQpIGFuZCBhcmUgbm90IHBhcnQgb2YgdGhlIHB1YmxpYyBBUEkgd2hlcmUgdGhleSBzaG91bGRcclxuICogICAgbm90IGJlIG92ZXJyaWRhYmxlIChlLmcuIHBoZXRpb1ZhbHVlVHlwZSlcclxuICpcclxuICogTm90ZSB0aGF0IHlvdSBjYW4gYWxzbyB1c2UgRGVyaXZlZFN0cmluZ1Byb3BlcnR5IGZvciBtb2RlbC9sb2dpYyBzdHJpbmdzIHRoYXQgYXJlIG5vdCB0cmFuc2xhdGVkLiBCdXQgeW91J2xsXHJcbiAqIG5lZWQgdG8gY29uc2lkZXIgd2hldGhlciB5b3Ugd2FudCB0byBvdmVycmlkZSB0aGUgZGVmYXVsdCBvZiBwaGV0aW9GZWF0dXJlZDogdHJ1ZSwgd2hpY2ggd2FzIGNob3NlbiBhcyB0aGUgZGVmYXVsdFxyXG4gKiBmb3IgdHJhbnNsYXRlZCBzdHJpbmdzLlxyXG4gKlxyXG4gKiBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtaW8vaXNzdWVzLzE5NDNcclxuICpcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgRGVyaXZlZFByb3BlcnR5LCB7IERlcml2ZWRQcm9wZXJ0eU9wdGlvbnMgfSBmcm9tICcuL0Rlcml2ZWRQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgU3RyaW5nSU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1N0cmluZ0lPLmpzJztcclxuaW1wb3J0IGF4b24gZnJvbSAnLi9heG9uLmpzJztcclxuaW1wb3J0IFN0cmljdE9taXQgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL3R5cGVzL1N0cmljdE9taXQuanMnO1xyXG5pbXBvcnQgeyBEZXBlbmRlbmNpZXMgfSBmcm9tICcuL011bHRpbGluay5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbnR5cGUgU3VwZXJPcHRpb25zPFQgZXh0ZW5kcyBzdHJpbmc+ID0gRGVyaXZlZFByb3BlcnR5T3B0aW9uczxUPjsgLy8gdGhlIGRlcml2YXRpb24gcmV0dXJucyBhIHN0cmluZ1xyXG5cclxuZXhwb3J0IHR5cGUgRGVyaXZlZFN0cmluZ1Byb3BlcnR5T3B0aW9uczxUIGV4dGVuZHMgc3RyaW5nPiA9IFNlbGZPcHRpb25zICZcclxuICBTdHJpY3RPbWl0PFN1cGVyT3B0aW9uczxUPiwgJ3BoZXRpb1ZhbHVlVHlwZSc+ICYgLy8gRGVyaXZlZFN0cmluZ1Byb3BlcnR5IGlzIHJlc3BvbnNpYmxlIGZvciB0aGlzIG1ldGFkYXRhXHJcbiAgU3VwZXJPcHRpb25zPFQ+O1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgY2xhc3MgRGVyaXZlZFN0cmluZ1Byb3BlcnR5PFQgZXh0ZW5kcyBzdHJpbmcsIFQxLCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBUMTIsIFQxMywgVDE0LCBUMTU+XHJcbiAgZXh0ZW5kcyBEZXJpdmVkUHJvcGVydHk8VCwgVDEsIFQyLCBUMywgVDQsIFQ1LCBUNiwgVDcsIFQ4LCBUOSwgVDEwLCBUMTEsIFQxMiwgVDEzLCBUMTQsIFQxNT4ge1xyXG5cclxuICBwdWJsaWMgY29uc3RydWN0b3IoIGRlcGVuZGVuY2llczogRGVwZW5kZW5jaWVzPFQxLCBUMiwgVDMsIFQ0LCBUNSwgVDYsIFQ3LCBUOCwgVDksIFQxMCwgVDExLCBUMTIsIFQxMywgVDE0LCBUMTU+LFxyXG4gICAgICAgICAgICAgICAgICAgICAgZGVyaXZhdGlvbjogKCAuLi5wYXJhbXM6IFsgVDEsIFQyLCBUMywgVDQsIFQ1LCBUNiwgVDcsIFQ4LCBUOSwgVDEwLCBUMTEsIFQxMiwgVDEzLCBUMTQsIFQxNSBdICkgPT4gVCxcclxuICAgICAgICAgICAgICAgICAgICAgIHByb3ZpZGVkT3B0aW9ucz86IERlcml2ZWRTdHJpbmdQcm9wZXJ0eU9wdGlvbnM8VD4gKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxEZXJpdmVkU3RyaW5nUHJvcGVydHlPcHRpb25zPFQ+LCBTZWxmT3B0aW9ucywgU3VwZXJPcHRpb25zPFQ+PigpKCB7XHJcbiAgICAgIHBoZXRpb0ZlYXR1cmVkOiB0cnVlLCAvLyBmZWF0dXJlZCBieSBkZWZhdWx0LCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtaW8vaXNzdWVzLzE5NDNcclxuICAgICAgcGhldGlvVmFsdWVUeXBlOiBTdHJpbmdJTyxcclxuICAgICAgdGFuZGVtTmFtZVN1ZmZpeDogJ1N0cmluZ1Byb3BlcnR5JyAvLyBDaGFuZ2Ugb25seSB3aXRoIGNhdXRpb25cclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBkZXBlbmRlbmNpZXMsIGRlcml2YXRpb24sIG9wdGlvbnMgKTtcclxuICB9XHJcbn1cclxuXHJcbmF4b24ucmVnaXN0ZXIoICdEZXJpdmVkU3RyaW5nUHJvcGVydHknLCBEZXJpdmVkU3RyaW5nUHJvcGVydHkgKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsZUFBZSxNQUFrQyxzQkFBc0I7QUFDOUUsT0FBT0MsU0FBUyxNQUE0QixpQ0FBaUM7QUFDN0UsT0FBT0MsUUFBUSxNQUFNLG1DQUFtQztBQUN4RCxPQUFPQyxJQUFJLE1BQU0sV0FBVzs7QUFNcUM7O0FBTWpFLGVBQWUsTUFBTUMscUJBQXFCLFNBQ2hDSixlQUFlLENBQXNFO0VBRXRGSyxXQUFXQSxDQUFFQyxZQUE0RixFQUM1RkMsVUFBb0csRUFDcEdDLGVBQWlELEVBQUc7SUFFdEUsTUFBTUMsT0FBTyxHQUFHUixTQUFTLENBQWdFLENBQUMsQ0FBRTtNQUMxRlMsY0FBYyxFQUFFLElBQUk7TUFBRTtNQUN0QkMsZUFBZSxFQUFFVCxRQUFRO01BQ3pCVSxnQkFBZ0IsRUFBRSxnQkFBZ0IsQ0FBQztJQUNyQyxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFRixZQUFZLEVBQUVDLFVBQVUsRUFBRUUsT0FBUSxDQUFDO0VBQzVDO0FBQ0Y7QUFFQU4sSUFBSSxDQUFDVSxRQUFRLENBQUUsdUJBQXVCLEVBQUVULHFCQUFzQixDQUFDIiwiaWdub3JlTGlzdCI6W119