// Copyright 2022-2024, University of Colorado Boulder

/**
 * A MappedProperty specialized for unit conversion. Just provide multiplicative factor to convert between the units,
 * or optionally a map/inverseMap. Additionally if there is a rangeProperty on the source, this Property will have a
 * mapped range.
 *
 * For example:
 * const metersProperty = new NumberProperty( 0.5, { range: new Range( 0, 1 ) } );
 * const centimetersProperty = new UnitConversionProperty( metersProperty, { factor: 100 } );
 * centimetersProperty.value; // 50
 * centimetersProperty.range; // Range( 0, 100 )
 *
 * // One way
 * metersProperty.value = 0.25
 * centimetersProperty.value; // 25
 *
 * // Bidirectional
 * centimetersProperty.value = 100;
 * metersProperty.value; // 1
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import axon from './axon.js';
import Range from '../../dot/js/Range.js';
import MappedProperty from './MappedProperty.js';
import Property from './Property.js';
import { DEFAULT_RANGE } from './NumberProperty.js';
import optionize from '../../phet-core/js/optionize.js';
import { isTRangedProperty } from './TRangedProperty.js';
export default class UnitConversionProperty extends MappedProperty {
  constructor(property, providedOptions) {
    const map = input => input * providedOptions.factor;
    const inverseMap = output => output / providedOptions.factor;
    const options = optionize()({
      // Bidirectional by default, since we'll have a map and inverseMap guaranteed
      bidirectional: true,
      map: map,
      inverseMap: inverseMap
    }, providedOptions);
    super(property, options);
    this._property = property;
    this.rangeProperty = new Property(DEFAULT_RANGE);
    if (isTRangedProperty(property)) {
      // Watch the range of the target Property, and update ours to match
      this._rangeListener = range => {
        const min = map(range.min);
        const max = map(range.max);
        // Handle a negative factor or something else where the min/max gets swapped
        this.rangeProperty.value = new Range(Math.min(min, max), Math.max(min, max));
      };
      property.rangeProperty.link(this._rangeListener);
    }
  }
  get range() {
    return this.rangeProperty.value;
  }

  // NOTE: NOT bidirectional yet!
  set range(value) {
    this.rangeProperty.value = value;
  }
  dispose() {
    if (isTRangedProperty(this._property)) {
      this._property.rangeProperty.unlink(this._rangeListener);
    }
    this.rangeProperty.dispose();
  }
}
axon.register('UnitConversionProperty', UnitConversionProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJheG9uIiwiUmFuZ2UiLCJNYXBwZWRQcm9wZXJ0eSIsIlByb3BlcnR5IiwiREVGQVVMVF9SQU5HRSIsIm9wdGlvbml6ZSIsImlzVFJhbmdlZFByb3BlcnR5IiwiVW5pdENvbnZlcnNpb25Qcm9wZXJ0eSIsImNvbnN0cnVjdG9yIiwicHJvcGVydHkiLCJwcm92aWRlZE9wdGlvbnMiLCJtYXAiLCJpbnB1dCIsImZhY3RvciIsImludmVyc2VNYXAiLCJvdXRwdXQiLCJvcHRpb25zIiwiYmlkaXJlY3Rpb25hbCIsIl9wcm9wZXJ0eSIsInJhbmdlUHJvcGVydHkiLCJfcmFuZ2VMaXN0ZW5lciIsInJhbmdlIiwibWluIiwibWF4IiwidmFsdWUiLCJNYXRoIiwibGluayIsImRpc3Bvc2UiLCJ1bmxpbmsiLCJyZWdpc3RlciJdLCJzb3VyY2VzIjpbIlVuaXRDb252ZXJzaW9uUHJvcGVydHkudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjItMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQSBNYXBwZWRQcm9wZXJ0eSBzcGVjaWFsaXplZCBmb3IgdW5pdCBjb252ZXJzaW9uLiBKdXN0IHByb3ZpZGUgbXVsdGlwbGljYXRpdmUgZmFjdG9yIHRvIGNvbnZlcnQgYmV0d2VlbiB0aGUgdW5pdHMsXHJcbiAqIG9yIG9wdGlvbmFsbHkgYSBtYXAvaW52ZXJzZU1hcC4gQWRkaXRpb25hbGx5IGlmIHRoZXJlIGlzIGEgcmFuZ2VQcm9wZXJ0eSBvbiB0aGUgc291cmNlLCB0aGlzIFByb3BlcnR5IHdpbGwgaGF2ZSBhXHJcbiAqIG1hcHBlZCByYW5nZS5cclxuICpcclxuICogRm9yIGV4YW1wbGU6XHJcbiAqIGNvbnN0IG1ldGVyc1Byb3BlcnR5ID0gbmV3IE51bWJlclByb3BlcnR5KCAwLjUsIHsgcmFuZ2U6IG5ldyBSYW5nZSggMCwgMSApIH0gKTtcclxuICogY29uc3QgY2VudGltZXRlcnNQcm9wZXJ0eSA9IG5ldyBVbml0Q29udmVyc2lvblByb3BlcnR5KCBtZXRlcnNQcm9wZXJ0eSwgeyBmYWN0b3I6IDEwMCB9ICk7XHJcbiAqIGNlbnRpbWV0ZXJzUHJvcGVydHkudmFsdWU7IC8vIDUwXHJcbiAqIGNlbnRpbWV0ZXJzUHJvcGVydHkucmFuZ2U7IC8vIFJhbmdlKCAwLCAxMDAgKVxyXG4gKlxyXG4gKiAvLyBPbmUgd2F5XHJcbiAqIG1ldGVyc1Byb3BlcnR5LnZhbHVlID0gMC4yNVxyXG4gKiBjZW50aW1ldGVyc1Byb3BlcnR5LnZhbHVlOyAvLyAyNVxyXG4gKlxyXG4gKiAvLyBCaWRpcmVjdGlvbmFsXHJcbiAqIGNlbnRpbWV0ZXJzUHJvcGVydHkudmFsdWUgPSAxMDA7XHJcbiAqIG1ldGVyc1Byb3BlcnR5LnZhbHVlOyAvLyAxXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgYXhvbiBmcm9tICcuL2F4b24uanMnO1xyXG5pbXBvcnQgUmFuZ2UgZnJvbSAnLi4vLi4vZG90L2pzL1JhbmdlLmpzJztcclxuaW1wb3J0IFRQcm9wZXJ0eSBmcm9tICcuL1RQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBNYXBwZWRQcm9wZXJ0eSwgeyBNYXBwZWRQcm9wZXJ0eU9wdGlvbnMgfSBmcm9tICcuL01hcHBlZFByb3BlcnR5LmpzJztcclxuaW1wb3J0IFByb3BlcnR5IGZyb20gJy4vUHJvcGVydHkuanMnO1xyXG5pbXBvcnQgeyBERUZBVUxUX1JBTkdFIH0gZnJvbSAnLi9OdW1iZXJQcm9wZXJ0eS5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUgZnJvbSAnLi4vLi4vcGhldC1jb3JlL2pzL29wdGlvbml6ZS5qcyc7XHJcbmltcG9ydCBUUmFuZ2VkUHJvcGVydHksIHsgaXNUUmFuZ2VkUHJvcGVydHkgfSBmcm9tICcuL1RSYW5nZWRQcm9wZXJ0eS5qcyc7XHJcblxyXG50eXBlIFNlbGZPcHRpb25zID0ge1xyXG4gIC8vIFRoZSBtdWx0aXBsaWNhdGl2ZSBmYWN0b3IgdG8gY29udmVydCBmcm9tIElOUFVUID0+IE9VVFBVVCwgZS5nLlxyXG4gIC8vIHRoaXMudmFsdWUgPT09IGZhY3RvciAqIHByb3BlcnR5LnZhbHVlXHJcbiAgLy8gVGhpcyB3aWxsIGJlIHVzZWQgdG8gcHJvdmlkZSBkZWZhdWx0cyBmb3IgbWFwL2ludmVyc2VNYXAgaWYgcHJvdmlkZWRcclxuICBmYWN0b3I6IG51bWJlcjtcclxufTtcclxudHlwZSBQYXJlbnRPcHRpb25zID0gTWFwcGVkUHJvcGVydHlPcHRpb25zPG51bWJlciwgbnVtYmVyPjtcclxuZXhwb3J0IHR5cGUgVW5pdENvbnZlcnNpb25Qcm9wZXJ0eU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBhcmVudE9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBVbml0Q29udmVyc2lvblByb3BlcnR5IGV4dGVuZHMgTWFwcGVkUHJvcGVydHk8bnVtYmVyLCBudW1iZXI+IGltcGxlbWVudHMgVFJhbmdlZFByb3BlcnR5IHtcclxuXHJcbiAgcHVibGljIHJlYWRvbmx5IHJhbmdlUHJvcGVydHk6IFRQcm9wZXJ0eTxSYW5nZT47XHJcblxyXG4gIHByaXZhdGUgX3Byb3BlcnR5OiAoIFRQcm9wZXJ0eTxudW1iZXI+IHwgVFJhbmdlZFByb3BlcnR5ICk7XHJcbiAgcHJpdmF0ZSBfcmFuZ2VMaXN0ZW5lcj86ICggcmFuZ2U6IFJhbmdlICkgPT4gdm9pZDtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm9wZXJ0eTogKCBUUHJvcGVydHk8bnVtYmVyPiB8IFRSYW5nZWRQcm9wZXJ0eSApLCBwcm92aWRlZE9wdGlvbnM6IFVuaXRDb252ZXJzaW9uUHJvcGVydHlPcHRpb25zICkge1xyXG5cclxuICAgIGNvbnN0IG1hcCA9ICggaW5wdXQ6IG51bWJlciApID0+IGlucHV0ICogcHJvdmlkZWRPcHRpb25zLmZhY3RvcjtcclxuICAgIGNvbnN0IGludmVyc2VNYXAgPSAoIG91dHB1dDogbnVtYmVyICkgPT4gb3V0cHV0IC8gcHJvdmlkZWRPcHRpb25zLmZhY3RvcjtcclxuICAgIGNvbnN0IG9wdGlvbnMgPSBvcHRpb25pemU8VW5pdENvbnZlcnNpb25Qcm9wZXJ0eU9wdGlvbnMsIFNlbGZPcHRpb25zLCBQYXJlbnRPcHRpb25zPigpKCB7XHJcblxyXG4gICAgICAvLyBCaWRpcmVjdGlvbmFsIGJ5IGRlZmF1bHQsIHNpbmNlIHdlJ2xsIGhhdmUgYSBtYXAgYW5kIGludmVyc2VNYXAgZ3VhcmFudGVlZFxyXG4gICAgICBiaWRpcmVjdGlvbmFsOiB0cnVlLFxyXG5cclxuICAgICAgbWFwOiBtYXAsXHJcbiAgICAgIGludmVyc2VNYXA6IGludmVyc2VNYXBcclxuICAgIH0sIHByb3ZpZGVkT3B0aW9ucyApO1xyXG5cclxuICAgIHN1cGVyKCBwcm9wZXJ0eSwgb3B0aW9ucyApO1xyXG5cclxuICAgIHRoaXMuX3Byb3BlcnR5ID0gcHJvcGVydHk7XHJcblxyXG4gICAgdGhpcy5yYW5nZVByb3BlcnR5ID0gbmV3IFByb3BlcnR5PFJhbmdlPiggREVGQVVMVF9SQU5HRSApO1xyXG5cclxuICAgIGlmICggaXNUUmFuZ2VkUHJvcGVydHkoIHByb3BlcnR5ICkgKSB7XHJcblxyXG4gICAgICAvLyBXYXRjaCB0aGUgcmFuZ2Ugb2YgdGhlIHRhcmdldCBQcm9wZXJ0eSwgYW5kIHVwZGF0ZSBvdXJzIHRvIG1hdGNoXHJcbiAgICAgIHRoaXMuX3JhbmdlTGlzdGVuZXIgPSAoIHJhbmdlOiBSYW5nZSApID0+IHtcclxuICAgICAgICBjb25zdCBtaW4gPSBtYXAoIHJhbmdlLm1pbiApO1xyXG4gICAgICAgIGNvbnN0IG1heCA9IG1hcCggcmFuZ2UubWF4ICk7XHJcbiAgICAgICAgLy8gSGFuZGxlIGEgbmVnYXRpdmUgZmFjdG9yIG9yIHNvbWV0aGluZyBlbHNlIHdoZXJlIHRoZSBtaW4vbWF4IGdldHMgc3dhcHBlZFxyXG4gICAgICAgIHRoaXMucmFuZ2VQcm9wZXJ0eS52YWx1ZSA9IG5ldyBSYW5nZSggTWF0aC5taW4oIG1pbiwgbWF4ICksIE1hdGgubWF4KCBtaW4sIG1heCApICk7XHJcbiAgICAgIH07XHJcbiAgICAgIHByb3BlcnR5LnJhbmdlUHJvcGVydHkubGluayggdGhpcy5fcmFuZ2VMaXN0ZW5lciApO1xyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgcHVibGljIGdldCByYW5nZSgpOiBSYW5nZSB7XHJcbiAgICByZXR1cm4gdGhpcy5yYW5nZVByb3BlcnR5LnZhbHVlO1xyXG4gIH1cclxuXHJcbiAgLy8gTk9URTogTk9UIGJpZGlyZWN0aW9uYWwgeWV0IVxyXG4gIHB1YmxpYyBzZXQgcmFuZ2UoIHZhbHVlOiBSYW5nZSApIHtcclxuICAgIHRoaXMucmFuZ2VQcm9wZXJ0eS52YWx1ZSA9IHZhbHVlO1xyXG4gIH1cclxuXHJcbiAgcHVibGljIG92ZXJyaWRlIGRpc3Bvc2UoKTogdm9pZCB7XHJcbiAgICBpZiAoIGlzVFJhbmdlZFByb3BlcnR5KCB0aGlzLl9wcm9wZXJ0eSApICkge1xyXG4gICAgICB0aGlzLl9wcm9wZXJ0eS5yYW5nZVByb3BlcnR5LnVubGluayggdGhpcy5fcmFuZ2VMaXN0ZW5lciEgKTtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnJhbmdlUHJvcGVydHkuZGlzcG9zZSgpO1xyXG4gIH1cclxufVxyXG5cclxuYXhvbi5yZWdpc3RlciggJ1VuaXRDb252ZXJzaW9uUHJvcGVydHknLCBVbml0Q29udmVyc2lvblByb3BlcnR5ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsSUFBSSxNQUFNLFdBQVc7QUFDNUIsT0FBT0MsS0FBSyxNQUFNLHVCQUF1QjtBQUV6QyxPQUFPQyxjQUFjLE1BQWlDLHFCQUFxQjtBQUMzRSxPQUFPQyxRQUFRLE1BQU0sZUFBZTtBQUNwQyxTQUFTQyxhQUFhLFFBQVEscUJBQXFCO0FBQ25ELE9BQU9DLFNBQVMsTUFBTSxpQ0FBaUM7QUFDdkQsU0FBMEJDLGlCQUFpQixRQUFRLHNCQUFzQjtBQVd6RSxlQUFlLE1BQU1DLHNCQUFzQixTQUFTTCxjQUFjLENBQTRDO0VBT3JHTSxXQUFXQSxDQUFFQyxRQUFpRCxFQUFFQyxlQUE4QyxFQUFHO0lBRXRILE1BQU1DLEdBQUcsR0FBS0MsS0FBYSxJQUFNQSxLQUFLLEdBQUdGLGVBQWUsQ0FBQ0csTUFBTTtJQUMvRCxNQUFNQyxVQUFVLEdBQUtDLE1BQWMsSUFBTUEsTUFBTSxHQUFHTCxlQUFlLENBQUNHLE1BQU07SUFDeEUsTUFBTUcsT0FBTyxHQUFHWCxTQUFTLENBQTRELENBQUMsQ0FBRTtNQUV0RjtNQUNBWSxhQUFhLEVBQUUsSUFBSTtNQUVuQk4sR0FBRyxFQUFFQSxHQUFHO01BQ1JHLFVBQVUsRUFBRUE7SUFDZCxDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsS0FBSyxDQUFFRCxRQUFRLEVBQUVPLE9BQVEsQ0FBQztJQUUxQixJQUFJLENBQUNFLFNBQVMsR0FBR1QsUUFBUTtJQUV6QixJQUFJLENBQUNVLGFBQWEsR0FBRyxJQUFJaEIsUUFBUSxDQUFTQyxhQUFjLENBQUM7SUFFekQsSUFBS0UsaUJBQWlCLENBQUVHLFFBQVMsQ0FBQyxFQUFHO01BRW5DO01BQ0EsSUFBSSxDQUFDVyxjQUFjLEdBQUtDLEtBQVksSUFBTTtRQUN4QyxNQUFNQyxHQUFHLEdBQUdYLEdBQUcsQ0FBRVUsS0FBSyxDQUFDQyxHQUFJLENBQUM7UUFDNUIsTUFBTUMsR0FBRyxHQUFHWixHQUFHLENBQUVVLEtBQUssQ0FBQ0UsR0FBSSxDQUFDO1FBQzVCO1FBQ0EsSUFBSSxDQUFDSixhQUFhLENBQUNLLEtBQUssR0FBRyxJQUFJdkIsS0FBSyxDQUFFd0IsSUFBSSxDQUFDSCxHQUFHLENBQUVBLEdBQUcsRUFBRUMsR0FBSSxDQUFDLEVBQUVFLElBQUksQ0FBQ0YsR0FBRyxDQUFFRCxHQUFHLEVBQUVDLEdBQUksQ0FBRSxDQUFDO01BQ3BGLENBQUM7TUFDRGQsUUFBUSxDQUFDVSxhQUFhLENBQUNPLElBQUksQ0FBRSxJQUFJLENBQUNOLGNBQWUsQ0FBQztJQUNwRDtFQUNGO0VBRUEsSUFBV0MsS0FBS0EsQ0FBQSxFQUFVO0lBQ3hCLE9BQU8sSUFBSSxDQUFDRixhQUFhLENBQUNLLEtBQUs7RUFDakM7O0VBRUE7RUFDQSxJQUFXSCxLQUFLQSxDQUFFRyxLQUFZLEVBQUc7SUFDL0IsSUFBSSxDQUFDTCxhQUFhLENBQUNLLEtBQUssR0FBR0EsS0FBSztFQUNsQztFQUVnQkcsT0FBT0EsQ0FBQSxFQUFTO0lBQzlCLElBQUtyQixpQkFBaUIsQ0FBRSxJQUFJLENBQUNZLFNBQVUsQ0FBQyxFQUFHO01BQ3pDLElBQUksQ0FBQ0EsU0FBUyxDQUFDQyxhQUFhLENBQUNTLE1BQU0sQ0FBRSxJQUFJLENBQUNSLGNBQWdCLENBQUM7SUFDN0Q7SUFFQSxJQUFJLENBQUNELGFBQWEsQ0FBQ1EsT0FBTyxDQUFDLENBQUM7RUFDOUI7QUFDRjtBQUVBM0IsSUFBSSxDQUFDNkIsUUFBUSxDQUFFLHdCQUF3QixFQUFFdEIsc0JBQXVCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=