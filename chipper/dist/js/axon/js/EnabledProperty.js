// Copyright 2020-2024, University of Colorado Boulder

/**
 * Property to control if something is enabled. This serves as a consistent class to control
 * enabled. It also factors out PhET-iO instrumentation. Likely you should use it in cases like so:
 *
 * const enabledProperty = new BooleanProperty( true, {
 *   tandem: options.tandem.createTandem( 'enabledProperty' ),
 *   phetioFeatured: true
 * } );
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import optionize from '../../phet-core/js/optionize.js';
import axon from './axon.js';
import BooleanProperty from './BooleanProperty.js';
const TANDEM_NAME = 'enabledProperty';
export default class EnabledProperty extends BooleanProperty {
  constructor(initialEnabled, providedOptions) {
    const options = optionize()({
      phetioDocumentation: 'Determines whether the element is enabled (true) or disabled (false).',
      phetioFeatured: true,
      // by default, the tandem name must match. In rare occurrences (such as when one model must have 2 separate
      // EnabledProperties, like this.mass1EnabledProperty = ..., this.mass2EnabledProperty = ...
      // you can opt out of the name check. This should be used sparingly. For instance, for the example above, it may
      // be better to do this.mass1.enabledProperty anyways.
      checkTandemName: true
    }, providedOptions);
    if (assert && options && options.tandem && options.tandem.supplied && options.checkTandemName) {
      assert && assert(options.tandem.name === TANDEM_NAME, `EnabledProperty tandems should be named ${TANDEM_NAME}`);
    }
    super(initialEnabled, options);
  }
  static get TANDEM_NAME() {
    return TANDEM_NAME;
  }
}
axon.register('EnabledProperty', EnabledProperty);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJvcHRpb25pemUiLCJheG9uIiwiQm9vbGVhblByb3BlcnR5IiwiVEFOREVNX05BTUUiLCJFbmFibGVkUHJvcGVydHkiLCJjb25zdHJ1Y3RvciIsImluaXRpYWxFbmFibGVkIiwicHJvdmlkZWRPcHRpb25zIiwib3B0aW9ucyIsInBoZXRpb0RvY3VtZW50YXRpb24iLCJwaGV0aW9GZWF0dXJlZCIsImNoZWNrVGFuZGVtTmFtZSIsImFzc2VydCIsInRhbmRlbSIsInN1cHBsaWVkIiwibmFtZSIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiRW5hYmxlZFByb3BlcnR5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFByb3BlcnR5IHRvIGNvbnRyb2wgaWYgc29tZXRoaW5nIGlzIGVuYWJsZWQuIFRoaXMgc2VydmVzIGFzIGEgY29uc2lzdGVudCBjbGFzcyB0byBjb250cm9sXHJcbiAqIGVuYWJsZWQuIEl0IGFsc28gZmFjdG9ycyBvdXQgUGhFVC1pTyBpbnN0cnVtZW50YXRpb24uIExpa2VseSB5b3Ugc2hvdWxkIHVzZSBpdCBpbiBjYXNlcyBsaWtlIHNvOlxyXG4gKlxyXG4gKiBjb25zdCBlbmFibGVkUHJvcGVydHkgPSBuZXcgQm9vbGVhblByb3BlcnR5KCB0cnVlLCB7XHJcbiAqICAgdGFuZGVtOiBvcHRpb25zLnRhbmRlbS5jcmVhdGVUYW5kZW0oICdlbmFibGVkUHJvcGVydHknICksXHJcbiAqICAgcGhldGlvRmVhdHVyZWQ6IHRydWVcclxuICogfSApO1xyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IG9wdGlvbml6ZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvb3B0aW9uaXplLmpzJztcclxuaW1wb3J0IGF4b24gZnJvbSAnLi9heG9uLmpzJztcclxuaW1wb3J0IEJvb2xlYW5Qcm9wZXJ0eSwgeyBCb29sZWFuUHJvcGVydHlPcHRpb25zIH0gZnJvbSAnLi9Cb29sZWFuUHJvcGVydHkuanMnO1xyXG5cclxuY29uc3QgVEFOREVNX05BTUUgPSAnZW5hYmxlZFByb3BlcnR5JztcclxuXHJcbnR5cGUgU2VsZk9wdGlvbnMgPSB7XHJcbiAgY2hlY2tUYW5kZW1OYW1lPzogYm9vbGVhbjtcclxufTtcclxuXHJcbmV4cG9ydCB0eXBlIEVuYWJsZWRQcm9wZXJ0eU9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIEJvb2xlYW5Qcm9wZXJ0eU9wdGlvbnM7XHJcblxyXG5leHBvcnQgZGVmYXVsdCBjbGFzcyBFbmFibGVkUHJvcGVydHkgZXh0ZW5kcyBCb29sZWFuUHJvcGVydHkge1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaW5pdGlhbEVuYWJsZWQ6IGJvb2xlYW4sIHByb3ZpZGVkT3B0aW9ucz86IEVuYWJsZWRQcm9wZXJ0eU9wdGlvbnMgKSB7XHJcblxyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxFbmFibGVkUHJvcGVydHlPcHRpb25zLCBTZWxmT3B0aW9ucywgQm9vbGVhblByb3BlcnR5T3B0aW9ucz4oKSgge1xyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnRGV0ZXJtaW5lcyB3aGV0aGVyIHRoZSBlbGVtZW50IGlzIGVuYWJsZWQgKHRydWUpIG9yIGRpc2FibGVkIChmYWxzZSkuJyxcclxuICAgICAgcGhldGlvRmVhdHVyZWQ6IHRydWUsXHJcblxyXG4gICAgICAvLyBieSBkZWZhdWx0LCB0aGUgdGFuZGVtIG5hbWUgbXVzdCBtYXRjaC4gSW4gcmFyZSBvY2N1cnJlbmNlcyAoc3VjaCBhcyB3aGVuIG9uZSBtb2RlbCBtdXN0IGhhdmUgMiBzZXBhcmF0ZVxyXG4gICAgICAvLyBFbmFibGVkUHJvcGVydGllcywgbGlrZSB0aGlzLm1hc3MxRW5hYmxlZFByb3BlcnR5ID0gLi4uLCB0aGlzLm1hc3MyRW5hYmxlZFByb3BlcnR5ID0gLi4uXHJcbiAgICAgIC8vIHlvdSBjYW4gb3B0IG91dCBvZiB0aGUgbmFtZSBjaGVjay4gVGhpcyBzaG91bGQgYmUgdXNlZCBzcGFyaW5nbHkuIEZvciBpbnN0YW5jZSwgZm9yIHRoZSBleGFtcGxlIGFib3ZlLCBpdCBtYXlcclxuICAgICAgLy8gYmUgYmV0dGVyIHRvIGRvIHRoaXMubWFzczEuZW5hYmxlZFByb3BlcnR5IGFueXdheXMuXHJcbiAgICAgIGNoZWNrVGFuZGVtTmFtZTogdHJ1ZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgaWYgKCBhc3NlcnQgJiYgb3B0aW9ucyAmJiBvcHRpb25zLnRhbmRlbSAmJiBvcHRpb25zLnRhbmRlbS5zdXBwbGllZCAmJiBvcHRpb25zLmNoZWNrVGFuZGVtTmFtZSApIHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggb3B0aW9ucy50YW5kZW0ubmFtZSA9PT0gVEFOREVNX05BTUUsIGBFbmFibGVkUHJvcGVydHkgdGFuZGVtcyBzaG91bGQgYmUgbmFtZWQgJHtUQU5ERU1fTkFNRX1gICk7XHJcbiAgICB9XHJcblxyXG4gICAgc3VwZXIoIGluaXRpYWxFbmFibGVkLCBvcHRpb25zICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIGdldCBUQU5ERU1fTkFNRSgpOiBzdHJpbmcgeyByZXR1cm4gVEFOREVNX05BTUU7IH1cclxufVxyXG5cclxuYXhvbi5yZWdpc3RlciggJ0VuYWJsZWRQcm9wZXJ0eScsIEVuYWJsZWRQcm9wZXJ0eSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxTQUFTLE1BQU0saUNBQWlDO0FBQ3ZELE9BQU9DLElBQUksTUFBTSxXQUFXO0FBQzVCLE9BQU9DLGVBQWUsTUFBa0Msc0JBQXNCO0FBRTlFLE1BQU1DLFdBQVcsR0FBRyxpQkFBaUI7QUFRckMsZUFBZSxNQUFNQyxlQUFlLFNBQVNGLGVBQWUsQ0FBQztFQUNwREcsV0FBV0EsQ0FBRUMsY0FBdUIsRUFBRUMsZUFBd0MsRUFBRztJQUV0RixNQUFNQyxPQUFPLEdBQUdSLFNBQVMsQ0FBOEQsQ0FBQyxDQUFFO01BQ3hGUyxtQkFBbUIsRUFBRSx1RUFBdUU7TUFDNUZDLGNBQWMsRUFBRSxJQUFJO01BRXBCO01BQ0E7TUFDQTtNQUNBO01BQ0FDLGVBQWUsRUFBRTtJQUNuQixDQUFDLEVBQUVKLGVBQWdCLENBQUM7SUFFcEIsSUFBS0ssTUFBTSxJQUFJSixPQUFPLElBQUlBLE9BQU8sQ0FBQ0ssTUFBTSxJQUFJTCxPQUFPLENBQUNLLE1BQU0sQ0FBQ0MsUUFBUSxJQUFJTixPQUFPLENBQUNHLGVBQWUsRUFBRztNQUMvRkMsTUFBTSxJQUFJQSxNQUFNLENBQUVKLE9BQU8sQ0FBQ0ssTUFBTSxDQUFDRSxJQUFJLEtBQUtaLFdBQVcsRUFBRywyQ0FBMENBLFdBQVksRUFBRSxDQUFDO0lBQ25IO0lBRUEsS0FBSyxDQUFFRyxjQUFjLEVBQUVFLE9BQVEsQ0FBQztFQUNsQztFQUVBLFdBQWtCTCxXQUFXQSxDQUFBLEVBQVc7SUFBRSxPQUFPQSxXQUFXO0VBQUU7QUFDaEU7QUFFQUYsSUFBSSxDQUFDZSxRQUFRLENBQUUsaUJBQWlCLEVBQUVaLGVBQWdCLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=