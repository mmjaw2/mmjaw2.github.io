// Copyright 2021-2024, University of Colorado Boulder

/**
 * Base class that defines a settable Property that determines whether the Object is enabled or not. This includes
 * support for phet-io instrumentation and a variety of options to customize the enabled Property as well as how it is
 * created.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import EnabledProperty from './EnabledProperty.js';
import merge from '../../phet-core/js/merge.js';
import { optionize3 } from '../../phet-core/js/optionize.js';
import Tandem from '../../tandem/js/Tandem.js';
import axon from './axon.js';
import Disposable from './Disposable.js';
import PhetioObject from '../../tandem/js/PhetioObject.js';

// constants
const DEFAULT_OPTIONS = {
  enabledProperty: null,
  enabled: true,
  enabledPropertyOptions: null,
  phetioEnabledPropertyInstrumented: true,
  tandem: PhetioObject.DEFAULT_OPTIONS.tandem
};
export default class EnabledComponent extends Disposable {
  constructor(providedOptions) {
    const options = optionize3()({}, DEFAULT_OPTIONS, providedOptions);
    const ownsEnabledProperty = !options.enabledProperty;
    assert && options.enabledPropertyOptions && assert(!(!options.phetioEnabledPropertyInstrumented && options.enabledPropertyOptions.tandem), 'incompatible options. Cannot specify phetioEnabledPropertyInstrumented opt out and a Tandem via enabledPropertyOptions.');
    super(options);

    // @ts-expect-error There is no way without a plethora of parameterized types to convey if this enabledProperty is
    // settable, so accept unsettable, and typecast to settable.
    this.enabledProperty = options.enabledProperty || new EnabledProperty(options.enabled, merge({
      tandem: options.phetioEnabledPropertyInstrumented ? options.tandem.createTandem(EnabledProperty.TANDEM_NAME) : Tandem.OPT_OUT
    }, options.enabledPropertyOptions));
    this.disposeEnabledComponent = () => {
      ownsEnabledProperty && this.enabledProperty.dispose();
    };
  }
  setEnabled(enabled) {
    assert && assert(this.enabledProperty.isSettable(), 'cannot set enabledProperty');
    this.enabledProperty.value = enabled;
  }
  set enabled(value) {
    this.setEnabled(value);
  }
  get enabled() {
    return this.isEnabled();
  }
  isEnabled() {
    return this.enabledProperty.value;
  }
  dispose() {
    this.disposeEnabledComponent();
    super.dispose();
  }
}
axon.register('EnabledComponent', EnabledComponent);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,