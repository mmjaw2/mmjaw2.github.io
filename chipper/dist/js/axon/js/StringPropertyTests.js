// Copyright 2017-2023, University of Colorado Boulder

/**
 * QUnit tests for StringProperty
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Chris Malley (PixelZoom, Inc.)
 */

import StringProperty from './StringProperty.js';
QUnit.module('StringProperty');
QUnit.test('Test StringProperty', assert => {
  let p = null;

  // valueType
  window.assert && assert.throws(() => {
    // @ts-expect-error INTENTIONAL setting valueType option for testing
    p = new StringProperty('foo', {
      valueType: 'string'
    });
  }, 'valueType cannot be set by client');
  p = new StringProperty('foo');
  p.value = 'bar';
  window.assert && assert.throws(() => {
    // @ts-expect-error INTENTIONAL setting wrong value for testing
    p.value = 0;
  }, 'set value fails valueType test');

  // validValues
  window.assert && assert.throws(() => {
    p = new StringProperty('bad', {
      validValues: ['foo', 'bar']
    });
  }, 'initial value is not a member of validValues');
  window.assert && assert.throws(() => {
    p = new StringProperty('foo', {
      // @ts-expect-error INTENTIONAL incorrect valueType for testing
      validValues: ['foo', 'bar', 0]
    });
  }, 'member of validValues has incorrect valueType');
  window.assert && assert.throws(() => {
    p = new StringProperty('foo', {
      validValues: ['foo', 'bar'],
      isValidValue: function (value) {
        return value.startsWith('f');
      }
    });
  }, 'member of validValues fails isValidValue test');
  p = new StringProperty('foo', {
    validValues: ['foo', 'bar']
  });
  p.value = 'bar';
  window.assert && assert.throws(() => {
    p.value = 'bad';
  }, 'set value is not a member of validValues');

  // isValidValue
  p = new StringProperty('foo', {
    isValidValue: function (value) {
      return value.startsWith('f');
    }
  });
  p.value = 'five';
  window.assert && assert.throws(() => {
    p.value = 'bad';
  }, 'set value fails isValidValue test');

  // multiple compatible options
  p = new StringProperty('foo', {
    validValues: ['foo', 'bar'],
    isValidValue: function (value) {
      return value.length === 3;
    }
  });

  // multiple incompatible options
  window.assert && assert.throws(() => {
    p = new StringProperty('foo', {
      validValues: ['foo', 'bar'],
      isValidValue: function (value) {
        return value.length === 4;
      }
    });
  }, 'incompatible validation options fail on initialization');
  assert.ok(true, 'so we have at least 1 test in this set');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdHJpbmdQcm9wZXJ0eSIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsInAiLCJ3aW5kb3ciLCJ0aHJvd3MiLCJ2YWx1ZVR5cGUiLCJ2YWx1ZSIsInZhbGlkVmFsdWVzIiwiaXNWYWxpZFZhbHVlIiwic3RhcnRzV2l0aCIsImxlbmd0aCIsIm9rIl0sInNvdXJjZXMiOlsiU3RyaW5nUHJvcGVydHlUZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBRVW5pdCB0ZXN0cyBmb3IgU3RyaW5nUHJvcGVydHlcclxuICpcclxuICogQGF1dGhvciBTYW0gUmVpZCAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICogQGF1dGhvciBDaHJpcyBNYWxsZXkgKFBpeGVsWm9vbSwgSW5jLilcclxuICovXHJcblxyXG5pbXBvcnQgU3RyaW5nUHJvcGVydHkgZnJvbSAnLi9TdHJpbmdQcm9wZXJ0eS5qcyc7XHJcblxyXG5RVW5pdC5tb2R1bGUoICdTdHJpbmdQcm9wZXJ0eScgKTtcclxuUVVuaXQudGVzdCggJ1Rlc3QgU3RyaW5nUHJvcGVydHknLCBhc3NlcnQgPT4ge1xyXG5cclxuICBsZXQgcDogU3RyaW5nUHJvcGVydHkgfCBudWxsID0gbnVsbDtcclxuXHJcbiAgLy8gdmFsdWVUeXBlXHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiB7XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBJTlRFTlRJT05BTCBzZXR0aW5nIHZhbHVlVHlwZSBvcHRpb24gZm9yIHRlc3RpbmdcclxuICAgIHAgPSBuZXcgU3RyaW5nUHJvcGVydHkoICdmb28nLCB7IHZhbHVlVHlwZTogJ3N0cmluZycgfSApO1xyXG4gIH0sICd2YWx1ZVR5cGUgY2Fubm90IGJlIHNldCBieSBjbGllbnQnICk7XHJcbiAgcCA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJ2ZvbycgKTtcclxuICBwLnZhbHVlID0gJ2Jhcic7XHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiB7XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciBJTlRFTlRJT05BTCBzZXR0aW5nIHdyb25nIHZhbHVlIGZvciB0ZXN0aW5nXHJcbiAgICBwLnZhbHVlID0gMDtcclxuICB9LCAnc2V0IHZhbHVlIGZhaWxzIHZhbHVlVHlwZSB0ZXN0JyApO1xyXG5cclxuICAvLyB2YWxpZFZhbHVlc1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG4gICAgcCA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJ2JhZCcsIHtcclxuICAgICAgdmFsaWRWYWx1ZXM6IFsgJ2ZvbycsICdiYXInIF1cclxuICAgIH0gKTtcclxuICB9LCAnaW5pdGlhbCB2YWx1ZSBpcyBub3QgYSBtZW1iZXIgb2YgdmFsaWRWYWx1ZXMnICk7XHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiB7XHJcbiAgICBwID0gbmV3IFN0cmluZ1Byb3BlcnR5KCAnZm9vJywge1xyXG5cclxuICAgICAgLy8gQHRzLWV4cGVjdC1lcnJvciBJTlRFTlRJT05BTCBpbmNvcnJlY3QgdmFsdWVUeXBlIGZvciB0ZXN0aW5nXHJcbiAgICAgIHZhbGlkVmFsdWVzOiBbICdmb28nLCAnYmFyJywgMCBdXHJcbiAgICB9ICk7XHJcbiAgfSwgJ21lbWJlciBvZiB2YWxpZFZhbHVlcyBoYXMgaW5jb3JyZWN0IHZhbHVlVHlwZScgKTtcclxuICB3aW5kb3cuYXNzZXJ0ICYmIGFzc2VydC50aHJvd3MoICgpID0+IHtcclxuICAgIHAgPSBuZXcgU3RyaW5nUHJvcGVydHkoICdmb28nLCB7XHJcbiAgICAgIHZhbGlkVmFsdWVzOiBbICdmb28nLCAnYmFyJyBdLFxyXG4gICAgICBpc1ZhbGlkVmFsdWU6IGZ1bmN0aW9uKCB2YWx1ZSApIHsgcmV0dXJuIHZhbHVlLnN0YXJ0c1dpdGgoICdmJyApOyB9XHJcbiAgICB9ICk7XHJcbiAgfSwgJ21lbWJlciBvZiB2YWxpZFZhbHVlcyBmYWlscyBpc1ZhbGlkVmFsdWUgdGVzdCcgKTtcclxuICBwID0gbmV3IFN0cmluZ1Byb3BlcnR5KCAnZm9vJywge1xyXG4gICAgdmFsaWRWYWx1ZXM6IFsgJ2ZvbycsICdiYXInIF1cclxuICB9ICk7XHJcbiAgcC52YWx1ZSA9ICdiYXInO1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG4gICAgcCEudmFsdWUgPSAnYmFkJztcclxuICB9LCAnc2V0IHZhbHVlIGlzIG5vdCBhIG1lbWJlciBvZiB2YWxpZFZhbHVlcycgKTtcclxuXHJcbiAgLy8gaXNWYWxpZFZhbHVlXHJcbiAgcCA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJ2ZvbycsIHtcclxuICAgIGlzVmFsaWRWYWx1ZTogZnVuY3Rpb24oIHZhbHVlICkgeyByZXR1cm4gdmFsdWUuc3RhcnRzV2l0aCggJ2YnICk7IH1cclxuICB9ICk7XHJcbiAgcC52YWx1ZSA9ICdmaXZlJztcclxuICB3aW5kb3cuYXNzZXJ0ICYmIGFzc2VydC50aHJvd3MoICgpID0+IHtcclxuICAgIHAhLnZhbHVlID0gJ2JhZCc7XHJcbiAgfSwgJ3NldCB2YWx1ZSBmYWlscyBpc1ZhbGlkVmFsdWUgdGVzdCcgKTtcclxuXHJcbiAgLy8gbXVsdGlwbGUgY29tcGF0aWJsZSBvcHRpb25zXHJcbiAgcCA9IG5ldyBTdHJpbmdQcm9wZXJ0eSggJ2ZvbycsIHtcclxuICAgIHZhbGlkVmFsdWVzOiBbICdmb28nLCAnYmFyJyBdLFxyXG4gICAgaXNWYWxpZFZhbHVlOiBmdW5jdGlvbiggdmFsdWUgKSB7IHJldHVybiB2YWx1ZS5sZW5ndGggPT09IDM7IH1cclxuICB9ICk7XHJcblxyXG4gIC8vIG11bHRpcGxlIGluY29tcGF0aWJsZSBvcHRpb25zXHJcbiAgd2luZG93LmFzc2VydCAmJiBhc3NlcnQudGhyb3dzKCAoKSA9PiB7XHJcbiAgICBwID0gbmV3IFN0cmluZ1Byb3BlcnR5KCAnZm9vJywge1xyXG4gICAgICB2YWxpZFZhbHVlczogWyAnZm9vJywgJ2JhcicgXSxcclxuICAgICAgaXNWYWxpZFZhbHVlOiBmdW5jdGlvbiggdmFsdWUgKSB7IHJldHVybiB2YWx1ZS5sZW5ndGggPT09IDQ7IH1cclxuICAgIH0gKTtcclxuICB9LCAnaW5jb21wYXRpYmxlIHZhbGlkYXRpb24gb3B0aW9ucyBmYWlsIG9uIGluaXRpYWxpemF0aW9uJyApO1xyXG5cclxuICBhc3NlcnQub2soIHRydWUsICdzbyB3ZSBoYXZlIGF0IGxlYXN0IDEgdGVzdCBpbiB0aGlzIHNldCcgKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE9BQU9BLGNBQWMsTUFBTSxxQkFBcUI7QUFFaERDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLGdCQUFpQixDQUFDO0FBQ2hDRCxLQUFLLENBQUNFLElBQUksQ0FBRSxxQkFBcUIsRUFBRUMsTUFBTSxJQUFJO0VBRTNDLElBQUlDLENBQXdCLEdBQUcsSUFBSTs7RUFFbkM7RUFDQUMsTUFBTSxDQUFDRixNQUFNLElBQUlBLE1BQU0sQ0FBQ0csTUFBTSxDQUFFLE1BQU07SUFFcEM7SUFDQUYsQ0FBQyxHQUFHLElBQUlMLGNBQWMsQ0FBRSxLQUFLLEVBQUU7TUFBRVEsU0FBUyxFQUFFO0lBQVMsQ0FBRSxDQUFDO0VBQzFELENBQUMsRUFBRSxtQ0FBb0MsQ0FBQztFQUN4Q0gsQ0FBQyxHQUFHLElBQUlMLGNBQWMsQ0FBRSxLQUFNLENBQUM7RUFDL0JLLENBQUMsQ0FBQ0ksS0FBSyxHQUFHLEtBQUs7RUFDZkgsTUFBTSxDQUFDRixNQUFNLElBQUlBLE1BQU0sQ0FBQ0csTUFBTSxDQUFFLE1BQU07SUFFcEM7SUFDQUYsQ0FBQyxDQUFDSSxLQUFLLEdBQUcsQ0FBQztFQUNiLENBQUMsRUFBRSxnQ0FBaUMsQ0FBQzs7RUFFckM7RUFDQUgsTUFBTSxDQUFD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