// Copyright 2022-2024, University of Colorado Boulder

/**
 * QUnit tests for NumberProperty
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import dotRandom from '../../dot/js/dotRandom.js';
import VarianceNumberProperty from './VarianceNumberProperty.js';
QUnit.module('VarianceNumberProperty');
QUnit.test('Test VarianceNumberProperty', assert => {
  const computeFunction = v => v + 1;
  const property = new VarianceNumberProperty(0, computeFunction);
  assert.ok(property.getRandomizedValue() === 1, 'initial value');
  // assert.ok( v.value === 1, 'value getter' );

  const mean = 6;
  const standardDeviation = 2;
  const computeFunction2 = mean => {
    let u = 0;
    let v = 0;
    while (u === 0) {
      u = dotRandom.nextDouble();
    } //Converting [0,1) to (0,1)
    while (v === 0) {
      v = dotRandom.nextDouble();
    }
    return mean + standardDeviation * Math.sqrt(-2.0 * Math.log(u)) * Math.cos(2.0 * Math.PI * v);
  };
  const secondProperty = new VarianceNumberProperty(mean, computeFunction2);
  assert.ok(secondProperty.getRandomizedValue() !== secondProperty.getRandomizedValue(), 'randomly assigned'); // eslint-disable-line no-self-compare

  // See the standard deviation in action!
  console.log('Variance number property tests:');
  console.log('Mean: ' + mean);
  console.log('Standard deviation: ' + standardDeviation);
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
  console.log(secondProperty.getRandomizedValue());
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb3RSYW5kb20iLCJWYXJpYW5jZU51bWJlclByb3BlcnR5IiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0IiwiY29tcHV0ZUZ1bmN0aW9uIiwidiIsInByb3BlcnR5Iiwib2siLCJnZXRSYW5kb21pemVkVmFsdWUiLCJtZWFuIiwic3RhbmRhcmREZXZpYXRpb24iLCJjb21wdXRlRnVuY3Rpb24yIiwidSIsIm5leHREb3VibGUiLCJNYXRoIiwic3FydCIsImxvZyIsImNvcyIsIlBJIiwic2Vjb25kUHJvcGVydHkiLCJjb25zb2xlIl0sInNvdXJjZXMiOlsiVmFyaWFuY2VOdW1iZXJQcm9wZXJ0eVRlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIyLTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFFVbml0IHRlc3RzIGZvciBOdW1iZXJQcm9wZXJ0eVxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGRvdFJhbmRvbSBmcm9tICcuLi8uLi9kb3QvanMvZG90UmFuZG9tLmpzJztcclxuaW1wb3J0IFZhcmlhbmNlTnVtYmVyUHJvcGVydHkgZnJvbSAnLi9WYXJpYW5jZU51bWJlclByb3BlcnR5LmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ1ZhcmlhbmNlTnVtYmVyUHJvcGVydHknICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnVGVzdCBWYXJpYW5jZU51bWJlclByb3BlcnR5JywgYXNzZXJ0ID0+IHtcclxuXHJcbiAgY29uc3QgY29tcHV0ZUZ1bmN0aW9uID0gKCB2OiBudW1iZXIgKSA9PiB2ICsgMTtcclxuXHJcbiAgY29uc3QgcHJvcGVydHkgPSBuZXcgVmFyaWFuY2VOdW1iZXJQcm9wZXJ0eSggMCwgY29tcHV0ZUZ1bmN0aW9uICk7XHJcblxyXG4gIGFzc2VydC5vayggcHJvcGVydHkuZ2V0UmFuZG9taXplZFZhbHVlKCkgPT09IDEsICdpbml0aWFsIHZhbHVlJyApO1xyXG4gIC8vIGFzc2VydC5vayggdi52YWx1ZSA9PT0gMSwgJ3ZhbHVlIGdldHRlcicgKTtcclxuXHJcbiAgY29uc3QgbWVhbiA9IDY7XHJcbiAgY29uc3Qgc3RhbmRhcmREZXZpYXRpb24gPSAyO1xyXG4gIGNvbnN0IGNvbXB1dGVGdW5jdGlvbjIgPSAoIG1lYW46IG51bWJlciApOiBudW1iZXIgPT4ge1xyXG4gICAgbGV0IHUgPSAwO1xyXG4gICAgbGV0IHYgPSAwO1xyXG4gICAgd2hpbGUgKCB1ID09PSAwICkge1xyXG4gICAgICB1ID0gZG90UmFuZG9tLm5leHREb3VibGUoKTtcclxuICAgIH0gLy9Db252ZXJ0aW5nIFswLDEpIHRvICgwLDEpXHJcbiAgICB3aGlsZSAoIHYgPT09IDAgKSB7XHJcbiAgICAgIHYgPSBkb3RSYW5kb20ubmV4dERvdWJsZSgpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIChcclxuICAgICAgbWVhbiArXHJcbiAgICAgIHN0YW5kYXJkRGV2aWF0aW9uICpcclxuICAgICAgTWF0aC5zcXJ0KCAtMi4wICogTWF0aC5sb2coIHUgKSApICpcclxuICAgICAgTWF0aC5jb3MoIDIuMCAqIE1hdGguUEkgKiB2IClcclxuICAgICk7XHJcbiAgfTtcclxuXHJcbiAgY29uc3Qgc2Vjb25kUHJvcGVydHkgPSBuZXcgVmFyaWFuY2VOdW1iZXJQcm9wZXJ0eSggbWVhbiwgY29tcHV0ZUZ1bmN0aW9uMiApO1xyXG5cclxuICBhc3NlcnQub2soIHNlY29uZFByb3BlcnR5LmdldFJhbmRvbWl6ZWRWYWx1ZSgpICE9PSBzZWNvbmRQcm9wZXJ0eS5nZXRSYW5kb21pemVkVmFsdWUoKSwgJ3JhbmRvbWx5IGFzc2lnbmVkJyApOyAvLyBlc2xpbnQtZGlzYWJsZS1saW5lIG5vLXNlbGYtY29tcGFyZVxyXG5cclxuICAvLyBTZWUgdGhlIHN0YW5kYXJkIGRldmlhdGlvbiBpbiBhY3Rpb24hXHJcbiAgY29uc29sZS5sb2coICdWYXJpYW5jZSBudW1iZXIgcHJvcGVydHkgdGVzdHM6JyApO1xyXG4gIGNvbnNvbGUubG9nKCAnTWVhbjogJyArIG1lYW4gKTtcclxuICBjb25zb2xlLmxvZyggJ1N0YW5kYXJkIGRldmlhdGlvbjogJyArIHN0YW5kYXJkRGV2aWF0aW9uICk7XHJcbiAgY29uc29sZS5sb2coIHNlY29uZFByb3BlcnR5LmdldFJhbmRvbWl6ZWRWYWx1ZSgpICk7XHJcbiAgY29uc29sZS5sb2coIHNlY29uZFByb3BlcnR5LmdldFJhbmRvbWl6ZWRWYWx1ZSgpICk7XHJcbiAgY29uc29sZS5sb2coIHNlY29uZFByb3BlcnR5LmdldFJhbmRvbWl6ZWRWYWx1ZSgpICk7XHJcbiAgY29uc29sZS5sb2coIHNlY29uZFByb3BlcnR5LmdldFJhbmRvbWl6ZWRWYWx1ZSgpICk7XHJcbiAgY29uc29sZS5sb2coIHNlY29uZFByb3BlcnR5LmdldFJhbmRvbWl6ZWRWYWx1ZSgpICk7XHJcbiAgY29uc29sZS5sb2coIHNlY29uZFByb3BlcnR5LmdldFJhbmRvbWl6ZWRWYWx1ZSgpICk7XHJcbiAgY29uc29sZS5sb2coIHNlY29uZFByb3BlcnR5LmdldFJhbmRvbWl6ZWRWYWx1ZSgpICk7XHJcbn0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsU0FBUyxNQUFNLDJCQUEyQjtBQUNqRCxPQUFPQyxzQkFBc0IsTUFBTSw2QkFBNkI7QUFFaEVDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLHdCQUF5QixDQUFDO0FBRXhDRCxLQUFLLENBQUNFLElBQUksQ0FBRSw2QkFBNkIsRUFBRUMsTUFBTSxJQUFJO0VBRW5ELE1BQU1DLGVBQWUsR0FBS0MsQ0FBUyxJQUFNQSxDQUFDLEdBQUcsQ0FBQztFQUU5QyxNQUFNQyxRQUFRLEdBQUcsSUFBSVAsc0JBQXNCLENBQUUsQ0FBQyxFQUFFSyxlQUFnQixDQUFDO0VBRWpFRCxNQUFNLENBQUNJLEVBQUUsQ0FBRUQsUUFBUSxDQUFDRSxrQkFBa0IsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUFFLGVBQWdCLENBQUM7RUFDakU7O0VBRUEsTUFBTUMsSUFBSSxHQUFHLENBQUM7RUFDZCxNQUFNQyxpQkFBaUIsR0FBRyxDQUFDO0VBQzNCLE1BQU1DLGdCQUFnQixHQUFLRixJQUFZLElBQWM7SUFDbkQsSUFBSUcsQ0FBQyxHQUFHLENBQUM7SUFDVCxJQUFJUCxDQUFDLEdBQUcsQ0FBQztJQUNULE9BQVFPLENBQUMsS0FBSyxDQUFDLEVBQUc7TUFDaEJBLENBQUMsR0FBR2QsU0FBUyxDQUFDZSxVQUFVLENBQUMsQ0FBQztJQUM1QixDQUFDLENBQUM7SUFDRixPQUFRUixDQUFDLEtBQUssQ0FBQyxFQUFHO01BQ2hCQSxDQUFDLEdBQUdQLFNBQVMsQ0FBQ2UsVUFBVSxDQUFDLENBQUM7SUFDNUI7SUFDQSxPQUNFSixJQUFJLEdBQ0pDLGlCQUFpQixHQUNqQkksSUFBSSxDQUFDQyxJQUFJLENBQUUsQ0FBQyxHQUFHLEdBQUdELElBQUksQ0FBQ0UsR0FBRyxDQUFFSixDQUFFLENBQUUsQ0FBQyxHQUNqQ0UsSUFBSSxDQUFDRyxHQUFHLENBQUUsR0FBRyxHQUFHSCxJQUFJLENBQUNJLEVBQUUsR0FBR2IsQ0FBRSxDQUFDO0VBRWpDLENBQUM7RUFFRCxNQUFNYyxjQUFjLEdBQUcsSUFBSXBCLHNCQUFzQixDQUFFVSxJQUFJLEVBQUVFLGdCQUFpQixDQUFDO0VBRTNFUixNQUFNLENBQUNJLEVBQUUsQ0FBRVksY0FBYyxDQUFDWCxrQkFBa0IsQ0FBQyxDQUFDLEtBQUtXLGNBQWMsQ0FBQ1gsa0JBQWtCLENBQUMsQ0FBQyxFQUFFLG1CQUFvQixDQUFDLENBQUMsQ0FBQzs7RUFFL0c7RUFDQVksT0FBTyxDQUFDSixHQUFHLENBQUUsaUNBQWtDLENBQUM7RUFDaERJLE9BQU8sQ0FBQ0osR0FBRyxDQUFFLFFBQVEsR0FBR1AsSUFBSyxDQUFDO0VBQzlCVyxPQUFPLENBQUNKLEdBQUcsQ0FBRSxzQkFBc0IsR0FBR04saUJBQWtCLENBQUM7RUFDekRVLE9BQU8sQ0FBQ0osR0FBRyxDQUFFRyxjQUFjLENBQUNYLGtCQUFrQixDQUFDLENBQUUsQ0FBQztFQUNsRFksT0FBTyxDQUFDSixHQUFHLENBQUVHLGNBQWMsQ0FBQ1gsa0JBQWtCLENBQUMsQ0FBRSxDQUFDO0VBQ2xEWSxPQUFPLENBQUNKLEdBQUcsQ0FBRUcsY0FBYyxDQUFDWCxrQkFBa0IsQ0FBQyxDQUFFLENBQUM7RUFDbERZLE9BQU8sQ0FBQ0osR0FBRyxDQUFFRyxjQUFjLENBQUNYLGtCQUFrQixDQUFDLENBQUUsQ0FBQztFQUNsRFksT0FBTyxDQUFDSixHQUFHLENBQUVHLGNBQWMsQ0FBQ1gsa0JBQWtCLENBQUMsQ0FBRSxDQUFDO0VBQ2xEWSxPQUFPLENBQUNKLEdBQUcsQ0FBRUcsY0FBYyxDQUFDWCxrQkFBa0IsQ0FBQyxDQUFFLENBQUM7RUFDbERZLE9BQU8sQ0FBQ0osR0FBRyxDQUFFRyxjQUFjLENBQUNYLGtCQUFrQixDQUFDLENBQUUsQ0FBQztBQUNwRCxDQUFFLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=