// Copyright 2019-2023, University of Colorado Boulder

/**
 * QUnit tests for EmitterIO
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import merge from '../../phet-core/js/merge.js';
import NumberIO from '../../tandem/js/types/NumberIO.js';
import Emitter from './Emitter.js';
QUnit.module('EmitterIO');
QUnit.test('test EmitterIO', assert => {
  let emitter;
  if (window.assert) {
    assert.throws(() => {
      emitter = new Emitter({
        // @ts-expect-error INTENTIONAL, force set phetioType for testing
        phetioType: Emitter.EmitterIO([])
      });
    }, 'cannot supply default EmitterIO type');
    assert.throws(() => {
      emitter = new Emitter({
        // @ts-expect-error INTENTIONAL, force set phetioType for testing
        phetioType: IOType.ObjectIO
      });
    }, 'cannot supply any phetioType');
  }
  emitter = new Emitter({
    parameters: [{
      phetioType: NumberIO,
      name: 'myNumber'
    }]
  });
  emitter.emit(4);
  emitter.emit(10);
  window.assert && assert.throws(() => emitter.emit('string'), 'cannot emit string');
  window.assert && assert.throws(() => emitter.emit(null), 'cannot emit string');
  const validator = {
    isValidValue: v => typeof v === 'number' && v < 3
  };
  emitter = new Emitter({
    parameters: [merge({
      phetioType: NumberIO,
      name: 'helloIAMNumber'
    }, validator)]
  });
  assert.ok(emitter['parameters'][0].isValidValue === validator.isValidValue, 'should use specified validator instead of NumberIO\'s');
  emitter.emit(2);
  window.assert && assert.throws(() => emitter.emit('string'), 'cannot emit string with validator');
  window.assert && assert.throws(() => emitter.emit('a'), 'cannot emit string with  that validator');
  window.assert && assert.throws(() => emitter.emit(4), 'cannot emit incorrect number');
  const IOType = Emitter.EmitterIO([NumberIO]);
  IOType.methods.emit.implementation.call(emitter, 2);

  // @ts-expect-error typescript does not know that getValidationErrors exists
  assert.ok(IOType.methods.getValidationErrors.implementation.call(emitter, 2)[0] === null, 'should be valid');

  // @ts-expect-error typescript does not know that getValidationErrors exists
  assert.ok(IOType.methods.getValidationErrors.implementation.call(emitter, 4)[0] !== null, 'should be invalid');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJtZXJnZSIsIk51bWJlcklPIiwiRW1pdHRlciIsIlFVbml0IiwibW9kdWxlIiwidGVzdCIsImFzc2VydCIsImVtaXR0ZXIiLCJ3aW5kb3ciLCJ0aHJvd3MiLCJwaGV0aW9UeXBlIiwiRW1pdHRlcklPIiwiSU9UeXBlIiwiT2JqZWN0SU8iLCJwYXJhbWV0ZXJzIiwibmFtZSIsImVtaXQiLCJ2YWxpZGF0b3IiLCJpc1ZhbGlkVmFsdWUiLCJ2Iiwib2siLCJtZXRob2RzIiwiaW1wbGVtZW50YXRpb24iLCJjYWxsIiwiZ2V0VmFsaWRhdGlvbkVycm9ycyJdLCJzb3VyY2VzIjpbIkVtaXR0ZXJJT1Rlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE5LTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFFVbml0IHRlc3RzIGZvciBFbWl0dGVySU9cclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBtZXJnZSBmcm9tICcuLi8uLi9waGV0LWNvcmUvanMvbWVyZ2UuanMnO1xyXG5pbXBvcnQgTnVtYmVySU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bWJlcklPLmpzJztcclxuaW1wb3J0IEVtaXR0ZXIgZnJvbSAnLi9FbWl0dGVyLmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ0VtaXR0ZXJJTycgKTtcclxuXHJcblFVbml0LnRlc3QoICd0ZXN0IEVtaXR0ZXJJTycsIGFzc2VydCA9PiB7XHJcblxyXG4gIGxldCBlbWl0dGVyOiBFbWl0dGVyPFsgdW5rbm93biBdPjtcclxuXHJcbiAgaWYgKCB3aW5kb3cuYXNzZXJ0ICkge1xyXG5cclxuICAgIGFzc2VydC50aHJvd3MoICgpID0+IHtcclxuICAgICAgZW1pdHRlciA9IG5ldyBFbWl0dGVyKCB7XHJcblxyXG4gICAgICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgSU5URU5USU9OQUwsIGZvcmNlIHNldCBwaGV0aW9UeXBlIGZvciB0ZXN0aW5nXHJcbiAgICAgICAgcGhldGlvVHlwZTogRW1pdHRlci5FbWl0dGVySU8oIFtdIClcclxuICAgICAgfSApO1xyXG4gICAgfSwgJ2Nhbm5vdCBzdXBwbHkgZGVmYXVsdCBFbWl0dGVySU8gdHlwZScgKTtcclxuXHJcbiAgICBhc3NlcnQudGhyb3dzKCAoKSA9PiB7XHJcbiAgICAgIGVtaXR0ZXIgPSBuZXcgRW1pdHRlcigge1xyXG5cclxuICAgICAgICAvLyBAdHMtZXhwZWN0LWVycm9yIElOVEVOVElPTkFMLCBmb3JjZSBzZXQgcGhldGlvVHlwZSBmb3IgdGVzdGluZ1xyXG4gICAgICAgIHBoZXRpb1R5cGU6IElPVHlwZS5PYmplY3RJT1xyXG4gICAgICB9ICk7XHJcbiAgICB9LCAnY2Fubm90IHN1cHBseSBhbnkgcGhldGlvVHlwZScgKTtcclxuICB9XHJcblxyXG4gIGVtaXR0ZXIgPSBuZXcgRW1pdHRlcigge1xyXG4gICAgcGFyYW1ldGVyczogW1xyXG4gICAgICB7IHBoZXRpb1R5cGU6IE51bWJlcklPLCBuYW1lOiAnbXlOdW1iZXInIH1cclxuICAgIF1cclxuICB9ICk7XHJcbiAgZW1pdHRlci5lbWl0KCA0ICk7XHJcbiAgZW1pdHRlci5lbWl0KCAxMCApO1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4gZW1pdHRlci5lbWl0KCAnc3RyaW5nJyApLCAnY2Fubm90IGVtaXQgc3RyaW5nJyApO1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4gZW1pdHRlci5lbWl0KCBudWxsICksICdjYW5ub3QgZW1pdCBzdHJpbmcnICk7XHJcblxyXG4gIGNvbnN0IHZhbGlkYXRvciA9IHsgaXNWYWxpZFZhbHVlOiAoIHY6IHVua25vd24gKSA9PiB0eXBlb2YgdiA9PT0gJ251bWJlcicgJiYgdiA8IDMgfTtcclxuICBlbWl0dGVyID0gbmV3IEVtaXR0ZXIoIHtcclxuICAgIHBhcmFtZXRlcnM6IFsgbWVyZ2UoIHsgcGhldGlvVHlwZTogTnVtYmVySU8sIG5hbWU6ICdoZWxsb0lBTU51bWJlcicgfSwgdmFsaWRhdG9yICkgXVxyXG4gIH0gKTtcclxuICBhc3NlcnQub2soIGVtaXR0ZXJbICdwYXJhbWV0ZXJzJyBdWyAwIF0uaXNWYWxpZFZhbHVlID09PSB2YWxpZGF0b3IuaXNWYWxpZFZhbHVlLCAnc2hvdWxkIHVzZSBzcGVjaWZpZWQgdmFsaWRhdG9yIGluc3RlYWQgb2YgTnVtYmVySU9cXCdzJyApO1xyXG4gIGVtaXR0ZXIuZW1pdCggMiApO1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4gZW1pdHRlci5lbWl0KCAnc3RyaW5nJyApLCAnY2Fubm90IGVtaXQgc3RyaW5nIHdpdGggdmFsaWRhdG9yJyApO1xyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4gZW1pdHRlci5lbWl0KCAnYScgKSwgJ2Nhbm5vdCBlbWl0IHN0cmluZyB3aXRoICB0aGF0IHZhbGlkYXRvcicgKTtcclxuICB3aW5kb3cuYXNzZXJ0ICYmIGFzc2VydC50aHJvd3MoICgpID0+IGVtaXR0ZXIuZW1pdCggNCApLCAnY2Fubm90IGVtaXQgaW5jb3JyZWN0IG51bWJlcicgKTtcclxuXHJcbiAgY29uc3QgSU9UeXBlID0gRW1pdHRlci5FbWl0dGVySU8oIFsgTnVtYmVySU8gXSApO1xyXG4gIElPVHlwZS5tZXRob2RzIS5lbWl0LmltcGxlbWVudGF0aW9uLmNhbGwoIGVtaXR0ZXIsIDIgKTtcclxuXHJcbiAgLy8gQHRzLWV4cGVjdC1lcnJvciB0eXBlc2NyaXB0IGRvZXMgbm90IGtub3cgdGhhdCBnZXRWYWxpZGF0aW9uRXJyb3JzIGV4aXN0c1xyXG4gIGFzc2VydC5vayggSU9UeXBlLm1ldGhvZHMhLmdldFZhbGlkYXRpb25FcnJvcnMuaW1wbGVtZW50YXRpb24uY2FsbCggZW1pdHRlciwgMiApWyAwIF0gPT09IG51bGwsICdzaG91bGQgYmUgdmFsaWQnICk7XHJcblxyXG4gIC8vIEB0cy1leHBlY3QtZXJyb3IgdHlwZXNjcmlwdCBkb2VzIG5vdCBrbm93IHRoYXQgZ2V0VmFsaWRhdGlvbkVycm9ycyBleGlzdHNcclxuICBhc3NlcnQub2soIElPVHlwZS5tZXRob2RzIS5nZXRWYWxpZGF0aW9uRXJyb3JzLmltcGxlbWVudGF0aW9uLmNhbGwoIGVtaXR0ZXIsIDQgKVsgMCBdICE9PSBudWxsLCAnc2hvdWxkIGJlIGludmFsaWQnICk7XHJcbn0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsS0FBSyxNQUFNLDZCQUE2QjtBQUMvQyxPQUFPQyxRQUFRLE1BQU0sbUNBQW1DO0FBQ3hELE9BQU9DLE9BQU8sTUFBTSxjQUFjO0FBRWxDQyxLQUFLLENBQUNDLE1BQU0sQ0FBRSxXQUFZLENBQUM7QUFFM0JELEtBQUssQ0FBQ0UsSUFBSSxDQUFFLGdCQUFnQixFQUFFQyxNQUFNLElBQUk7RUFFdEMsSUFBSUMsT0FBNkI7RUFFakMsSUFBS0MsTUFBTSxDQUFDRixNQUFNLEVBQUc7SUFFbkJBLE1BQU0sQ0FBQ0csTUFBTSxDQUFFLE1BQU07TUFDbkJGLE9BQU8sR0FBRyxJQUFJTCxPQUFPLENBQUU7UUFFckI7UUFDQVEsVUFBVSxFQUFFUixPQUFPLENBQUNTLFNBQVMsQ0FBRSxFQUFHO01BQ3BDLENBQUUsQ0FBQztJQUNMLENBQUMsRUFBRSxzQ0FBdUMsQ0FBQztJQUUzQ0wsTUFBTSxDQUFDRyxNQUFNLENBQUUsTUFBTTtNQUNuQkYsT0FBTyxHQUFHLElBQUlMLE9BQU8sQ0FBRTtRQUVyQjtRQUNBUSxVQUFVLEVBQUVFLE1BQU0sQ0FBQ0M7TUFDckIsQ0FBRSxDQUFDO0lBQ0wsQ0FBQyxFQUFFLDhCQUErQixDQUFDO0VBQ3JDO0VBRUFOLE9BQU8sR0FBRyxJQUFJTCxPQUFPLENBQUU7SUFDckJZLFVBQVUsRUFBRSxDQUNWO01BQUVKLFVBQVUsRUFBRVQsUUFBUTtNQUFFYyxJQUFJLEVBQUU7SUFBVyxDQUFDO0VBRTlDLENBQUUsQ0FBQztFQUNIUixPQUFPLENBQUNTLElBQUksQ0FBRSxDQUFFLENBQUM7RUFDakJULE9BQU8sQ0FBQ1MsSUFBSSxDQUFFLEVBQUcsQ0FBQztFQUNsQlIsTUFBTSxDQUFDRixNQUFNLElBQUlBLE1BQU0sQ0FBQ0csTUFBTSxDQUFFLE1BQU1GLE9BQU8sQ0FBQ1MsSUFBSSxDQUFFLFFBQVMsQ0FBQyxFQUFFLG9CQUFxQixDQUFDO0VBQ3RGUixNQUFNLENBQUNGLE1BQU0sSUFBSUEsTUFBTSxDQUFDRyxNQUFNLENBQUUsTUFBTUYsT0FBTyxDQUFDUyxJQUFJLENBQUUsSUFBSyxDQUFDLEVBQUUsb0JBQXFCLENBQUM7RUFFbEYsTUFBTUMsU0FBUyxHQUFHO0lBQUVDLFlBQVksRUFBSUMsQ0FBVSxJQUFNLE9BQU9BLENBQUMsS0FBSyxRQUFRLElBQUlBLENBQUMsR0FBRztFQUFFLENBQUM7RUFDcEZaLE9BQU8sR0FBRyxJQUFJTCxPQUFPLENBQUU7SUFDckJZLFVBQVUsRUFBRSxDQUFFZCxLQUFLLENBQUU7TUFBRVUsVUFBVSxFQUFFVCxRQUFRO01BQUVjLElBQUksRUFBRTtJQUFpQixDQUFDLEVBQUVFLFNBQVUsQ0FBQztFQUNwRixDQUFFLENBQUM7RUFDSFgsTUFBTSxDQUFDYyxFQUFFLENBQUViLE9BQU8sQ0FBRSxZQUFZLENBQUUsQ0FBRSxDQUFDLENBQUUsQ0FBQ1csWUFBWSxLQUFLRCxTQUFTLENBQUNDLFlBQVksRUFBRSx1REFBd0QsQ0FBQztFQUMxSVgsT0FBTyxDQUFDUyxJQUFJLENBQUUsQ0FBRSxDQUFDO0VBQ2pCUixNQUFNLENBQUNGLE1BQU0sSUFBSUEsTUFBTSxDQUFDRyxNQUFNLENBQUUsTUFBTUYsT0FBTyxDQUFDUyxJQUFJLENBQUUsUUFBUyxDQUFDLEVBQUUsbUNBQW9DLENBQUM7RUFDckdSLE1BQU0sQ0FBQ0YsTUFBTSxJQUFJQSxNQUFNLENBQUNHLE1BQU0sQ0FBRSxNQUFNRixPQUFPLENBQUNTLElBQUksQ0FBRSxHQUFJLENBQUMsRUFBRSx5Q0FBMEMsQ0FBQztFQUN0R1IsTUFBTSxDQUFDRixNQUFNLElBQUlBLE1BQU0sQ0FBQ0csTUFBTSxDQUFFLE1BQU1GLE9BQU8sQ0FBQ1MsSUFBSSxDQUFFLENBQUUsQ0FBQyxFQUFFLDhCQUErQixDQUFDO0VBRXpGLE1BQU1KLE1BQU0sR0FBR1YsT0FBTyxDQUFDUyxTQUFTLENBQUUsQ0FBRVYsUUFBUSxDQUFHLENBQUM7RUFDaERXLE1BQU0sQ0FBQ1MsT0FBTyxDQUFFTCxJQUFJLENBQUNNLGNBQWMsQ0FBQ0MsSUFBSSxDQUFFaEIsT0FBTyxFQUFFLENBQUUsQ0FBQzs7RUFFdEQ7RUFDQUQsTUFBTSxDQUFDYyxFQUFFLENBQUVSLE1BQU0sQ0FBQ1MsT0FBTyxDQUFFRyxtQkFBbUIsQ0FBQ0YsY0FBYyxDQUFDQyxJQUFJLENBQUVoQixPQUFPLEVBQUUsQ0FBRSxDQUFDLENBQUUsQ0FBQyxDQUFFLEtBQUssSUFBSSxFQUFFLGlCQUFrQixDQUFDOztFQUVuSDtFQUNBRCxNQUFNLENBQUNjLEVBQUUsQ0FBRVIsTUFBTSxDQUFDUyxPQUFPLENBQUVHLG1CQUFtQixDQUFDRixjQUFjLENBQUNDLElBQUksQ0FBRWhCLE9BQU8sRUFBRSxDQUFFLENBQUMsQ0FBRSxDQUFDLENBQUUsS0FBSyxJQUFJLEVBQUUsbUJBQW9CLENBQUM7QUFDdkgsQ0FBRSxDQUFDIiwiaWdub3JlTGlzdCI6W119