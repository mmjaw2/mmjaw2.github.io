// Copyright 2013-2024, University of Colorado Boulder

/*
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

(function () {
  window.assertions = window.assertions || {};
  window.assertions.assertFunction = window.assertions.assertFunction || function (predicate, ...messages) {
    if (!predicate) {
      // don't treat falsey as a message.
      messages = messages.filter(message => !!messages);

      // Log the stack trace to IE.  Just creating an Error is not enough, it has to be caught to get a stack.
      if (window.navigator && window.navigator.appName === 'Microsoft Internet Explorer') {
        messages.push(`stack=\n${new Error().stack}`);
      }

      // Add "Assertion Failed" to the front of the message list
      const assertPrefix = messages.length > 0 ? 'Assertion failed: ' : 'Assertion failed';
      console && console.error && console.error(assertPrefix, ...messages);
      if (window.QueryStringMachine && QueryStringMachine.containsKey('debugger')) {
        debugger; // eslint-disable-line no-debugger
      }

      // Check if Error.stackTraceLimit exists and is writable
      const descriptor = Object.getOwnPropertyDescriptor(Error, 'stackTraceLimit');
      const stackTraceWritable = descriptor && (descriptor.writable || descriptor.set && typeof descriptor.set === 'function');
      if (stackTraceWritable) {
        // @ts-ignore
        Error.stackTraceLimit = 20;
      }
      throw new Error(assertPrefix + messages.join('\n '));
    }
  };
  window.assert = window.assert || null;
  window.assertSlow = window.assertSlow || null;
  window.assertions.enableAssert = function () {
    window.assert = window.assertions.assertFunction;
    window.console && window.console.log && window.console.log('enabling assert');
  };
  window.assertions.disableAssert = function () {
    window.assert = null;
    window.console && window.console.log && window.console.log('disabling assert');
  };
  window.assertions.enableAssertSlow = function () {
    window.assertSlow = window.assertions.assertFunction;
    window.console && window.console.log && window.console.log('enabling assertSlow');
  };
  window.assertions.disableAssertSlow = function () {
    window.assertSlow = null;
    window.console && window.console.log && window.console.log('disabling assertSlow');
  };
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ3aW5kb3ciLCJhc3NlcnRpb25zIiwiYXNzZXJ0RnVuY3Rpb24iLCJwcmVkaWNhdGUiLCJtZXNzYWdlcyIsImZpbHRlciIsIm1lc3NhZ2UiLCJuYXZpZ2F0b3IiLCJhcHBOYW1lIiwicHVzaCIsIkVycm9yIiwic3RhY2siLCJhc3NlcnRQcmVmaXgiLCJsZW5ndGgiLCJjb25zb2xlIiwiZXJyb3IiLCJRdWVyeVN0cmluZ01hY2hpbmUiLCJjb250YWluc0tleSIsImRlc2NyaXB0b3IiLCJPYmplY3QiLCJnZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IiLCJzdGFja1RyYWNlV3JpdGFibGUiLCJ3cml0YWJsZSIsInNldCIsInN0YWNrVHJhY2VMaW1pdCIsImpvaW4iLCJhc3NlcnQiLCJhc3NlcnRTbG93IiwiZW5hYmxlQXNzZXJ0IiwibG9nIiwiZGlzYWJsZUFzc2VydCIsImVuYWJsZUFzc2VydFNsb3ciLCJkaXNhYmxlQXNzZXJ0U2xvdyJdLCJzb3VyY2VzIjpbImFzc2VydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxMy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG4oIGZ1bmN0aW9uKCkge1xyXG5cclxuXHJcbiAgd2luZG93LmFzc2VydGlvbnMgPSB3aW5kb3cuYXNzZXJ0aW9ucyB8fCB7fTtcclxuICB3aW5kb3cuYXNzZXJ0aW9ucy5hc3NlcnRGdW5jdGlvbiA9IHdpbmRvdy5hc3NlcnRpb25zLmFzc2VydEZ1bmN0aW9uIHx8IGZ1bmN0aW9uKCBwcmVkaWNhdGUsIC4uLm1lc3NhZ2VzICkge1xyXG4gICAgaWYgKCAhcHJlZGljYXRlICkge1xyXG5cclxuICAgICAgLy8gZG9uJ3QgdHJlYXQgZmFsc2V5IGFzIGEgbWVzc2FnZS5cclxuICAgICAgbWVzc2FnZXMgPSBtZXNzYWdlcy5maWx0ZXIoIG1lc3NhZ2UgPT4gISFtZXNzYWdlcyApO1xyXG5cclxuICAgICAgLy8gTG9nIHRoZSBzdGFjayB0cmFjZSB0byBJRS4gIEp1c3QgY3JlYXRpbmcgYW4gRXJyb3IgaXMgbm90IGVub3VnaCwgaXQgaGFzIHRvIGJlIGNhdWdodCB0byBnZXQgYSBzdGFjay5cclxuICAgICAgaWYgKCB3aW5kb3cubmF2aWdhdG9yICYmIHdpbmRvdy5uYXZpZ2F0b3IuYXBwTmFtZSA9PT0gJ01pY3Jvc29mdCBJbnRlcm5ldCBFeHBsb3JlcicgKSB7XHJcbiAgICAgICAgbWVzc2FnZXMucHVzaCggYHN0YWNrPVxcbiR7bmV3IEVycm9yKCkuc3RhY2t9YCApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICAvLyBBZGQgXCJBc3NlcnRpb24gRmFpbGVkXCIgdG8gdGhlIGZyb250IG9mIHRoZSBtZXNzYWdlIGxpc3RcclxuICAgICAgY29uc3QgYXNzZXJ0UHJlZml4ID0gbWVzc2FnZXMubGVuZ3RoID4gMCA/ICdBc3NlcnRpb24gZmFpbGVkOiAnIDogJ0Fzc2VydGlvbiBmYWlsZWQnO1xyXG4gICAgICBjb25zb2xlICYmIGNvbnNvbGUuZXJyb3IgJiYgY29uc29sZS5lcnJvciggYXNzZXJ0UHJlZml4LCAuLi5tZXNzYWdlcyApO1xyXG4gICAgICBpZiAoIHdpbmRvdy5RdWVyeVN0cmluZ01hY2hpbmUgJiYgUXVlcnlTdHJpbmdNYWNoaW5lLmNvbnRhaW5zS2V5KCAnZGVidWdnZXInICkgKSB7XHJcbiAgICAgICAgZGVidWdnZXI7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZGVidWdnZXJcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gQ2hlY2sgaWYgRXJyb3Iuc3RhY2tUcmFjZUxpbWl0IGV4aXN0cyBhbmQgaXMgd3JpdGFibGVcclxuICAgICAgY29uc3QgZGVzY3JpcHRvciA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3IoIEVycm9yLCAnc3RhY2tUcmFjZUxpbWl0JyApO1xyXG4gICAgICBjb25zdCBzdGFja1RyYWNlV3JpdGFibGUgPSBkZXNjcmlwdG9yICYmICggZGVzY3JpcHRvci53cml0YWJsZSB8fCAoIGRlc2NyaXB0b3Iuc2V0ICYmIHR5cGVvZiBkZXNjcmlwdG9yLnNldCA9PT0gJ2Z1bmN0aW9uJyApICk7XHJcblxyXG4gICAgICBpZiAoIHN0YWNrVHJhY2VXcml0YWJsZSApIHtcclxuXHJcbiAgICAgICAgLy8gQHRzLWlnbm9yZVxyXG4gICAgICAgIEVycm9yLnN0YWNrVHJhY2VMaW1pdCA9IDIwO1xyXG4gICAgICB9XHJcblxyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoIGFzc2VydFByZWZpeCArIG1lc3NhZ2VzLmpvaW4oICdcXG4gJyApICk7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgd2luZG93LmFzc2VydCA9IHdpbmRvdy5hc3NlcnQgfHwgbnVsbDtcclxuICB3aW5kb3cuYXNzZXJ0U2xvdyA9IHdpbmRvdy5hc3NlcnRTbG93IHx8IG51bGw7XHJcblxyXG4gIHdpbmRvdy5hc3NlcnRpb25zLmVuYWJsZUFzc2VydCA9IGZ1bmN0aW9uKCkge1xyXG4gICAgd2luZG93LmFzc2VydCA9IHdpbmRvdy5hc3NlcnRpb25zLmFzc2VydEZ1bmN0aW9uO1xyXG4gICAgd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nICYmIHdpbmRvdy5jb25zb2xlLmxvZyggJ2VuYWJsaW5nIGFzc2VydCcgKTtcclxuICB9O1xyXG4gIHdpbmRvdy5hc3NlcnRpb25zLmRpc2FibGVBc3NlcnQgPSBmdW5jdGlvbigpIHtcclxuICAgIHdpbmRvdy5hc3NlcnQgPSBudWxsO1xyXG4gICAgd2luZG93LmNvbnNvbGUgJiYgd2luZG93LmNvbnNvbGUubG9nICYmIHdpbmRvdy5jb25zb2xlLmxvZyggJ2Rpc2FibGluZyBhc3NlcnQnICk7XHJcbiAgfTtcclxuXHJcbiAgd2luZG93LmFzc2VydGlvbnMuZW5hYmxlQXNzZXJ0U2xvdyA9IGZ1bmN0aW9uKCkge1xyXG4gICAgd2luZG93LmFzc2VydFNsb3cgPSB3aW5kb3cuYXNzZXJ0aW9ucy5hc3NlcnRGdW5jdGlvbjtcclxuICAgIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLmxvZyAmJiB3aW5kb3cuY29uc29sZS5sb2coICdlbmFibGluZyBhc3NlcnRTbG93JyApO1xyXG4gIH07XHJcbiAgd2luZG93LmFzc2VydGlvbnMuZGlzYWJsZUFzc2VydFNsb3cgPSBmdW5jdGlvbigpIHtcclxuICAgIHdpbmRvdy5hc3NlcnRTbG93ID0gbnVsbDtcclxuICAgIHdpbmRvdy5jb25zb2xlICYmIHdpbmRvdy5jb25zb2xlLmxvZyAmJiB3aW5kb3cuY29uc29sZS5sb2coICdkaXNhYmxpbmcgYXNzZXJ0U2xvdycgKTtcclxuICB9O1xyXG59ICkoKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxDQUFFLFlBQVc7RUFHWEEsTUFBTSxDQUFDQyxVQUFVLEdBQUdELE1BQU0sQ0FBQ0MsVUFBVSxJQUFJLENBQUMsQ0FBQztFQUMzQ0QsTUFBTSxDQUFDQyxVQUFVLENBQUNDLGNBQWMsR0FBR0YsTUFBTSxDQUFDQyxVQUFVLENBQUNDLGNBQWMsSUFBSSxVQUFVQyxTQUFTLEVBQUUsR0FBR0MsUUFBUSxFQUFHO0lBQ3hHLElBQUssQ0FBQ0QsU0FBUyxFQUFHO01BRWhCO01BQ0FDLFFBQVEsR0FBR0EsUUFBUSxDQUFDQyxNQUFNLENBQUVDLE9BQU8sSUFBSSxDQUFDLENBQUNGLFFBQVMsQ0FBQzs7TUFFbkQ7TUFDQSxJQUFLSixNQUFNLENBQUNPLFNBQVMsSUFBSVAsTUFBTSxDQUFDTyxTQUFTLENBQUNDLE9BQU8sS0FBSyw2QkFBNkIsRUFBRztRQUNwRkosUUFBUSxDQUFDSyxJQUFJLENBQUcsV0FBVSxJQUFJQyxLQUFLLENBQUMsQ0FBQyxDQUFDQyxLQUFNLEVBQUUsQ0FBQztNQUNqRDs7TUFFQTtNQUNBLE1BQU1DLFlBQVksR0FBR1IsUUFBUSxDQUFDUyxNQUFNLEdBQUcsQ0FBQyxHQUFHLG9CQUFvQixHQUFH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