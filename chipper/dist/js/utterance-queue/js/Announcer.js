// Copyright 2021-2023, University of Colorado Boulder

/**
 * Abstract base class for the type that wires into an UtteranceQueue to announce Utterances.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Emitter from '../../axon/js/Emitter.js';
import optionize from '../../phet-core/js/optionize.js';
import PhetioObject from '../../tandem/js/PhetioObject.js';
import IOType from '../../tandem/js/types/IOType.js';
import NullableIO from '../../tandem/js/types/NullableIO.js';
import NumberIO from '../../tandem/js/types/NumberIO.js';
import OrIO from '../../tandem/js/types/OrIO.js';
import StringIO from '../../tandem/js/types/StringIO.js';
import Utterance from './Utterance.js';
import utteranceQueueNamespace from './utteranceQueueNamespace.js';

// Options for the announce method

class Announcer extends PhetioObject {
  // When an Utterance to be announced provided an alert in `ResponsePacket`-form, whether or
  // not to listen to the current values of responseCollector Properties, or to just combine all pieces of it no matter.

  // A flag that indicates to an UtteranceQueue that this Announcer is ready to speak the next Utterance.
  readyToAnnounce = true;

  // A flag that indicates whether this announcer has successfully spoken at least once.
  hasSpoken = false;

  // Emits an event when this Announcer is finished with an Utterance. It is up
  // to the Announcer subclass to emit this because different speech technologies may have different APIs
  // to determine when speaking is finished.

  constructor(providedOptions) {
    const options = optionize()({
      respectResponseCollectorProperties: true,
      phetioType: Announcer.AnnouncerIO,
      phetioState: false
    }, providedOptions);
    super(options);
    this.respectResponseCollectorProperties = options.respectResponseCollectorProperties;
    this.announcementCompleteEmitter = new Emitter({
      parameters: [{
        name: 'utterance',
        phetioType: Utterance.UtteranceIO
      }, {
        name: 'text',
        phetioType: NullableIO(OrIO([StringIO, NumberIO]))
      }],
      tandem: options.tandem?.createTandem('announcementCompleteEmitter'),
      phetioReadOnly: true,
      phetioDocumentation: 'The announcement that has just completed. The Utterance text could potentially differ from ' + 'the exact text that was announced, so both are emitted. Use `text` for an exact match of what was announced.'
    });
  }

  /**
   * Announce an alert, setting textContent to an aria-live element.
   *
   * @param announceText - The string that was formulated from the utterance
   * @param utterance - Utterance with content to announce
   * @param [providedOptions] - specify support for options particular to this announcer's features.
   */

  /**
   * Cancel announcement if this Announcer is currently announcing the Utterance. Does nothing
   * to queued Utterances. The announcer needs to implement cancellation of speech.
   */

  /**
   â€™   * Cancel announcement of any Utterance that is being spoken. The announcer needs to implement cancellation of speech.
   */

  /**
   * Determine if one utterance should cancel another. Default behavior for this superclass is to cancel when
   * the new Utterance is of higher priority. But subclasses may re-implement this function if it has special logic
   * or announcerOptions that override this behavior.
   */
  shouldUtteranceCancelOther(utterance, utteranceToCancel) {
    return utteranceToCancel.priorityProperty.value < utterance.priorityProperty.value;
  }

  /**
   * Intended to be overridden by subtypes if necessary as a way to order the queue if there is announcer
   * specific logic.
   */
  onUtterancePriorityChange(utterance) {
    // See subclass for implementation
  }
  static AnnouncerIO = new IOType('AnnouncerIO', {
    valueType: Announcer,
    documentation: 'Announces text to a specific browser technology (like aria-live or web speech)'
  });
}
utteranceQueueNamespace.register('Announcer', Announcer);
export default Announcer;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbWl0dGVyIiwib3B0aW9uaXplIiwiUGhldGlvT2JqZWN0IiwiSU9UeXBlIiwiTnVsbGFibGVJTyIsIk51bWJlcklPIiwiT3JJTyIsIlN0cmluZ0lPIiwiVXR0ZXJhbmNlIiwidXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UiLCJBbm5vdW5jZXIiLCJyZWFkeVRvQW5ub3VuY2UiLCJoYXNTcG9rZW4iLCJjb25zdHJ1Y3RvciIsInByb3ZpZGVkT3B0aW9ucyIsIm9wdGlvbnMiLCJyZXNwZWN0UmVzcG9uc2VDb2xsZWN0b3JQcm9wZXJ0aWVzIiwicGhldGlvVHlwZSIsIkFubm91bmNlcklPIiwicGhldGlvU3RhdGUiLCJhbm5vdW5jZW1lbnRDb21wbGV0ZUVtaXR0ZXIiLCJwYXJhbWV0ZXJzIiwibmFtZSIsIlV0dGVyYW5jZUlPIiwidGFuZGVtIiwiY3JlYXRlVGFuZGVtIiwicGhldGlvUmVhZE9ubHkiLCJwaGV0aW9Eb2N1bWVudGF0aW9uIiwic2hvdWxkVXR0ZXJhbmNlQ2FuY2VsT3RoZXIiLCJ1dHRlcmFuY2UiLCJ1dHRlcmFuY2VUb0NhbmNlbCIsInByaW9yaXR5UHJvcGVydHkiLCJ2YWx1ZSIsIm9uVXR0ZXJhbmNlUHJpb3JpdHlDaGFuZ2UiLCJ2YWx1ZVR5cGUiLCJkb2N1bWVudGF0aW9uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJBbm5vdW5jZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQWJzdHJhY3QgYmFzZSBjbGFzcyBmb3IgdGhlIHR5cGUgdGhhdCB3aXJlcyBpbnRvIGFuIFV0dGVyYW5jZVF1ZXVlIHRvIGFubm91bmNlIFV0dGVyYW5jZXMuXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgRW1pdHRlciBmcm9tICcuLi8uLi9heG9uL2pzL0VtaXR0ZXIuanMnO1xyXG5pbXBvcnQgVEVtaXR0ZXIgZnJvbSAnLi4vLi4vYXhvbi9qcy9URW1pdHRlci5qcyc7XHJcbmltcG9ydCBvcHRpb25pemUsIHsgRW1wdHlTZWxmT3B0aW9ucyB9IGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9vcHRpb25pemUuanMnO1xyXG5pbXBvcnQgUGhldGlvT2JqZWN0LCB7IFBoZXRpb09iamVjdE9wdGlvbnMgfSBmcm9tICcuLi8uLi90YW5kZW0vanMvUGhldGlvT2JqZWN0LmpzJztcclxuaW1wb3J0IElPVHlwZSBmcm9tICcuLi8uLi90YW5kZW0vanMvdHlwZXMvSU9UeXBlLmpzJztcclxuaW1wb3J0IE51bGxhYmxlSU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bGxhYmxlSU8uanMnO1xyXG5pbXBvcnQgTnVtYmVySU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL051bWJlcklPLmpzJztcclxuaW1wb3J0IE9ySU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL09ySU8uanMnO1xyXG5pbXBvcnQgU3RyaW5nSU8gZnJvbSAnLi4vLi4vdGFuZGVtL2pzL3R5cGVzL1N0cmluZ0lPLmpzJztcclxuaW1wb3J0IHsgUmVzb2x2ZWRSZXNwb25zZSB9IGZyb20gJy4vUmVzcG9uc2VQYWNrZXQuanMnO1xyXG5pbXBvcnQgVXR0ZXJhbmNlIGZyb20gJy4vVXR0ZXJhbmNlLmpzJztcclxuaW1wb3J0IHV0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlIGZyb20gJy4vdXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UuanMnO1xyXG5cclxudHlwZSBTZWxmT3B0aW9ucyA9IHtcclxuICByZXNwZWN0UmVzcG9uc2VDb2xsZWN0b3JQcm9wZXJ0aWVzPzogYm9vbGVhbjtcclxufTtcclxuXHJcbi8vIE9wdGlvbnMgZm9yIHRoZSBhbm5vdW5jZSBtZXRob2RcclxuZXhwb3J0IHR5cGUgQW5ub3VuY2VyQW5ub3VuY2VPcHRpb25zID0gRW1wdHlTZWxmT3B0aW9ucztcclxuXHJcbmV4cG9ydCB0eXBlIEFubm91bmNlck9wdGlvbnMgPSBTZWxmT3B0aW9ucyAmIFBoZXRpb09iamVjdE9wdGlvbnM7XHJcblxyXG5hYnN0cmFjdCBjbGFzcyBBbm5vdW5jZXIgZXh0ZW5kcyBQaGV0aW9PYmplY3Qge1xyXG5cclxuICAvLyBXaGVuIGFuIFV0dGVyYW5jZSB0byBiZSBhbm5vdW5jZWQgcHJvdmlkZWQgYW4gYWxlcnQgaW4gYFJlc3BvbnNlUGFja2V0YC1mb3JtLCB3aGV0aGVyIG9yXHJcbiAgLy8gbm90IHRvIGxpc3RlbiB0byB0aGUgY3VycmVudCB2YWx1ZXMgb2YgcmVzcG9uc2VDb2xsZWN0b3IgUHJvcGVydGllcywgb3IgdG8ganVzdCBjb21iaW5lIGFsbCBwaWVjZXMgb2YgaXQgbm8gbWF0dGVyLlxyXG4gIHB1YmxpYyByZWFkb25seSByZXNwZWN0UmVzcG9uc2VDb2xsZWN0b3JQcm9wZXJ0aWVzOiBib29sZWFuO1xyXG5cclxuICAvLyBBIGZsYWcgdGhhdCBpbmRpY2F0ZXMgdG8gYW4gVXR0ZXJhbmNlUXVldWUgdGhhdCB0aGlzIEFubm91bmNlciBpcyByZWFkeSB0byBzcGVhayB0aGUgbmV4dCBVdHRlcmFuY2UuXHJcbiAgcHVibGljIHJlYWR5VG9Bbm5vdW5jZSA9IHRydWU7XHJcblxyXG4gIC8vIEEgZmxhZyB0aGF0IGluZGljYXRlcyB3aGV0aGVyIHRoaXMgYW5ub3VuY2VyIGhhcyBzdWNjZXNzZnVsbHkgc3Bva2VuIGF0IGxlYXN0IG9uY2UuXHJcbiAgcHVibGljIGhhc1Nwb2tlbiA9IGZhbHNlO1xyXG5cclxuICAvLyBFbWl0cyBhbiBldmVudCB3aGVuIHRoaXMgQW5ub3VuY2VyIGlzIGZpbmlzaGVkIHdpdGggYW4gVXR0ZXJhbmNlLiBJdCBpcyB1cFxyXG4gIC8vIHRvIHRoZSBBbm5vdW5jZXIgc3ViY2xhc3MgdG8gZW1pdCB0aGlzIGJlY2F1c2UgZGlmZmVyZW50IHNwZWVjaCB0ZWNobm9sb2dpZXMgbWF5IGhhdmUgZGlmZmVyZW50IEFQSXNcclxuICAvLyB0byBkZXRlcm1pbmUgd2hlbiBzcGVha2luZyBpcyBmaW5pc2hlZC5cclxuICBwdWJsaWMgcmVhZG9ubHkgYW5ub3VuY2VtZW50Q29tcGxldGVFbWl0dGVyOiBURW1pdHRlcjxbIFV0dGVyYW5jZSwgUmVzb2x2ZWRSZXNwb25zZSBdPjtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCBwcm92aWRlZE9wdGlvbnM/OiBBbm5vdW5jZXJPcHRpb25zICkge1xyXG4gICAgY29uc3Qgb3B0aW9ucyA9IG9wdGlvbml6ZTxBbm5vdW5jZXJPcHRpb25zLCBTZWxmT3B0aW9ucywgUGhldGlvT2JqZWN0T3B0aW9ucz4oKSgge1xyXG4gICAgICByZXNwZWN0UmVzcG9uc2VDb2xsZWN0b3JQcm9wZXJ0aWVzOiB0cnVlLFxyXG4gICAgICBwaGV0aW9UeXBlOiBBbm5vdW5jZXIuQW5ub3VuY2VySU8sXHJcbiAgICAgIHBoZXRpb1N0YXRlOiBmYWxzZVxyXG4gICAgfSwgcHJvdmlkZWRPcHRpb25zICk7XHJcblxyXG4gICAgc3VwZXIoIG9wdGlvbnMgKTtcclxuXHJcbiAgICB0aGlzLnJlc3BlY3RSZXNwb25zZUNvbGxlY3RvclByb3BlcnRpZXMgPSBvcHRpb25zLnJlc3BlY3RSZXNwb25zZUNvbGxlY3RvclByb3BlcnRpZXM7XHJcblxyXG4gICAgdGhpcy5hbm5vdW5jZW1lbnRDb21wbGV0ZUVtaXR0ZXIgPSBuZXcgRW1pdHRlcigge1xyXG4gICAgICBwYXJhbWV0ZXJzOiBbIHtcclxuICAgICAgICBuYW1lOiAndXR0ZXJhbmNlJywgcGhldGlvVHlwZTogVXR0ZXJhbmNlLlV0dGVyYW5jZUlPXHJcbiAgICAgIH0sIHtcclxuICAgICAgICBuYW1lOiAndGV4dCcsXHJcbiAgICAgICAgcGhldGlvVHlwZTogTnVsbGFibGVJTyggT3JJTyggWyBTdHJpbmdJTywgTnVtYmVySU8gXSApIClcclxuICAgICAgfSBdLFxyXG4gICAgICB0YW5kZW06IG9wdGlvbnMudGFuZGVtPy5jcmVhdGVUYW5kZW0oICdhbm5vdW5jZW1lbnRDb21wbGV0ZUVtaXR0ZXInICksXHJcbiAgICAgIHBoZXRpb1JlYWRPbmx5OiB0cnVlLFxyXG4gICAgICBwaGV0aW9Eb2N1bWVudGF0aW9uOiAnVGhlIGFubm91bmNlbWVudCB0aGF0IGhhcyBqdXN0IGNvbXBsZXRlZC4gVGhlIFV0dGVyYW5jZSB0ZXh0IGNvdWxkIHBvdGVudGlhbGx5IGRpZmZlciBmcm9tICcgK1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAndGhlIGV4YWN0IHRleHQgdGhhdCB3YXMgYW5ub3VuY2VkLCBzbyBib3RoIGFyZSBlbWl0dGVkLiBVc2UgYHRleHRgIGZvciBhbiBleGFjdCBtYXRjaCBvZiB3aGF0IHdhcyBhbm5vdW5jZWQuJ1xyXG4gICAgfSApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQW5ub3VuY2UgYW4gYWxlcnQsIHNldHRpbmcgdGV4dENvbnRlbnQgdG8gYW4gYXJpYS1saXZlIGVsZW1lbnQuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gYW5ub3VuY2VUZXh0IC0gVGhlIHN0cmluZyB0aGF0IHdhcyBmb3JtdWxhdGVkIGZyb20gdGhlIHV0dGVyYW5jZVxyXG4gICAqIEBwYXJhbSB1dHRlcmFuY2UgLSBVdHRlcmFuY2Ugd2l0aCBjb250ZW50IHRvIGFubm91bmNlXHJcbiAgICogQHBhcmFtIFtwcm92aWRlZE9wdGlvbnNdIC0gc3BlY2lmeSBzdXBwb3J0IGZvciBvcHRpb25zIHBhcnRpY3VsYXIgdG8gdGhpcyBhbm5vdW5jZXIncyBmZWF0dXJlcy5cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgYW5ub3VuY2UoIGFubm91bmNlVGV4dDogUmVzb2x2ZWRSZXNwb25zZSwgdXR0ZXJhbmNlOiBVdHRlcmFuY2UsIHByb3ZpZGVkT3B0aW9ucz86IEFubm91bmNlckFubm91bmNlT3B0aW9ucyApOiB2b2lkO1xyXG5cclxuICAvKipcclxuICAgKiBDYW5jZWwgYW5ub3VuY2VtZW50IGlmIHRoaXMgQW5ub3VuY2VyIGlzIGN1cnJlbnRseSBhbm5vdW5jaW5nIHRoZSBVdHRlcmFuY2UuIERvZXMgbm90aGluZ1xyXG4gICAqIHRvIHF1ZXVlZCBVdHRlcmFuY2VzLiBUaGUgYW5ub3VuY2VyIG5lZWRzIHRvIGltcGxlbWVudCBjYW5jZWxsYXRpb24gb2Ygc3BlZWNoLlxyXG4gICAqL1xyXG4gIHB1YmxpYyBhYnN0cmFjdCBjYW5jZWxVdHRlcmFuY2UoIHV0dGVyYW5jZTogVXR0ZXJhbmNlICk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICDigJkgICAqIENhbmNlbCBhbm5vdW5jZW1lbnQgb2YgYW55IFV0dGVyYW5jZSB0aGF0IGlzIGJlaW5nIHNwb2tlbi4gVGhlIGFubm91bmNlciBuZWVkcyB0byBpbXBsZW1lbnQgY2FuY2VsbGF0aW9uIG9mIHNwZWVjaC5cclxuICAgKi9cclxuICBwdWJsaWMgYWJzdHJhY3QgY2FuY2VsKCk6IHZvaWQ7XHJcblxyXG4gIC8qKlxyXG4gICAqIERldGVybWluZSBpZiBvbmUgdXR0ZXJhbmNlIHNob3VsZCBjYW5jZWwgYW5vdGhlci4gRGVmYXVsdCBiZWhhdmlvciBmb3IgdGhpcyBzdXBlcmNsYXNzIGlzIHRvIGNhbmNlbCB3aGVuXHJcbiAgICogdGhlIG5ldyBVdHRlcmFuY2UgaXMgb2YgaGlnaGVyIHByaW9yaXR5LiBCdXQgc3ViY2xhc3NlcyBtYXkgcmUtaW1wbGVtZW50IHRoaXMgZnVuY3Rpb24gaWYgaXQgaGFzIHNwZWNpYWwgbG9naWNcclxuICAgKiBvciBhbm5vdW5jZXJPcHRpb25zIHRoYXQgb3ZlcnJpZGUgdGhpcyBiZWhhdmlvci5cclxuICAgKi9cclxuICBwdWJsaWMgc2hvdWxkVXR0ZXJhbmNlQ2FuY2VsT3RoZXIoIHV0dGVyYW5jZTogVXR0ZXJhbmNlLCB1dHRlcmFuY2VUb0NhbmNlbDogVXR0ZXJhbmNlICk6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHV0dGVyYW5jZVRvQ2FuY2VsLnByaW9yaXR5UHJvcGVydHkudmFsdWUgPCB1dHRlcmFuY2UucHJpb3JpdHlQcm9wZXJ0eS52YWx1ZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEludGVuZGVkIHRvIGJlIG92ZXJyaWRkZW4gYnkgc3VidHlwZXMgaWYgbmVjZXNzYXJ5IGFzIGEgd2F5IHRvIG9yZGVyIHRoZSBxdWV1ZSBpZiB0aGVyZSBpcyBhbm5vdW5jZXJcclxuICAgKiBzcGVjaWZpYyBsb2dpYy5cclxuICAgKi9cclxuICBwdWJsaWMgb25VdHRlcmFuY2VQcmlvcml0eUNoYW5nZSggdXR0ZXJhbmNlOiBVdHRlcmFuY2UgKTogdm9pZCB7XHJcbiAgICAvLyBTZWUgc3ViY2xhc3MgZm9yIGltcGxlbWVudGF0aW9uXHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc3RhdGljIEFubm91bmNlcklPID0gbmV3IElPVHlwZSggJ0Fubm91bmNlcklPJywge1xyXG4gICAgdmFsdWVUeXBlOiBBbm5vdW5jZXIsXHJcbiAgICBkb2N1bWVudGF0aW9uOiAnQW5ub3VuY2VzIHRleHQgdG8gYSBzcGVjaWZpYyBicm93c2VyIHRlY2hub2xvZ3kgKGxpa2UgYXJpYS1saXZlIG9yIHdlYiBzcGVlY2gpJ1xyXG4gIH0gKTtcclxufVxyXG5cclxudXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UucmVnaXN0ZXIoICdBbm5vdW5jZXInLCBBbm5vdW5jZXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgQW5ub3VuY2VyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxPQUFPLE1BQU0sMEJBQTBCO0FBRTlDLE9BQU9DLFNBQVMsTUFBNEIsaUNBQWlDO0FBQzdFLE9BQU9DLFlBQVksTUFBK0IsaUNBQWlDO0FBQ25GLE9BQU9DLE1BQU0sTUFBTSxpQ0FBaUM7QUFDcEQsT0FBT0MsVUFBVSxNQUFNLHFDQUFxQztBQUM1RCxPQUFPQyxRQUFRLE1BQU0sbUNBQW1DO0FBQ3hELE9BQU9DLElBQUksTUFBTSwrQkFBK0I7QUFDaEQsT0FBT0MsUUFBUSxNQUFNLG1DQUFtQztBQUV4RCxPQUFPQyxTQUFTLE1BQU0sZ0JBQWdCO0FBQ3RDLE9BQU9DLHVCQUF1QixNQUFNLDhCQUE4Qjs7QUFNbEU7O0FBS0EsTUFBZUMsU0FBUyxTQUFTUixZQUFZLENBQUM7RUFFNUM7RUFDQTs7RUFHQTtFQUNPUyxlQUFlLEdBQUcsSUFBSTs7RUFFN0I7RUFDT0MsU0FBUyxHQUFHLEtBQUs7O0VBRXhCO0VBQ0E7RUFDQTs7RUFHT0MsV0FBV0EsQ0FBRUMsZUFBa0MsRUFBRztJQUN2RCxNQUFNQyxPQUFPLEdBQUdkLFNBQVMsQ0FBcUQsQ0FBQyxDQUFFO01BQy9FZSxrQ0FBa0MsRUFBRSxJQUFJO01BQ3hDQyxVQUFVLEVBQUVQLFNBQVMsQ0FBQ1EsV0FBVztNQUNqQ0MsV0FBVyxFQUFFO0lBQ2YsQ0FBQyxFQUFFTCxlQUFnQixDQUFDO0lBRXBCLEtBQUssQ0FBRUMsT0FBUSxDQUFDO0lBRWhCLElBQUksQ0FBQ0Msa0NBQWtDLEdBQUdELE9BQU8sQ0FBQ0Msa0NBQWtDO0lBRXBGLElBQUksQ0FBQ0ksMkJBQTJCLEdBQUcsSUFBSXBCLE9BQU8sQ0FBRTtNQUM5Q3FCLFVBQVUsRUFBRSxDQUFFO1FBQ1pDLElBQUksRUFBRSxXQUFXO1FBQUVMLFVBQVUsRUFBRVQsU0FBUyxDQUFDZTtNQUMzQyxDQUFDLEVBQUU7UUFDREQsSUFBSSxFQUFFLE1BQU07UUFDWkwsVUFBVSxFQUFFYixVQUFVLENBQUVFLElBQUksQ0FBRSxDQUFFQyxRQUFRLEVBQUVGLFFBQVEsQ0FBRyxDQUFFO01BQ3pELENBQUMsQ0FBRTtNQUNIbUIsTUFBTSxFQUFFVCxPQUFPLENBQUNTLE1BQU0sRUFBRUMsWUFBWSxDQUFFLDZCQUE4QixDQUFDO01BQ3JFQyxjQUFjLEVBQUUsSUFBSTtNQUNwQkMsbUJBQW1CLEVBQUUsNkZBQTZGLEdBQzdGO0lBQ3ZCLENBQUUsQ0FBQztFQUNMOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztFQUdFO0FBQ0Y7QUFDQTtBQUNBOztFQUdFO0FBQ0Y7QUFDQTs7RUFHRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0VBQ1NDLDBCQUEwQkEsQ0FBRUMsU0FBb0IsRUFBRUMsaUJBQTRCLEVBQVk7SUFDL0YsT0FBT0EsaUJBQWlCLENBQUNDLGdCQUFnQixDQUFDQyxLQUFLLEdBQUdILFNBQVMsQ0FBQ0UsZ0JBQWdCLENBQUNDLEtBQUs7RUFDcEY7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7RUFDU0MseUJBQXlCQSxDQUFFSixTQUFvQixFQUFTO0lBQzdEO0VBQUE7RUFHRixPQUFjWCxXQUFXLEdBQUcsSUFBSWYsTUFBTSxDQUFFLGFBQWEsRUFBRTtJQUNyRCtCLFNBQVMsRUFBRXhCLFNBQVM7SUFDcEJ5QixhQUFhLEVBQUU7RUFDakIsQ0FBRSxDQUFDO0FBQ0w7QUFFQTFCLHVCQUF1QixDQUFDMkIsUUFBUSxDQUFFLFdBQVcsRUFBRTFCLFNBQVUsQ0FBQztBQUMxRCxlQUFlQSxTQUFTIiwiaWdub3JlTGlzdCI6W119