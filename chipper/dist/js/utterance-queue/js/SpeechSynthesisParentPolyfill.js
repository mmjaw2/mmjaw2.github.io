// Copyright 2022-2024, University of Colorado Boulder

/**
 * A polyfill for SpeechSynthesis that tries to pull a working implementation from a parent window. Assumes that
 * this code is running in an iframe hosted by a parent window and that the parent has a working implementation
 * of SpeechSynthesis. In particular, this is used in fenster as a way to get SpeechSynthesis in an Android WebView
 * where SpeechSynthesis is not currently supported. See fenster for more information about an example use case.
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

import utteranceQueueNamespace from './utteranceQueueNamespace.js';
const SpeechSynthesisParentPolyfill = {
  /**
   * Initialize the polyfill, setting objects related to SpeechSynthesis on the window. The implementation of
   * SpeechSynthesisPolyfill assumes that the simulation is running in a child iframe under a parent window
   * that implements SpeechSynthesis. So we grab the implementation from the parent and set it to this window.
   */
  initialize() {
    if (window.speechSynthesis || window.SpeechSynthesis || window.SpeechSynthesisUtterance) {
      throw new Error('SpeechSynthesis is supported here, the polyfill should not overwrite it');
    }
    assert && assert(window.parent, 'This polyfill requires a parent frame implementation of SpeechSynthesis.');

    // @ts-expect-error - Very hacky, this prototype solution is not getting work anymore. No need for better solution.
    window.SpeechSynthesis = window.parent.SpeechSynthesis;

    // @ts-expect-error - Very hacky, this prototype solution is not getting work anymore. No need for better solution.
    window.speechSynthesis = new window.parent.SpeechSynthesis();

    // @ts-expect-error - Very hacky, this prototype solution is not getting work anymore. No need for better solution.
    window.SpeechSynthesisUtterance = window.parent.SpeechSynthesisUtterance;
  }
};
utteranceQueueNamespace.register('SpeechSynthesisParentPolyfill', SpeechSynthesisParentPolyfill);
export default SpeechSynthesisParentPolyfill;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJ1dHRlcmFuY2VRdWV1ZU5hbWVzcGFjZSIsIlNwZWVjaFN5bnRoZXNpc1BhcmVudFBvbHlmaWxsIiwiaW5pdGlhbGl6ZSIsIndpbmRvdyIsInNwZWVjaFN5bnRoZXNpcyIsIlNwZWVjaFN5bnRoZXNpcyIsIlNwZWVjaFN5bnRoZXNpc1V0dGVyYW5jZSIsIkVycm9yIiwiYXNzZXJ0IiwicGFyZW50IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJTcGVlY2hTeW50aGVzaXNQYXJlbnRQb2x5ZmlsbC50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBBIHBvbHlmaWxsIGZvciBTcGVlY2hTeW50aGVzaXMgdGhhdCB0cmllcyB0byBwdWxsIGEgd29ya2luZyBpbXBsZW1lbnRhdGlvbiBmcm9tIGEgcGFyZW50IHdpbmRvdy4gQXNzdW1lcyB0aGF0XHJcbiAqIHRoaXMgY29kZSBpcyBydW5uaW5nIGluIGFuIGlmcmFtZSBob3N0ZWQgYnkgYSBwYXJlbnQgd2luZG93IGFuZCB0aGF0IHRoZSBwYXJlbnQgaGFzIGEgd29ya2luZyBpbXBsZW1lbnRhdGlvblxyXG4gKiBvZiBTcGVlY2hTeW50aGVzaXMuIEluIHBhcnRpY3VsYXIsIHRoaXMgaXMgdXNlZCBpbiBmZW5zdGVyIGFzIGEgd2F5IHRvIGdldCBTcGVlY2hTeW50aGVzaXMgaW4gYW4gQW5kcm9pZCBXZWJWaWV3XHJcbiAqIHdoZXJlIFNwZWVjaFN5bnRoZXNpcyBpcyBub3QgY3VycmVudGx5IHN1cHBvcnRlZC4gU2VlIGZlbnN0ZXIgZm9yIG1vcmUgaW5mb3JtYXRpb24gYWJvdXQgYW4gZXhhbXBsZSB1c2UgY2FzZS5cclxuICpcclxuICogQGF1dGhvciBKZXNzZSBHcmVlbmJlcmcgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IHV0dGVyYW5jZVF1ZXVlTmFtZXNwYWNlIGZyb20gJy4vdXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UuanMnO1xyXG5cclxuY29uc3QgU3BlZWNoU3ludGhlc2lzUGFyZW50UG9seWZpbGwgPSB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEluaXRpYWxpemUgdGhlIHBvbHlmaWxsLCBzZXR0aW5nIG9iamVjdHMgcmVsYXRlZCB0byBTcGVlY2hTeW50aGVzaXMgb24gdGhlIHdpbmRvdy4gVGhlIGltcGxlbWVudGF0aW9uIG9mXHJcbiAgICogU3BlZWNoU3ludGhlc2lzUG9seWZpbGwgYXNzdW1lcyB0aGF0IHRoZSBzaW11bGF0aW9uIGlzIHJ1bm5pbmcgaW4gYSBjaGlsZCBpZnJhbWUgdW5kZXIgYSBwYXJlbnQgd2luZG93XHJcbiAgICogdGhhdCBpbXBsZW1lbnRzIFNwZWVjaFN5bnRoZXNpcy4gU28gd2UgZ3JhYiB0aGUgaW1wbGVtZW50YXRpb24gZnJvbSB0aGUgcGFyZW50IGFuZCBzZXQgaXQgdG8gdGhpcyB3aW5kb3cuXHJcbiAgICovXHJcbiAgaW5pdGlhbGl6ZSgpOiB2b2lkIHtcclxuICAgIGlmICggd2luZG93LnNwZWVjaFN5bnRoZXNpcyB8fCB3aW5kb3cuU3BlZWNoU3ludGhlc2lzIHx8IHdpbmRvdy5TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2UgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggJ1NwZWVjaFN5bnRoZXNpcyBpcyBzdXBwb3J0ZWQgaGVyZSwgdGhlIHBvbHlmaWxsIHNob3VsZCBub3Qgb3ZlcndyaXRlIGl0JyApO1xyXG4gICAgfVxyXG5cclxuICAgIGFzc2VydCAmJiBhc3NlcnQoIHdpbmRvdy5wYXJlbnQsICdUaGlzIHBvbHlmaWxsIHJlcXVpcmVzIGEgcGFyZW50IGZyYW1lIGltcGxlbWVudGF0aW9uIG9mIFNwZWVjaFN5bnRoZXNpcy4nICk7XHJcblxyXG4gICAgLy8gQHRzLWV4cGVjdC1lcnJvciAtIFZlcnkgaGFja3ksIHRoaXMgcHJvdG90eXBlIHNvbHV0aW9uIGlzIG5vdCBnZXR0aW5nIHdvcmsgYW55bW9yZS4gTm8gbmVlZCBmb3IgYmV0dGVyIHNvbHV0aW9uLlxyXG4gICAgd2luZG93LlNwZWVjaFN5bnRoZXNpcyA9IHdpbmRvdy5wYXJlbnQuU3BlZWNoU3ludGhlc2lzO1xyXG5cclxuICAgIC8vIEB0cy1leHBlY3QtZXJyb3IgLSBWZXJ5IGhhY2t5LCB0aGlzIHByb3RvdHlwZSBzb2x1dGlvbiBpcyBub3QgZ2V0dGluZyB3b3JrIGFueW1vcmUuIE5vIG5lZWQgZm9yIGJldHRlciBzb2x1dGlvbi5cclxuICAgIHdpbmRvdy5zcGVlY2hTeW50aGVzaXMgPSBuZXcgd2luZG93LnBhcmVudC5TcGVlY2hTeW50aGVzaXMoKTtcclxuXHJcbiAgICAvLyBAdHMtZXhwZWN0LWVycm9yIC0gVmVyeSBoYWNreSwgdGhpcyBwcm90b3R5cGUgc29sdXRpb24gaXMgbm90IGdldHRpbmcgd29yayBhbnltb3JlLiBObyBuZWVkIGZvciBiZXR0ZXIgc29sdXRpb24uXHJcbiAgICB3aW5kb3cuU3BlZWNoU3ludGhlc2lzVXR0ZXJhbmNlID0gd2luZG93LnBhcmVudC5TcGVlY2hTeW50aGVzaXNVdHRlcmFuY2U7XHJcbiAgfVxyXG59O1xyXG5cclxudXR0ZXJhbmNlUXVldWVOYW1lc3BhY2UucmVnaXN0ZXIoICdTcGVlY2hTeW50aGVzaXNQYXJlbnRQb2x5ZmlsbCcsIFNwZWVjaFN5bnRoZXNpc1BhcmVudFBvbHlmaWxsICk7XHJcbmV4cG9ydCBkZWZhdWx0IFNwZWVjaFN5bnRoZXNpc1BhcmVudFBvbHlmaWxsOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSx1QkFBdUIsTUFBTSw4QkFBOEI7QUFFbEUsTUFBTUMsNkJBQTZCLEdBQUc7RUFFcEM7QUFDRjtBQUNBO0FBQ0E7QUFDQTtFQUNFQyxVQUFVQSxDQUFBLEVBQVM7SUFDakIsSUFBS0MsTUFBTSxDQUFDQyxlQUFlLElBQUlELE1BQU0sQ0FBQ0UsZUFBZSxJQUFJRixNQUFNLENBQUNHLHdCQUF3QixFQUFHO01BQ3pGLE1BQU0sSUFBSUMsS0FBSyxDQUFFLHlFQUEwRSxDQUFDO0lBQzlGO0lBRUFDLE1BQU0sSUFBSUEsTUFBTSxDQUFFTCxNQUFNLENBQUNNLE1BQU0sRUFBRSwwRUFBMkUsQ0FBQzs7SUFFN0c7SUFDQU4sTUFBTSxDQUFDRSxlQUFlLEdBQUdGLE1BQU0sQ0FBQ00sTUFBTSxDQUFDSixlQUFlOztJQUV0RDtJQUNBRixNQUFNLENBQUNDLGVBQWUsR0FBRyxJQUFJRCxNQUFNLENBQUNNLE1BQU0sQ0FBQ0osZUFBZSxDQUFDLENBQUM7O0lBRTVEO0lBQ0FGLE1BQU0sQ0FBQ0csd0JBQXdCLEdBQUdILE1BQU0sQ0FBQ00sTUFBTSxDQUFDSCx3QkFBd0I7RUFDMUU7QUFDRixDQUFDO0FBRUROLHVCQUF1QixDQUFDVSxRQUFRLENBQUUsK0JBQStCLEVBQUVULDZCQUE4QixDQUFDO0FBQ2xHLGVBQWVBLDZCQUE2QiIsImlnbm9yZUxpc3QiOltdfQ==