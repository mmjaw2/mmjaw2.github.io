// Copyright 2021-2024, University of Colorado Boulder
/**
 * Singleton which keeps track of all async items currently loading, and doesn't proceed until all have been loaded.
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 * @author Sam Reid (PhET Interactive Simulations)
 */

import arrayRemove from '../../phet-core/js/arrayRemove.js';
import phetCore from './phetCore.js';
class AsyncLoader {
  // Locks waiting to be resolved before we can move to the next phase after loading. Lock objects can be arbitrary
  // objects.

  // Marked as true when there are no more locks and we try to proceed.  Helps protect against new locks being created
  // after they should be.

  // Listeners which will be invoked after everything has been loaded.

  constructor() {
    this.pendingLocks = [];
    this.loadComplete = false;
    this.listeners = [];
  }

  // Allow resetting this for sandbox or other non-sim purposes. We'll want to be able to load resources AFTER
  // we've completed loading.
  reset() {
    this.loadComplete = false;
  }

  /**
   * @param listener - called when load is complete
   */
  addListener(listener) {
    this.listeners.push(listener);
  }

  /**
   * Attempts to proceed to the next phase if possible (otherwise it's a no-op).
   */
  proceedIfReady() {
    if (this.pendingLocks.length === 0) {
      assert && assert(!this.loadComplete, 'cannot complete load twice');
      this.loadComplete = true;
      this.listeners.forEach(listener => listener());
    }
  }

  /**
   * Creates a lock, which is a callback that needs to be run before we can proceed.
   */
  createLock(object) {
    assert && assert(!this.loadComplete, 'Cannot create more locks after load-step has completed');
    this.pendingLocks.push(object);
    return () => {
      assert && assert(this.pendingLocks.includes(object), 'invalid lock');
      arrayRemove(this.pendingLocks, object);
      this.proceedIfReady();
    };
  }
}
const asyncLoader = new AsyncLoader();
phetCore.register('asyncLoader', asyncLoader);
export default asyncLoader;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcnJheVJlbW92ZSIsInBoZXRDb3JlIiwiQXN5bmNMb2FkZXIiLCJjb25zdHJ1Y3RvciIsInBlbmRpbmdMb2NrcyIsImxvYWRDb21wbGV0ZSIsImxpc3RlbmVycyIsInJlc2V0IiwiYWRkTGlzdGVuZXIiLCJsaXN0ZW5lciIsInB1c2giLCJwcm9jZWVkSWZSZWFkeSIsImxlbmd0aCIsImFzc2VydCIsImZvckVhY2giLCJjcmVhdGVMb2NrIiwib2JqZWN0IiwiaW5jbHVkZXMiLCJhc3luY0xvYWRlciIsInJlZ2lzdGVyIl0sInNvdXJjZXMiOlsiYXN5bmNMb2FkZXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8qKlxyXG4gKiBTaW5nbGV0b24gd2hpY2gga2VlcHMgdHJhY2sgb2YgYWxsIGFzeW5jIGl0ZW1zIGN1cnJlbnRseSBsb2FkaW5nLCBhbmQgZG9lc24ndCBwcm9jZWVkIHVudGlsIGFsbCBoYXZlIGJlZW4gbG9hZGVkLlxyXG4gKlxyXG4gKiBAYXV0aG9yIE1pY2hhZWwgS2F1em1hbm4gKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG5cclxuaW1wb3J0IGFycmF5UmVtb3ZlIGZyb20gJy4uLy4uL3BoZXQtY29yZS9qcy9hcnJheVJlbW92ZS5qcyc7XHJcbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcclxuaW1wb3J0IEludGVudGlvbmFsQW55IGZyb20gJy4vdHlwZXMvSW50ZW50aW9uYWxBbnkuanMnO1xyXG5cclxudHlwZSBBc3luY0xvYWRlckxpc3RlbmVyID0gKCkgPT4gdm9pZDtcclxudHlwZSBBc3luY0xvYWRlckxvY2sgPSAoKSA9PiB2b2lkO1xyXG5cclxuY2xhc3MgQXN5bmNMb2FkZXIge1xyXG5cclxuICAvLyBMb2NrcyB3YWl0aW5nIHRvIGJlIHJlc29sdmVkIGJlZm9yZSB3ZSBjYW4gbW92ZSB0byB0aGUgbmV4dCBwaGFzZSBhZnRlciBsb2FkaW5nLiBMb2NrIG9iamVjdHMgY2FuIGJlIGFyYml0cmFyeVxyXG4gIC8vIG9iamVjdHMuXHJcbiAgcHJpdmF0ZSBwZW5kaW5nTG9ja3M6IEludGVudGlvbmFsQW55W107XHJcblxyXG4gIC8vIE1hcmtlZCBhcyB0cnVlIHdoZW4gdGhlcmUgYXJlIG5vIG1vcmUgbG9ja3MgYW5kIHdlIHRyeSB0byBwcm9jZWVkLiAgSGVscHMgcHJvdGVjdCBhZ2FpbnN0IG5ldyBsb2NrcyBiZWluZyBjcmVhdGVkXHJcbiAgLy8gYWZ0ZXIgdGhleSBzaG91bGQgYmUuXHJcbiAgcHJpdmF0ZSBsb2FkQ29tcGxldGU6IGJvb2xlYW47XHJcblxyXG4gIC8vIExpc3RlbmVycyB3aGljaCB3aWxsIGJlIGludm9rZWQgYWZ0ZXIgZXZlcnl0aGluZyBoYXMgYmVlbiBsb2FkZWQuXHJcbiAgcHJpdmF0ZSBsaXN0ZW5lcnM6IEFzeW5jTG9hZGVyTGlzdGVuZXJbXTtcclxuXHJcbiAgcHVibGljIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5wZW5kaW5nTG9ja3MgPSBbXTtcclxuICAgIHRoaXMubG9hZENvbXBsZXRlID0gZmFsc2U7XHJcbiAgICB0aGlzLmxpc3RlbmVycyA9IFtdO1xyXG4gIH1cclxuXHJcbiAgLy8gQWxsb3cgcmVzZXR0aW5nIHRoaXMgZm9yIHNhbmRib3ggb3Igb3RoZXIgbm9uLXNpbSBwdXJwb3Nlcy4gV2UnbGwgd2FudCB0byBiZSBhYmxlIHRvIGxvYWQgcmVzb3VyY2VzIEFGVEVSXHJcbiAgLy8gd2UndmUgY29tcGxldGVkIGxvYWRpbmcuXHJcbiAgcHVibGljIHJlc2V0KCk6IHZvaWQge1xyXG4gICAgdGhpcy5sb2FkQ29tcGxldGUgPSBmYWxzZTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBsaXN0ZW5lciAtIGNhbGxlZCB3aGVuIGxvYWQgaXMgY29tcGxldGVcclxuICAgKi9cclxuICBwdWJsaWMgYWRkTGlzdGVuZXIoIGxpc3RlbmVyOiBBc3luY0xvYWRlckxpc3RlbmVyICk6IHZvaWQge1xyXG4gICAgdGhpcy5saXN0ZW5lcnMucHVzaCggbGlzdGVuZXIgKTtcclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIEF0dGVtcHRzIHRvIHByb2NlZWQgdG8gdGhlIG5leHQgcGhhc2UgaWYgcG9zc2libGUgKG90aGVyd2lzZSBpdCdzIGEgbm8tb3ApLlxyXG4gICAqL1xyXG4gIHByaXZhdGUgcHJvY2VlZElmUmVhZHkoKTogdm9pZCB7XHJcbiAgICBpZiAoIHRoaXMucGVuZGluZ0xvY2tzLmxlbmd0aCA9PT0gMCApIHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggIXRoaXMubG9hZENvbXBsZXRlLCAnY2Fubm90IGNvbXBsZXRlIGxvYWQgdHdpY2UnICk7XHJcbiAgICAgIHRoaXMubG9hZENvbXBsZXRlID0gdHJ1ZTtcclxuXHJcbiAgICAgIHRoaXMubGlzdGVuZXJzLmZvckVhY2goIGxpc3RlbmVyID0+IGxpc3RlbmVyKCkgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIC8qKlxyXG4gICAqIENyZWF0ZXMgYSBsb2NrLCB3aGljaCBpcyBhIGNhbGxiYWNrIHRoYXQgbmVlZHMgdG8gYmUgcnVuIGJlZm9yZSB3ZSBjYW4gcHJvY2VlZC5cclxuICAgKi9cclxuICBwdWJsaWMgY3JlYXRlTG9jayggb2JqZWN0PzogSW50ZW50aW9uYWxBbnkgKTogQXN5bmNMb2FkZXJMb2NrIHtcclxuICAgIGFzc2VydCAmJiBhc3NlcnQoICF0aGlzLmxvYWRDb21wbGV0ZSwgJ0Nhbm5vdCBjcmVhdGUgbW9yZSBsb2NrcyBhZnRlciBsb2FkLXN0ZXAgaGFzIGNvbXBsZXRlZCcgKTtcclxuICAgIHRoaXMucGVuZGluZ0xvY2tzLnB1c2goIG9iamVjdCApO1xyXG4gICAgcmV0dXJuICgpID0+IHtcclxuICAgICAgYXNzZXJ0ICYmIGFzc2VydCggdGhpcy5wZW5kaW5nTG9ja3MuaW5jbHVkZXMoIG9iamVjdCApLCAnaW52YWxpZCBsb2NrJyApO1xyXG4gICAgICBhcnJheVJlbW92ZSggdGhpcy5wZW5kaW5nTG9ja3MsIG9iamVjdCApO1xyXG4gICAgICB0aGlzLnByb2NlZWRJZlJlYWR5KCk7XHJcbiAgICB9O1xyXG4gIH1cclxufVxyXG5cclxuY29uc3QgYXN5bmNMb2FkZXIgPSBuZXcgQXN5bmNMb2FkZXIoKTtcclxuXHJcbnBoZXRDb3JlLnJlZ2lzdGVyKCAnYXN5bmNMb2FkZXInLCBhc3luY0xvYWRlciApO1xyXG5cclxuZXhwb3J0IGRlZmF1bHQgYXN5bmNMb2FkZXI7XHJcbmV4cG9ydCB0eXBlIHsgQXN5bmNMb2FkZXJMb2NrLCBBc3luY0xvYWRlckxpc3RlbmVyIH07Il0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxXQUFXLE1BQU0sbUNBQW1DO0FBQzNELE9BQU9DLFFBQVEsTUFBTSxlQUFlO0FBTXBDLE1BQU1DLFdBQVcsQ0FBQztFQUVoQjtFQUNBOztFQUdBO0VBQ0E7O0VBR0E7O0VBR09DLFdBQVdBLENBQUEsRUFBRztJQUNuQixJQUFJLENBQUNDLFlBQVksR0FBRyxFQUFFO0lBQ3RCLElBQUksQ0FBQ0MsWUFBWSxHQUFHLEtBQUs7SUFDekIsSUFBSSxDQUFDQyxTQUFTLEdBQUcsRUFBRTtFQUNyQjs7RUFFQTtFQUNBO0VBQ09DLEtBQUtBLENBQUEsRUFBUztJQUNuQixJQUFJLENBQUNGLFlBQVksR0FBRyxLQUFLO0VBQzNCOztFQUVBO0FBQ0Y7QUFDQTtFQUNTRyxXQUFXQSxDQUFFQyxRQUE2QixFQUFTO0lBQ3hELElBQUksQ0FBQ0gsU0FBUyxDQUFDSSxJQUFJLENBQUVELFFBQVMsQ0FBQztFQUNqQzs7RUFFQTtBQUNGO0FBQ0E7RUFDVUUsY0FBY0EsQ0FBQSxFQUFTO0lBQzdCLElBQUssSUFBSSxDQUFDUCxZQUFZLENBQUNRLE1BQU0sS0FBSyxDQUFDLEVBQUc7TUFDcENDLE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFDUixZQUFZLEVBQUUsNEJBQTZCLENBQUM7TUFDcEUsSUFBSSxDQUFDQSxZQUFZLEdBQUcsSUFBSTtNQUV4QixJQUFJLENBQUNDLFNBQVMsQ0FBQ1EsT0FBTyxDQUFFTCxRQUFRLElBQUlBLFFBQVEsQ0FBQyxDQUFFLENBQUM7SUFDbEQ7RUFDRjs7RUFFQTtBQUNGO0FBQ0E7RUFDU00sVUFBVUEsQ0FBRUMsTUFBdUIsRUFBb0I7SUFDNURILE1BQU0sSUFBSUEsTUFBTSxDQUFFLENBQUMsSUFBSSxDQUFDUixZQUFZLEVBQUUsd0RBQXlELENBQUM7SUFDaEcsSUFBSSxDQUFDRCxZQUFZLENBQUNNLElBQUksQ0FBRU0sTUFBTyxDQUFDO0lBQ2hDLE9BQU8sTUFBTTtNQUNYSCxNQUFNLElBQUlBLE1BQU0sQ0FBRSxJQUFJLENBQUNULFlBQVksQ0FBQ2EsUUFBUSxDQUFFRCxNQUFPLENBQUMsRUFBRSxjQUFlLENBQUM7TUFDeEVoQixXQUFXLENBQUUsSUFBSSxDQUFDSSxZQUFZLEVBQUVZLE1BQU8sQ0FBQztNQUN4QyxJQUFJLENBQUNMLGNBQWMsQ0FBQyxDQUFDO0lBQ3ZCLENBQUM7RUFDSDtBQUNGO0FBRUEsTUFBTU8sV0FBVyxHQUFHLElBQUloQixXQUFXLENBQUMsQ0FBQztBQUVyQ0QsUUFBUSxDQUFDa0IsUUFBUSxDQUFFLGFBQWEsRUFBRUQsV0FBWSxDQUFDO0FBRS9DLGVBQWVBLFdBQVciLCJpZ25vcmVMaXN0IjpbXX0=