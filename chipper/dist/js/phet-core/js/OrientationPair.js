// Copyright 2021-2024, University of Colorado Boulder

/**
 * An object that contains a value for each item in an enumeration.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import EnumerationMap from './EnumerationMap.js';
import Orientation from './Orientation.js';
import phetCore from './phetCore.js';
class OrientationPair extends EnumerationMap {
  /**
   * @param horizontal - Value for the horizontal orientation
   * @param vertical - Value for the vertical orientation
   */
  constructor(horizontal, vertical) {
    super(Orientation, orientation => orientation === Orientation.HORIZONTAL ? horizontal : vertical);
  }
  get horizontal() {
    return this.get(Orientation.HORIZONTAL);
  }
  set horizontal(value) {
    this.set(Orientation.HORIZONTAL, value);
  }
  get vertical() {
    return this.get(Orientation.VERTICAL);
  }
  set vertical(value) {
    this.set(Orientation.VERTICAL, value);
  }
  with(orientation, value) {
    return new OrientationPair(orientation === Orientation.HORIZONTAL ? value : this.horizontal, orientation === Orientation.VERTICAL ? value : this.vertical);
  }

  /**
   * Creates an orientation pair based on a factory method.
   *
   * @param factory - called once for each orientation to determine
   *                             the value.
   */
  static create(factory) {
    return new OrientationPair(factory(Orientation.HORIZONTAL), factory(Orientation.VERTICAL));
  }

  /**
   * Returns a new EnumerationMap with mapped values.
   *
   * @param mapFunction - function( {*}, {TEnumeration.*} ): {*}
   * @returns With the mapped values
   */
  map(mapFunction) {
    return new OrientationPair(mapFunction(this.horizontal, Orientation.HORIZONTAL), mapFunction(this.vertical, Orientation.VERTICAL));
  }
}
phetCore.register('OrientationPair', OrientationPair);
export default OrientationPair;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbk1hcCIsIk9yaWVudGF0aW9uIiwicGhldENvcmUiLCJPcmllbnRhdGlvblBhaXIiLCJjb25zdHJ1Y3RvciIsImhvcml6b250YWwiLCJ2ZXJ0aWNhbCIsIm9yaWVudGF0aW9uIiwiSE9SSVpPTlRBTCIsImdldCIsInZhbHVlIiwic2V0IiwiVkVSVElDQUwiLCJ3aXRoIiwiY3JlYXRlIiwiZmFjdG9yeSIsIm1hcCIsIm1hcEZ1bmN0aW9uIiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJPcmllbnRhdGlvblBhaXIudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjEtMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogQW4gb2JqZWN0IHRoYXQgY29udGFpbnMgYSB2YWx1ZSBmb3IgZWFjaCBpdGVtIGluIGFuIGVudW1lcmF0aW9uLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuaW1wb3J0IEVudW1lcmF0aW9uTWFwIGZyb20gJy4vRW51bWVyYXRpb25NYXAuanMnO1xyXG5pbXBvcnQgT3JpZW50YXRpb24gZnJvbSAnLi9PcmllbnRhdGlvbi5qcyc7XHJcbmltcG9ydCBwaGV0Q29yZSBmcm9tICcuL3BoZXRDb3JlLmpzJztcclxuXHJcbmNsYXNzIE9yaWVudGF0aW9uUGFpcjxUPiBleHRlbmRzIEVudW1lcmF0aW9uTWFwPE9yaWVudGF0aW9uLCBUPiB7XHJcblxyXG4gIC8qKlxyXG4gICAqIEBwYXJhbSBob3Jpem9udGFsIC0gVmFsdWUgZm9yIHRoZSBob3Jpem9udGFsIG9yaWVudGF0aW9uXHJcbiAgICogQHBhcmFtIHZlcnRpY2FsIC0gVmFsdWUgZm9yIHRoZSB2ZXJ0aWNhbCBvcmllbnRhdGlvblxyXG4gICAqL1xyXG4gIHB1YmxpYyBjb25zdHJ1Y3RvciggaG9yaXpvbnRhbDogVCwgdmVydGljYWw6IFQgKSB7XHJcbiAgICBzdXBlciggT3JpZW50YXRpb24sIG9yaWVudGF0aW9uID0+IG9yaWVudGF0aW9uID09PSBPcmllbnRhdGlvbi5IT1JJWk9OVEFMID8gaG9yaXpvbnRhbCA6IHZlcnRpY2FsICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgZ2V0IGhvcml6b250YWwoKTogVCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXQoIE9yaWVudGF0aW9uLkhPUklaT05UQUwgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBzZXQgaG9yaXpvbnRhbCggdmFsdWU6IFQgKSB7XHJcbiAgICB0aGlzLnNldCggT3JpZW50YXRpb24uSE9SSVpPTlRBTCwgdmFsdWUgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyBnZXQgdmVydGljYWwoKTogVCB7XHJcbiAgICByZXR1cm4gdGhpcy5nZXQoIE9yaWVudGF0aW9uLlZFUlRJQ0FMICk7XHJcbiAgfVxyXG5cclxuICBwdWJsaWMgc2V0IHZlcnRpY2FsKCB2YWx1ZTogVCApIHtcclxuICAgIHRoaXMuc2V0KCBPcmllbnRhdGlvbi5WRVJUSUNBTCwgdmFsdWUgKTtcclxuICB9XHJcblxyXG4gIHB1YmxpYyB3aXRoKCBvcmllbnRhdGlvbjogT3JpZW50YXRpb24sIHZhbHVlOiBUICk6IE9yaWVudGF0aW9uUGFpcjxUPiB7XHJcbiAgICByZXR1cm4gbmV3IE9yaWVudGF0aW9uUGFpcihcclxuICAgICAgb3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLkhPUklaT05UQUwgPyB2YWx1ZSA6IHRoaXMuaG9yaXpvbnRhbCxcclxuICAgICAgb3JpZW50YXRpb24gPT09IE9yaWVudGF0aW9uLlZFUlRJQ0FMID8gdmFsdWUgOiB0aGlzLnZlcnRpY2FsXHJcbiAgICApO1xyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogQ3JlYXRlcyBhbiBvcmllbnRhdGlvbiBwYWlyIGJhc2VkIG9uIGEgZmFjdG9yeSBtZXRob2QuXHJcbiAgICpcclxuICAgKiBAcGFyYW0gZmFjdG9yeSAtIGNhbGxlZCBvbmNlIGZvciBlYWNoIG9yaWVudGF0aW9uIHRvIGRldGVybWluZVxyXG4gICAqICAgICAgICAgICAgICAgICAgICAgICAgICAgICB0aGUgdmFsdWUuXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyBjcmVhdGU8VD4oIGZhY3Rvcnk6ICggbzogT3JpZW50YXRpb24gKSA9PiBUICk6IE9yaWVudGF0aW9uUGFpcjxUPiB7XHJcbiAgICByZXR1cm4gbmV3IE9yaWVudGF0aW9uUGFpciggZmFjdG9yeSggT3JpZW50YXRpb24uSE9SSVpPTlRBTCApLCBmYWN0b3J5KCBPcmllbnRhdGlvbi5WRVJUSUNBTCApICk7XHJcbiAgfVxyXG5cclxuICAvKipcclxuICAgKiBSZXR1cm5zIGEgbmV3IEVudW1lcmF0aW9uTWFwIHdpdGggbWFwcGVkIHZhbHVlcy5cclxuICAgKlxyXG4gICAqIEBwYXJhbSBtYXBGdW5jdGlvbiAtIGZ1bmN0aW9uKCB7Kn0sIHtURW51bWVyYXRpb24uKn0gKTogeyp9XHJcbiAgICogQHJldHVybnMgV2l0aCB0aGUgbWFwcGVkIHZhbHVlc1xyXG4gICAqL1xyXG4gIHB1YmxpYyBvdmVycmlkZSBtYXAoIG1hcEZ1bmN0aW9uOiAoIHZhbHVlOiBULCBvcmllbnRhdGlvbjogT3JpZW50YXRpb24gKSA9PiBUICk6IE9yaWVudGF0aW9uUGFpcjxUPiB7XHJcbiAgICByZXR1cm4gbmV3IE9yaWVudGF0aW9uUGFpciggbWFwRnVuY3Rpb24oIHRoaXMuaG9yaXpvbnRhbCwgT3JpZW50YXRpb24uSE9SSVpPTlRBTCApLCBtYXBGdW5jdGlvbiggdGhpcy52ZXJ0aWNhbCwgT3JpZW50YXRpb24uVkVSVElDQUwgKSApO1xyXG4gIH1cclxufVxyXG5cclxucGhldENvcmUucmVnaXN0ZXIoICdPcmllbnRhdGlvblBhaXInLCBPcmllbnRhdGlvblBhaXIgKTtcclxuZXhwb3J0IGRlZmF1bHQgT3JpZW50YXRpb25QYWlyOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxjQUFjLE1BQU0scUJBQXFCO0FBQ2hELE9BQU9DLFdBQVcsTUFBTSxrQkFBa0I7QUFDMUMsT0FBT0MsUUFBUSxNQUFNLGVBQWU7QUFFcEMsTUFBTUMsZUFBZSxTQUFZSCxjQUFjLENBQWlCO0VBRTlEO0FBQ0Y7QUFDQTtBQUNBO0VBQ1NJLFdBQVdBLENBQUVDLFVBQWEsRUFBRUMsUUFBVyxFQUFHO0lBQy9DLEtBQUssQ0FBRUwsV0FBVyxFQUFFTSxXQUFXLElBQUlBLFdBQVcsS0FBS04sV0FBVyxDQUFDTyxVQUFVLEdBQUdILFVBQVUsR0FBR0MsUUFBUyxDQUFDO0VBQ3JHO0VBRUEsSUFBV0QsVUFBVUEsQ0FBQSxFQUFNO0lBQ3pCLE9BQU8sSUFBSSxDQUFDSSxHQUFHLENBQUVSLFdBQVcsQ0FBQ08sVUFBVyxDQUFDO0VBQzNDO0VBRUEsSUFBV0gsVUFBVUEsQ0FBRUssS0FBUSxFQUFHO0lBQ2hDLElBQUksQ0FBQ0MsR0FBRyxDQUFFVixXQUFXLENBQUNPLFVBQVUsRUFBRUUsS0FBTSxDQUFDO0VBQzNDO0VBRUEsSUFBV0osUUFBUUEsQ0FBQSxFQUFNO0lBQ3ZCLE9BQU8sSUFBSSxDQUFDRyxHQUFHLENBQUVSLFdBQVcsQ0FBQ1csUUFBUyxDQUFDO0VBQ3pDO0VBRUEsSUFBV04sUUFBUUEsQ0FBRUksS0FBUSxFQUFHO0lBQzlCLElBQUksQ0FBQ0MsR0FBRyxDQUFFVixXQUFXLENBQUNXLFFBQVEsRUFBRUYsS0FBTSxDQUFDO0VBQ3pDO0VBRU9HLElBQUlBLENBQUVOLFdBQXdCLEVBQUVHLEtBQVEsRUFBdUI7SUFDcEUsT0FBTyxJQUFJUCxlQUFlLENBQ3hCSSxXQUFXLEtBQUtOLFdBQVcsQ0FBQ08sVUFBVSxHQUFHRSxLQUFLLEdBQUcsSUFBSSxDQUFDTCxVQUFVLEVBQ2hFRSxXQUFXLEtBQUtOLFdBQVcsQ0FBQ1csUUFBUSxHQUFHRixLQUFLLEdBQUcsSUFBSSxDQUFDSixRQUN0RCxDQUFDO0VBQ0g7O0VBRUE7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0VBQ0UsT0FBY1EsTUFBTUEsQ0FBS0MsT0FBZ0MsRUFBdUI7SUFDOUUsT0FBTyxJQUFJWixlQUFlLENBQUVZLE9BQU8sQ0FBRWQsV0FBVyxDQUFDTyxVQUFXLENBQUMsRUFBRU8sT0FBTyxDQUFFZCxXQUFXLENBQUNXLFFBQVMsQ0FBRSxDQUFDO0VBQ2xHOztFQUVBO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtFQUNrQkksR0FBR0EsQ0FBRUMsV0FBd0QsRUFBdUI7SUFDbEcsT0FBTyxJQUFJZCxlQUFlLENBQUVjLFdBQVcsQ0FBRSxJQUFJLENBQUNaLFVBQVUsRUFBRUosV0FBVyxDQUFDTyxVQUFXLENBQUMsRUFBRVMsV0FBVyxDQUFFLElBQUksQ0FBQ1gsUUFBUSxFQUFFTCxXQUFXLENBQUNXLFFBQVMsQ0FBRSxDQUFDO0VBQzFJO0FBQ0Y7QUFFQVYsUUFBUSxDQUFDZ0IsUUFBUSxDQUFFLGlCQUFpQixFQUFFZixlQUFnQixDQUFDO0FBQ3ZELGVBQWVBLGVBQWUiLCJpZ25vcmVMaXN0IjpbXX0=