// Copyright 2020-2023, University of Colorado Boulder

/**
 * Tests for assertHasProperties
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import assertHasProperties from './assertHasProperties.js';
QUnit.module('assertHasProperties');
QUnit.test('assertHasProperties', assert => {
  assert.ok(true, 'one test whether or not assertions are enabled');
  if (window.assert) {
    class MyObject {
      aFunction() {
        // Empty
      }
      get getter() {
        return 'hi';
      }
    }
    class MyChild extends MyObject {
      childMethod() {
        // Empty
      }
      get childGetter() {
        return 'I am a middle child';
      }
    }

    // Should not throw error because options are all from one set.
    assertHasProperties({
      a: true,
      b: false
    }, ['a']);
    assertHasProperties({
      a: true,
      b: false
    }, ['a', 'b']);
    assertHasProperties({
      b: undefined
    }, ['b']);
    assertHasProperties({
      b: null
    }, ['b']);
    assertHasProperties({
      get b() {
        return 5;
      }
    }, ['b']);
    assertHasProperties({
      b() {/*empty*/}
    }, ['b']);
    assertHasProperties({
      set b(b) {/*empty*/}
    }, ['b']);
    assertHasProperties(new MyObject(), ['aFunction', 'getter']);
    assertHasProperties(new MyChild(), ['aFunction', 'getter', 'childMethod', 'childGetter']);

    // Simulate scenery Node style types
    class Parent {
      constructor() {
        this.opacityProperty = {};
      }
      getOpacity() {
        return 0;
      }
      get opacity() {
        return 0;
      }
    }
    class Circle extends Parent {}

    // on direct prototype
    assertHasProperties(new Parent(), ['getOpacity', 'opacity', 'opacityProperty']);

    // on ancestor parent prototype
    assertHasProperties(new Circle(), ['getOpacity', 'opacity', 'opacityProperty']);

    // Should error because properties are not provided
    assert.throws(() => assertHasProperties({
      b: false
    }, ['a']));
    assert.throws(() => assertHasProperties({}, ['a']));
    assert.throws(() => assertHasProperties({
      ab: 'something'
    }, ['a']));
    assert.throws(() => assertHasProperties({
      a: true,
      b: false
    }, ['a', 'b', 'c']));
    assert.throws(() => assertHasProperties({
      a: true,
      c: undefined
    }, ['a', 'b', 'c']));
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnRIYXNQcm9wZXJ0aWVzIiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0Iiwib2siLCJ3aW5kb3ciLCJNeU9iamVjdCIsImFGdW5jdGlvbiIsImdldHRlciIsIk15Q2hpbGQiLCJjaGlsZE1ldGhvZCIsImNoaWxkR2V0dGVyIiwiYSIsImIiLCJ1bmRlZmluZWQiLCJQYXJlbnQiLCJjb25zdHJ1Y3RvciIsIm9wYWNpdHlQcm9wZXJ0eSIsImdldE9wYWNpdHkiLCJvcGFjaXR5IiwiQ2lyY2xlIiwidGhyb3dzIiwiYWIiLCJjIl0sInNvdXJjZXMiOlsiYXNzZXJ0SGFzUHJvcGVydGllc1Rlc3RzLnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIwLTIwMjMsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRlc3RzIGZvciBhc3NlcnRIYXNQcm9wZXJ0aWVzXHJcbiAqXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgYXNzZXJ0SGFzUHJvcGVydGllcyBmcm9tICcuL2Fzc2VydEhhc1Byb3BlcnRpZXMuanMnO1xyXG5cclxuUVVuaXQubW9kdWxlKCAnYXNzZXJ0SGFzUHJvcGVydGllcycgKTtcclxuXHJcblFVbml0LnRlc3QoICdhc3NlcnRIYXNQcm9wZXJ0aWVzJywgYXNzZXJ0ID0+IHtcclxuICBhc3NlcnQub2soIHRydWUsICdvbmUgdGVzdCB3aGV0aGVyIG9yIG5vdCBhc3NlcnRpb25zIGFyZSBlbmFibGVkJyApO1xyXG5cclxuICBpZiAoIHdpbmRvdy5hc3NlcnQgKSB7XHJcblxyXG4gICAgY2xhc3MgTXlPYmplY3Qge1xyXG5cclxuICAgICAgcHVibGljIGFGdW5jdGlvbigpOiB2b2lkIHtcclxuICAgICAgICAvLyBFbXB0eVxyXG4gICAgICB9XHJcblxyXG4gICAgICBwdWJsaWMgZ2V0IGdldHRlcigpIHsgcmV0dXJuICdoaSc7IH1cclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBNeUNoaWxkIGV4dGVuZHMgTXlPYmplY3Qge1xyXG5cclxuICAgICAgcHVibGljIGNoaWxkTWV0aG9kKCk6IHZvaWQge1xyXG4gICAgICAgIC8vIEVtcHR5XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHB1YmxpYyBnZXQgY2hpbGRHZXR0ZXIoKSB7IHJldHVybiAnSSBhbSBhIG1pZGRsZSBjaGlsZCc7IH1cclxuICAgIH1cclxuXHJcbiAgICAvLyBTaG91bGQgbm90IHRocm93IGVycm9yIGJlY2F1c2Ugb3B0aW9ucyBhcmUgYWxsIGZyb20gb25lIHNldC5cclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIHsgYTogdHJ1ZSwgYjogZmFsc2UgfSwgWyAnYScgXSApO1xyXG4gICAgYXNzZXJ0SGFzUHJvcGVydGllcyggeyBhOiB0cnVlLCBiOiBmYWxzZSB9LCBbICdhJywgJ2InIF0gKTtcclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIHsgYjogdW5kZWZpbmVkIH0sIFsgJ2InIF0gKTtcclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIHsgYjogbnVsbCB9LCBbICdiJyBdICk7XHJcbiAgICBhc3NlcnRIYXNQcm9wZXJ0aWVzKCB7IGdldCBiKCkgeyByZXR1cm4gNTsgfSB9LCBbICdiJyBdICk7XHJcbiAgICBhc3NlcnRIYXNQcm9wZXJ0aWVzKCB7IGIoKSB7IC8qZW1wdHkqLyB9IH0sIFsgJ2InIF0gKTtcclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIHsgc2V0IGIoIGI6IHVua25vd24gKSB7IC8qZW1wdHkqLyB9IH0sIFsgJ2InIF0gKTtcclxuICAgIGFzc2VydEhhc1Byb3BlcnRpZXMoIG5ldyBNeU9iamVjdCgpLCBbICdhRnVuY3Rpb24nLCAnZ2V0dGVyJyBdICk7XHJcbiAgICBhc3NlcnRIYXNQcm9wZXJ0aWVzKCBuZXcgTXlDaGlsZCgpLCBbICdhRnVuY3Rpb24nLCAnZ2V0dGVyJywgJ2NoaWxkTWV0aG9kJywgJ2NoaWxkR2V0dGVyJyBdICk7XHJcblxyXG4gICAgLy8gU2ltdWxhdGUgc2NlbmVyeSBOb2RlIHN0eWxlIHR5cGVzXHJcbiAgICBjbGFzcyBQYXJlbnQge1xyXG4gICAgICBwdWJsaWMgb3BhY2l0eVByb3BlcnR5OiBvYmplY3Q7XHJcblxyXG4gICAgICBwdWJsaWMgY29uc3RydWN0b3IoKSB7XHJcbiAgICAgICAgdGhpcy5vcGFjaXR5UHJvcGVydHkgPSB7fTtcclxuICAgICAgfVxyXG5cclxuICAgICAgcHVibGljIGdldE9wYWNpdHkoKTogbnVtYmVyIHtyZXR1cm4gMDt9XHJcblxyXG4gICAgICBwdWJsaWMgZ2V0IG9wYWNpdHkoKSB7IHJldHVybiAwO31cclxuICAgIH1cclxuXHJcbiAgICBjbGFzcyBDaXJjbGUgZXh0ZW5kcyBQYXJlbnQge31cclxuXHJcbiAgICAvLyBvbiBkaXJlY3QgcHJvdG90eXBlXHJcbiAgICBhc3NlcnRIYXNQcm9wZXJ0aWVzKCBuZXcgUGFyZW50KCksIFsgJ2dldE9wYWNpdHknLCAnb3BhY2l0eScsICdvcGFjaXR5UHJvcGVydHknIF0gKTtcclxuXHJcbiAgICAvLyBvbiBhbmNlc3RvciBwYXJlbnQgcHJvdG90eXBlXHJcbiAgICBhc3NlcnRIYXNQcm9wZXJ0aWVzKCBuZXcgQ2lyY2xlKCksIFsgJ2dldE9wYWNpdHknLCAnb3BhY2l0eScsICdvcGFjaXR5UHJvcGVydHknIF0gKTtcclxuXHJcbiAgICAvLyBTaG91bGQgZXJyb3IgYmVjYXVzZSBwcm9wZXJ0aWVzIGFyZSBub3QgcHJvdmlkZWRcclxuICAgIGFzc2VydC50aHJvd3MoICgpID0+IGFzc2VydEhhc1Byb3BlcnRpZXMoIHsgYjogZmFsc2UgfSwgWyAnYScgXSApICk7XHJcbiAgICBhc3NlcnQudGhyb3dzKCAoKSA9PiBhc3NlcnRIYXNQcm9wZXJ0aWVzKCB7fSwgWyAnYScgXSApICk7XHJcbiAgICBhc3NlcnQudGhyb3dzKCAoKSA9PiBhc3NlcnRIYXNQcm9wZXJ0aWVzKCB7IGFiOiAnc29tZXRoaW5nJyB9LCBbICdhJyBdICkgKTtcclxuICAgIGFzc2VydC50aHJvd3MoICgpID0+IGFzc2VydEhhc1Byb3BlcnRpZXMoIHsgYTogdHJ1ZSwgYjogZmFsc2UgfSwgWyAnYScsICdiJywgJ2MnIF0gKSApO1xyXG4gICAgYXNzZXJ0LnRocm93cyggKCkgPT4gYXNzZXJ0SGFzUHJvcGVydGllcyggeyBhOiB0cnVlLCBjOiB1bmRlZmluZWQgfSwgWyAnYScsICdiJywgJ2MnIF0gKSApO1xyXG4gIH1cclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxtQkFBbUIsTUFBTSwwQkFBMEI7QUFFMURDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLHFCQUFzQixDQUFDO0FBRXJDRCxLQUFLLENBQUNFLElBQUksQ0FBRSxxQkFBcUIsRUFBRUMsTUFBTSxJQUFJO0VBQzNDQSxNQUFNLENBQUNDLEVBQUUsQ0FBRSxJQUFJLEVBQUUsZ0RBQWlELENBQUM7RUFFbkUsSUFBS0MsTUFBTSxDQUFDRixNQUFNLEVBQUc7SUFFbkIsTUFBTUcsUUFBUSxDQUFDO01BRU5DLFNBQVNBLENBQUEsRUFBUztRQUN2QjtNQUFBO01BR0YsSUFBV0MsTUFBTUEsQ0FBQSxFQUFHO1FBQUUsT0FBTyxJQUFJO01BQUU7SUFDckM7SUFFQSxNQUFNQyxPQUFPLFNBQVNILFFBQVEsQ0FBQztNQUV0QkksV0FBV0EsQ0FBQSxFQUFTO1FBQ3pCO01BQUE7TUFHRixJQUFXQyxXQUFXQSxDQUFBLEVBQUc7UUFBRSxPQUFPLHFCQUFxQjtNQUFFO0lBQzNEOztJQUVBO0lBQ0FaLG1CQUFtQixDQUFFO01BQUVhLENBQUMsRUFBRSxJQUFJO01BQUVDLENBQUMsRUFBRTtJQUFNLENBQUMsRUFBRSxDQUFFLEdBQUcsQ0FBRyxDQUFDO0lBQ3JEZCxtQkFBbUIsQ0FBRTtNQUFFYSxDQUFDLEVBQUUsSUFBSTtNQUFFQyxDQUFDLEVBQUU7SUFBTSxDQUFDLEVBQUUsQ0FBRSxHQUFHLEVBQUUs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