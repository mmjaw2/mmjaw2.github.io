// Copyright 2018-2023, University of Colorado Boulder

/**
 * Tests for dimensionForEach
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import dimensionForEach from './dimensionForEach.js';
QUnit.module('dimensionForEach');
QUnit.test('1 dimensional', assert => {
  const normalValues = [];
  const ourValues = [];
  const arr = [1, 2, 4, 9];
  arr.forEach((element, index) => {
    normalValues.push({
      element: element,
      index: index
    });
  });
  dimensionForEach(1, arr, (element, index) => {
    ourValues.push({
      element: element,
      index: index
    });
  });
  assert.ok(_.isEqual(normalValues, ourValues), '1-dimensional comparison');
});
QUnit.test('2 dimensional', assert => {
  const arr = [[1, 2, 4], [9, 5]];
  const values = [];
  const expectedValues = [{
    element: 1,
    idx1: 0,
    idx2: 0
  }, {
    element: 2,
    idx1: 0,
    idx2: 1
  }, {
    element: 4,
    idx1: 0,
    idx2: 2
  }, {
    element: 9,
    idx1: 1,
    idx2: 0
  }, {
    element: 5,
    idx1: 1,
    idx2: 1
  }];
  dimensionForEach(2, arr, (element, idx1, idx2) => {
    values.push({
      element: element,
      idx1: idx1,
      idx2: idx2
    });
  });
  assert.ok(_.isEqual(values, expectedValues), '2-dimensional comparison');
});
QUnit.test('3 dimensional', assert => {
  const arr = [[[1, 5], [9, 2]], [[3, 3, 4]]];
  const values = [];
  const expectedValues = [{
    element: 1,
    idx1: 0,
    idx2: 0,
    idx3: 0
  }, {
    element: 5,
    idx1: 0,
    idx2: 0,
    idx3: 1
  }, {
    element: 9,
    idx1: 0,
    idx2: 1,
    idx3: 0
  }, {
    element: 2,
    idx1: 0,
    idx2: 1,
    idx3: 1
  }, {
    element: 3,
    idx1: 1,
    idx2: 0,
    idx3: 0
  }, {
    element: 3,
    idx1: 1,
    idx2: 0,
    idx3: 1
  }, {
    element: 4,
    idx1: 1,
    idx2: 0,
    idx3: 2
  }];
  dimensionForEach(3, arr, (element, idx1, idx2, idx3) => {
    values.push({
      element: element,
      idx1: idx1,
      idx2: idx2,
      idx3: idx3
    });
  });
  assert.ok(_.isEqual(values, expectedValues), '3-dimensional comparison');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaW1lbnNpb25Gb3JFYWNoIiwiUVVuaXQiLCJtb2R1bGUiLCJ0ZXN0IiwiYXNzZXJ0Iiwibm9ybWFsVmFsdWVzIiwib3VyVmFsdWVzIiwiYXJyIiwiZm9yRWFjaCIsImVsZW1lbnQiLCJpbmRleCIsInB1c2giLCJvayIsIl8iLCJpc0VxdWFsIiwidmFsdWVzIiwiZXhwZWN0ZWRWYWx1ZXMiLCJpZHgxIiwiaWR4MiIsImlkeDMiXSwic291cmNlcyI6WyJkaW1lbnNpb25Gb3JFYWNoVGVzdHMudHMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgtMjAyMywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogVGVzdHMgZm9yIGRpbWVuc2lvbkZvckVhY2hcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmltcG9ydCBkaW1lbnNpb25Gb3JFYWNoIGZyb20gJy4vZGltZW5zaW9uRm9yRWFjaC5qcyc7XHJcblxyXG5RVW5pdC5tb2R1bGUoICdkaW1lbnNpb25Gb3JFYWNoJyApO1xyXG5cclxudHlwZSBFbGVtZW50ID0geyBlbGVtZW50OiBudW1iZXI7IGluZGV4OiBudW1iZXIgfTtcclxuXHJcblFVbml0LnRlc3QoICcxIGRpbWVuc2lvbmFsJywgYXNzZXJ0ID0+IHtcclxuICBjb25zdCBub3JtYWxWYWx1ZXM6IEVsZW1lbnRbXSA9IFtdO1xyXG4gIGNvbnN0IG91clZhbHVlczogRWxlbWVudFtdID0gW107XHJcblxyXG4gIGNvbnN0IGFyciA9IFsgMSwgMiwgNCwgOSBdO1xyXG5cclxuICBhcnIuZm9yRWFjaCggKCBlbGVtZW50LCBpbmRleCApID0+IHtcclxuICAgIG5vcm1hbFZhbHVlcy5wdXNoKCB7XHJcbiAgICAgIGVsZW1lbnQ6IGVsZW1lbnQsXHJcbiAgICAgIGluZGV4OiBpbmRleFxyXG4gICAgfSApO1xyXG4gIH0gKTtcclxuXHJcbiAgZGltZW5zaW9uRm9yRWFjaCggMSwgYXJyLCAoIGVsZW1lbnQsIGluZGV4ICkgPT4ge1xyXG4gICAgb3VyVmFsdWVzLnB1c2goIHtcclxuICAgICAgZWxlbWVudDogZWxlbWVudCxcclxuICAgICAgaW5kZXg6IGluZGV4XHJcbiAgICB9ICk7XHJcbiAgfSApO1xyXG5cclxuICBhc3NlcnQub2soIF8uaXNFcXVhbCggbm9ybWFsVmFsdWVzLCBvdXJWYWx1ZXMgKSwgJzEtZGltZW5zaW9uYWwgY29tcGFyaXNvbicgKTtcclxufSApO1xyXG5cclxuUVVuaXQudGVzdCggJzIgZGltZW5zaW9uYWwnLCBhc3NlcnQgPT4ge1xyXG4gIGNvbnN0IGFyciA9IFtcclxuICAgIFsgMSwgMiwgNCBdLFxyXG4gICAgWyA5LCA1IF1cclxuICBdO1xyXG4gIGNvbnN0IHZhbHVlczogQXJyYXk8eyBlbGVtZW50OiBudW1iZXI7IGlkeDE6IG51bWJlcjsgaWR4MjogbnVtYmVyIH0+ID0gW107XHJcbiAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSBbXHJcbiAgICB7IGVsZW1lbnQ6IDEsIGlkeDE6IDAsIGlkeDI6IDAgfSxcclxuICAgIHsgZWxlbWVudDogMiwgaWR4MTogMCwgaWR4MjogMSB9LFxyXG4gICAgeyBlbGVtZW50OiA0LCBpZHgxOiAwLCBpZHgyOiAyIH0sXHJcbiAgICB7IGVsZW1lbnQ6IDksIGlkeDE6IDEsIGlkeDI6IDAgfSxcclxuICAgIHsgZWxlbWVudDogNSwgaWR4MTogMSwgaWR4MjogMSB9XHJcbiAgXTtcclxuXHJcbiAgZGltZW5zaW9uRm9yRWFjaCggMiwgYXJyLCAoIGVsZW1lbnQsIGlkeDEsIGlkeDIgKSA9PiB7XHJcbiAgICB2YWx1ZXMucHVzaCgge1xyXG4gICAgICBlbGVtZW50OiBlbGVtZW50LFxyXG4gICAgICBpZHgxOiBpZHgxLFxyXG4gICAgICBpZHgyOiBpZHgyXHJcbiAgICB9ICk7XHJcbiAgfSApO1xyXG5cclxuICBhc3NlcnQub2soIF8uaXNFcXVhbCggdmFsdWVzLCBleHBlY3RlZFZhbHVlcyApLCAnMi1kaW1lbnNpb25hbCBjb21wYXJpc29uJyApO1xyXG59ICk7XHJcblxyXG5RVW5pdC50ZXN0KCAnMyBkaW1lbnNpb25hbCcsIGFzc2VydCA9PiB7XHJcbiAgY29uc3QgYXJyID0gW1xyXG4gICAgW1xyXG4gICAgICBbIDEsIDUgXSxcclxuICAgICAgWyA5LCAyIF1cclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgIFsgMywgMywgNCBdXHJcbiAgICBdXHJcbiAgXTtcclxuICBjb25zdCB2YWx1ZXM6IEFycmF5PHsgZWxlbWVudDogbnVtYmVyOyBpZHgxOiBudW1iZXI7IGlkeDI6IG51bWJlcjsgaWR4MzogbnVtYmVyIH0+ID0gW107XHJcbiAgY29uc3QgZXhwZWN0ZWRWYWx1ZXMgPSBbXHJcbiAgICB7IGVsZW1lbnQ6IDEsIGlkeDE6IDAsIGlkeDI6IDAsIGlkeDM6IDAgfSxcclxuICAgIHsgZWxlbWVudDogNSwgaWR4MTogMCwgaWR4MjogMCwgaWR4MzogMSB9LFxyXG4gICAgeyBlbGVtZW50OiA5LCBpZHgxOiAwLCBpZHgyOiAxLCBpZHgzOiAwIH0sXHJcbiAgICB7IGVsZW1lbnQ6IDIsIGlkeDE6IDAsIGlkeDI6IDEsIGlkeDM6IDEgfSxcclxuICAgIHsgZWxlbWVudDogMywgaWR4MTogMSwgaWR4MjogMCwgaWR4MzogMCB9LFxyXG4gICAgeyBlbGVtZW50OiAzLCBpZHgxOiAxLCBpZHgyOiAwLCBpZHgzOiAxIH0sXHJcbiAgICB7IGVsZW1lbnQ6IDQsIGlkeDE6IDEsIGlkeDI6IDAsIGlkeDM6IDIgfVxyXG4gIF07XHJcblxyXG4gIGRpbWVuc2lvbkZvckVhY2goIDMsIGFyciwgKCBlbGVtZW50LCBpZHgxLCBpZHgyLCBpZHgzICkgPT4ge1xyXG4gICAgdmFsdWVzLnB1c2goIHtcclxuICAgICAgZWxlbWVudDogZWxlbWVudCxcclxuICAgICAgaWR4MTogaWR4MSxcclxuICAgICAgaWR4MjogaWR4MixcclxuICAgICAgaWR4MzogaWR4M1xyXG4gICAgfSApO1xyXG4gIH0gKTtcclxuXHJcbiAgYXNzZXJ0Lm9rKCBfLmlzRXF1YWwoIHZhbHVlcywgZXhwZWN0ZWRWYWx1ZXMgKSwgJzMtZGltZW5zaW9uYWwgY29tcGFyaXNvbicgKTtcclxufSApOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxPQUFPQSxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFFcERDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLGtCQUFtQixDQUFDO0FBSWxDRCxLQUFLLENBQUNFLElBQUksQ0FBRSxlQUFlLEVBQUVDLE1BQU0sSUFBSTtFQUNyQyxNQUFNQyxZQUF1QixHQUFHLEVBQUU7RUFDbEMsTUFBTUMsU0FBb0IsR0FBRyxFQUFFO0VBRS9CLE1BQU1DLEdBQUcsR0FBRyxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRTtFQUUxQkEsR0FBRyxDQUFDQyxPQUFPLENBQUUsQ0FBRUMsT0FBTyxFQUFFQyxLQUFLLEtBQU07SUFDakNMLFlBQVksQ0FBQ00sSUFBSSxDQUFFO01BQ2pCRixPQUFPLEVBQUVBLE9BQU87TUFDaEJDLEtBQUssRUFBRUE7SUFDVCxDQUFFLENBQUM7RUFDTCxDQUFFLENBQUM7RUFFSFYsZ0JBQWdCLENBQUUsQ0FBQyxFQUFFTyxHQUFHLEVBQUUsQ0FBRUUsT0FBTyxFQUFFQyxLQUFLLEtBQU07SUFDOUNKLFNBQVMsQ0FBQ0ssSUFBSSxDQUFFO01BQ2RGLE9BQU8sRUFBRUEsT0FBTztNQUNoQkMsS0FBSyxFQUFFQTtJQUNULENBQUUsQ0FBQztFQUNMLENBQUUsQ0FBQztFQUVITixNQUFNLENBQUNRLEVBQUUsQ0FBRUMsQ0FBQyxDQUFDQyxPQUFPLENBQUVULFlBQVksRUFBRUMsU0FBVSxDQUFDLEVBQUUsMEJBQTJCLENBQUM7QUFDL0UsQ0FBRSxDQUFDO0FBRUhMLEtBQUssQ0FBQ0UsSUFBSSxDQUFFLGVBQWUsRUFBRUMsTUFBTSxJQUFJO0VBQ3JDLE1BQU1HLEdBQUcsR0FBRyxDQUNWLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsRUFDWCxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FDVDtFQUNELE1BQU1RLE1BQThELEdBQUcsRUFBRTtFQUN6RSxNQUFNQyxjQUFjLEdBQUcsQ0FDckI7SUFBRVAsT0FBTyxFQUFFLENBQUM7SUFBRVEsSUFBSSxFQUFFLENBQUM7SUFBRUMsSUFBSSxFQUFFO0VBQUUsQ0FBQyxFQUNoQztJQUFFVCxPQUFPLEVBQUUsQ0FBQztJQUFFUSxJQUFJLEVBQUUsQ0FBQztJQUFFQyxJQUFJLEVBQUU7RUFBRSxDQUFDLEVBQ2hDO0lBQUVULE9BQU8sRUFBRSxDQUFDO0lBQUVRLElBQUksRUFBRSxDQUFDO0lBQUVDLElBQUksRUFBRTtFQUFFLENBQUMsRUFDaEM7SUFBRVQsT0FBTyxFQUFFLENBQUM7SUFBRVEsSUFBSSxFQUFFLENBQUM7SUFBRUMsSUFBSSxFQUFFO0VBQUUsQ0FBQyxFQUNoQztJQUFFVCxPQUFPLEVBQUUsQ0FBQztJQUFFUSxJQUFJLEVBQUUsQ0FBQztJQUFFQyxJQUFJLEVBQUU7RUFBRSxDQUFDLENBQ2pDO0VBRURsQixnQkFBZ0IsQ0FBRSxDQUFDLEVBQUVPLEdBQUcsRUFBRSxDQUFFRSxPQUFPLEVBQUVRLElBQUksRUFBRUMsSUFBSSxLQUFNO0lBQ25ESCxNQUFNLENBQUNKLElBQUksQ0FBRTtNQUNYRixPQUFPLEVBQUVBLE9BQU87TUFDaEJRLElBQUksRUFBRUEsSUFBSTtNQUNWQyxJQUFJLEVBQUVBO0lBQ1IsQ0FBRSxDQUFDO0VBQ0wsQ0FBRSxDQUFDO0VBRUhkLE1BQU0sQ0FBQ1EsRUFBRSxDQUFFQyxDQUFDLENBQUNDLE9BQU8sQ0FBRUMsTUFBTSxFQUFFQyxjQUFlLENBQUMsRUFBRSwwQkFBMkIsQ0FBQztBQUM5RSxDQUFFLENBQUM7QUFFSGYsS0FBSyxDQUFDRSxJQUFJLENBQUUsZUFBZSxFQUFFQyxNQUFNLElBQUk7RUFDckMsTUFBTUcsR0FBRyxHQUFHLENBQ1YsQ0FDRSxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsRUFDUixDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsQ0FDVCxFQUNELENBQ0UsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxDQUNaLENBQ0Y7RUFDRCxNQUFNUSxNQUE0RSxHQUFHLEVBQUU7RUFDdkYsTUFBTUMsY0FBYyxHQUFHLENBQ3JCO0lBQUVQLE9BQU8sRUFBRSxDQUFDO0lBQUVRLElBQUksRUFBRSxDQUFDO0lBQUVDLElBQUksRUFBRSxDQUFDO0lBQUVDLElBQUksRUFBRTtFQUFFLENBQUMsRUFDekM7SUFBRVYsT0FBTyxFQUFFLENBQUM7SUFBRVEsSUFBSSxFQUFFLENBQUM7SUFBRUMsSUFBSSxFQUFFLENBQUM7SUFBRUMsSUFBSSxFQUFFO0VBQUUsQ0FBQyxFQUN6QztJQUFFVixPQUFPLEVBQUUsQ0FBQztJQUFFUSxJQUFJLEVBQUUsQ0FBQztJQUFFQyxJQUFJLEVBQUUsQ0FBQztJQUFFQyxJQUFJLEVBQUU7RUFBRSxDQUFDLEVBQ3pDO0lBQUVWLE9BQU8sRUFBRSxDQUFDO0lBQUVRLElBQUksRUFBRSxDQUFDO0lBQUVDLElBQUksRUFBRSxDQUFDO0lBQUVDLElBQUksRUFBRTtFQUFFLENBQUMsRUFDekM7SUFBRVYsT0FBTyxFQUFFLENBQUM7SUFBRVEsSUFBSSxFQUFFLENBQUM7SUFBRUMsSUFBSSxFQUFFLENBQUM7SUFBRUMsSUFBSSxFQUFFO0VBQUUsQ0FBQyxFQUN6QztJQUFFVixPQUFPLEVBQUUsQ0FBQztJQUFFUSxJQUFJLEVBQUUsQ0FBQztJQUFFQyxJQUFJLEVBQUUsQ0FBQztJQUFFQyxJQUFJLEVBQUU7RUFBRSxDQUFDLEVBQ3pDO0lBQUVWLE9BQU8sRUFBRSxDQUFDO0lBQUVRLElBQUksRUFBRSxDQUFDO0lBQUVDLElBQUksRUFBRSxDQUFDO0lBQUVDLElBQUksRUFBRTtFQUFFLENBQUMsQ0FDMUM7RUFFRG5CLGdCQUFnQixDQUFFLENBQUMsRUFBRU8sR0FBRyxFQUFFLENBQUVFLE9BQU8sRUFBRVEsSUFBSSxFQUFFQyxJQUFJLEVBQUVDLElBQUksS0FBTTtJQUN6REosTUFBTSxDQUFDSixJQUFJLENBQUU7TUFDWEYsT0FBTyxFQUFFQSxPQUFPO01BQ2hCUSxJQUFJLEVBQUVBLElBQUk7TUFDVkMsSUFBSSxFQUFFQSxJQUFJO01BQ1ZDLElBQUksRUFBRUE7SUFDUixDQUFFLENBQUM7RUFDTCxDQUFFLENBQUM7RUFFSGYsTUFBTSxDQUFDUSxFQUFFLENBQUVDLENBQUMsQ0FBQ0MsT0FBTyxDQUFFQyxNQUFNLEVBQUVDLGNBQWUsQ0FBQyxFQUFFLDBCQUEyQixDQUFDO0FBQzlFLENBQUUsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==