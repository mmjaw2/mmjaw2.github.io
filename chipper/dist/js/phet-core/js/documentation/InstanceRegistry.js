// Copyright 2018-2024, University of Colorado Boulder

/**
 * Tracks object allocations for reporting using binder.
 *
 * @author Sam Reid (PhET Interactive Simulations)
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import phetCore from '../phetCore.js';
function registerImplementation(instance, key, map) {
  instance.toDataURL(dataURL => {
    map[key].push(dataURL);
  });
}
class InstanceRegistry {
  // Per named component, store image URIs of what their usages look like
  static componentMap = {};

  /**
   * Adds a screenshot of the given scenery Node
   */
  static registerDataURL(repoName, typeName, instance) {
    if (phet.chipper.queryParameters.binder) {
      // Create the map if we haven't seen that component type before
      const key = `${repoName}/${typeName}`;
      InstanceRegistry.componentMap[key] = InstanceRegistry.componentMap[key] || [];
      try {
        if (instance.boundsProperty.value.isFinite()) {
          registerImplementation(instance, key, InstanceRegistry.componentMap);
        } else {
          const boundsListener = bounds => {
            if (bounds.isFinite()) {
              registerImplementation(instance, key, InstanceRegistry.componentMap);
              instance.boundsProperty.unlink(boundsListener); // less for memory, and more to not double add
            }
          };
          instance.boundsProperty.lazyLink(boundsListener);
        }
      } catch (e) {

        // Ignore nodes that don't draw anything
        // TODO https://github.com/phetsims/phet-core/issues/80 is this masking a problem?
      }
    }
  }

  /**
   * Register a toolbox pattern node. There is no strict class for this, so this factored out method can be used by any constructor
   */
  static registerToolbox(instance) {
    if (phet.chipper.queryParameters.binder) {
      InstanceRegistry.registerDataURL('sun', 'ToolboxPattern', instance);
    }
  }
}
phetCore.register('InstanceRegistry', InstanceRegistry);
export default InstanceRegistry;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwaGV0Q29yZSIsInJlZ2lzdGVySW1wbGVtZW50YXRpb24iLCJpbnN0YW5jZSIsImtleSIsIm1hcCIsInRvRGF0YVVSTCIsImRhdGFVUkwiLCJwdXNoIiwiSW5zdGFuY2VSZWdpc3RyeSIsImNvbXBvbmVudE1hcCIsInJlZ2lzdGVyRGF0YVVSTCIsInJlcG9OYW1lIiwidHlwZU5hbWUiLCJwaGV0IiwiY2hpcHBlciIsInF1ZXJ5UGFyYW1ldGVycyIsImJpbmRlciIsImJvdW5kc1Byb3BlcnR5IiwidmFsdWUiLCJpc0Zpbml0ZSIsImJvdW5kc0xpc3RlbmVyIiwiYm91bmRzIiwidW5saW5rIiwibGF6eUxpbmsiLCJlIiwicmVnaXN0ZXJUb29sYm94IiwicmVnaXN0ZXIiXSwic291cmNlcyI6WyJJbnN0YW5jZVJlZ2lzdHJ5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE4LTIwMjQsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRyYWNrcyBvYmplY3QgYWxsb2NhdGlvbnMgZm9yIHJlcG9ydGluZyB1c2luZyBiaW5kZXIuXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqIEBhdXRob3IgTWljaGFlbCBLYXV6bWFubiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuICovXHJcblxyXG5pbXBvcnQgcGhldENvcmUgZnJvbSAnLi4vcGhldENvcmUuanMnO1xyXG5pbXBvcnQgQm91bmRzMiBmcm9tICcuLi8uLi8uLi9kb3QvanMvQm91bmRzMi5qcyc7XHJcbmltcG9ydCBUUmVhZE9ubHlQcm9wZXJ0eSBmcm9tICcuLi8uLi8uLi9heG9uL2pzL1RSZWFkT25seVByb3BlcnR5LmpzJztcclxuXHJcbnR5cGUgTm9kZUxpa2UgPSB7XHJcbiAgdG9EYXRhVVJMOiAoIGNhbGxiYWNrOiAoIGRhdGE6IHN0cmluZyApID0+IHZvaWQgKSA9PiB2b2lkO1xyXG4gIGJvdW5kc1Byb3BlcnR5OiBUUmVhZE9ubHlQcm9wZXJ0eTxCb3VuZHMyPjtcclxufTtcclxuXHJcbnR5cGUgQ29tcG9uZW50TWFwID0gUmVjb3JkPHN0cmluZywgc3RyaW5nW10+O1xyXG5cclxuZnVuY3Rpb24gcmVnaXN0ZXJJbXBsZW1lbnRhdGlvbiggaW5zdGFuY2U6IE5vZGVMaWtlLCBrZXk6IHN0cmluZywgbWFwOiBDb21wb25lbnRNYXAgKTogdm9pZCB7XHJcbiAgaW5zdGFuY2UudG9EYXRhVVJMKCBkYXRhVVJMID0+IHtcclxuICAgIG1hcFsga2V5IF0ucHVzaCggZGF0YVVSTCApO1xyXG4gIH0gKTtcclxufVxyXG5cclxuY2xhc3MgSW5zdGFuY2VSZWdpc3RyeSB7XHJcblxyXG4gIC8vIFBlciBuYW1lZCBjb21wb25lbnQsIHN0b3JlIGltYWdlIFVSSXMgb2Ygd2hhdCB0aGVpciB1c2FnZXMgbG9vayBsaWtlXHJcbiAgcHVibGljIHN0YXRpYyBjb21wb25lbnRNYXA6IENvbXBvbmVudE1hcCA9IHt9O1xyXG5cclxuICAvKipcclxuICAgKiBBZGRzIGEgc2NyZWVuc2hvdCBvZiB0aGUgZ2l2ZW4gc2NlbmVyeSBOb2RlXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyByZWdpc3RlckRhdGFVUkwoIHJlcG9OYW1lOiBzdHJpbmcsIHR5cGVOYW1lOiBzdHJpbmcsIGluc3RhbmNlOiBOb2RlTGlrZSApOiB2b2lkIHtcclxuICAgIGlmICggcGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5iaW5kZXIgKSB7XHJcblxyXG4gICAgICAvLyBDcmVhdGUgdGhlIG1hcCBpZiB3ZSBoYXZlbid0IHNlZW4gdGhhdCBjb21wb25lbnQgdHlwZSBiZWZvcmVcclxuICAgICAgY29uc3Qga2V5ID0gYCR7cmVwb05hbWV9LyR7dHlwZU5hbWV9YDtcclxuICAgICAgSW5zdGFuY2VSZWdpc3RyeS5jb21wb25lbnRNYXBbIGtleSBdID0gSW5zdGFuY2VSZWdpc3RyeS5jb21wb25lbnRNYXBbIGtleSBdIHx8IFtdO1xyXG5cclxuICAgICAgdHJ5IHtcclxuICAgICAgICBpZiAoIGluc3RhbmNlLmJvdW5kc1Byb3BlcnR5LnZhbHVlLmlzRmluaXRlKCkgKSB7XHJcbiAgICAgICAgICByZWdpc3RlckltcGxlbWVudGF0aW9uKCBpbnN0YW5jZSwga2V5LCBJbnN0YW5jZVJlZ2lzdHJ5LmNvbXBvbmVudE1hcCApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgIGNvbnN0IGJvdW5kc0xpc3RlbmVyID0gKCBib3VuZHM6IEJvdW5kczIgKSA9PiB7XHJcbiAgICAgICAgICAgIGlmICggYm91bmRzLmlzRmluaXRlKCkgKSB7XHJcbiAgICAgICAgICAgICAgcmVnaXN0ZXJJbXBsZW1lbnRhdGlvbiggaW5zdGFuY2UsIGtleSwgSW5zdGFuY2VSZWdpc3RyeS5jb21wb25lbnRNYXAgKTtcclxuICAgICAgICAgICAgICBpbnN0YW5jZS5ib3VuZHNQcm9wZXJ0eS51bmxpbmsoIGJvdW5kc0xpc3RlbmVyICk7IC8vIGxlc3MgZm9yIG1lbW9yeSwgYW5kIG1vcmUgdG8gbm90IGRvdWJsZSBhZGRcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfTtcclxuICAgICAgICAgIGluc3RhbmNlLmJvdW5kc1Byb3BlcnR5LmxhenlMaW5rKCBib3VuZHNMaXN0ZW5lciApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBjYXRjaCggZSApIHtcclxuXHJcbiAgICAgICAgLy8gSWdub3JlIG5vZGVzIHRoYXQgZG9uJ3QgZHJhdyBhbnl0aGluZ1xyXG4gICAgICAgIC8vIFRPRE8gaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BoZXQtY29yZS9pc3N1ZXMvODAgaXMgdGhpcyBtYXNraW5nIGEgcHJvYmxlbT9cclxuICAgICAgfVxyXG4gICAgfVxyXG4gIH1cclxuXHJcbiAgLyoqXHJcbiAgICogUmVnaXN0ZXIgYSB0b29sYm94IHBhdHRlcm4gbm9kZS4gVGhlcmUgaXMgbm8gc3RyaWN0IGNsYXNzIGZvciB0aGlzLCBzbyB0aGlzIGZhY3RvcmVkIG91dCBtZXRob2QgY2FuIGJlIHVzZWQgYnkgYW55IGNvbnN0cnVjdG9yXHJcbiAgICovXHJcbiAgcHVibGljIHN0YXRpYyByZWdpc3RlclRvb2xib3goIGluc3RhbmNlOiBOb2RlTGlrZSApOiB2b2lkIHtcclxuICAgIGlmICggcGhldC5jaGlwcGVyLnF1ZXJ5UGFyYW1ldGVycy5iaW5kZXIgKSB7XHJcbiAgICAgIEluc3RhbmNlUmVnaXN0cnkucmVnaXN0ZXJEYXRhVVJMKCAnc3VuJywgJ1Rvb2xib3hQYXR0ZXJuJywgaW5zdGFuY2UgKTtcclxuICAgIH1cclxuICB9XHJcbn1cclxuXHJcbnBoZXRDb3JlLnJlZ2lzdGVyKCAnSW5zdGFuY2VSZWdpc3RyeScsIEluc3RhbmNlUmVnaXN0cnkgKTtcclxuXHJcbmV4cG9ydCBkZWZhdWx0IEluc3RhbmNlUmVnaXN0cnk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsUUFBUSxNQUFNLGdCQUFnQjtBQVdyQyxTQUFTQyxzQkFBc0JBLENBQUVDLFFBQWtCLEVBQUVDLEdBQVcsRUFBRUMsR0FBaUIsRUFBUztFQUMxRkYsUUFBUSxDQUFDRyxTQUFTLENBQUVDLE9BQU8sSUFBSTtJQUM3QkYsR0FBRyxDQUFFRCxHQUFHLENBQUUsQ0FBQ0ksSUFBSSxDQUFFRCxPQUFRLENBQUM7RUFDNUIsQ0FBRSxDQUFDO0FBQ0w7QUFFQSxNQUFNRSxnQkFBZ0IsQ0FBQztFQUVyQjtFQUNBLE9BQWNDLFlBQVksR0FBaUIsQ0FBQyxDQUFDOztFQUU3QztBQUNGO0FBQ0E7RUFDRSxPQUFjQyxlQUFlQSxDQUFFQyxRQUFnQixFQUFFQyxRQUFnQixFQUFFVixRQUFrQixFQUFTO0lBQzVGLElBQUtXLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNDLE1BQU0sRUFBRztNQUV6QztNQUNBLE1BQU1iLEdBQUcsR0FBSSxHQUFFUSxRQUFTLElBQUdDLFFBQVMsRUFBQztNQUNyQ0osZ0JBQWdCLENBQUNDLFlBQVksQ0FBRU4sR0FBRyxDQUFFLEdBQUdLLGdCQUFnQixDQUFDQyxZQUFZLENBQUVOLEdBQUcsQ0FBRSxJQUFJLEVBQUU7TUFFakYsSUFBSTtRQUNGLElBQUtELFFBQVEsQ0FBQ2UsY0FBYyxDQUFDQyxLQUFLLENBQUNDLFFBQVEsQ0FBQyxDQUFDLEVBQUc7VUFDOUNsQixzQkFBc0IsQ0FBRUMsUUFBUSxFQUFFQyxHQUFHLEVBQUVLLGdCQUFnQixDQUFDQyxZQUFhLENBQUM7UUFDeEUsQ0FBQyxNQUNJO1VBQ0gsTUFBTVcsY0FBYyxHQUFLQyxNQUFlLElBQU07WUFDNUMsSUFBS0EsTUFBTSxDQUFDRixRQUFRLENBQUMsQ0FBQyxFQUFHO2NBQ3ZCbEIsc0JBQXNCLENBQUVDLFFBQVEsRUFBRUMsR0FBRyxFQUFFSyxnQkFBZ0IsQ0FBQ0MsWUFBYSxDQUFDO2NBQ3RFUCxRQUFRLENBQUNlLGNBQWMsQ0FBQ0ssTUFBTSxDQUFFRixjQUFlLENBQUMsQ0FBQyxDQUFDO1lBQ3BEO1VBQ0YsQ0FBQztVQUNEbEIsUUFBUSxDQUFDZSxjQUFjLENBQUNNLFFBQVEsQ0FBRUgsY0FBZSxDQUFDO1FBQ3BEO01BQ0YsQ0FBQyxDQUNELE9BQU9JLENBQUMsRUFBRzs7UUFFVDtRQUNBO01BQUE7SUFFSjtFQUNGOztFQUVBO0FBQ0Y7QUFDQTtFQUNFLE9BQWNDLGVBQWVBLENBQUV2QixRQUFrQixFQUFTO0lBQ3hELElBQUtXLElBQUksQ0FBQ0MsT0FBTyxDQUFDQyxlQUFlLENBQUNDLE1BQU0sRUFBRztNQUN6Q1IsZ0JBQWdCLENBQUNFLGVBQWUsQ0FBRSxLQUFLLEVBQUUsZ0JBQWdCLEVBQUVSLFFBQVMsQ0FBQztJQUN2RTtFQUNGO0FBQ0Y7QUFFQUYsUUFBUSxDQUFDMEIsUUFBUSxDQUFFLGtCQUFrQixFQUFFbEIsZ0JBQWlCLENBQUM7QUFFekQsZUFBZUEsZ0JBQWdCIiwiaWdub3JlTGlzdCI6W119