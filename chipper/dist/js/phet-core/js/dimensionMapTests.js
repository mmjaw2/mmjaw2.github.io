// Copyright 2018-2023, University of Colorado Boulder

/**
 * Tests for dimensionMap
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

import dimensionMap from './dimensionMap.js';
QUnit.module('dimensionMap');
QUnit.test('1 dimensional', assert => {
  function checkMap(values, map, message) {
    assert.ok(_.isEqual(dimensionMap(1, values, map), values.map(map)), message);
  }
  checkMap([1, 2, 4], x => x, 'Identity');
  checkMap([1, 2, 4], x => 2 * x, 'Simple map');
  checkMap([1, 2, 4], (x, index) => 2 * x + index, 'Indexed map');
});
QUnit.test('multidimensional', assert => {
  const dim2 = [[1, 4, 10], [5, 3, -1]];
  const dim3 = [[[1, 9, 25], [23]], [[5, 5, 5, 5], [2, 9], [1], [3, -10]]];
  assert.ok(_.isEqual(dimensionMap(2, dim2, x => x), dim2), '2-dimensional identity');
  assert.ok(_.isEqual(dimensionMap(3, dim3, x => x), dim3), '3-dimensional identity');
  assert.ok(_.isEqual(dimensionMap(2, dim2, (x, idx1, idx2) => dim2[idx1][idx2]), dim2), '2-dimensional indexing-based');
  assert.ok(_.isEqual(dimensionMap(3, dim3, (x, idx1, idx2, idx3) => dim3[idx1][idx2][idx3]), dim3), '3-dimensional indexing-based');
  assert.ok(_.isEqual(dimensionMap(2, dim2, x => 2 * x), [[2, 8, 20], [10, 6, -2]]), '2-dimensional times 2');
  assert.ok(_.isEqual(dimensionMap(3, dim3, x => 2 * x), [[[2, 18, 50], [46]], [[10, 10, 10, 10], [4, 18], [2], [6, -20]]]), '3-dimensional times 2');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkaW1lbnNpb25NYXAiLCJRVW5pdCIsIm1vZHVsZSIsInRlc3QiLCJhc3NlcnQiLCJjaGVja01hcCIsInZhbHVlcyIsIm1hcCIsIm1lc3NhZ2UiLCJvayIsIl8iLCJpc0VxdWFsIiwieCIsImluZGV4IiwiZGltMiIsImRpbTMiLCJpZHgxIiwiaWR4MiIsImlkeDMiXSwic291cmNlcyI6WyJkaW1lbnNpb25NYXBUZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxOC0yMDIzLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBmb3IgZGltZW5zaW9uTWFwXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5pbXBvcnQgZGltZW5zaW9uTWFwIGZyb20gJy4vZGltZW5zaW9uTWFwLmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ2RpbWVuc2lvbk1hcCcgKTtcclxuXHJcblFVbml0LnRlc3QoICcxIGRpbWVuc2lvbmFsJywgYXNzZXJ0ID0+IHtcclxuICBmdW5jdGlvbiBjaGVja01hcCggdmFsdWVzOiBudW1iZXJbXSwgbWFwOiAoIGlucHV0OiBudW1iZXIsIGluZGV4OiBudW1iZXIgKSA9PiBudW1iZXIsIG1lc3NhZ2U6IHN0cmluZyApOiB2b2lkIHtcclxuICAgIGFzc2VydC5vayggXy5pc0VxdWFsKCBkaW1lbnNpb25NYXAoIDEsIHZhbHVlcywgbWFwICksIHZhbHVlcy5tYXAoIG1hcCApICksIG1lc3NhZ2UgKTtcclxuICB9XHJcblxyXG4gIGNoZWNrTWFwKCBbIDEsIDIsIDQgXSwgeCA9PiB4LCAnSWRlbnRpdHknICk7XHJcbiAgY2hlY2tNYXAoIFsgMSwgMiwgNCBdLCB4ID0+IDIgKiB4LCAnU2ltcGxlIG1hcCcgKTtcclxuICBjaGVja01hcCggWyAxLCAyLCA0IF0sICggeCwgaW5kZXggKSA9PiAyICogeCArIGluZGV4LCAnSW5kZXhlZCBtYXAnICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICdtdWx0aWRpbWVuc2lvbmFsJywgYXNzZXJ0ID0+IHtcclxuICBjb25zdCBkaW0yID0gW1xyXG4gICAgWyAxLCA0LCAxMCBdLFxyXG4gICAgWyA1LCAzLCAtMSBdXHJcbiAgXTtcclxuXHJcbiAgY29uc3QgZGltMyA9IFtcclxuICAgIFtcclxuICAgICAgWyAxLCA5LCAyNSBdLFxyXG4gICAgICBbIDIzIF1cclxuICAgIF0sXHJcbiAgICBbXHJcbiAgICAgIFsgNSwgNSwgNSwgNSBdLFxyXG4gICAgICBbIDIsIDkgXSxcclxuICAgICAgWyAxIF0sXHJcbiAgICAgIFsgMywgLTEwIF1cclxuICAgIF1cclxuICBdO1xyXG5cclxuICBhc3NlcnQub2soIF8uaXNFcXVhbCggZGltZW5zaW9uTWFwPG51bWJlciwgbnVtYmVyPiggMiwgZGltMiwgeCA9PiB4ICksIGRpbTIgKSwgJzItZGltZW5zaW9uYWwgaWRlbnRpdHknICk7XHJcbiAgYXNzZXJ0Lm9rKCBfLmlzRXF1YWwoIGRpbWVuc2lvbk1hcDxudW1iZXIsIG51bWJlcj4oIDMsIGRpbTMsIHggPT4geCApLCBkaW0zICksICczLWRpbWVuc2lvbmFsIGlkZW50aXR5JyApO1xyXG4gIGFzc2VydC5vayggXy5pc0VxdWFsKCBkaW1lbnNpb25NYXA8bnVtYmVyLCBudW1iZXI+KCAyLCBkaW0yLCAoIHgsIGlkeDEsIGlkeDIgKSA9PiBkaW0yWyBpZHgxIF1bIGlkeDIgXSApLCBkaW0yICksICcyLWRpbWVuc2lvbmFsIGluZGV4aW5nLWJhc2VkJyApO1xyXG4gIGFzc2VydC5vayggXy5pc0VxdWFsKCBkaW1lbnNpb25NYXA8bnVtYmVyLCBudW1iZXI+KCAzLCBkaW0zLCAoIHgsIGlkeDEsIGlkeDIsIGlkeDMgKSA9PiBkaW0zWyBpZHgxIF1bIGlkeDIgXVsgaWR4MyBdICksIGRpbTMgKSwgJzMtZGltZW5zaW9uYWwgaW5kZXhpbmctYmFzZWQnICk7XHJcbiAgYXNzZXJ0Lm9rKCBfLmlzRXF1YWwoIGRpbWVuc2lvbk1hcDxudW1iZXIsIG51bWJlcj4oIDIsIGRpbTIsIHggPT4gMiAqIHggKSwgW1xyXG4gICAgWyAyLCA4LCAyMCBdLFxyXG4gICAgWyAxMCwgNiwgLTIgXVxyXG4gIF0gKSwgJzItZGltZW5zaW9uYWwgdGltZXMgMicgKTtcclxuICBhc3NlcnQub2soIF8uaXNFcXVhbCggZGltZW5zaW9uTWFwKCAzLCBkaW0zLCB4ID0+IDIgKiB4ICksIFtcclxuICAgIFtcclxuICAgICAgWyAyLCAxOCwgNTAgXSxcclxuICAgICAgWyA0NiBdXHJcbiAgICBdLFxyXG4gICAgW1xyXG4gICAgICBbIDEwLCAxMCwgMTAsIDEwIF0sXHJcbiAgICAgIFsgNCwgMTggXSxcclxuICAgICAgWyAyIF0sXHJcbiAgICAgIFsgNiwgLTIwIF1cclxuICAgIF1cclxuICBdICksICczLWRpbWVuc2lvbmFsIHRpbWVzIDInICk7XHJcbn0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsWUFBWSxNQUFNLG1CQUFtQjtBQUU1Q0MsS0FBSyxDQUFDQyxNQUFNLENBQUUsY0FBZSxDQUFDO0FBRTlCRCxLQUFLLENBQUNFLElBQUksQ0FBRSxlQUFlLEVBQUVDLE1BQU0sSUFBSTtFQUNyQyxTQUFTQyxRQUFRQSxDQUFFQyxNQUFnQixFQUFFQyxHQUErQyxFQUFFQyxPQUFlLEVBQVM7SUFDNUdKLE1BQU0sQ0FBQ0ssRUFBRSxDQUFFQyxDQUFDLENBQUNDLE9BQU8sQ0FBRVgsWUFBWSxDQUFFLENBQUMsRUFBRU0sTUFBTSxFQUFFQyxHQUFJLENBQUMsRUFBRUQsTUFBTSxDQUFDQyxHQUFHLENBQUVBLEdBQUksQ0FBRSxDQUFDLEVBQUVDLE9BQVEsQ0FBQztFQUN0RjtFQUVBSCxRQUFRLENBQUUsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBRSxFQUFFTyxDQUFDLElBQUlBLENBQUMsRUFBRSxVQUFXLENBQUM7RUFDM0NQLFFBQVEsQ0FBRSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLEVBQUVPLENBQUMsSUFBSSxDQUFDLEdBQUdBLENBQUMsRUFBRSxZQUFhLENBQUM7RUFDakRQLFFBQVEsQ0FBRSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxDQUFFLEVBQUUsQ0FBRU8sQ0FBQyxFQUFFQyxLQUFLLEtBQU0sQ0FBQyxHQUFHRCxDQUFDLEdBQUdDLEtBQUssRUFBRSxhQUFjLENBQUM7QUFDdkUsQ0FBRSxDQUFDO0FBRUhaLEtBQUssQ0FBQ0UsSUFBSSxDQUFFLGtCQUFrQixFQUFFQyxNQUFNLElBQUk7RUFDeEMsTUFBTVUsSUFBSSxHQUFHLENBQ1gsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsQ0FBRSxFQUNaLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUMsQ0FBRSxDQUNiO0VBRUQsTUFBTUMsSUFBSSxHQUFHLENBQ1gsQ0FDRSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFFLEVBQ1osQ0FBRSxFQUFFLENBQUUsQ0FDUCxFQUNELENBQ0UsQ0FBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsRUFDZCxDQUFFLENBQUMsRUFBRSxDQUFDLENBQUUsRUFDUixDQUFFLENBQUMsQ0FBRSxFQUNMLENBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFFLENBQ1gsQ0FDRjtFQUVEWCxNQUFNLENBQUNLLEVBQUUsQ0FBRUMsQ0FBQyxDQUFDQyxPQUFPLENBQUVYLFlBQVksQ0FBa0IsQ0FBQyxFQUFFYyxJQUFJLEVBQUVGLENBQUMsSUFBSUEsQ0FBRSxDQUFDLEVBQUVFLElBQUssQ0FBQyxFQUFFLHdCQUF5QixDQUFDO0VBQ3pHVixNQUFNLENBQUNLLEVBQUUsQ0FBRUMsQ0FBQyxDQUFDQyxPQUFPLENBQUVYLFlBQVksQ0FBa0IsQ0FBQyxFQUFFZSxJQUFJLEVBQUVILENBQUMsSUFBSUEsQ0FBRSxDQUFDLEVBQUVHLElBQUssQ0FBQyxFQUFFLHdCQUF5QixDQUFDO0VBQ3pHWCxNQUFNLENBQUNLLEVBQUUsQ0FBRUMsQ0FBQyxDQUFDQyxPQUFPLENBQUVYLFlBQVksQ0FBa0IsQ0FBQyxFQUFFYyxJQUFJLEVBQUUsQ0FBRUYsQ0FBQyxFQUFFSSxJQUFJLEVBQUVDLElBQUksS0FBTUgsSUFBSSxDQUFFRSxJQUFJLENBQUUsQ0FBRUMsSUFBSSxDQUFHLENBQUMsRUFBRUgsSUFBSyxDQUFDLEVBQUUsOEJBQStCLENBQUM7RUFDbEpWLE1BQU0sQ0FBQ0ssRUFBRSxDQUFFQyxDQUFDLENBQUNDLE9BQU8sQ0FBRVgsWUFBWSxDQUFrQixDQUFDLEVBQUVlLElBQUksRUFBRSxDQUFFSCxDQUFDLEVBQUVJLElBQUksRUFBRUMsSUFBSSxFQUFFQyxJQUFJLEtBQU1ILElBQUksQ0FBRUMsSUFBSSxDQUFFLENBQUVDLElBQUksQ0FBRSxDQUFFQyxJQUFJLENBQUcsQ0FBQyxFQUFFSCxJQUFLLENBQUMsRUFBRSw4QkFBK0IsQ0FBQztFQUNoS1gsTUFBTSxDQUFDSyxFQUFFLENBQUVDLENBQUMsQ0FBQ0MsT0FBTyxDQUFFWCxZQUFZLENBQWtCLENBQUMsRUFBRWMsSUFBSSxFQUFFRixDQUFDLElBQUksQ0FBQyxHQUFHQSxDQUFFLENBQUMsRUFBRSxDQUN6RSxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxDQUFFLEVBQ1osQ0FBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFFLENBQ2IsQ0FBQyxFQUFFLHVCQUF3QixDQUFDO0VBQzlCUixNQUFNLENBQUNLLEVBQUUsQ0FBRUMsQ0FBQyxDQUFDQyxPQUFPLENBQUVYLFlBQVksQ0FBRSxDQUFDLEVBQUVlLElBQUksRUFBRUgsQ0FBQyxJQUFJLENBQUMsR0FBR0EsQ0FBRSxDQUFDLEVBQUUsQ0FDekQsQ0FDRSxDQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsRUFBRSxDQUFFLEVBQ2IsQ0FBRSxFQUFFLENBQUUsQ0FDUCxFQUNELENBQ0UsQ0FBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxFQUFFLENBQUUsRUFDbEIsQ0FBRSxDQUFDLEVBQUUsRUFBRSxDQUFFLEVBQ1QsQ0FBRSxDQUFDLENBQUUsRUFDTCxDQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBRSxDQUNYLENBQ0QsQ0FBQyxFQUFFLHVCQUF3QixDQUFDO0FBQ2hDLENBQUUsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==