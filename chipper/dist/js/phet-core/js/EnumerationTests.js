// Copyright 2022-2024, University of Colorado Boulder

/**
 * Tests for Enumeration, EnumerationValue
 *
 * @author Michael Kauzmann (PhET Interactive Simulations)
 */

import Enumeration from './Enumeration.js';
import EnumerationValue from './EnumerationValue.js';
QUnit.module('Enumeration');
QUnit.test('Enumeration', assert => {
  class MyEnumeration extends EnumerationValue {
    static ITEM_1 = new MyEnumeration();
    static ITEM_2 = new MyEnumeration();
    static ITEM_3 = new MyEnumeration();
    static enumeration = new Enumeration(MyEnumeration);
  }
  assert.ok(MyEnumeration.enumeration.keys.length === 3, 'keys all there');
  assert.ok(MyEnumeration.enumeration.values.length === 3, 'values all there');
  assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_1.enumeration, 'enumeration instances are the same');
  assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_2.enumeration, 'enumeration instances are the same 2');
  assert.ok(MyEnumeration.enumeration === MyEnumeration.ITEM_3.enumeration, 'enumeration instances are the same 3');
  window.assert && assert.throws(() => {
    return new MyEnumeration();
  }, 'cannot create new instances after class is defined and sealed');
});
QUnit.test('Enumeration Subtyping', assert => {
  class MyEnumeration extends EnumerationValue {
    static ITEM_1 = new MyEnumeration();
    static ITEM_2 = new MyEnumeration();
    static ITEM_3 = new MyEnumeration();
    static enumeration = new Enumeration(MyEnumeration);
  }
  class MySubEnumeration extends MyEnumeration {
    static ITEM_4 = new MySubEnumeration();
    static enumeration = new Enumeration(MySubEnumeration, {
      instanceType: MyEnumeration
    });
  }
  assert.ok(MySubEnumeration.enumeration.keys.length === 4, 'keys all there');
  assert.ok(MySubEnumeration.enumeration.values.length === 4, 'values all there');
  assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_1.enumeration, 'enumeration instances from parent');
  assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_2.enumeration, 'enumeration instances from parent 2');
  assert.ok(MyEnumeration.enumeration === MySubEnumeration.ITEM_3.enumeration, 'enumeration instances from parent 3');
  assert.ok(MySubEnumeration.enumeration !== MySubEnumeration.ITEM_1.enumeration, 'enumeration instances not from child');
  assert.ok(MySubEnumeration.enumeration !== MySubEnumeration.ITEM_2.enumeration, 'enumeration instances not from child 2');

  // @ts-expect-error INTENTIONAL - we know this doesn't exist, but still want the runtime check
  assert.ok(!MyEnumeration.ITEM_4, 'super should not have sub item');
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJFbnVtZXJhdGlvbiIsIkVudW1lcmF0aW9uVmFsdWUiLCJRVW5pdCIsIm1vZHVsZSIsInRlc3QiLCJhc3NlcnQiLCJNeUVudW1lcmF0aW9uIiwiSVRFTV8xIiwiSVRFTV8yIiwiSVRFTV8zIiwiZW51bWVyYXRpb24iLCJvayIsImtleXMiLCJsZW5ndGgiLCJ2YWx1ZXMiLCJ3aW5kb3ciLCJ0aHJvd3MiLCJNeVN1YkVudW1lcmF0aW9uIiwiSVRFTV80IiwiaW5zdGFuY2VUeXBlIl0sInNvdXJjZXMiOlsiRW51bWVyYXRpb25UZXN0cy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMi0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBUZXN0cyBmb3IgRW51bWVyYXRpb24sIEVudW1lcmF0aW9uVmFsdWVcclxuICpcclxuICogQGF1dGhvciBNaWNoYWVsIEthdXptYW5uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmltcG9ydCBFbnVtZXJhdGlvbiBmcm9tICcuL0VudW1lcmF0aW9uLmpzJztcclxuaW1wb3J0IEVudW1lcmF0aW9uVmFsdWUgZnJvbSAnLi9FbnVtZXJhdGlvblZhbHVlLmpzJztcclxuXHJcblFVbml0Lm1vZHVsZSggJ0VudW1lcmF0aW9uJyApO1xyXG5cclxuUVVuaXQudGVzdCggJ0VudW1lcmF0aW9uJywgYXNzZXJ0ID0+IHtcclxuXHJcbiAgY2xhc3MgTXlFbnVtZXJhdGlvbiBleHRlbmRzIEVudW1lcmF0aW9uVmFsdWUge1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBJVEVNXzEgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBJVEVNXzIgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBJVEVNXzMgPSBuZXcgTXlFbnVtZXJhdGlvbigpO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgcmVhZG9ubHkgZW51bWVyYXRpb24gPSBuZXcgRW51bWVyYXRpb24oIE15RW51bWVyYXRpb24gKTtcclxuICB9XHJcblxyXG4gIGFzc2VydC5vayggTXlFbnVtZXJhdGlvbi5lbnVtZXJhdGlvbi5rZXlzLmxlbmd0aCA9PT0gMywgJ2tleXMgYWxsIHRoZXJlJyApO1xyXG4gIGFzc2VydC5vayggTXlFbnVtZXJhdGlvbi5lbnVtZXJhdGlvbi52YWx1ZXMubGVuZ3RoID09PSAzLCAndmFsdWVzIGFsbCB0aGVyZScgKTtcclxuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24gPT09IE15RW51bWVyYXRpb24uSVRFTV8xLmVudW1lcmF0aW9uLCAnZW51bWVyYXRpb24gaW5zdGFuY2VzIGFyZSB0aGUgc2FtZScgKTtcclxuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24gPT09IE15RW51bWVyYXRpb24uSVRFTV8yLmVudW1lcmF0aW9uLCAnZW51bWVyYXRpb24gaW5zdGFuY2VzIGFyZSB0aGUgc2FtZSAyJyApO1xyXG4gIGFzc2VydC5vayggTXlFbnVtZXJhdGlvbi5lbnVtZXJhdGlvbiA9PT0gTXlFbnVtZXJhdGlvbi5JVEVNXzMuZW51bWVyYXRpb24sICdlbnVtZXJhdGlvbiBpbnN0YW5jZXMgYXJlIHRoZSBzYW1lIDMnICk7XHJcblxyXG4gIHdpbmRvdy5hc3NlcnQgJiYgYXNzZXJ0LnRocm93cyggKCkgPT4ge1xyXG4gICAgcmV0dXJuIG5ldyBNeUVudW1lcmF0aW9uKCk7XHJcbiAgfSwgJ2Nhbm5vdCBjcmVhdGUgbmV3IGluc3RhbmNlcyBhZnRlciBjbGFzcyBpcyBkZWZpbmVkIGFuZCBzZWFsZWQnICk7XHJcbn0gKTtcclxuXHJcblFVbml0LnRlc3QoICdFbnVtZXJhdGlvbiBTdWJ0eXBpbmcnLCBhc3NlcnQgPT4ge1xyXG5cclxuICBjbGFzcyBNeUVudW1lcmF0aW9uIGV4dGVuZHMgRW51bWVyYXRpb25WYWx1ZSB7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IElURU1fMSA9IG5ldyBNeUVudW1lcmF0aW9uKCk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IElURU1fMiA9IG5ldyBNeUVudW1lcmF0aW9uKCk7XHJcbiAgICBwdWJsaWMgc3RhdGljIHJlYWRvbmx5IElURU1fMyA9IG5ldyBNeUVudW1lcmF0aW9uKCk7XHJcblxyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBlbnVtZXJhdGlvbiA9IG5ldyBFbnVtZXJhdGlvbiggTXlFbnVtZXJhdGlvbiApO1xyXG4gIH1cclxuXHJcbiAgY2xhc3MgTXlTdWJFbnVtZXJhdGlvbiBleHRlbmRzIE15RW51bWVyYXRpb24ge1xyXG4gICAgcHVibGljIHN0YXRpYyByZWFkb25seSBJVEVNXzQgPSBuZXcgTXlTdWJFbnVtZXJhdGlvbigpO1xyXG5cclxuICAgIHB1YmxpYyBzdGF0aWMgb3ZlcnJpZGUgcmVhZG9ubHkgZW51bWVyYXRpb24gPSBuZXcgRW51bWVyYXRpb24oIE15U3ViRW51bWVyYXRpb24sIHtcclxuICAgICAgaW5zdGFuY2VUeXBlOiBNeUVudW1lcmF0aW9uXHJcbiAgICB9ICk7XHJcbiAgfVxyXG5cclxuICBhc3NlcnQub2soIE15U3ViRW51bWVyYXRpb24uZW51bWVyYXRpb24ua2V5cy5sZW5ndGggPT09IDQsICdrZXlzIGFsbCB0aGVyZScgKTtcclxuICBhc3NlcnQub2soIE15U3ViRW51bWVyYXRpb24uZW51bWVyYXRpb24udmFsdWVzLmxlbmd0aCA9PT0gNCwgJ3ZhbHVlcyBhbGwgdGhlcmUnICk7XHJcbiAgYXNzZXJ0Lm9rKCBNeUVudW1lcmF0aW9uLmVudW1lcmF0aW9uID09PSBNeVN1YkVudW1lcmF0aW9uLklURU1fMS5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBmcm9tIHBhcmVudCcgKTtcclxuICBhc3NlcnQub2soIE15RW51bWVyYXRpb24uZW51bWVyYXRpb24gPT09IE15U3ViRW51bWVyYXRpb24uSVRFTV8yLmVudW1lcmF0aW9uLCAnZW51bWVyYXRpb24gaW5zdGFuY2VzIGZyb20gcGFyZW50IDInICk7XHJcbiAgYXNzZXJ0Lm9rKCBNeUVudW1lcmF0aW9uLmVudW1lcmF0aW9uID09PSBNeVN1YkVudW1lcmF0aW9uLklURU1fMy5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBmcm9tIHBhcmVudCAzJyApO1xyXG4gIGFzc2VydC5vayggTXlTdWJFbnVtZXJhdGlvbi5lbnVtZXJhdGlvbiAhPT0gTXlTdWJFbnVtZXJhdGlvbi5JVEVNXzEuZW51bWVyYXRpb24sICdlbnVtZXJhdGlvbiBpbnN0YW5jZXMgbm90IGZyb20gY2hpbGQnICk7XHJcbiAgYXNzZXJ0Lm9rKCBNeVN1YkVudW1lcmF0aW9uLmVudW1lcmF0aW9uICE9PSBNeVN1YkVudW1lcmF0aW9uLklURU1fMi5lbnVtZXJhdGlvbiwgJ2VudW1lcmF0aW9uIGluc3RhbmNlcyBub3QgZnJvbSBjaGlsZCAyJyApO1xyXG5cclxuICAvLyBAdHMtZXhwZWN0LWVycm9yIElOVEVOVElPTkFMIC0gd2Uga25vdyB0aGlzIGRvZXNuJ3QgZXhpc3QsIGJ1dCBzdGlsbCB3YW50IHRoZSBydW50aW1lIGNoZWNrXHJcbiAgYXNzZXJ0Lm9rKCAhTXlFbnVtZXJhdGlvbi5JVEVNXzQsICdzdXBlciBzaG91bGQgbm90IGhhdmUgc3ViIGl0ZW0nICk7XHJcbn0gKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBT0EsV0FBVyxNQUFNLGtCQUFrQjtBQUMxQyxPQUFPQyxnQkFBZ0IsTUFBTSx1QkFBdUI7QUFFcERDLEtBQUssQ0FBQ0MsTUFBTSxDQUFFLGFBQWMsQ0FBQztBQUU3QkQsS0FBSyxDQUFDRSxJQUFJLENBQUUsYUFBYSxFQUFFQyxNQUFNLElBQUk7RUFFbkMsTUFBTUMsYUFBYSxTQUFTTCxnQkFBZ0IsQ0FBQztJQUMzQyxPQUF1Qk0sTUFBTSxHQUFHLElBQUlELGFBQWEsQ0FBQyxDQUFDO0lBQ25ELE9BQXVCRSxNQUFNLEdBQUcsSUFBSUYsYUFBYSxDQUFDLENBQUM7SUFDbkQsT0FBdUJHLE1BQU0sR0FBRyxJQUFJSCxhQUFhLENBQUMsQ0FBQztJQUVuRCxPQUF1QkksV0FBVyxHQUFHLElBQUlWLFdBQVcsQ0FBRU0sYUFBYyxDQUFDO0VBQ3ZFO0VBRUFELE1BQU0sQ0FBQ00sRUFBRSxDQUFFTCxhQUFhLENBQUNJLFdBQVcsQ0FBQ0UsSUFBSSxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFLGdCQUFpQixDQUFDO0VBQzFFUixNQUFNLENBQUNNLEVBQUUsQ0FBRUwsYUFBYSxDQUFDSSxXQUFXLENBQUNJLE1BQU0sQ0FBQ0QsTUFBTSxLQUFLLENBQUMsRUFBRSxrQkFBbUIsQ0FBQztFQUM5RVIsTUFBTSxDQUFDTSxFQUFFLENBQUVMLGFBQWEsQ0FBQ0ksV0FBVyxLQUFLSixhQUFhLENBQUNDLE1BQU0sQ0FBQ0csV0FBVyxFQUFFLG9DQUFxQyxDQUFDO0VBQ2pITCxNQUFNLENBQUNNLEVBQUUsQ0FBRUwsYUFBYSxDQUFDSSxXQUFXLEtBQUtKLGFBQWEsQ0FBQ0UsTUFBTSxDQUFDRSxXQUFXLEVBQUUsc0NBQXVDLENBQUM7RUFDbkhMLE1BQU0sQ0FBQ00sRUFBRSxDQUFFTCxhQUFhLENBQUNJLFdBQVcsS0FBS0osYUFBYSxDQUFDRyxNQUFNLENBQUNDLFdBQVcsRUFBRSxzQ0FBdUMsQ0FBQztFQUVuSEssTUFBTSxDQUFDVixNQUFNLElBQUlBLE1BQU0sQ0FBQ1csTUFBTSxDQUFFLE1BQU07SUFDcEMsT0FBTyxJQUFJVixhQUFhLENBQUMsQ0FBQztFQUM1QixDQUFDLEVBQUUsK0RBQWdFLENBQUM7QUFDdEUsQ0FBRSxDQUFDO0FBRUhKLEtBQUssQ0FBQ0UsSUFBSSxDQUFFLHVCQUF1QixFQUFFQyxNQUFNLElBQUk7RUFFN0MsTUFBTUMsYUFBYSxTQUFTTCxnQkFBZ0IsQ0FBQztJQUMzQyxPQUF1Qk0sTUFBTSxHQUFHLElBQUlELGFBQWEsQ0FBQyxDQUFDO0lBQ25ELE9BQXVCRSxNQUFNLEdBQUcsSUFBSUYsYUFBYSxDQUFDLENBQUM7SUFDbkQsT0FBdUJHLE1BQU0sR0FBRyxJQUFJSCxhQUFhLENBQUMsQ0FBQztJQUVuRCxPQUF1QkksV0FBVyxHQUFHLElBQUlWLFdBQVcsQ0FBRU0sYUFBYyxDQUFDO0VBQ3ZFO0VBRUEsTUFBTVcsZ0JBQWdCLFNBQVNYLGFBQWEsQ0FBQztJQUMzQyxPQUF1QlksTUFBTSxHQUFHLElBQUlELGdCQUFnQixDQUFDLENBQUM7SUFFdEQsT0FBZ0NQLFdBQVcsR0FBRyxJQUFJVixXQUFXLENBQUVpQixnQkFBZ0IsRUFBRTtNQUMvRUUsWUFBWSxFQUFFYjtJQUNoQixDQUFFLENBQUM7RUFDTDtFQUVBRCxNQUFNLENBQUNNLEVBQUUsQ0FBRU0sZ0JBQWdCLENBQUNQLFdBQVcsQ0FBQ0UsSUFBSSxDQUFDQyxNQUFNLEtBQUssQ0FBQyxFQUFFLGdCQUFpQixDQUFDO0VBQzdFUixNQUFNLENBQUNNLEVBQUUsQ0FBRU0sZ0JBQWdCLENBQUNQLFdBQVcsQ0FBQ0ksTUFBTSxDQUFDRCxNQUFNLEtBQUssQ0FBQyxFQUFFLGtCQUFtQixDQUFDO0VBQ2pGUixNQUFNLENBQUNNLEVBQUUsQ0FBRUwsYUFBYSxDQUFDSSxXQUFXLEtBQUtPLGdCQUFnQixDQUFDVixNQUFNLENBQUNHLFdBQVcsRUFBRSxtQ0FBb0MsQ0FBQztFQUNuSEwsTUFBTSxDQUFDTSxFQUFFLENBQUVMLGFBQWEsQ0FBQ0ksV0FBVyxLQUFLTyxnQkFBZ0IsQ0FBQ1QsTUFBTSxDQUFDRSxXQUFXLEVBQUUscUNBQXNDLENBQUM7RUFDckhMLE1BQU0sQ0FBQ00sRUFBRSxDQUFFTCxhQUFhLENBQUNJLFdBQVcsS0FBS08sZ0JBQWdCLENBQUNSLE1BQU0sQ0FBQ0MsV0FBVyxFQUFFLHFDQUFzQyxDQUFDO0VBQ3JITCxNQUFNLENBQUNNLEVBQUUsQ0FBRU0sZ0JBQWdCLENBQUNQLFdBQVcsS0FBS08sZ0JBQWdCLENBQUNWLE1BQU0sQ0FBQ0csV0FBVyxFQUFFLHNDQUF1QyxDQUFDO0VBQ3pITCxNQUFNLENBQUNNLEVBQUUsQ0FBRU0sZ0JBQWdCLENBQUNQLFdBQVcsS0FBS08sZ0JBQWdCLENBQUNULE1BQU0sQ0FBQ0UsV0FBVyxFQUFFLHdDQUF5QyxDQUFDOztFQUUzSDtFQUNBTCxNQUFNLENBQUNNLEVBQUUsQ0FBRSxDQUFDTCxhQUFhLENBQUNZLE1BQU0sRUFBRSxnQ0FBaUMsQ0FBQztBQUN0RSxDQUFFLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=