// Copyright 2020, University of Colorado Boulder

/**
 * Sends a request to the build server.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

// modules
const buildLocal = require('../common/buildLocal');
const winston = require('../../../../../../perennial-alias/node_modules/winston');
const axios = require('axios');

/**
 * Sends a request to the build server.
 * @public
 *
 * @param {Object} [options]
 * @property {string} options.branch
 * @property {string} options.brands - CSV
 * @property {string} options.simulation - sim name
 * @returns {Promise} - No resolved value
 */
const deployImages = async function ({
  branch,
  brands,
  simulation
}) {
  const requestObject = {
    brands: brands || 'phet',
    branch: branch || 'main',
    authorizationCode: buildLocal.buildServerAuthorizationCode
  };
  if (buildLocal.buildServerNotifyEmail) {
    requestObject.email = buildLocal.buildServerNotifyEmail;
  }
  if (simulation) {
    requestObject.simulation = simulation;
    try {
      const metadataResponse = await axios.get(`https://phet.colorado.edu/services/metadata/1.2/simulations?format=json&summary&locale=en&type=html&simulation=${simulation}`);
      if (metadataResponse.data && metadataResponse.data?.projects?.[0]?.version?.string) {
        requestObject.version = metadataResponse.data.projects[0].version.string;
      } else {
        console.error('Unable to find version for simulation', metadataResponse.data);
        return;
      }
    } catch (e) {
      console.error('Unable to deploy images for sim due to error in metadata retrival', e);
      return;
    }
  }
  winston.info(`sending image deploy request for ${requestObject.branch}, ${requestObject.brands}`);
  const url = `${buildLocal.productionServerURL}/deploy-images`;
  winston.info(url);
  winston.info(JSON.stringify(requestObject));
  let response;
  try {
    response = await axios({
      method: 'post',
      url: url,
      data: requestObject
    });
  } catch (error) {
    throw new Error(`Image deploy request failed with error ${error}.`);
  }
  if (response.status !== 200 && response.status !== 202) {
    throw new Error(`Image deploy request failed with status code ${response.status}.`);
  } else {
    winston.info('Image deploy request sent successfully.  If additional alternative images were deployed, go to the main admin page and trigger a recount.');
  }
};
module.exports = deployImages;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJidWlsZExvY2FsIiwicmVxdWlyZSIsIndpbnN0b24iLCJheGlvcyIsImRlcGxveUltYWdlcyIsImJyYW5jaCIsImJyYW5kcyIsInNpbXVsYXRpb24iLCJyZXF1ZXN0T2JqZWN0IiwiYXV0aG9yaXphdGlvbkNvZGUiLCJidWlsZFNlcnZlckF1dGhvcml6YXRpb25Db2RlIiwiYnVpbGRTZXJ2ZXJOb3RpZnlFbWFpbCIsImVtYWlsIiwibWV0YWRhdGFSZXNwb25zZSIsImdldCIsImRhdGEiLCJwcm9qZWN0cyIsInZlcnNpb24iLCJzdHJpbmciLCJjb25zb2xlIiwiZXJyb3IiLCJlIiwiaW5mbyIsInVybCIsInByb2R1Y3Rpb25TZXJ2ZXJVUkwiLCJKU09OIiwic3RyaW5naWZ5IiwicmVzcG9uc2UiLCJtZXRob2QiLCJFcnJvciIsInN0YXR1cyIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJkZXBsb3lJbWFnZXMuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMjAsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFNlbmRzIGEgcmVxdWVzdCB0byB0aGUgYnVpbGQgc2VydmVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuLy8gbW9kdWxlc1xyXG5jb25zdCBidWlsZExvY2FsID0gcmVxdWlyZSggJy4uL2NvbW1vbi9idWlsZExvY2FsJyApO1xyXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSggJ3dpbnN0b24nICk7XHJcbmNvbnN0IGF4aW9zID0gcmVxdWlyZSggJ2F4aW9zJyApO1xyXG5cclxuLyoqXHJcbiAqIFNlbmRzIGEgcmVxdWVzdCB0byB0aGUgYnVpbGQgc2VydmVyLlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSB7T2JqZWN0fSBbb3B0aW9uc11cclxuICogQHByb3BlcnR5IHtzdHJpbmd9IG9wdGlvbnMuYnJhbmNoXHJcbiAqIEBwcm9wZXJ0eSB7c3RyaW5nfSBvcHRpb25zLmJyYW5kcyAtIENTVlxyXG4gKiBAcHJvcGVydHkge3N0cmluZ30gb3B0aW9ucy5zaW11bGF0aW9uIC0gc2ltIG5hbWVcclxuICogQHJldHVybnMge1Byb21pc2V9IC0gTm8gcmVzb2x2ZWQgdmFsdWVcclxuICovXHJcbmNvbnN0IGRlcGxveUltYWdlcyA9IGFzeW5jIGZ1bmN0aW9uKCB7IGJyYW5jaCwgYnJhbmRzLCBzaW11bGF0aW9uIH0gKSB7XHJcbiAgY29uc3QgcmVxdWVzdE9iamVjdCA9IHtcclxuICAgIGJyYW5kczogYnJhbmRzIHx8ICdwaGV0JyxcclxuICAgIGJyYW5jaDogYnJhbmNoIHx8ICdtYWluJyxcclxuICAgIGF1dGhvcml6YXRpb25Db2RlOiBidWlsZExvY2FsLmJ1aWxkU2VydmVyQXV0aG9yaXphdGlvbkNvZGVcclxuICB9O1xyXG4gIGlmICggYnVpbGRMb2NhbC5idWlsZFNlcnZlck5vdGlmeUVtYWlsICkge1xyXG4gICAgcmVxdWVzdE9iamVjdC5lbWFpbCA9IGJ1aWxkTG9jYWwuYnVpbGRTZXJ2ZXJOb3RpZnlFbWFpbDtcclxuICB9XHJcbiAgaWYgKCBzaW11bGF0aW9uICkge1xyXG4gICAgcmVxdWVzdE9iamVjdC5zaW11bGF0aW9uID0gc2ltdWxhdGlvbjtcclxuICAgIHRyeSB7XHJcbiAgICAgIGNvbnN0IG1ldGFkYXRhUmVzcG9uc2UgPSBhd2FpdCBheGlvcy5nZXQoIGBodHRwczovL3BoZXQuY29sb3JhZG8uZWR1L3NlcnZpY2VzL21ldGFkYXRhLzEuMi9zaW11bGF0aW9ucz9mb3JtYXQ9anNvbiZzdW1tYXJ5JmxvY2FsZT1lbiZ0eXBlPWh0bWwmc2ltdWxhdGlvbj0ke3NpbXVsYXRpb259YCApO1xyXG4gICAgICBpZiAoIG1ldGFkYXRhUmVzcG9uc2UuZGF0YSAmJiBtZXRhZGF0YVJlc3BvbnNlLmRhdGE/LnByb2plY3RzPy5bIDAgXT8udmVyc2lvbj8uc3RyaW5nICkge1xyXG4gICAgICAgIHJlcXVlc3RPYmplY3QudmVyc2lvbiA9IG1ldGFkYXRhUmVzcG9uc2UuZGF0YS5wcm9qZWN0c1sgMCBdLnZlcnNpb24uc3RyaW5nO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2Uge1xyXG4gICAgICAgIGNvbnNvbGUuZXJyb3IoICdVbmFibGUgdG8gZmluZCB2ZXJzaW9uIGZvciBzaW11bGF0aW9uJywgbWV0YWRhdGFSZXNwb25zZS5kYXRhICk7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjYXRjaCggZSApIHtcclxuICAgICAgY29uc29sZS5lcnJvciggJ1VuYWJsZSB0byBkZXBsb3kgaW1hZ2VzIGZvciBzaW0gZHVlIHRvIGVycm9yIGluIG1ldGFkYXRhIHJldHJpdmFsJywgZSApO1xyXG4gICAgICByZXR1cm47XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICB3aW5zdG9uLmluZm8oIGBzZW5kaW5nIGltYWdlIGRlcGxveSByZXF1ZXN0IGZvciAke3JlcXVlc3RPYmplY3QuYnJhbmNofSwgJHtyZXF1ZXN0T2JqZWN0LmJyYW5kc31gICk7XHJcblxyXG4gIGNvbnN0IHVybCA9IGAke2J1aWxkTG9jYWwucHJvZHVjdGlvblNlcnZlclVSTH0vZGVwbG95LWltYWdlc2A7XHJcblxyXG4gIHdpbnN0b24uaW5mbyggdXJsICk7XHJcbiAgd2luc3Rvbi5pbmZvKCBKU09OLnN0cmluZ2lmeSggcmVxdWVzdE9iamVjdCApICk7XHJcblxyXG4gIGxldCByZXNwb25zZTtcclxuICB0cnkge1xyXG4gICAgcmVzcG9uc2UgPSBhd2FpdCBheGlvcyggeyBtZXRob2Q6ICdwb3N0JywgdXJsOiB1cmwsIGRhdGE6IHJlcXVlc3RPYmplY3QgfSApO1xyXG4gIH1cclxuICBjYXRjaCggZXJyb3IgKSB7XHJcbiAgICB0aHJvdyBuZXcgRXJyb3IoIGBJbWFnZSBkZXBsb3kgcmVxdWVzdCBmYWlsZWQgd2l0aCBlcnJvciAke2Vycm9yfS5gICk7XHJcbiAgfVxyXG5cclxuICBpZiAoIHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAwICYmIHJlc3BvbnNlLnN0YXR1cyAhPT0gMjAyICkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCBgSW1hZ2UgZGVwbG95IHJlcXVlc3QgZmFpbGVkIHdpdGggc3RhdHVzIGNvZGUgJHtyZXNwb25zZS5zdGF0dXN9LmAgKTtcclxuICB9XHJcbiAgZWxzZSB7XHJcbiAgICB3aW5zdG9uLmluZm8oICdJbWFnZSBkZXBsb3kgcmVxdWVzdCBzZW50IHN1Y2Nlc3NmdWxseS4gIElmIGFkZGl0aW9uYWwgYWx0ZXJuYXRpdmUgaW1hZ2VzIHdlcmUgZGVwbG95ZWQsIGdvIHRvIHRoZSBtYWluIGFkbWluIHBhZ2UgYW5kIHRyaWdnZXIgYSByZWNvdW50LicgKTtcclxuICB9XHJcbn07XHJcblxyXG5tb2R1bGUuZXhwb3J0cyA9IGRlcGxveUltYWdlczsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBRSxzQkFBdUIsQ0FBQztBQUNwRCxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBRSxTQUFVLENBQUM7QUFDcEMsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUUsT0FBUSxDQUFDOztBQUVoQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE1BQU1HLFlBQVksR0FBRyxlQUFBQSxDQUFnQjtFQUFFQyxNQUFNO0VBQUVDLE1BQU07RUFBRUM7QUFBVyxDQUFDLEVBQUc7RUFDcEUsTUFBTUMsYUFBYSxHQUFHO0lBQ3BCRixNQUFNLEVBQUVBLE1BQU0sSUFBSSxNQUFNO0lBQ3hCRCxNQUFNLEVBQUVBLE1BQU0sSUFBSSxNQUFNO0lBQ3hCSSxpQkFBaUIsRUFBRVQsVUFBVSxDQUFDVTtFQUNoQyxDQUFDO0VBQ0QsSUFBS1YsVUFBVSxDQUFDVyxzQkFBc0IsRUFBRztJQUN2Q0gsYUFBYSxDQUFDSSxLQUFLLEdBQUdaLFVBQVUsQ0FBQ1csc0JBQXNCO0VBQ3pEO0VBQ0EsSUFBS0osVUFBVSxFQUFHO0lBQ2hCQyxhQUFhLENBQUNELFVBQVUsR0FBR0EsVUFBVTtJQUNyQyxJQUFJO01BQ0YsTUFBTU0sZ0JBQWdCLEdBQUcsTUFBTVYsS0FBSyxDQUFDVyxHQUFHLENBQUcsa0hBQWlIUCxVQUFXLEVBQUUsQ0FBQztNQUMxSyxJQUFLTSxnQkFBZ0IsQ0FBQ0UsSUFBSSxJQUFJRixnQkFBZ0IsQ0FBQ0UsSUFBSSxFQUFFQyxRQUFRLEdBQUksQ0FBQyxDQUFFLEVBQUVDLE9BQU8sRUFBRUMsTUFBTSxFQUFHO1FBQ3RGVixhQUFhLENBQUNTLE9BQU8sR0FBR0osZ0JBQWdCLENBQUNFLElBQUksQ0FBQ0MsUUFBUSxDQUFFLENBQUMsQ0FBRSxDQUFDQyxPQUFPLENBQUNDLE1BQU07TUFDNUUsQ0FBQyxNQUNJO1FBQ0hDLE9BQU8sQ0FBQ0MsS0FBSyxDQUFFLHVDQUF1QyxFQUFFUCxnQkFBZ0IsQ0FBQ0UsSUFBSyxDQUFDO1FBQy9FO01BQ0Y7SUFDRixDQUFDLENBQ0QsT0FBT00sQ0FBQyxFQUFHO01BQ1RGLE9BQU8sQ0FBQ0MsS0FBSyxDQUFFLG1FQUFtRSxFQUFFQyxDQUFFLENBQUM7TUFDdkY7SUFDRjtFQUNGO0VBRUFuQixPQUFPLENBQUNvQixJQUFJLENBQUcsb0NBQW1DZCxhQUFhLENBQUNILE1BQU8sS0FBSUcsYUFBYSxDQUFDRixNQUFPLEVBQUUsQ0FBQztFQUVuRyxNQUFNaUIsR0FBRyxHQUFJLEdBQUV2QixVQUFVLENBQUN3QixtQkFBb0IsZ0JBQWU7RUFFN0R0QixPQUFPLENBQUNvQixJQUFJLENBQUVDLEdBQUksQ0FBQztFQUNuQnJCLE9BQU8sQ0FBQ29CLElBQUksQ0FBRUcsSUFBSSxDQUFDQyxTQUFTLENBQUVsQixhQUFjLENBQUUsQ0FBQztFQUUvQyxJQUFJbUIsUUFBUTtFQUNaLElBQUk7SUFDRkEsUUFBUSxHQUFHLE1BQU14QixLQUFLLENBQUU7TUFBRXlCLE1BQU0sRUFBRSxNQUFNO01BQUVMLEdBQUcsRUFBRUEsR0FBRztNQUFFUixJQUFJLEVBQUVQO0lBQWMsQ0FBRSxDQUFDO0VBQzdFLENBQUMsQ0FDRCxPQUFPWSxLQUFLLEVBQUc7SUFDYixNQUFNLElBQUlTLEtBQUssQ0FBRywwQ0FBeUNULEtBQU0sR0FBRyxDQUFDO0VBQ3ZFO0VBRUEsSUFBS08sUUFBUSxDQUFDRyxNQUFNLEtBQUssR0FBRyxJQUFJSCxRQUFRLENBQUNHLE1BQU0sS0FBSyxHQUFHLEVBQUc7SUFDeEQsTUFBTSxJQUFJRCxLQUFLLENBQUcsZ0RBQStDRixRQUFRLENBQUNHLE1BQU8sR0FBRyxDQUFDO0VBQ3ZGLENBQUMsTUFDSTtJQUNINUIsT0FBTyxDQUFDb0IsSUFBSSxDQUFFLDJJQUE0SSxDQUFDO0VBQzdKO0FBQ0YsQ0FBQztBQUVEUyxNQUFNLENBQUNDLE9BQU8sR0FBRzVCLFlBQVkiLCJpZ25vcmVMaXN0IjpbXX0=