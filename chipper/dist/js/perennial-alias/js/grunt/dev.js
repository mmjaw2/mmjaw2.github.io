// Copyright 2017-2019, University of Colorado Boulder

/**
 * Deploys a dev version after incrementing the test version number.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const SimVersion = require('../common/SimVersion');
const booleanPrompt = require('../common/booleanPrompt');
const build = require('../common/build');
const buildLocal = require('../common/buildLocal');
const devDirectoryExists = require('../common/devDirectoryExists');
const devScp = require('../common/devScp');
const devSsh = require('../common/devSsh');
const getBranch = require('../common/getBranch');
const getRemoteBranchSHAs = require('../common/getRemoteBranchSHAs');
const getRepoVersion = require('../common/getRepoVersion');
const gitIsClean = require('../common/gitIsClean');
const getDependencyRepos = require('../common/getDependencyRepos');
const gitPush = require('../common/gitPush');
const gitRevParse = require('../common/gitRevParse');
const lintAllRunnable = require('../common/lintAllRunnable');
const npmUpdate = require('../common/npmUpdate');
const setRepoVersion = require('../common/setRepoVersion');
const updateDependenciesJSON = require('../common/updateDependenciesJSON');
const updateHTMLVersion = require('../common/updateHTMLVersion');
const vpnCheck = require('../common/vpnCheck');
const writePhetioHtaccess = require('../common/writePhetioHtaccess');
const assert = require('assert');
const grunt = require('grunt');

/**
 * Deploys a dev version after incrementing the test version number.
 * @public
 *
 * @param {string} repo
 * @param {Array.<string>} brands
 * @param {boolean} noninteractive
 * @param {string} branch - 'main' for normal dev deploys, otherwise is the name of a one-off branch
 * @param {string} [message] - Optional message to append to the version-increment commit.
 * @returns {Promise}
 */
module.exports = async function (repo, brands, noninteractive, branch, message) {
  const isOneOff = branch !== 'main';
  const testType = isOneOff ? branch : 'dev';
  if (isOneOff) {
    assert(!branch.includes('-'), 'One-off versions should be from branches that do not include hyphens');
  }
  if (!(await vpnCheck())) {
    grunt.fail.fatal('VPN or being on campus is required for this build. Ensure VPN is enabled, or that you have access to phet-server2.int.colorado.edu');
  }
  const currentBranch = await getBranch(repo);
  if (currentBranch !== branch) {
    grunt.fail.fatal(`${testType} deployment should be on the branch ${branch}, not: ${currentBranch ? currentBranch : '(detached head)'}`);
  }
  const previousVersion = await getRepoVersion(repo);
  if (previousVersion.testType !== testType) {
    if (isOneOff) {
      grunt.fail.fatal(`The current version identifier is not a one-off version (should be something like ${previousVersion.major}.${previousVersion.minor}.${previousVersion.maintenance}-${testType}.${previousVersion.testNumber === null ? '0' : previousVersion.testNumber}), aborting.`);
    } else {
      grunt.fail.fatal('The current version identifier is not a dev version, aborting.');
    }
  }
  const dependencies = await getDependencyRepos(repo);
  for (let i = 0; i < dependencies.length; i++) {
    const dependency = dependencies[i];
    const isClean = await gitIsClean(dependency);
    if (!isClean) {
      throw new Error(`Unclean status in ${dependency}, cannot deploy`);
    }
  }
  const currentSHA = await gitRevParse(repo, 'HEAD');
  const latestSHA = (await getRemoteBranchSHAs(repo))[branch];
  if (currentSHA !== latestSHA) {
    // See https://github.com/phetsims/chipper/issues/699
    grunt.fail.fatal(`Out of date with remote, please push or pull repo. Current SHA: ${currentSHA}, latest SHA: ${latestSHA}`);
  }

  // Ensure we don't try to request an unsupported brand
  const supportedBrands = grunt.file.readJSON(`../${repo}/package.json`).phet.supportedBrands || [];
  brands.forEach(brand => assert(supportedBrands.includes(brand), `Brand ${brand} not included in ${repo}'s supported brands: ${supportedBrands.join(',')}`));

  // Ensure that the repository and its dependencies pass lint before continuing.
  // See https://github.com/phetsims/perennial/issues/76
  await lintAllRunnable(repo);

  // Bump the version
  const version = new SimVersion(previousVersion.major, previousVersion.minor, previousVersion.maintenance, {
    testType: testType,
    testNumber: previousVersion.testNumber + 1
  });
  const versionString = version.toString();
  const simPath = buildLocal.devDeployPath + repo;
  const versionPath = `${simPath}/${versionString}`;
  const simPathExists = await devDirectoryExists(simPath);
  const versionPathExists = await devDirectoryExists(versionPath);
  if (versionPathExists) {
    grunt.fail.fatal(`Directory ${versionPath} already exists.  If you intend to replace the content then remove the directory manually from ${buildLocal.devDeployServer}.`);
  }
  if (!(await booleanPrompt(`Deploy ${versionString} to ${buildLocal.devDeployServer}`, noninteractive))) {
    grunt.fail.fatal(`Aborted ${testType} deploy`);
  }

  // Make sure our correct npm dependencies are set
  await npmUpdate(repo);
  await npmUpdate('chipper');
  await npmUpdate('perennial-alias');
  await setRepoVersion(repo, version, message);
  await updateHTMLVersion(repo);
  await gitPush(repo, branch);
  grunt.log.writeln(await build(repo, {
    brands: brands,
    allHTML: true,
    debugHTML: true
  }));

  // Create (and fix permissions for) the main simulation directory, if it didn't already exist
  if (!simPathExists) {
    await devSsh(`mkdir -p "${simPath}" && echo "IndexOrderDefault Descending Date\n" > "${simPath}/.htaccess"`);
  }

  // Create the version-specific directory
  await devSsh(`mkdir -p "${versionPath}"`);

  // Copy the build contents into the version-specific directory
  for (const brand of brands) {
    await devScp(`../${repo}/build/${brand}`, `${versionPath}/`);
  }

  // If there is a protected directory and we are copying to the dev server, include the .htaccess file
  // This is for PhET-iO simulations, to protected the password protected wrappers, see
  // https://github.com/phetsims/phet-io/issues/641
  if (brands.includes('phet-io') && buildLocal.devDeployServer === 'bayes.colorado.edu') {
    const htaccessLocation = `../${repo}/build/phet-io`;
    await writePhetioHtaccess(htaccessLocation, null, versionPath);
  }

  // Move over dependencies.json and commit/push
  await updateDependenciesJSON(repo, brands, versionString, branch);
  const versionURL = `https://phet-dev.colorado.edu/html/${repo}/${versionString}`;
  if (brands.includes('phet')) {
    grunt.log.writeln(`Deployed: ${versionURL}/phet/${repo}_all_phet.html`);
  }
  if (brands.includes('phet-io')) {
    grunt.log.writeln(`Deployed: ${versionURL}/phet-io/`);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTaW1WZXJzaW9uIiwicmVxdWlyZSIsImJvb2xlYW5Qcm9tcHQiLCJidWlsZCIsImJ1aWxkTG9jYWwiLCJkZXZEaXJlY3RvcnlFeGlzdHMiLCJkZXZTY3AiLCJkZXZTc2giLCJnZXRCcmFuY2giLCJnZXRSZW1vdGVCcmFuY2hTSEFzIiwiZ2V0UmVwb1ZlcnNpb24iLCJnaXRJc0NsZWFuIiwiZ2V0RGVwZW5kZW5jeVJlcG9zIiwiZ2l0UHVzaCIsImdpdFJldlBhcnNlIiwibGludEFsbFJ1bm5hYmxlIiwibnBtVXBkYXRlIiwic2V0UmVwb1ZlcnNpb24iLCJ1cGRhdGVEZXBlbmRlbmNpZXNKU09OIiwidXBkYXRlSFRNTFZlcnNpb24iLCJ2cG5DaGVjayIsIndyaXRlUGhldGlvSHRhY2Nlc3MiLCJhc3NlcnQiLCJncnVudCIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXBvIiwiYnJhbmRzIiwibm9uaW50ZXJhY3RpdmUiLCJicmFuY2giLCJtZXNzYWdlIiwiaXNPbmVPZmYiLCJ0ZXN0VHlwZSIsImluY2x1ZGVzIiwiZmFpbCIsImZhdGFsIiwiY3VycmVudEJyYW5jaCIsInByZXZpb3VzVmVyc2lvbiIsIm1ham9yIiwibWlub3IiLCJtYWludGVuYW5jZSIsInRlc3ROdW1iZXIiLCJkZXBlbmRlbmNpZXMiLCJpIiwibGVuZ3RoIiwiZGVwZW5kZW5jeSIsImlzQ2xlYW4iLCJFcnJvciIsImN1cnJlbnRTSEEiLCJsYXRlc3RTSEEiLCJzdXBwb3J0ZWRCcmFuZHMiLCJmaWxlIiwicmVhZEpTT04iLCJwaGV0IiwiZm9yRWFjaCIsImJyYW5kIiwiam9pbiIsInZlcnNpb24iLCJ2ZXJzaW9uU3RyaW5nIiwidG9TdHJpbmciLCJzaW1QYXRoIiwiZGV2RGVwbG95UGF0aCIsInZlcnNpb25QYXRoIiwic2ltUGF0aEV4aXN0cyIsInZlcnNpb25QYXRoRXhpc3RzIiwiZGV2RGVwbG95U2VydmVyIiwibG9nIiwid3JpdGVsbiIsImFsbEhUTUwiLCJkZWJ1Z0hUTUwiLCJodGFjY2Vzc0xvY2F0aW9uIiwidmVyc2lvblVSTCJdLCJzb3VyY2VzIjpbImRldi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNy0yMDE5LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBEZXBsb3lzIGEgZGV2IHZlcnNpb24gYWZ0ZXIgaW5jcmVtZW50aW5nIHRoZSB0ZXN0IHZlcnNpb24gbnVtYmVyLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuY29uc3QgU2ltVmVyc2lvbiA9IHJlcXVpcmUoICcuLi9jb21tb24vU2ltVmVyc2lvbicgKTtcclxuY29uc3QgYm9vbGVhblByb21wdCA9IHJlcXVpcmUoICcuLi9jb21tb24vYm9vbGVhblByb21wdCcgKTtcclxuY29uc3QgYnVpbGQgPSByZXF1aXJlKCAnLi4vY29tbW9uL2J1aWxkJyApO1xyXG5jb25zdCBidWlsZExvY2FsID0gcmVxdWlyZSggJy4uL2NvbW1vbi9idWlsZExvY2FsJyApO1xyXG5jb25zdCBkZXZEaXJlY3RvcnlFeGlzdHMgPSByZXF1aXJlKCAnLi4vY29tbW9uL2RldkRpcmVjdG9yeUV4aXN0cycgKTtcclxuY29uc3QgZGV2U2NwID0gcmVxdWlyZSggJy4uL2NvbW1vbi9kZXZTY3AnICk7XHJcbmNvbnN0IGRldlNzaCA9IHJlcXVpcmUoICcuLi9jb21tb24vZGV2U3NoJyApO1xyXG5jb25zdCBnZXRCcmFuY2ggPSByZXF1aXJlKCAnLi4vY29tbW9uL2dldEJyYW5jaCcgKTtcclxuY29uc3QgZ2V0UmVtb3RlQnJhbmNoU0hBcyA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2V0UmVtb3RlQnJhbmNoU0hBcycgKTtcclxuY29uc3QgZ2V0UmVwb1ZlcnNpb24gPSByZXF1aXJlKCAnLi4vY29tbW9uL2dldFJlcG9WZXJzaW9uJyApO1xyXG5jb25zdCBnaXRJc0NsZWFuID0gcmVxdWlyZSggJy4uL2NvbW1vbi9naXRJc0NsZWFuJyApO1xyXG5jb25zdCBnZXREZXBlbmRlbmN5UmVwb3MgPSByZXF1aXJlKCAnLi4vY29tbW9uL2dldERlcGVuZGVuY3lSZXBvcycgKTtcclxuY29uc3QgZ2l0UHVzaCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0UHVzaCcgKTtcclxuY29uc3QgZ2l0UmV2UGFyc2UgPSByZXF1aXJlKCAnLi4vY29tbW9uL2dpdFJldlBhcnNlJyApO1xyXG5jb25zdCBsaW50QWxsUnVubmFibGUgPSByZXF1aXJlKCAnLi4vY29tbW9uL2xpbnRBbGxSdW5uYWJsZScgKTtcclxuY29uc3QgbnBtVXBkYXRlID0gcmVxdWlyZSggJy4uL2NvbW1vbi9ucG1VcGRhdGUnICk7XHJcbmNvbnN0IHNldFJlcG9WZXJzaW9uID0gcmVxdWlyZSggJy4uL2NvbW1vbi9zZXRSZXBvVmVyc2lvbicgKTtcclxuY29uc3QgdXBkYXRlRGVwZW5kZW5jaWVzSlNPTiA9IHJlcXVpcmUoICcuLi9jb21tb24vdXBkYXRlRGVwZW5kZW5jaWVzSlNPTicgKTtcclxuY29uc3QgdXBkYXRlSFRNTFZlcnNpb24gPSByZXF1aXJlKCAnLi4vY29tbW9uL3VwZGF0ZUhUTUxWZXJzaW9uJyApO1xyXG5jb25zdCB2cG5DaGVjayA9IHJlcXVpcmUoICcuLi9jb21tb24vdnBuQ2hlY2snICk7XHJcbmNvbnN0IHdyaXRlUGhldGlvSHRhY2Nlc3MgPSByZXF1aXJlKCAnLi4vY29tbW9uL3dyaXRlUGhldGlvSHRhY2Nlc3MnICk7XHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoICdhc3NlcnQnICk7XHJcbmNvbnN0IGdydW50ID0gcmVxdWlyZSggJ2dydW50JyApO1xyXG5cclxuLyoqXHJcbiAqIERlcGxveXMgYSBkZXYgdmVyc2lvbiBhZnRlciBpbmNyZW1lbnRpbmcgdGhlIHRlc3QgdmVyc2lvbiBudW1iZXIuXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcG9cclxuICogQHBhcmFtIHtBcnJheS48c3RyaW5nPn0gYnJhbmRzXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gbm9uaW50ZXJhY3RpdmVcclxuICogQHBhcmFtIHtzdHJpbmd9IGJyYW5jaCAtICdtYWluJyBmb3Igbm9ybWFsIGRldiBkZXBsb3lzLCBvdGhlcndpc2UgaXMgdGhlIG5hbWUgb2YgYSBvbmUtb2ZmIGJyYW5jaFxyXG4gKiBAcGFyYW0ge3N0cmluZ30gW21lc3NhZ2VdIC0gT3B0aW9uYWwgbWVzc2FnZSB0byBhcHBlbmQgdG8gdGhlIHZlcnNpb24taW5jcmVtZW50IGNvbW1pdC5cclxuICogQHJldHVybnMge1Byb21pc2V9XHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uKCByZXBvLCBicmFuZHMsIG5vbmludGVyYWN0aXZlLCBicmFuY2gsIG1lc3NhZ2UgKSB7XHJcbiAgY29uc3QgaXNPbmVPZmYgPSBicmFuY2ggIT09ICdtYWluJztcclxuICBjb25zdCB0ZXN0VHlwZSA9IGlzT25lT2ZmID8gYnJhbmNoIDogJ2Rldic7XHJcbiAgaWYgKCBpc09uZU9mZiApIHtcclxuICAgIGFzc2VydCggIWJyYW5jaC5pbmNsdWRlcyggJy0nICksICdPbmUtb2ZmIHZlcnNpb25zIHNob3VsZCBiZSBmcm9tIGJyYW5jaGVzIHRoYXQgZG8gbm90IGluY2x1ZGUgaHlwaGVucycgKTtcclxuICB9XHJcblxyXG4gIGlmICggISggYXdhaXQgdnBuQ2hlY2soKSApICkge1xyXG4gICAgZ3J1bnQuZmFpbC5mYXRhbCggJ1ZQTiBvciBiZWluZyBvbiBjYW1wdXMgaXMgcmVxdWlyZWQgZm9yIHRoaXMgYnVpbGQuIEVuc3VyZSBWUE4gaXMgZW5hYmxlZCwgb3IgdGhhdCB5b3UgaGF2ZSBhY2Nlc3MgdG8gcGhldC1zZXJ2ZXIyLmludC5jb2xvcmFkby5lZHUnICk7XHJcbiAgfVxyXG5cclxuICBjb25zdCBjdXJyZW50QnJhbmNoID0gYXdhaXQgZ2V0QnJhbmNoKCByZXBvICk7XHJcbiAgaWYgKCBjdXJyZW50QnJhbmNoICE9PSBicmFuY2ggKSB7XHJcbiAgICBncnVudC5mYWlsLmZhdGFsKCBgJHt0ZXN0VHlwZX0gZGVwbG95bWVudCBzaG91bGQgYmUgb24gdGhlIGJyYW5jaCAke2JyYW5jaH0sIG5vdDogJHtjdXJyZW50QnJhbmNoID8gY3VycmVudEJyYW5jaCA6ICcoZGV0YWNoZWQgaGVhZCknfWAgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IHByZXZpb3VzVmVyc2lvbiA9IGF3YWl0IGdldFJlcG9WZXJzaW9uKCByZXBvICk7XHJcblxyXG4gIGlmICggcHJldmlvdXNWZXJzaW9uLnRlc3RUeXBlICE9PSB0ZXN0VHlwZSApIHtcclxuICAgIGlmICggaXNPbmVPZmYgKSB7XHJcbiAgICAgIGdydW50LmZhaWwuZmF0YWwoIGBUaGUgY3VycmVudCB2ZXJzaW9uIGlkZW50aWZpZXIgaXMgbm90IGEgb25lLW9mZiB2ZXJzaW9uIChzaG91bGQgYmUgc29tZXRoaW5nIGxpa2UgJHtwcmV2aW91c1ZlcnNpb24ubWFqb3J9LiR7cHJldmlvdXNWZXJzaW9uLm1pbm9yfS4ke3ByZXZpb3VzVmVyc2lvbi5tYWludGVuYW5jZX0tJHt0ZXN0VHlwZX0uJHtwcmV2aW91c1ZlcnNpb24udGVzdE51bWJlciA9PT0gbnVsbCA/ICcwJyA6IHByZXZpb3VzVmVyc2lvbi50ZXN0TnVtYmVyfSksIGFib3J0aW5nLmAgKTtcclxuICAgIH1cclxuICAgIGVsc2Uge1xyXG4gICAgICBncnVudC5mYWlsLmZhdGFsKCAnVGhlIGN1cnJlbnQgdmVyc2lvbiBpZGVudGlmaWVyIGlzIG5vdCBhIGRldiB2ZXJzaW9uLCBhYm9ydGluZy4nICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBjb25zdCBkZXBlbmRlbmNpZXMgPSBhd2FpdCBnZXREZXBlbmRlbmN5UmVwb3MoIHJlcG8gKTtcclxuICBmb3IgKCBsZXQgaSA9IDA7IGkgPCBkZXBlbmRlbmNpZXMubGVuZ3RoOyBpKysgKSB7XHJcbiAgICBjb25zdCBkZXBlbmRlbmN5ID0gZGVwZW5kZW5jaWVzWyBpIF07XHJcbiAgICBjb25zdCBpc0NsZWFuID0gYXdhaXQgZ2l0SXNDbGVhbiggZGVwZW5kZW5jeSApO1xyXG4gICAgaWYgKCAhaXNDbGVhbiApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBgVW5jbGVhbiBzdGF0dXMgaW4gJHtkZXBlbmRlbmN5fSwgY2Fubm90IGRlcGxveWAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIGNvbnN0IGN1cnJlbnRTSEEgPSBhd2FpdCBnaXRSZXZQYXJzZSggcmVwbywgJ0hFQUQnICk7XHJcbiAgY29uc3QgbGF0ZXN0U0hBID0gKCBhd2FpdCBnZXRSZW1vdGVCcmFuY2hTSEFzKCByZXBvICkgKVsgYnJhbmNoIF07XHJcbiAgaWYgKCBjdXJyZW50U0hBICE9PSBsYXRlc3RTSEEgKSB7XHJcbiAgICAvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL2NoaXBwZXIvaXNzdWVzLzY5OVxyXG4gICAgZ3J1bnQuZmFpbC5mYXRhbCggYE91dCBvZiBkYXRlIHdpdGggcmVtb3RlLCBwbGVhc2UgcHVzaCBvciBwdWxsIHJlcG8uIEN1cnJlbnQgU0hBOiAke2N1cnJlbnRTSEF9LCBsYXRlc3QgU0hBOiAke2xhdGVzdFNIQX1gICk7XHJcbiAgfVxyXG5cclxuICAvLyBFbnN1cmUgd2UgZG9uJ3QgdHJ5IHRvIHJlcXVlc3QgYW4gdW5zdXBwb3J0ZWQgYnJhbmRcclxuICBjb25zdCBzdXBwb3J0ZWRCcmFuZHMgPSBncnVudC5maWxlLnJlYWRKU09OKCBgLi4vJHtyZXBvfS9wYWNrYWdlLmpzb25gICkucGhldC5zdXBwb3J0ZWRCcmFuZHMgfHwgW107XHJcbiAgYnJhbmRzLmZvckVhY2goIGJyYW5kID0+IGFzc2VydCggc3VwcG9ydGVkQnJhbmRzLmluY2x1ZGVzKCBicmFuZCApLCBgQnJhbmQgJHticmFuZH0gbm90IGluY2x1ZGVkIGluICR7cmVwb30ncyBzdXBwb3J0ZWQgYnJhbmRzOiAke3N1cHBvcnRlZEJyYW5kcy5qb2luKCAnLCcgKX1gICkgKTtcclxuXHJcbiAgLy8gRW5zdXJlIHRoYXQgdGhlIHJlcG9zaXRvcnkgYW5kIGl0cyBkZXBlbmRlbmNpZXMgcGFzcyBsaW50IGJlZm9yZSBjb250aW51aW5nLlxyXG4gIC8vIFNlZSBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGVyZW5uaWFsL2lzc3Vlcy83NlxyXG4gIGF3YWl0IGxpbnRBbGxSdW5uYWJsZSggcmVwbyApO1xyXG5cclxuICAvLyBCdW1wIHRoZSB2ZXJzaW9uXHJcbiAgY29uc3QgdmVyc2lvbiA9IG5ldyBTaW1WZXJzaW9uKCBwcmV2aW91c1ZlcnNpb24ubWFqb3IsIHByZXZpb3VzVmVyc2lvbi5taW5vciwgcHJldmlvdXNWZXJzaW9uLm1haW50ZW5hbmNlLCB7XHJcbiAgICB0ZXN0VHlwZTogdGVzdFR5cGUsXHJcbiAgICB0ZXN0TnVtYmVyOiBwcmV2aW91c1ZlcnNpb24udGVzdE51bWJlciArIDFcclxuICB9ICk7XHJcblxyXG4gIGNvbnN0IHZlcnNpb25TdHJpbmcgPSB2ZXJzaW9uLnRvU3RyaW5nKCk7XHJcbiAgY29uc3Qgc2ltUGF0aCA9IGJ1aWxkTG9jYWwuZGV2RGVwbG95UGF0aCArIHJlcG87XHJcbiAgY29uc3QgdmVyc2lvblBhdGggPSBgJHtzaW1QYXRofS8ke3ZlcnNpb25TdHJpbmd9YDtcclxuXHJcbiAgY29uc3Qgc2ltUGF0aEV4aXN0cyA9IGF3YWl0IGRldkRpcmVjdG9yeUV4aXN0cyggc2ltUGF0aCApO1xyXG4gIGNvbnN0IHZlcnNpb25QYXRoRXhpc3RzID0gYXdhaXQgZGV2RGlyZWN0b3J5RXhpc3RzKCB2ZXJzaW9uUGF0aCApO1xyXG5cclxuICBpZiAoIHZlcnNpb25QYXRoRXhpc3RzICkge1xyXG4gICAgZ3J1bnQuZmFpbC5mYXRhbCggYERpcmVjdG9yeSAke3ZlcnNpb25QYXRofSBhbHJlYWR5IGV4aXN0cy4gIElmIHlvdSBpbnRlbmQgdG8gcmVwbGFjZSB0aGUgY29udGVudCB0aGVuIHJlbW92ZSB0aGUgZGlyZWN0b3J5IG1hbnVhbGx5IGZyb20gJHtidWlsZExvY2FsLmRldkRlcGxveVNlcnZlcn0uYCApO1xyXG4gIH1cclxuXHJcbiAgaWYgKCAhYXdhaXQgYm9vbGVhblByb21wdCggYERlcGxveSAke3ZlcnNpb25TdHJpbmd9IHRvICR7YnVpbGRMb2NhbC5kZXZEZXBsb3lTZXJ2ZXJ9YCwgbm9uaW50ZXJhY3RpdmUgKSApIHtcclxuICAgIGdydW50LmZhaWwuZmF0YWwoIGBBYm9ydGVkICR7dGVzdFR5cGV9IGRlcGxveWAgKTtcclxuICB9XHJcblxyXG4gIC8vIE1ha2Ugc3VyZSBvdXIgY29ycmVjdCBucG0gZGVwZW5kZW5jaWVzIGFyZSBzZXRcclxuICBhd2FpdCBucG1VcGRhdGUoIHJlcG8gKTtcclxuICBhd2FpdCBucG1VcGRhdGUoICdjaGlwcGVyJyApO1xyXG4gIGF3YWl0IG5wbVVwZGF0ZSggJ3BlcmVubmlhbC1hbGlhcycgKTtcclxuXHJcbiAgYXdhaXQgc2V0UmVwb1ZlcnNpb24oIHJlcG8sIHZlcnNpb24sIG1lc3NhZ2UgKTtcclxuICBhd2FpdCB1cGRhdGVIVE1MVmVyc2lvbiggcmVwbyApO1xyXG4gIGF3YWl0IGdpdFB1c2goIHJlcG8sIGJyYW5jaCApO1xyXG5cclxuICBncnVudC5sb2cud3JpdGVsbiggYXdhaXQgYnVpbGQoIHJlcG8sIHtcclxuICAgIGJyYW5kczogYnJhbmRzLFxyXG4gICAgYWxsSFRNTDogdHJ1ZSxcclxuICAgIGRlYnVnSFRNTDogdHJ1ZVxyXG4gIH0gKSApO1xyXG5cclxuICAvLyBDcmVhdGUgKGFuZCBmaXggcGVybWlzc2lvbnMgZm9yKSB0aGUgbWFpbiBzaW11bGF0aW9uIGRpcmVjdG9yeSwgaWYgaXQgZGlkbid0IGFscmVhZHkgZXhpc3RcclxuICBpZiAoICFzaW1QYXRoRXhpc3RzICkge1xyXG4gICAgYXdhaXQgZGV2U3NoKCBgbWtkaXIgLXAgXCIke3NpbVBhdGh9XCIgJiYgZWNobyBcIkluZGV4T3JkZXJEZWZhdWx0IERlc2NlbmRpbmcgRGF0ZVxcblwiID4gXCIke3NpbVBhdGh9Ly5odGFjY2Vzc1wiYCApO1xyXG4gIH1cclxuXHJcbiAgLy8gQ3JlYXRlIHRoZSB2ZXJzaW9uLXNwZWNpZmljIGRpcmVjdG9yeVxyXG4gIGF3YWl0IGRldlNzaCggYG1rZGlyIC1wIFwiJHt2ZXJzaW9uUGF0aH1cImAgKTtcclxuXHJcbiAgLy8gQ29weSB0aGUgYnVpbGQgY29udGVudHMgaW50byB0aGUgdmVyc2lvbi1zcGVjaWZpYyBkaXJlY3RvcnlcclxuICBmb3IgKCBjb25zdCBicmFuZCBvZiBicmFuZHMgKSB7XHJcbiAgICBhd2FpdCBkZXZTY3AoIGAuLi8ke3JlcG99L2J1aWxkLyR7YnJhbmR9YCwgYCR7dmVyc2lvblBhdGh9L2AgKTtcclxuICB9XHJcblxyXG4gIC8vIElmIHRoZXJlIGlzIGEgcHJvdGVjdGVkIGRpcmVjdG9yeSBhbmQgd2UgYXJlIGNvcHlpbmcgdG8gdGhlIGRldiBzZXJ2ZXIsIGluY2x1ZGUgdGhlIC5odGFjY2VzcyBmaWxlXHJcbiAgLy8gVGhpcyBpcyBmb3IgUGhFVC1pTyBzaW11bGF0aW9ucywgdG8gcHJvdGVjdGVkIHRoZSBwYXNzd29yZCBwcm90ZWN0ZWQgd3JhcHBlcnMsIHNlZVxyXG4gIC8vIGh0dHBzOi8vZ2l0aHViLmNvbS9waGV0c2ltcy9waGV0LWlvL2lzc3Vlcy82NDFcclxuICBpZiAoIGJyYW5kcy5pbmNsdWRlcyggJ3BoZXQtaW8nICkgJiYgYnVpbGRMb2NhbC5kZXZEZXBsb3lTZXJ2ZXIgPT09ICdiYXllcy5jb2xvcmFkby5lZHUnICkge1xyXG4gICAgY29uc3QgaHRhY2Nlc3NMb2NhdGlvbiA9IGAuLi8ke3JlcG99L2J1aWxkL3BoZXQtaW9gO1xyXG4gICAgYXdhaXQgd3JpdGVQaGV0aW9IdGFjY2VzcyggaHRhY2Nlc3NMb2NhdGlvbiwgbnVsbCwgdmVyc2lvblBhdGggKTtcclxuICB9XHJcblxyXG4gIC8vIE1vdmUgb3ZlciBkZXBlbmRlbmNpZXMuanNvbiBhbmQgY29tbWl0L3B1c2hcclxuICBhd2FpdCB1cGRhdGVEZXBlbmRlbmNpZXNKU09OKCByZXBvLCBicmFuZHMsIHZlcnNpb25TdHJpbmcsIGJyYW5jaCApO1xyXG5cclxuICBjb25zdCB2ZXJzaW9uVVJMID0gYGh0dHBzOi8vcGhldC1kZXYuY29sb3JhZG8uZWR1L2h0bWwvJHtyZXBvfS8ke3ZlcnNpb25TdHJpbmd9YDtcclxuXHJcbiAgaWYgKCBicmFuZHMuaW5jbHVkZXMoICdwaGV0JyApICkge1xyXG4gICAgZ3J1bnQubG9nLndyaXRlbG4oIGBEZXBsb3llZDogJHt2ZXJzaW9uVVJMfS9waGV0LyR7cmVwb31fYWxsX3BoZXQuaHRtbGAgKTtcclxuICB9XHJcbiAgaWYgKCBicmFuZHMuaW5jbHVkZXMoICdwaGV0LWlvJyApICkge1xyXG4gICAgZ3J1bnQubG9nLndyaXRlbG4oIGBEZXBsb3llZDogJHt2ZXJzaW9uVVJMfS9waGV0LWlvL2AgKTtcclxuICB9XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLFVBQVUsR0FBR0MsT0FBTyxDQUFFLHNCQUF1QixDQUFDO0FBQ3BELE1BQU1DLGFBQWEsR0FBR0QsT0FBTyxDQUFFLHlCQUEwQixDQUFDO0FBQzFELE1BQU1FLEtBQUssR0FBR0YsT0FBTyxDQUFFLGlCQUFrQixDQUFDO0FBQzFDLE1BQU1HLFVBQVUsR0FBR0gsT0FBTyxDQUFFLHNCQUF1QixDQUFDO0FBQ3BELE1BQU1JLGtCQUFrQixHQUFHSixPQUFPLENBQUUsOEJBQStCLENBQUM7QUFDcEUsTUFBTUssTUFBTSxHQUFHTCxPQUFPLENBQUUsa0JBQW1CLENBQUM7QUFDNUMsTUFBTU0sTUFBTSxHQUFHTixPQUFPLENBQUUsa0JBQW1CLENBQUM7QUFDNUMsTUFBTU8sU0FBUyxHQUFHUCxPQUFPLENBQUUscUJBQXNCLENBQUM7QUFDbEQsTUFBTVEsbUJBQW1CLEdBQUdSLE9BQU8sQ0FBRSwrQkFBZ0MsQ0FBQztBQUN0RSxNQUFNUyxjQUFjLEdBQUdULE9BQU8sQ0FBRSwwQkFBMkIsQ0FBQztBQUM1RCxNQUFNVSxVQUFVLEdBQUdWLE9BQU8sQ0FBRSxzQkFBdUIsQ0FBQztB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