// Copyright 2017, University of Colorado Boulder

/**
 * Generates the lists under perennial/data/, and if there were changes, will commit and push.
 *
 * This grunt task should be run manually by developers when a change has been made that would add or remove
 * an entry from one of the perennial/data/ lists. But it will also be run as part of daily-grunt-work.sh
 * to catch anything that was forgotten.
 *
 * This used to be run automatically by bayes whenever a relevant change was made, see
 * https://github.com/phetsims/perennial/issues/66
 *
 * But we decided to change it to a manual step with a daily fallback, see
 * https://github.com/phetsims/perennial/issues/213
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const getActiveRepos = require('../common/getActiveRepos');
const getBranch = require('../common/getBranch');
const gitAdd = require('../common/gitAdd');
const gitCommit = require('../common/gitCommit');
const gitIsClean = require('../common/gitIsClean');
const gitPush = require('../common/gitPush');
const assert = require('assert');
const fs = require('fs');
const grunt = require('grunt');
const os = require('os');
const winston = require('../../../../../../perennial-alias/node_modules/winston');

/**
 * Generates the lists under perennial/data/, and if there were changes, will commit and push.
 * @public
 */
module.exports = async function () {
  if ((await getBranch('perennial')) !== 'main' || !(await gitIsClean('perennial'))) {
    grunt.fail.fatal('Data will only be generated if perennial is on main with no working-copy changes.');
  }
  const activeRepos = getActiveRepos();
  function writeList(name, packageFilter) {
    const repos = activeRepos.filter(repo => {
      // Make sure that if someone doesn't have all repositories checked out that this will FAIL. Otherwise bad things.
      assert(grunt.file.exists(`../${repo}`));
      let packageObject;
      try {
        packageObject = JSON.parse(fs.readFileSync(`../${repo}/package.json`, 'utf8'));
      } catch (e) {
        return false;
      }
      return packageObject.phet && packageFilter(packageObject.phet);
    });
    grunt.log.writeln(`Writing to data/${name}`);
    fs.writeFileSync(`data/${name}`, repos.join(os.EOL) + os.EOL);
  }
  writeList('interactive-description', phet => phet.simFeatures && phet.simFeatures.supportsInteractiveDescription);
  writeList('voicing', phet => phet.simFeatures && phet.simFeatures.supportsVoicing);
  writeList('active-runnables', phet => phet.runnable);
  writeList('active-sims', phet => phet.simulation);
  writeList('unit-tests', phet => phet.generatedUnitTests);
  writeList('phet-io', phet => phet.runnable && phet.supportedBrands && phet.supportedBrands.includes('phet-io'));
  writeList('phet-io-api-stable', phet => {
    return phet.runnable && phet.supportedBrands && phet.supportedBrands.includes('phet-io') && phet['phet-io'] && phet['phet-io'].compareDesignedAPIChanges;
  });
  await gitAdd('perennial', 'data/interactive-description');
  await gitAdd('perennial', 'data/voicing');
  await gitAdd('perennial', 'data/active-runnables');
  await gitAdd('perennial', 'data/active-sims');
  await gitAdd('perennial', 'data/unit-tests');
  await gitAdd('perennial', 'data/phet-io');
  await gitAdd('perennial', 'data/phet-io-api-stable');
  const hasChanges = !(await gitIsClean('perennial'));
  if (hasChanges) {
    winston.info('Changes to data files detected, will push');
    await gitCommit('perennial', 'Automated update of perennial data files');
    await gitPush('perennial', 'main');
  } else {
    winston.info('No changes detected');
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnZXRBY3RpdmVSZXBvcyIsInJlcXVpcmUiLCJnZXRCcmFuY2giLCJnaXRBZGQiLCJnaXRDb21taXQiLCJnaXRJc0NsZWFuIiwiZ2l0UHVzaCIsImFzc2VydCIsImZzIiwiZ3J1bnQiLCJvcyIsIndpbnN0b24iLCJtb2R1bGUiLCJleHBvcnRzIiwiZmFpbCIsImZhdGFsIiwiYWN0aXZlUmVwb3MiLCJ3cml0ZUxpc3QiLCJuYW1lIiwicGFja2FnZUZpbHRlciIsInJlcG9zIiwiZmlsdGVyIiwicmVwbyIsImZpbGUiLCJleGlzdHMiLCJwYWNrYWdlT2JqZWN0IiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIiwiZSIsInBoZXQiLCJsb2ciLCJ3cml0ZWxuIiwid3JpdGVGaWxlU3luYyIsImpvaW4iLCJFT0wiLCJzaW1GZWF0dXJlcyIsInN1cHBvcnRzSW50ZXJhY3RpdmVEZXNjcmlwdGlvbiIsInN1cHBvcnRzVm9pY2luZyIsInJ1bm5hYmxlIiwic2ltdWxhdGlvbiIsImdlbmVyYXRlZFVuaXRUZXN0cyIsInN1cHBvcnRlZEJyYW5kcyIsImluY2x1ZGVzIiwiY29tcGFyZURlc2lnbmVkQVBJQ2hhbmdlcyIsImhhc0NoYW5nZXMiLCJpbmZvIl0sInNvdXJjZXMiOlsiZ2VuZXJhdGVEYXRhLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBHZW5lcmF0ZXMgdGhlIGxpc3RzIHVuZGVyIHBlcmVubmlhbC9kYXRhLywgYW5kIGlmIHRoZXJlIHdlcmUgY2hhbmdlcywgd2lsbCBjb21taXQgYW5kIHB1c2guXHJcbiAqXHJcbiAqIFRoaXMgZ3J1bnQgdGFzayBzaG91bGQgYmUgcnVuIG1hbnVhbGx5IGJ5IGRldmVsb3BlcnMgd2hlbiBhIGNoYW5nZSBoYXMgYmVlbiBtYWRlIHRoYXQgd291bGQgYWRkIG9yIHJlbW92ZVxyXG4gKiBhbiBlbnRyeSBmcm9tIG9uZSBvZiB0aGUgcGVyZW5uaWFsL2RhdGEvIGxpc3RzLiBCdXQgaXQgd2lsbCBhbHNvIGJlIHJ1biBhcyBwYXJ0IG9mIGRhaWx5LWdydW50LXdvcmsuc2hcclxuICogdG8gY2F0Y2ggYW55dGhpbmcgdGhhdCB3YXMgZm9yZ290dGVuLlxyXG4gKlxyXG4gKiBUaGlzIHVzZWQgdG8gYmUgcnVuIGF1dG9tYXRpY2FsbHkgYnkgYmF5ZXMgd2hlbmV2ZXIgYSByZWxldmFudCBjaGFuZ2Ugd2FzIG1hZGUsIHNlZVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGVyZW5uaWFsL2lzc3Vlcy82NlxyXG4gKlxyXG4gKiBCdXQgd2UgZGVjaWRlZCB0byBjaGFuZ2UgaXQgdG8gYSBtYW51YWwgc3RlcCB3aXRoIGEgZGFpbHkgZmFsbGJhY2ssIHNlZVxyXG4gKiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGVyZW5uaWFsL2lzc3Vlcy8yMTNcclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmNvbnN0IGdldEFjdGl2ZVJlcG9zID0gcmVxdWlyZSggJy4uL2NvbW1vbi9nZXRBY3RpdmVSZXBvcycgKTtcclxuY29uc3QgZ2V0QnJhbmNoID0gcmVxdWlyZSggJy4uL2NvbW1vbi9nZXRCcmFuY2gnICk7XHJcbmNvbnN0IGdpdEFkZCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0QWRkJyApO1xyXG5jb25zdCBnaXRDb21taXQgPSByZXF1aXJlKCAnLi4vY29tbW9uL2dpdENvbW1pdCcgKTtcclxuY29uc3QgZ2l0SXNDbGVhbiA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0SXNDbGVhbicgKTtcclxuY29uc3QgZ2l0UHVzaCA9IHJlcXVpcmUoICcuLi9jb21tb24vZ2l0UHVzaCcgKTtcclxuY29uc3QgYXNzZXJ0ID0gcmVxdWlyZSggJ2Fzc2VydCcgKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZnMnICk7XHJcbmNvbnN0IGdydW50ID0gcmVxdWlyZSggJ2dydW50JyApO1xyXG5jb25zdCBvcyA9IHJlcXVpcmUoICdvcycgKTtcclxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoICd3aW5zdG9uJyApO1xyXG5cclxuLyoqXHJcbiAqIEdlbmVyYXRlcyB0aGUgbGlzdHMgdW5kZXIgcGVyZW5uaWFsL2RhdGEvLCBhbmQgaWYgdGhlcmUgd2VyZSBjaGFuZ2VzLCB3aWxsIGNvbW1pdCBhbmQgcHVzaC5cclxuICogQHB1YmxpY1xyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbigpIHtcclxuICBpZiAoIGF3YWl0IGdldEJyYW5jaCggJ3BlcmVubmlhbCcgKSAhPT0gJ21haW4nIHx8ICFhd2FpdCBnaXRJc0NsZWFuKCAncGVyZW5uaWFsJyApICkge1xyXG4gICAgZ3J1bnQuZmFpbC5mYXRhbCggJ0RhdGEgd2lsbCBvbmx5IGJlIGdlbmVyYXRlZCBpZiBwZXJlbm5pYWwgaXMgb24gbWFpbiB3aXRoIG5vIHdvcmtpbmctY29weSBjaGFuZ2VzLicgKTtcclxuICB9XHJcblxyXG4gIGNvbnN0IGFjdGl2ZVJlcG9zID0gZ2V0QWN0aXZlUmVwb3MoKTtcclxuXHJcbiAgZnVuY3Rpb24gd3JpdGVMaXN0KCBuYW1lLCBwYWNrYWdlRmlsdGVyICkge1xyXG4gICAgY29uc3QgcmVwb3MgPSBhY3RpdmVSZXBvcy5maWx0ZXIoIHJlcG8gPT4ge1xyXG4gICAgICAvLyBNYWtlIHN1cmUgdGhhdCBpZiBzb21lb25lIGRvZXNuJ3QgaGF2ZSBhbGwgcmVwb3NpdG9yaWVzIGNoZWNrZWQgb3V0IHRoYXQgdGhpcyB3aWxsIEZBSUwuIE90aGVyd2lzZSBiYWQgdGhpbmdzLlxyXG4gICAgICBhc3NlcnQoIGdydW50LmZpbGUuZXhpc3RzKCBgLi4vJHtyZXBvfWAgKSApO1xyXG5cclxuICAgICAgbGV0IHBhY2thZ2VPYmplY3Q7XHJcbiAgICAgIHRyeSB7XHJcbiAgICAgICAgcGFja2FnZU9iamVjdCA9IEpTT04ucGFyc2UoIGZzLnJlYWRGaWxlU3luYyggYC4uLyR7cmVwb30vcGFja2FnZS5qc29uYCwgJ3V0ZjgnICkgKTtcclxuICAgICAgfVxyXG4gICAgICBjYXRjaCggZSApIHtcclxuICAgICAgICByZXR1cm4gZmFsc2U7XHJcbiAgICAgIH1cclxuICAgICAgcmV0dXJuIHBhY2thZ2VPYmplY3QucGhldCAmJiBwYWNrYWdlRmlsdGVyKCBwYWNrYWdlT2JqZWN0LnBoZXQgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBncnVudC5sb2cud3JpdGVsbiggYFdyaXRpbmcgdG8gZGF0YS8ke25hbWV9YCApO1xyXG4gICAgZnMud3JpdGVGaWxlU3luYyggYGRhdGEvJHtuYW1lfWAsIHJlcG9zLmpvaW4oIG9zLkVPTCApICsgb3MuRU9MICk7XHJcbiAgfVxyXG5cclxuICB3cml0ZUxpc3QoICdpbnRlcmFjdGl2ZS1kZXNjcmlwdGlvbicsIHBoZXQgPT4gcGhldC5zaW1GZWF0dXJlcyAmJiBwaGV0LnNpbUZlYXR1cmVzLnN1cHBvcnRzSW50ZXJhY3RpdmVEZXNjcmlwdGlvbiApO1xyXG4gIHdyaXRlTGlzdCggJ3ZvaWNpbmcnLCBwaGV0ID0+IHBoZXQuc2ltRmVhdHVyZXMgJiYgcGhldC5zaW1GZWF0dXJlcy5zdXBwb3J0c1ZvaWNpbmcgKTtcclxuICB3cml0ZUxpc3QoICdhY3RpdmUtcnVubmFibGVzJywgcGhldCA9PiBwaGV0LnJ1bm5hYmxlICk7XHJcbiAgd3JpdGVMaXN0KCAnYWN0aXZlLXNpbXMnLCBwaGV0ID0+IHBoZXQuc2ltdWxhdGlvbiApO1xyXG4gIHdyaXRlTGlzdCggJ3VuaXQtdGVzdHMnLCBwaGV0ID0+IHBoZXQuZ2VuZXJhdGVkVW5pdFRlc3RzICk7XHJcbiAgd3JpdGVMaXN0KCAncGhldC1pbycsIHBoZXQgPT4gcGhldC5ydW5uYWJsZSAmJiBwaGV0LnN1cHBvcnRlZEJyYW5kcyAmJiBwaGV0LnN1cHBvcnRlZEJyYW5kcy5pbmNsdWRlcyggJ3BoZXQtaW8nICkgKTtcclxuICB3cml0ZUxpc3QoICdwaGV0LWlvLWFwaS1zdGFibGUnLCBwaGV0ID0+IHtcclxuICAgIHJldHVybiBwaGV0LnJ1bm5hYmxlICYmIHBoZXQuc3VwcG9ydGVkQnJhbmRzICYmIHBoZXQuc3VwcG9ydGVkQnJhbmRzLmluY2x1ZGVzKCAncGhldC1pbycgKSAmJlxyXG4gICAgICAgICAgIHBoZXRbICdwaGV0LWlvJyBdICYmIHBoZXRbICdwaGV0LWlvJyBdLmNvbXBhcmVEZXNpZ25lZEFQSUNoYW5nZXM7XHJcbiAgfSApO1xyXG5cclxuICBhd2FpdCBnaXRBZGQoICdwZXJlbm5pYWwnLCAnZGF0YS9pbnRlcmFjdGl2ZS1kZXNjcmlwdGlvbicgKTtcclxuICBhd2FpdCBnaXRBZGQoICdwZXJlbm5pYWwnLCAnZGF0YS92b2ljaW5nJyApO1xyXG4gIGF3YWl0IGdpdEFkZCggJ3BlcmVubmlhbCcsICdkYXRhL2FjdGl2ZS1ydW5uYWJsZXMnICk7XHJcbiAgYXdhaXQgZ2l0QWRkKCAncGVyZW5uaWFsJywgJ2RhdGEvYWN0aXZlLXNpbXMnICk7XHJcbiAgYXdhaXQgZ2l0QWRkKCAncGVyZW5uaWFsJywgJ2RhdGEvdW5pdC10ZXN0cycgKTtcclxuICBhd2FpdCBnaXRBZGQoICdwZXJlbm5pYWwnLCAnZGF0YS9waGV0LWlvJyApO1xyXG4gIGF3YWl0IGdpdEFkZCggJ3BlcmVubmlhbCcsICdkYXRhL3BoZXQtaW8tYXBpLXN0YWJsZScgKTtcclxuXHJcbiAgY29uc3QgaGFzQ2hhbmdlcyA9ICFhd2FpdCBnaXRJc0NsZWFuKCAncGVyZW5uaWFsJyApO1xyXG4gIGlmICggaGFzQ2hhbmdlcyApIHtcclxuICAgIHdpbnN0b24uaW5mbyggJ0NoYW5nZXMgdG8gZGF0YSBmaWxlcyBkZXRlY3RlZCwgd2lsbCBwdXNoJyApO1xyXG4gICAgYXdhaXQgZ2l0Q29tbWl0KCAncGVyZW5uaWFsJywgJ0F1dG9tYXRlZCB1cGRhdGUgb2YgcGVyZW5uaWFsIGRhdGEgZmlsZXMnICk7XHJcbiAgICBhd2FpdCBnaXRQdXNoKCAncGVyZW5uaWFsJywgJ21haW4nICk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgd2luc3Rvbi5pbmZvKCAnTm8gY2hhbmdlcyBkZXRlY3RlZCcgKTtcclxuICB9XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsY0FBYyxHQUFHQyxPQUFPLENBQUUsMEJBQTJCLENBQUM7QUFDNUQsTUFBTUMsU0FBUyxHQUFHRCxPQUFPLENBQUUscUJBQXNCLENBQUM7QUFDbEQsTUFBTUUsTUFBTSxHQUFHRixPQUFPLENBQUUsa0JBQW1CLENBQUM7QUFDNUMsTUFBTUcsU0FBUyxHQUFHSCxPQUFPLENBQUUscUJBQXNCLENBQUM7QUFDbEQsTUFBTUksVUFBVSxHQUFHSixPQUFPLENBQUUsc0JBQXVCLENBQUM7QUFDcEQsTUFBTUssT0FBTyxHQUFHTCxPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDOUMsTUFBTU0sTUFBTSxHQUFHTixPQUFPLENBQUUsUUFBUyxDQUFDO0FBQ2xDLE1BQU1PLEVBQUUsR0FBR1AsT0FBTyxDQUFFLElBQUssQ0FBQztBQUMxQixNQUFNUSxLQUFLLEdBQUdSLE9BQU8sQ0FBRSxPQUFRLENBQUM7QUFDaEMsTUFBTVMsRUFBRSxHQUFHVCxPQUFPLENBQUUsSUFBSyxDQUFDO0FBQzFCLE1BQU1VLE9BQU8sR0FBR1YsT0FBTyxDQUFFLFNBQVUsQ0FBQzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQVcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsa0JBQWlCO0VBQ2hDLElBQUssT0FBTVgsU0FBUyxDQUFFLFdBQVksQ0FBQyxNQUFLLE1BQU0sSUFBSSxFQUFDLE1BQU1HLFVBQVUsQ0FBRSxXQUFZLENBQUMsR0FBRztJQUNuRkksS0FBSyxDQUFDSyxJQUFJLENBQUNDLEtBQUssQ0FBRSxtRkFBb0YsQ0FBQztFQUN6RztFQUVBLE1BQU1DLFdBQVcsR0FBR2hCLGNBQWMsQ0FBQyxDQUFDO0VBRXBDLFNBQVNpQixTQUFTQSxDQUFFQyxJQUFJLEVBQUVDLGFBQWEsRUFBRztJQUN4QyxNQUFNQyxLQUFLLEdBQUdKLFdBQVcsQ0FBQ0ssTUFBTSxDQUFFQyxJQUFJLElBQUk7TUFDeEM7TUFDQWYsTUFBTSxDQUFFRSxLQUFLLENBQUNjLElBQUksQ0FBQ0MsTUFBTSxDQUFHLE1BQUtGLElBQUssRUFBRSxDQUFFLENBQUM7TUFFM0MsSUFBSUcsYUFBYTtNQUNqQixJQUFJO1FBQ0ZBLGFBQWEsR0FBR0MsSUFBSSxDQUFDQyxLQUFLLENBQUVuQixFQUFFLENBQUNvQixZQUFZLENBQUcsTUFBS04sSUFBSyxlQUFjLEVBQUUsTUFBTyxDQUFFLENBQUM7TUFDcEYsQ0FBQyxDQUNELE9BQU9PLENBQUMsRUFBRztRQUNULE9BQU8sS0FBSztNQUNkO01BQ0EsT0FBT0osYUFBYSxDQUFDSyxJQUFJLElBQUlYLGFBQWEsQ0FBRU0sYUFBYSxDQUFDSyxJQUFLLENBQUM7SUFDbEUsQ0FBRSxDQUFDO0lBRUhyQixLQUFLLENBQUNzQixHQUFHLENBQUNDLE9BQU8sQ0FBRyxtQkFBa0JkLElBQUssRUFBRSxDQUFDO0lBQzlDVixFQUFFLENBQUN5QixhQUFhLENBQUcsUUFBT2YsSUFBSyxFQUFDLEVBQUVFLEtBQUssQ0FBQ2MsSUFBSSxDQUFFeEIsRUFBRSxDQUFDeUIsR0FBSSxDQUFDLEdBQUd6QixFQUFFLENBQUN5QixHQUFJLENBQUM7RUFDbkU7RUFFQWxCLFNBQVMsQ0FBRSx5QkFBeUIsRUFBRWEsSUFBSSxJQUFJQSxJQUFJLENBQUNNLFdBQVcsSUFBSU4sSUFBSSxDQUFDTSxXQUFXLENBQUNDLDhCQUErQixDQUFDO0VBQ25IcEIsU0FBUyxDQUFFLFNBQVMsRUFBRWEsSUFBSSxJQUFJQSxJQUFJLENBQUNNLFdBQVcsSUFBSU4sSUFBSSxDQUFDTSxXQUFXLENBQUNFLGVBQWdCLENBQUM7RUFDcEZyQixTQUFTLENBQUUsa0JBQWtCLEVBQUVhLElBQUksSUFBSUEsSUFBSSxDQUFDUyxRQUFTLENBQUM7RUFDdER0QixTQUFTLENBQUUsYUFBYSxFQUFFYSxJQUFJLElBQUlBLElBQUksQ0FBQ1UsVUFBVyxDQUFDO0VBQ25EdkIsU0FBUyxDQUFFLFlBQVksRUFBRWEsSUFBSSxJQUFJQSxJQUFJLENBQUNXLGtCQUFtQixDQUFDO0VBQzFEeEIsU0FBUyxDQUFFLFNBQVMsRUFBRWEsSUFBSSxJQUFJQSxJQUFJLENBQUNTLFFBQVEsSUFBSVQsSUFBSSxDQUFDWSxlQUFlLElBQUlaLElBQUksQ0FBQ1ksZUFBZSxDQUFDQyxRQUFRLENBQUUsU0FBVSxDQUFFLENBQUM7RUFDbkgxQixTQUFTLENBQUUsb0JBQW9CLEVBQUVhLElBQUksSUFBSTtJQUN2QyxPQUFPQSxJQUFJLENBQUNTLFFBQVEsSUFBSVQsSUFBSSxDQUFDWSxlQUFlLElBQUlaLElBQUksQ0FBQ1ksZUFBZSxDQUFDQyxRQUFRLENBQUUsU0FBVSxDQUFDLElBQ25GYixJQUFJLENBQUUsU0FBUyxDQUFFLElBQUlBLElBQUksQ0FBRSxTQUFTLENBQUUsQ0FBQ2MseUJBQXlCO0VBQ3pFLENBQUUsQ0FBQztFQUVILE1BQU16QyxNQUFNLENBQUUsV0FBVyxFQUFFLDhCQUErQixDQUFDO0VBQzNELE1BQU1BLE1BQU0sQ0FBRSxXQUFXLEVBQUUsY0FBZSxDQUFDO0VBQzNDLE1BQU1BLE1BQU0sQ0FBRSxXQUFXLEVBQUUsdUJBQXdCLENBQUM7RUFDcEQsTUFBTUEsTUFBTSxDQUFFLFdBQVcsRUFBRSxrQkFBbUIsQ0FBQztFQUMvQyxNQUFNQSxNQUFNLENBQUUsV0FBVyxFQUFFLGlCQUFrQixDQUFDO0VBQzlDLE1BQU1BLE1BQU0sQ0FBRSxXQUFXLEVBQUUsY0FBZSxDQUFDO0VBQzNDLE1BQU1BLE1BQU0sQ0FBRSxXQUFXLEVBQUUseUJBQTBCLENBQUM7RUFFdEQsTUFBTTBDLFVBQVUsR0FBRyxFQUFDLE1BQU14QyxVQUFVLENBQUUsV0FBWSxDQUFDO0VBQ25ELElBQUt3QyxVQUFVLEVBQUc7SUFDaEJsQyxPQUFPLENBQUNtQyxJQUFJLENBQUUsMkNBQTRDLENBQUM7SUFDM0QsTUFBTTFDLFNBQVMsQ0FBRSxXQUFXLEVBQUUsMENBQTJDLENBQUM7SUFDMUUsTUFBTUUsT0FBTyxDQUFFLFdBQVcsRUFBRSxNQUFPLENBQUM7RUFDdEMsQ0FBQyxNQUNJO0lBQ0hLLE9BQU8sQ0FBQ21DLElBQUksQ0FBRSxxQkFBc0IsQ0FBQztFQUN2QztBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=