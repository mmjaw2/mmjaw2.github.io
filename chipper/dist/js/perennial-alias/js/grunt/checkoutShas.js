// Copyright 2002-2015, University of Colorado Boulder

/**
 * This grunt task checks out the shas for a project, as specified in a dependencies.json file in its top level.
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const assert = require('assert');
const child_process = require('child_process');
const grunt = require('grunt');

/**
 * NOTE: This is somewhat vestigial, kept to ensure some build-server behavior for now.
 * TODO(chipper1.0) https://github.com/phetsims/perennial/issues/169 remove this when possible (when all chipper 1.0 usage is not required, since all sims are chipper 2.0+)
 *
 * @param {string} repositoryName name field from package.json
 * @param {boolean} toMain whether main should be used, or dependencies.json shas should be used
 * @param {boolean} buildServer whether this build is initiated by the build server
 */
module.exports = function (repositoryName, toMain, buildServer) {
  const dependencies = grunt.file.readJSON(buildServer ? '../perennial/js/build-server/tmp/dependencies.json' : `../${repositoryName}/dependencies.json`);
  const done = grunt.task.current.async();
  let numToCheckOut = 0;
  let numCheckedOut = 0;
  for (const property in dependencies) {
    if (property !== 'comment' && property !== repositoryName) {
      numToCheckOut++;
    }
  }
  for (const property of dependencies) {
    if (property !== 'comment' && property !== repositoryName && dependencies.hasOwnProperty(property)) {
      assert(typeof dependencies[property].branch !== 'undefined' && typeof dependencies[property].sha !== 'undefined');
      grunt.log.writeln(`Checking out dependency ${property}: ${dependencies[property].branch}@${dependencies[property].sha}`);

      //To execute something from a different directory:
      //cp.exec('foocommand', { cwd: 'path/to/dir/' }, callback);
      //http://stackoverflow.com/questions/14026967/calling-child-process-exec-in-node-as-though-it-was-executed-in-a-specific-folde
      const command = `git checkout ${toMain ? 'main' : dependencies[property].sha}`;
      child_process.exec(command, {
        cwd: `../${property}`
      }, (error1, stdout1, stderr1) => {
        assert(!error1, `error in ${command} for repo ${property}`);
        grunt.log.writeln('Finished checkout.');
        grunt.log.writeln(stdout1);
        grunt.log.writeln(stderr1);
        numCheckedOut = numCheckedOut + 1;
        if (numToCheckOut === numCheckedOut) {
          done();
        }
      });
    }
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiY2hpbGRfcHJvY2VzcyIsImdydW50IiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcG9zaXRvcnlOYW1lIiwidG9NYWluIiwiYnVpbGRTZXJ2ZXIiLCJkZXBlbmRlbmNpZXMiLCJmaWxlIiwicmVhZEpTT04iLCJkb25lIiwidGFzayIsImN1cnJlbnQiLCJhc3luYyIsIm51bVRvQ2hlY2tPdXQiLCJudW1DaGVja2VkT3V0IiwicHJvcGVydHkiLCJoYXNPd25Qcm9wZXJ0eSIsImJyYW5jaCIsInNoYSIsImxvZyIsIndyaXRlbG4iLCJjb21tYW5kIiwiZXhlYyIsImN3ZCIsImVycm9yMSIsInN0ZG91dDEiLCJzdGRlcnIxIl0sInNvdXJjZXMiOlsiY2hlY2tvdXRTaGFzLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDAyLTIwMTUsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIFRoaXMgZ3J1bnQgdGFzayBjaGVja3Mgb3V0IHRoZSBzaGFzIGZvciBhIHByb2plY3QsIGFzIHNwZWNpZmllZCBpbiBhIGRlcGVuZGVuY2llcy5qc29uIGZpbGUgaW4gaXRzIHRvcCBsZXZlbC5cclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoICdhc3NlcnQnICk7XHJcbmNvbnN0IGNoaWxkX3Byb2Nlc3MgPSByZXF1aXJlKCAnY2hpbGRfcHJvY2VzcycgKTtcclxuY29uc3QgZ3J1bnQgPSByZXF1aXJlKCAnZ3J1bnQnICk7XHJcblxyXG4vKipcclxuICogTk9URTogVGhpcyBpcyBzb21ld2hhdCB2ZXN0aWdpYWwsIGtlcHQgdG8gZW5zdXJlIHNvbWUgYnVpbGQtc2VydmVyIGJlaGF2aW9yIGZvciBub3cuXHJcbiAqIFRPRE8oY2hpcHBlcjEuMCkgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BlcmVubmlhbC9pc3N1ZXMvMTY5IHJlbW92ZSB0aGlzIHdoZW4gcG9zc2libGUgKHdoZW4gYWxsIGNoaXBwZXIgMS4wIHVzYWdlIGlzIG5vdCByZXF1aXJlZCwgc2luY2UgYWxsIHNpbXMgYXJlIGNoaXBwZXIgMi4wKylcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcG9zaXRvcnlOYW1lIG5hbWUgZmllbGQgZnJvbSBwYWNrYWdlLmpzb25cclxuICogQHBhcmFtIHtib29sZWFufSB0b01haW4gd2hldGhlciBtYWluIHNob3VsZCBiZSB1c2VkLCBvciBkZXBlbmRlbmNpZXMuanNvbiBzaGFzIHNob3VsZCBiZSB1c2VkXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gYnVpbGRTZXJ2ZXIgd2hldGhlciB0aGlzIGJ1aWxkIGlzIGluaXRpYXRlZCBieSB0aGUgYnVpbGQgc2VydmVyXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGZ1bmN0aW9uKCByZXBvc2l0b3J5TmFtZSwgdG9NYWluLCBidWlsZFNlcnZlciApIHtcclxuXHJcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gZ3J1bnQuZmlsZS5yZWFkSlNPTiggKCBidWlsZFNlcnZlciApID8gJy4uL3BlcmVubmlhbC9qcy9idWlsZC1zZXJ2ZXIvdG1wL2RlcGVuZGVuY2llcy5qc29uJyA6IGAuLi8ke3JlcG9zaXRvcnlOYW1lfS9kZXBlbmRlbmNpZXMuanNvbmAgKTtcclxuICBjb25zdCBkb25lID0gZ3J1bnQudGFzay5jdXJyZW50LmFzeW5jKCk7XHJcbiAgbGV0IG51bVRvQ2hlY2tPdXQgPSAwO1xyXG4gIGxldCBudW1DaGVja2VkT3V0ID0gMDtcclxuICBmb3IgKCBjb25zdCBwcm9wZXJ0eSBpbiBkZXBlbmRlbmNpZXMgKSB7XHJcbiAgICBpZiAoIHByb3BlcnR5ICE9PSAnY29tbWVudCcgJiYgcHJvcGVydHkgIT09IHJlcG9zaXRvcnlOYW1lICkge1xyXG4gICAgICBudW1Ub0NoZWNrT3V0Kys7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBmb3IgKCBjb25zdCBwcm9wZXJ0eSBvZiBkZXBlbmRlbmNpZXMgKSB7XHJcbiAgICBpZiAoIHByb3BlcnR5ICE9PSAnY29tbWVudCcgJiYgcHJvcGVydHkgIT09IHJlcG9zaXRvcnlOYW1lICYmIGRlcGVuZGVuY2llcy5oYXNPd25Qcm9wZXJ0eSggcHJvcGVydHkgKSApIHtcclxuICAgICAgYXNzZXJ0KCB0eXBlb2YgZGVwZW5kZW5jaWVzWyBwcm9wZXJ0eSBdLmJyYW5jaCAhPT0gJ3VuZGVmaW5lZCcgJiYgdHlwZW9mIGRlcGVuZGVuY2llc1sgcHJvcGVydHkgXS5zaGEgIT09ICd1bmRlZmluZWQnICk7XHJcblxyXG4gICAgICBncnVudC5sb2cud3JpdGVsbiggYENoZWNraW5nIG91dCBkZXBlbmRlbmN5ICR7cHJvcGVydHl9OiAke2RlcGVuZGVuY2llc1sgcHJvcGVydHkgXS5icmFuY2h9QCR7ZGVwZW5kZW5jaWVzWyBwcm9wZXJ0eSBdLnNoYX1gICk7XHJcblxyXG4gICAgICAvL1RvIGV4ZWN1dGUgc29tZXRoaW5nIGZyb20gYSBkaWZmZXJlbnQgZGlyZWN0b3J5OlxyXG4gICAgICAvL2NwLmV4ZWMoJ2Zvb2NvbW1hbmQnLCB7IGN3ZDogJ3BhdGgvdG8vZGlyLycgfSwgY2FsbGJhY2spO1xyXG4gICAgICAvL2h0dHA6Ly9zdGFja292ZXJmbG93LmNvbS9xdWVzdGlvbnMvMTQwMjY5NjcvY2FsbGluZy1jaGlsZC1wcm9jZXNzLWV4ZWMtaW4tbm9kZS1hcy10aG91Z2gtaXQtd2FzLWV4ZWN1dGVkLWluLWEtc3BlY2lmaWMtZm9sZGVcclxuICAgICAgY29uc3QgY29tbWFuZCA9IGBnaXQgY2hlY2tvdXQgJHt0b01haW4gPyAnbWFpbicgOiBkZXBlbmRlbmNpZXNbIHByb3BlcnR5IF0uc2hhfWA7XHJcbiAgICAgIGNoaWxkX3Byb2Nlc3MuZXhlYyggY29tbWFuZCwgeyBjd2Q6IGAuLi8ke3Byb3BlcnR5fWAgfSwgKCBlcnJvcjEsIHN0ZG91dDEsIHN0ZGVycjEgKSA9PiB7XHJcbiAgICAgICAgYXNzZXJ0KCAhZXJyb3IxLCBgZXJyb3IgaW4gJHtjb21tYW5kfSBmb3IgcmVwbyAke3Byb3BlcnR5fWAgKTtcclxuICAgICAgICBncnVudC5sb2cud3JpdGVsbiggJ0ZpbmlzaGVkIGNoZWNrb3V0LicgKTtcclxuICAgICAgICBncnVudC5sb2cud3JpdGVsbiggc3Rkb3V0MSApO1xyXG4gICAgICAgIGdydW50LmxvZy53cml0ZWxuKCBzdGRlcnIxICk7XHJcbiAgICAgICAgbnVtQ2hlY2tlZE91dCA9IG51bUNoZWNrZWRPdXQgKyAxO1xyXG4gICAgICAgIGlmICggbnVtVG9DaGVja091dCA9PT0gbnVtQ2hlY2tlZE91dCApIHtcclxuICAgICAgICAgIGRvbmUoKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gKTtcclxuICAgIH1cclxuICB9XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxNQUFNLEdBQUdDLE9BQU8sQ0FBRSxRQUFTLENBQUM7QUFDbEMsTUFBTUMsYUFBYSxHQUFHRCxPQUFPLENBQUUsZUFBZ0IsQ0FBQztBQUNoRCxNQUFNRSxLQUFLLEdBQUdGLE9BQU8sQ0FBRSxPQUFRLENBQUM7O0FBRWhDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUcsTUFBTSxDQUFDQyxPQUFPLEdBQUcsVUFBVUMsY0FBYyxFQUFFQyxNQUFNLEVBQUVDLFdBQVcsRUFBRztFQUUvRCxNQUFNQyxZQUFZLEdBQUdOLEtBQUssQ0FBQ08sSUFBSSxDQUFDQyxRQUFRLENBQUlILFdBQVcsR0FBSyxvREFBb0QsR0FBSSxNQUFLRixjQUFlLG9CQUFvQixDQUFDO0VBQzdKLE1BQU1NLElBQUksR0FBR1QsS0FBSyxDQUFDVSxJQUFJLENBQUNDLE9BQU8sQ0FBQ0MsS0FBSyxDQUFDLENBQUM7RUFDdkMsSUFBSUMsYUFBYSxHQUFHLENBQUM7RUFDckIsSUFBSUMsYUFBYSxHQUFHLENBQUM7RUFDckIsS0FBTSxNQUFNQyxRQUFRLElBQUlULFlBQVksRUFBRztJQUNyQyxJQUFLUyxRQUFRLEtBQUssU0FBUyxJQUFJQSxRQUFRLEtBQUtaLGNBQWMsRUFBRztNQUMzRFUsYUFBYSxFQUFFO0lBQ2pCO0VBQ0Y7RUFFQSxLQUFNLE1BQU1FLFFBQVEsSUFBSVQsWUFBWSxFQUFHO0lBQ3JDLElBQUtTLFFBQVEsS0FBSyxTQUFTLElBQUlBLFFBQVEsS0FBS1osY0FBYyxJQUFJRyxZQUFZLENBQUNVLGNBQWMsQ0FBRUQsUUFBUyxDQUFDLEVBQUc7TUFDdEdsQixNQUFNLENBQUUsT0FBT1MsWUFBWSxDQUFFUyxRQUFRLENBQUUsQ0FBQ0UsTUFBTSxLQUFLLFdBQVcsSUFBSSxPQUFPWCxZQUFZLENBQUVTLFFBQVEsQ0FBRSxDQUFDRyxHQUFHLEtBQUssV0FBWSxDQUFDO01BRXZIbEIsS0FBSyxDQUFDbUIsR0FBRyxDQUFDQyxPQUFPLENBQUcsMkJBQTBCTCxRQUFTLEtBQUlULFlBQVksQ0FBRVMsUUFBUSxDQUFFLENBQUNFLE1BQU8sSUFBR1gsWUFBWSxDQUFFUyxRQUFRLENBQUUsQ0FBQ0csR0FBSSxFQUFFLENBQUM7O01BRTlIO01BQ0E7TUFDQTtNQUNBLE1BQU1HLE9BQU8sR0FBSSxnQkFBZWpCLE1BQU0sR0FBRyxNQUFNLEdBQUdFLFlBQVksQ0FBRVMsUUFBUSxDQUFFLENBQUNHLEdBQUksRUFBQztNQUNoRm5CLGFBQWEsQ0FBQ3VCLElBQUksQ0FBRUQsT0FBTyxFQUFFO1FBQUVFLEdBQUcsRUFBRyxNQUFLUixRQUFTO01BQUUsQ0FBQyxFQUFFLENBQUVTLE1BQU0sRUFBRUMsT0FBTyxFQUFFQyxPQUFPLEtBQU07UUFDdEY3QixNQUFNLENBQUUsQ0FBQzJCLE1BQU0sRUFBRyxZQUFXSCxPQUFRLGFBQVlOLFFBQVMsRUFBRSxDQUFDO1FBQzdEZixLQUFLLENBQUNtQixHQUFHLENBQUNDLE9BQU8sQ0FBRSxvQkFBcUIsQ0FBQztRQUN6Q3BCLEtBQUssQ0FBQ21CLEdBQUcsQ0FBQ0MsT0FBTyxDQUFFSyxPQUFRLENBQUM7UUFDNUJ6QixLQUFLLENBQUNtQixHQUFHLENBQUNDLE9BQU8sQ0FBRU0sT0FBUSxDQUFDO1FBQzVCWixhQUFhLEdBQUdBLGFBQWEsR0FBRyxDQUFDO1FBQ2pDLElBQUtELGFBQWEsS0FBS0MsYUFBYSxFQUFHO1VBQ3JDTCxJQUFJLENBQUMsQ0FBQztRQUNSO01BQ0YsQ0FBRSxDQUFDO0lBQ0w7RUFDRjtBQUNGLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=