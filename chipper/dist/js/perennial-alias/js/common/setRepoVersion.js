// Copyright 2017, University of Colorado Boulder

/**
 * Sets the version of the current checked-in repo's package.json, creating a commit with the change
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const gitAdd = require('./gitAdd');
const gitCommit = require('./gitCommit');
const gitIsClean = require('./gitIsClean');
const loadJSON = require('./loadJSON');
const writeJSON = require('./writeJSON');
const winston = require('../../../../../../perennial-alias/node_modules/winston');

/**
 * Sets the version for a current checked-in repo, creating a commit with the change
 * @public
 *
 * @param {string} repo - The repository name
 * @param {SimVersion} version
 * @param {string} [message] - Optional. If provided, appended at the end
 * @returns {Promise}
 */
module.exports = async function (repo, version, message) {
  winston.info(`Setting version from package.json for ${repo} to ${version.toString()}`);
  const packageFile = `../${repo}/package.json`;
  const isClean = await gitIsClean(repo);
  if (!isClean) {
    throw new Error(`Unclean status in ${repo}, cannot increment version`);
  }
  const packageObject = await loadJSON(packageFile);
  packageObject.version = version.toString();
  await writeJSON(packageFile, packageObject);
  await gitAdd(repo, 'package.json');
  await gitCommit(repo, `Bumping version to ${version.toString()}${message ? `, ${message}` : ''}`);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJnaXRBZGQiLCJyZXF1aXJlIiwiZ2l0Q29tbWl0IiwiZ2l0SXNDbGVhbiIsImxvYWRKU09OIiwid3JpdGVKU09OIiwid2luc3RvbiIsIm1vZHVsZSIsImV4cG9ydHMiLCJyZXBvIiwidmVyc2lvbiIsIm1lc3NhZ2UiLCJpbmZvIiwidG9TdHJpbmciLCJwYWNrYWdlRmlsZSIsImlzQ2xlYW4iLCJFcnJvciIsInBhY2thZ2VPYmplY3QiXSwic291cmNlcyI6WyJzZXRSZXBvVmVyc2lvbi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogU2V0cyB0aGUgdmVyc2lvbiBvZiB0aGUgY3VycmVudCBjaGVja2VkLWluIHJlcG8ncyBwYWNrYWdlLmpzb24sIGNyZWF0aW5nIGEgY29tbWl0IHdpdGggdGhlIGNoYW5nZVxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuY29uc3QgZ2l0QWRkID0gcmVxdWlyZSggJy4vZ2l0QWRkJyApO1xyXG5jb25zdCBnaXRDb21taXQgPSByZXF1aXJlKCAnLi9naXRDb21taXQnICk7XHJcbmNvbnN0IGdpdElzQ2xlYW4gPSByZXF1aXJlKCAnLi9naXRJc0NsZWFuJyApO1xyXG5jb25zdCBsb2FkSlNPTiA9IHJlcXVpcmUoICcuL2xvYWRKU09OJyApO1xyXG5jb25zdCB3cml0ZUpTT04gPSByZXF1aXJlKCAnLi93cml0ZUpTT04nICk7XHJcbmNvbnN0IHdpbnN0b24gPSByZXF1aXJlKCAnd2luc3RvbicgKTtcclxuXHJcbi8qKlxyXG4gKiBTZXRzIHRoZSB2ZXJzaW9uIGZvciBhIGN1cnJlbnQgY2hlY2tlZC1pbiByZXBvLCBjcmVhdGluZyBhIGNvbW1pdCB3aXRoIHRoZSBjaGFuZ2VcclxuICogQHB1YmxpY1xyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gcmVwbyAtIFRoZSByZXBvc2l0b3J5IG5hbWVcclxuICogQHBhcmFtIHtTaW1WZXJzaW9ufSB2ZXJzaW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBbbWVzc2FnZV0gLSBPcHRpb25hbC4gSWYgcHJvdmlkZWQsIGFwcGVuZGVkIGF0IHRoZSBlbmRcclxuICogQHJldHVybnMge1Byb21pc2V9XHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uKCByZXBvLCB2ZXJzaW9uLCBtZXNzYWdlICkge1xyXG4gIHdpbnN0b24uaW5mbyggYFNldHRpbmcgdmVyc2lvbiBmcm9tIHBhY2thZ2UuanNvbiBmb3IgJHtyZXBvfSB0byAke3ZlcnNpb24udG9TdHJpbmcoKX1gICk7XHJcblxyXG4gIGNvbnN0IHBhY2thZ2VGaWxlID0gYC4uLyR7cmVwb30vcGFja2FnZS5qc29uYDtcclxuXHJcbiAgY29uc3QgaXNDbGVhbiA9IGF3YWl0IGdpdElzQ2xlYW4oIHJlcG8gKTtcclxuICBpZiAoICFpc0NsZWFuICkge1xyXG4gICAgdGhyb3cgbmV3IEVycm9yKCBgVW5jbGVhbiBzdGF0dXMgaW4gJHtyZXBvfSwgY2Fubm90IGluY3JlbWVudCB2ZXJzaW9uYCApO1xyXG4gIH1cclxuXHJcbiAgY29uc3QgcGFja2FnZU9iamVjdCA9IGF3YWl0IGxvYWRKU09OKCBwYWNrYWdlRmlsZSApO1xyXG4gIHBhY2thZ2VPYmplY3QudmVyc2lvbiA9IHZlcnNpb24udG9TdHJpbmcoKTtcclxuXHJcbiAgYXdhaXQgd3JpdGVKU09OKCBwYWNrYWdlRmlsZSwgcGFja2FnZU9iamVjdCApO1xyXG4gIGF3YWl0IGdpdEFkZCggcmVwbywgJ3BhY2thZ2UuanNvbicgKTtcclxuICBhd2FpdCBnaXRDb21taXQoIHJlcG8sIGBCdW1waW5nIHZlcnNpb24gdG8gJHt2ZXJzaW9uLnRvU3RyaW5nKCl9JHttZXNzYWdlID8gYCwgJHttZXNzYWdlfWAgOiAnJ31gICk7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFFLFVBQVcsQ0FBQztBQUNwQyxNQUFNQyxTQUFTLEdBQUdELE9BQU8sQ0FBRSxhQUFjLENBQUM7QUFDMUMsTUFBTUUsVUFBVSxHQUFHRixPQUFPLENBQUUsY0FBZSxDQUFDO0FBQzVDLE1BQU1HLFFBQVEsR0FBR0gsT0FBTyxDQUFFLFlBQWEsQ0FBQztBQUN4QyxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBRSxhQUFjLENBQUM7QUFDMUMsTUFBTUssT0FBTyxHQUFHTCxPQUFPLENBQUUsU0FBVSxDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQU0sTUFBTSxDQUFDQyxPQUFPLEdBQUcsZ0JBQWdCQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsT0FBTyxFQUFHO0VBQ3hETCxPQUFPLENBQUNNLElBQUksQ0FBRyx5Q0FBd0NILElBQUssT0FBTUMsT0FBTyxDQUFDRyxRQUFRLENBQUMsQ0FBRSxFQUFFLENBQUM7RUFFeEYsTUFBTUMsV0FBVyxHQUFJLE1BQUtMLElBQUssZUFBYztFQUU3QyxNQUFNTSxPQUFPLEdBQUcsTUFBTVosVUFBVSxDQUFFTSxJQUFLLENBQUM7RUFDeEMsSUFBSyxDQUFDTSxPQUFPLEVBQUc7SUFDZCxNQUFNLElBQUlDLEtBQUssQ0FBRyxxQkFBb0JQLElBQUssNEJBQTRCLENBQUM7RUFDMUU7RUFFQSxNQUFNUSxhQUFhLEdBQUcsTUFBTWIsUUFBUSxDQUFFVSxXQUFZLENBQUM7RUFDbkRHLGFBQWEsQ0FBQ1AsT0FBTyxHQUFHQSxPQUFPLENBQUNHLFFBQVEsQ0FBQyxDQUFDO0VBRTFDLE1BQU1SLFNBQVMsQ0FBRVMsV0FBVyxFQUFFRyxhQUFjLENBQUM7RUFDN0MsTUFBTWpCLE1BQU0sQ0FBRVMsSUFBSSxFQUFFLGNBQWUsQ0FBQztFQUNwQyxNQUFNUCxTQUFTLENBQUVPLElBQUksRUFBRyxzQkFBcUJDLE9BQU8sQ0FBQ0csUUFBUSxDQUFDLENBQUUsR0FBRUYsT0FBTyxHQUFJLEtBQUlBLE9BQVEsRUFBQyxHQUFHLEVBQUcsRUFBRSxDQUFDO0FBQ3JHLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=