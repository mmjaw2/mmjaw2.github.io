// Copyright 2017, University of Colorado Boulder

/**
 * Builds a repository.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const ChipperVersion = require('./ChipperVersion');
const execute = require('./execute');
const getBuildArguments = require('./getBuildArguments');
const gruntCommand = require('./gruntCommand');
const fs = require('fs');
const winston = require('../../../../../../perennial-alias/node_modules/winston');

/**
 * Builds a repository.
 * @public
 *
 * @param {string} repo
 * @param {Object} [options]
 * @returns {Promise.<string>} - The stdout of the build
 */
module.exports = async function build(repo, options) {
  winston.info(`building ${repo}`);
  const chipperVersion = ChipperVersion.getFromRepository();
  const args = getBuildArguments(chipperVersion, options);
  const result = await execute(gruntCommand, args, `../${repo}`);
  const packageObject = JSON.parse(fs.readFileSync(`../${repo}/package.json`, 'utf8'));
  const includesPhetio = packageObject.phet && packageObject.phet.supportedBrands && packageObject.phet.supportedBrands.includes('phet-io');

  // Examine output to see if getDependencies (in chipper) notices any missing phet-io things.
  // Fail out if so. Detects that specific error message.
  if (includesPhetio && result.includes('WARNING404')) {
    throw new Error('phet-io dependencies missing');
  }
  return result;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDaGlwcGVyVmVyc2lvbiIsInJlcXVpcmUiLCJleGVjdXRlIiwiZ2V0QnVpbGRBcmd1bWVudHMiLCJncnVudENvbW1hbmQiLCJmcyIsIndpbnN0b24iLCJtb2R1bGUiLCJleHBvcnRzIiwiYnVpbGQiLCJyZXBvIiwib3B0aW9ucyIsImluZm8iLCJjaGlwcGVyVmVyc2lvbiIsImdldEZyb21SZXBvc2l0b3J5IiwiYXJncyIsInJlc3VsdCIsInBhY2thZ2VPYmplY3QiLCJKU09OIiwicGFyc2UiLCJyZWFkRmlsZVN5bmMiLCJpbmNsdWRlc1BoZXRpbyIsInBoZXQiLCJzdXBwb3J0ZWRCcmFuZHMiLCJpbmNsdWRlcyIsIkVycm9yIl0sInNvdXJjZXMiOlsiYnVpbGQuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTcsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEJ1aWxkcyBhIHJlcG9zaXRvcnkuXHJcbiAqXHJcbiAqIEBhdXRob3IgSm9uYXRoYW4gT2xzb24gPGpvbmF0aGFuLm9sc29uQGNvbG9yYWRvLmVkdT5cclxuICovXHJcblxyXG5jb25zdCBDaGlwcGVyVmVyc2lvbiA9IHJlcXVpcmUoICcuL0NoaXBwZXJWZXJzaW9uJyApO1xyXG5jb25zdCBleGVjdXRlID0gcmVxdWlyZSggJy4vZXhlY3V0ZScgKTtcclxuY29uc3QgZ2V0QnVpbGRBcmd1bWVudHMgPSByZXF1aXJlKCAnLi9nZXRCdWlsZEFyZ3VtZW50cycgKTtcclxuY29uc3QgZ3J1bnRDb21tYW5kID0gcmVxdWlyZSggJy4vZ3J1bnRDb21tYW5kJyApO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoICd3aW5zdG9uJyApO1xyXG5cclxuLyoqXHJcbiAqIEJ1aWxkcyBhIHJlcG9zaXRvcnkuXHJcbiAqIEBwdWJsaWNcclxuICpcclxuICogQHBhcmFtIHtzdHJpbmd9IHJlcG9cclxuICogQHBhcmFtIHtPYmplY3R9IFtvcHRpb25zXVxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48c3RyaW5nPn0gLSBUaGUgc3Rkb3V0IG9mIHRoZSBidWlsZFxyXG4gKi9cclxubW9kdWxlLmV4cG9ydHMgPSBhc3luYyBmdW5jdGlvbiBidWlsZCggcmVwbywgb3B0aW9ucyApIHtcclxuICB3aW5zdG9uLmluZm8oIGBidWlsZGluZyAke3JlcG99YCApO1xyXG5cclxuICBjb25zdCBjaGlwcGVyVmVyc2lvbiA9IENoaXBwZXJWZXJzaW9uLmdldEZyb21SZXBvc2l0b3J5KCk7XHJcbiAgY29uc3QgYXJncyA9IGdldEJ1aWxkQXJndW1lbnRzKCBjaGlwcGVyVmVyc2lvbiwgb3B0aW9ucyApO1xyXG5cclxuICBjb25zdCByZXN1bHQgPSBhd2FpdCBleGVjdXRlKCBncnVudENvbW1hbmQsIGFyZ3MsIGAuLi8ke3JlcG99YCApO1xyXG5cclxuICBjb25zdCBwYWNrYWdlT2JqZWN0ID0gSlNPTi5wYXJzZSggZnMucmVhZEZpbGVTeW5jKCBgLi4vJHtyZXBvfS9wYWNrYWdlLmpzb25gLCAndXRmOCcgKSApO1xyXG4gIGNvbnN0IGluY2x1ZGVzUGhldGlvID0gcGFja2FnZU9iamVjdC5waGV0ICYmIHBhY2thZ2VPYmplY3QucGhldC5zdXBwb3J0ZWRCcmFuZHMgJiYgcGFja2FnZU9iamVjdC5waGV0LnN1cHBvcnRlZEJyYW5kcy5pbmNsdWRlcyggJ3BoZXQtaW8nICk7XHJcblxyXG4gIC8vIEV4YW1pbmUgb3V0cHV0IHRvIHNlZSBpZiBnZXREZXBlbmRlbmNpZXMgKGluIGNoaXBwZXIpIG5vdGljZXMgYW55IG1pc3NpbmcgcGhldC1pbyB0aGluZ3MuXHJcbiAgLy8gRmFpbCBvdXQgaWYgc28uIERldGVjdHMgdGhhdCBzcGVjaWZpYyBlcnJvciBtZXNzYWdlLlxyXG4gIGlmICggaW5jbHVkZXNQaGV0aW8gJiYgcmVzdWx0LmluY2x1ZGVzKCAnV0FSTklORzQwNCcgKSApIHtcclxuICAgIHRocm93IG5ldyBFcnJvciggJ3BoZXQtaW8gZGVwZW5kZW5jaWVzIG1pc3NpbmcnICk7XHJcbiAgfVxyXG5cclxuICByZXR1cm4gcmVzdWx0O1xyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxjQUFjLEdBQUdDLE9BQU8sQ0FBRSxrQkFBbUIsQ0FBQztBQUNwRCxNQUFNQyxPQUFPLEdBQUdELE9BQU8sQ0FBRSxXQUFZLENBQUM7QUFDdEMsTUFBTUUsaUJBQWlCLEdBQUdGLE9BQU8sQ0FBRSxxQkFBc0IsQ0FBQztBQUMxRCxNQUFNRyxZQUFZLEdBQUdILE9BQU8sQ0FBRSxnQkFBaUIsQ0FBQztBQUNoRCxNQUFNSSxFQUFFLEdBQUdKLE9BQU8sQ0FBRSxJQUFLLENBQUM7QUFDMUIsTUFBTUssT0FBTyxHQUFHTCxPQUFPLENBQUUsU0FBVSxDQUFDOztBQUVwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FNLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLGVBQWVDLEtBQUtBLENBQUVDLElBQUksRUFBRUMsT0FBTyxFQUFHO0VBQ3JETCxPQUFPLENBQUNNLElBQUksQ0FBRyxZQUFXRixJQUFLLEVBQUUsQ0FBQztFQUVsQyxNQUFNRyxjQUFjLEdBQUdiLGNBQWMsQ0FBQ2MsaUJBQWlCLENBQUMsQ0FBQztFQUN6RCxNQUFNQyxJQUFJLEdBQUdaLGlCQUFpQixDQUFFVSxjQUFjLEVBQUVGLE9BQVEsQ0FBQztFQUV6RCxNQUFNSyxNQUFNLEdBQUcsTUFBTWQsT0FBTyxDQUFFRSxZQUFZLEVBQUVXLElBQUksRUFBRyxNQUFLTCxJQUFLLEVBQUUsQ0FBQztFQUVoRSxNQUFNTyxhQUFhLEdBQUdDLElBQUksQ0FBQ0MsS0FBSyxDQUFFZCxFQUFFLENBQUNlLFlBQVksQ0FBRyxNQUFLVixJQUFLLGVBQWMsRUFBRSxNQUFPLENBQUUsQ0FBQztFQUN4RixNQUFNVyxjQUFjLEdBQUdKLGFBQWEsQ0FBQ0ssSUFBSSxJQUFJTCxhQUFhLENBQUNLLElBQUksQ0FBQ0MsZUFBZSxJQUFJTixhQUFhLENBQUNLLElBQUksQ0FBQ0MsZUFBZSxDQUFDQyxRQUFRLENBQUUsU0FBVSxDQUFDOztFQUUzSTtFQUNBO0VBQ0EsSUFBS0gsY0FBYyxJQUFJTCxNQUFNLENBQUNRLFFBQVEsQ0FBRSxZQUFhLENBQUMsRUFBRztJQUN2RCxNQUFNLElBQUlDLEtBQUssQ0FBRSw4QkFBK0IsQ0FBQztFQUNuRDtFQUVBLE9BQU9ULE1BQU07QUFDZixDQUFDIiwiaWdub3JlTGlzdCI6W119