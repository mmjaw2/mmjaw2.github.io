// Copyright 2018, University of Colorado Boulder

/**
 * Checks out a snapshot of a repo (and its dependencies) for a given timestamp/branch.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const checkoutDependencies = require('./checkoutDependencies');
const getDependencies = require('./getDependencies');
const gitCheckout = require('./gitCheckout');
const gitFromTimestamp = require('./gitFromTimestamp');
const winston = require('../../../../../../perennial-alias/node_modules/winston');

/**
 * Checks out a snapshot of a repo (and its dependencies) for a given timestamp/branch.
 * @public
 *
 * @param {string} repo - The repository name
 * @param {string} timestamp
 * @param {boolean} includeNpmUpdate
 * @returns {Promise.<Array.<string>>} - Resolves with checkedOutRepos
 */
module.exports = async function (repo, timestamp, includeNpmUpdate) {
  winston.info(`checking out timestamp for ${repo} at ${timestamp}`);
  await gitCheckout(repo, await gitFromTimestamp(repo, 'main', timestamp));
  const dependencies = await getDependencies(repo);
  const dependencyNames = Object.keys(dependencies).filter(key => key !== 'comment' && key !== repo);
  const timestampDependencies = {};
  for (const dependency of dependencyNames) {
    timestampDependencies[dependency] = {
      sha: await gitFromTimestamp(dependency, 'main', timestamp)
    };
  }
  return checkoutDependencies(repo, timestampDependencies, includeNpmUpdate);
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjaGVja291dERlcGVuZGVuY2llcyIsInJlcXVpcmUiLCJnZXREZXBlbmRlbmNpZXMiLCJnaXRDaGVja291dCIsImdpdEZyb21UaW1lc3RhbXAiLCJ3aW5zdG9uIiwibW9kdWxlIiwiZXhwb3J0cyIsInJlcG8iLCJ0aW1lc3RhbXAiLCJpbmNsdWRlTnBtVXBkYXRlIiwiaW5mbyIsImRlcGVuZGVuY2llcyIsImRlcGVuZGVuY3lOYW1lcyIsIk9iamVjdCIsImtleXMiLCJmaWx0ZXIiLCJrZXkiLCJ0aW1lc3RhbXBEZXBlbmRlbmNpZXMiLCJkZXBlbmRlbmN5Iiwic2hhIl0sInNvdXJjZXMiOlsiY2hlY2tvdXRUaW1lc3RhbXAuanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTgsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBvdXQgYSBzbmFwc2hvdCBvZiBhIHJlcG8gKGFuZCBpdHMgZGVwZW5kZW5jaWVzKSBmb3IgYSBnaXZlbiB0aW1lc3RhbXAvYnJhbmNoLlxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuY29uc3QgY2hlY2tvdXREZXBlbmRlbmNpZXMgPSByZXF1aXJlKCAnLi9jaGVja291dERlcGVuZGVuY2llcycgKTtcclxuY29uc3QgZ2V0RGVwZW5kZW5jaWVzID0gcmVxdWlyZSggJy4vZ2V0RGVwZW5kZW5jaWVzJyApO1xyXG5jb25zdCBnaXRDaGVja291dCA9IHJlcXVpcmUoICcuL2dpdENoZWNrb3V0JyApO1xyXG5jb25zdCBnaXRGcm9tVGltZXN0YW1wID0gcmVxdWlyZSggJy4vZ2l0RnJvbVRpbWVzdGFtcCcgKTtcclxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoICd3aW5zdG9uJyApO1xyXG5cclxuLyoqXHJcbiAqIENoZWNrcyBvdXQgYSBzbmFwc2hvdCBvZiBhIHJlcG8gKGFuZCBpdHMgZGVwZW5kZW5jaWVzKSBmb3IgYSBnaXZlbiB0aW1lc3RhbXAvYnJhbmNoLlxyXG4gKiBAcHVibGljXHJcbiAqXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSByZXBvIC0gVGhlIHJlcG9zaXRvcnkgbmFtZVxyXG4gKiBAcGFyYW0ge3N0cmluZ30gdGltZXN0YW1wXHJcbiAqIEBwYXJhbSB7Ym9vbGVhbn0gaW5jbHVkZU5wbVVwZGF0ZVxyXG4gKiBAcmV0dXJucyB7UHJvbWlzZS48QXJyYXkuPHN0cmluZz4+fSAtIFJlc29sdmVzIHdpdGggY2hlY2tlZE91dFJlcG9zXHJcbiAqL1xyXG5tb2R1bGUuZXhwb3J0cyA9IGFzeW5jIGZ1bmN0aW9uKCByZXBvLCB0aW1lc3RhbXAsIGluY2x1ZGVOcG1VcGRhdGUgKSB7XHJcbiAgd2luc3Rvbi5pbmZvKCBgY2hlY2tpbmcgb3V0IHRpbWVzdGFtcCBmb3IgJHtyZXBvfSBhdCAke3RpbWVzdGFtcH1gICk7XHJcblxyXG4gIGF3YWl0IGdpdENoZWNrb3V0KCByZXBvLCBhd2FpdCBnaXRGcm9tVGltZXN0YW1wKCByZXBvLCAnbWFpbicsIHRpbWVzdGFtcCApICk7XHJcbiAgY29uc3QgZGVwZW5kZW5jaWVzID0gYXdhaXQgZ2V0RGVwZW5kZW5jaWVzKCByZXBvICk7XHJcbiAgY29uc3QgZGVwZW5kZW5jeU5hbWVzID0gT2JqZWN0LmtleXMoIGRlcGVuZGVuY2llcyApLmZpbHRlcigga2V5ID0+IGtleSAhPT0gJ2NvbW1lbnQnICYmIGtleSAhPT0gcmVwbyApO1xyXG4gIGNvbnN0IHRpbWVzdGFtcERlcGVuZGVuY2llcyA9IHt9O1xyXG4gIGZvciAoIGNvbnN0IGRlcGVuZGVuY3kgb2YgZGVwZW5kZW5jeU5hbWVzICkge1xyXG4gICAgdGltZXN0YW1wRGVwZW5kZW5jaWVzWyBkZXBlbmRlbmN5IF0gPSB7XHJcbiAgICAgIHNoYTogYXdhaXQgZ2l0RnJvbVRpbWVzdGFtcCggZGVwZW5kZW5jeSwgJ21haW4nLCB0aW1lc3RhbXAgKVxyXG4gICAgfTtcclxuICB9XHJcblxyXG4gIHJldHVybiBjaGVja291dERlcGVuZGVuY2llcyggcmVwbywgdGltZXN0YW1wRGVwZW5kZW5jaWVzLCBpbmNsdWRlTnBtVXBkYXRlICk7XHJcbn07Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLE1BQU1BLG9CQUFvQixHQUFHQyxPQUFPLENBQUUsd0JBQXlCLENBQUM7QUFDaEUsTUFBTUMsZUFBZSxHQUFHRCxPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDdEQsTUFBTUUsV0FBVyxHQUFHRixPQUFPLENBQUUsZUFBZ0IsQ0FBQztBQUM5QyxNQUFNRyxnQkFBZ0IsR0FBR0gsT0FBTyxDQUFFLG9CQUFxQixDQUFDO0FBQ3hELE1BQU1JLE9BQU8sR0FBR0osT0FBTyxDQUFFLFNBQVUsQ0FBQzs7QUFFcEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FLLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHLGdCQUFnQkMsSUFBSSxFQUFFQyxTQUFTLEVBQUVDLGdCQUFnQixFQUFHO0VBQ25FTCxPQUFPLENBQUNNLElBQUksQ0FBRyw4QkFBNkJILElBQUssT0FBTUMsU0FBVSxFQUFFLENBQUM7RUFFcEUsTUFBTU4sV0FBVyxDQUFFSyxJQUFJLEVBQUUsTUFBTUosZ0JBQWdCLENBQUVJLElBQUksRUFBRSxNQUFNLEVBQUVDLFNBQVUsQ0FBRSxDQUFDO0VBQzVFLE1BQU1HLFlBQVksR0FBRyxNQUFNVixlQUFlLENBQUVNLElBQUssQ0FBQztFQUNsRCxNQUFNSyxlQUFlLEdBQUdDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFFSCxZQUFhLENBQUMsQ0FBQ0ksTUFBTSxDQUFFQyxHQUFHLElBQUlBLEdBQUcsS0FBSyxTQUFTLElBQUlBLEdBQUcsS0FBS1QsSUFBSyxDQUFDO0VBQ3RHLE1BQU1VLHFCQUFxQixHQUFHLENBQUMsQ0FBQztFQUNoQyxLQUFNLE1BQU1DLFVBQVUsSUFBSU4sZUFBZSxFQUFHO0lBQzFDSyxxQkFBcUIsQ0FBRUMsVUFBVSxDQUFFLEdBQUc7TUFDcENDLEdBQUcsRUFBRSxNQUFNaEIsZ0JBQWdCLENBQUVlLFVBQVUsRUFBRSxNQUFNLEVBQUVWLFNBQVU7SUFDN0QsQ0FBQztFQUNIO0VBRUEsT0FBT1Qsb0JBQW9CLENBQUVRLElBQUksRUFBRVUscUJBQXFCLEVBQUVSLGdCQUFpQixDQUFDO0FBQzlFLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=