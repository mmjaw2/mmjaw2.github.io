// Copyright 2017, University of Colorado Boulder

/**
 * Handles chipper version information, see https://github.com/phetsims/perennial/issues/78.
 * @author Matt Pennington (PhET Interactive Simulations)
 */

const assert = require('assert');
const fs = require('fs');
module.exports = function () {
  /**
   * @public
   * @constructor
   *
   * @param {number} major - The major part of the version (the 3 in 3.1.2)
   * @param {number} minor - The minor part of the version (the 1 in 3.1.2)
   * @param {number} maintenance - The maintenance part of the version (the 2 in 3.1.2)
   * @param {boolean} chipperSupportsOutputJSGruntTasks - Flag that indicates whether grunt suppports the family of command `output-js-all`
   */
  function ChipperVersion(major, minor, maintenance, chipperSupportsOutputJSGruntTasks) {
    assert(typeof major === 'number' && major >= 0 && major % 1 === 0, 'major version should be a non-negative integer');
    assert(typeof minor === 'number' && minor >= 0 && minor % 1 === 0, 'minor version should be a non-negative integer');
    assert(typeof maintenance === 'number' && maintenance >= 0 && maintenance % 1 === 0, 'maintenance version should be a non-negative integer');

    // @public {number}
    this.major = major;
    this.minor = minor;
    this.maintenance = maintenance;
    this.chipperSupportsOutputJSGruntTasks = chipperSupportsOutputJSGruntTasks;
  }

  // Can't rely on inherit existing
  ChipperVersion.prototype = {
    constructor: ChipperVersion,
    /**
     * Returns a string form of the version.
     * @public
     *
     * @returns {string}
     */
    toString: function () {
      return `${this.major}.${this.minor}.${this.maintenance}`;
    }
  };
  ChipperVersion.getFromPackageJSON = function (packageJSON) {
    const versionString = packageJSON.version;
    const matches = versionString.match(/(\d+)\.(\d+)\.(\d+)/);
    if (!matches) {
      throw new Error(`could not parse chipper version: ${versionString}`);
    }
    const major = Number(matches[1]);
    const minor = Number(matches[2]);
    const maintenance = Number(matches[3]);
    const chipperSupportsOutputJSGruntTasks = packageJSON.phet && packageJSON.phet.chipperSupportsOutputJSGruntTasks;
    return new ChipperVersion(major, minor, maintenance, chipperSupportsOutputJSGruntTasks);
  };

  /**
   * Returns the chipper version of the currently-checked-out chipper repository.
   * @public
   *
   * @returns {ChipperVersion}
   */
  ChipperVersion.getFromRepository = function () {
    return ChipperVersion.getFromPackageJSON(JSON.parse(fs.readFileSync('../chipper/package.json', 'utf8')));
  };
  return ChipperVersion;
}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NlcnQiLCJyZXF1aXJlIiwiZnMiLCJtb2R1bGUiLCJleHBvcnRzIiwiQ2hpcHBlclZlcnNpb24iLCJtYWpvciIsIm1pbm9yIiwibWFpbnRlbmFuY2UiLCJjaGlwcGVyU3VwcG9ydHNPdXRwdXRKU0dydW50VGFza3MiLCJwcm90b3R5cGUiLCJjb25zdHJ1Y3RvciIsInRvU3RyaW5nIiwiZ2V0RnJvbVBhY2thZ2VKU09OIiwicGFja2FnZUpTT04iLCJ2ZXJzaW9uU3RyaW5nIiwidmVyc2lvbiIsIm1hdGNoZXMiLCJtYXRjaCIsIkVycm9yIiwiTnVtYmVyIiwicGhldCIsImdldEZyb21SZXBvc2l0b3J5IiwiSlNPTiIsInBhcnNlIiwicmVhZEZpbGVTeW5jIl0sInNvdXJjZXMiOlsiQ2hpcHBlclZlcnNpb24uanMiXSwic291cmNlc0NvbnRlbnQiOlsiLy8gQ29weXJpZ2h0IDIwMTcsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG5cclxuLyoqXHJcbiAqIEhhbmRsZXMgY2hpcHBlciB2ZXJzaW9uIGluZm9ybWF0aW9uLCBzZWUgaHR0cHM6Ly9naXRodWIuY29tL3BoZXRzaW1zL3BlcmVubmlhbC9pc3N1ZXMvNzguXHJcbiAqIEBhdXRob3IgTWF0dCBQZW5uaW5ndG9uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmNvbnN0IGFzc2VydCA9IHJlcXVpcmUoICdhc3NlcnQnICk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSggJ2ZzJyApO1xyXG5cclxubW9kdWxlLmV4cG9ydHMgPSAoIGZ1bmN0aW9uKCkge1xyXG5cclxuICAvKipcclxuICAgKiBAcHVibGljXHJcbiAgICogQGNvbnN0cnVjdG9yXHJcbiAgICpcclxuICAgKiBAcGFyYW0ge251bWJlcn0gbWFqb3IgLSBUaGUgbWFqb3IgcGFydCBvZiB0aGUgdmVyc2lvbiAodGhlIDMgaW4gMy4xLjIpXHJcbiAgICogQHBhcmFtIHtudW1iZXJ9IG1pbm9yIC0gVGhlIG1pbm9yIHBhcnQgb2YgdGhlIHZlcnNpb24gKHRoZSAxIGluIDMuMS4yKVxyXG4gICAqIEBwYXJhbSB7bnVtYmVyfSBtYWludGVuYW5jZSAtIFRoZSBtYWludGVuYW5jZSBwYXJ0IG9mIHRoZSB2ZXJzaW9uICh0aGUgMiBpbiAzLjEuMilcclxuICAgKiBAcGFyYW0ge2Jvb2xlYW59IGNoaXBwZXJTdXBwb3J0c091dHB1dEpTR3J1bnRUYXNrcyAtIEZsYWcgdGhhdCBpbmRpY2F0ZXMgd2hldGhlciBncnVudCBzdXBwcG9ydHMgdGhlIGZhbWlseSBvZiBjb21tYW5kIGBvdXRwdXQtanMtYWxsYFxyXG4gICAqL1xyXG4gIGZ1bmN0aW9uIENoaXBwZXJWZXJzaW9uKCBtYWpvciwgbWlub3IsIG1haW50ZW5hbmNlLCBjaGlwcGVyU3VwcG9ydHNPdXRwdXRKU0dydW50VGFza3MgKSB7XHJcblxyXG4gICAgYXNzZXJ0KCB0eXBlb2YgbWFqb3IgPT09ICdudW1iZXInICYmIG1ham9yID49IDAgJiYgbWFqb3IgJSAxID09PSAwLCAnbWFqb3IgdmVyc2lvbiBzaG91bGQgYmUgYSBub24tbmVnYXRpdmUgaW50ZWdlcicgKTtcclxuICAgIGFzc2VydCggdHlwZW9mIG1pbm9yID09PSAnbnVtYmVyJyAmJiBtaW5vciA+PSAwICYmIG1pbm9yICUgMSA9PT0gMCwgJ21pbm9yIHZlcnNpb24gc2hvdWxkIGJlIGEgbm9uLW5lZ2F0aXZlIGludGVnZXInICk7XHJcbiAgICBhc3NlcnQoIHR5cGVvZiBtYWludGVuYW5jZSA9PT0gJ251bWJlcicgJiYgbWFpbnRlbmFuY2UgPj0gMCAmJiBtYWludGVuYW5jZSAlIDEgPT09IDAsICdtYWludGVuYW5jZSB2ZXJzaW9uIHNob3VsZCBiZSBhIG5vbi1uZWdhdGl2ZSBpbnRlZ2VyJyApO1xyXG5cclxuICAgIC8vIEBwdWJsaWMge251bWJlcn1cclxuICAgIHRoaXMubWFqb3IgPSBtYWpvcjtcclxuICAgIHRoaXMubWlub3IgPSBtaW5vcjtcclxuICAgIHRoaXMubWFpbnRlbmFuY2UgPSBtYWludGVuYW5jZTtcclxuICAgIHRoaXMuY2hpcHBlclN1cHBvcnRzT3V0cHV0SlNHcnVudFRhc2tzID0gY2hpcHBlclN1cHBvcnRzT3V0cHV0SlNHcnVudFRhc2tzO1xyXG4gIH1cclxuXHJcbiAgLy8gQ2FuJ3QgcmVseSBvbiBpbmhlcml0IGV4aXN0aW5nXHJcbiAgQ2hpcHBlclZlcnNpb24ucHJvdG90eXBlID0ge1xyXG4gICAgY29uc3RydWN0b3I6IENoaXBwZXJWZXJzaW9uLFxyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmV0dXJucyBhIHN0cmluZyBmb3JtIG9mIHRoZSB2ZXJzaW9uLlxyXG4gICAgICogQHB1YmxpY1xyXG4gICAgICpcclxuICAgICAqIEByZXR1cm5zIHtzdHJpbmd9XHJcbiAgICAgKi9cclxuICAgIHRvU3RyaW5nOiBmdW5jdGlvbigpIHtcclxuICAgICAgcmV0dXJuIGAke3RoaXMubWFqb3J9LiR7dGhpcy5taW5vcn0uJHt0aGlzLm1haW50ZW5hbmNlfWA7XHJcbiAgICB9XHJcbiAgfTtcclxuXHJcbiAgQ2hpcHBlclZlcnNpb24uZ2V0RnJvbVBhY2thZ2VKU09OID0gZnVuY3Rpb24oIHBhY2thZ2VKU09OICkge1xyXG4gICAgY29uc3QgdmVyc2lvblN0cmluZyA9IHBhY2thZ2VKU09OLnZlcnNpb247XHJcblxyXG4gICAgY29uc3QgbWF0Y2hlcyA9IHZlcnNpb25TdHJpbmcubWF0Y2goIC8oXFxkKylcXC4oXFxkKylcXC4oXFxkKykvICk7XHJcblxyXG4gICAgaWYgKCAhbWF0Y2hlcyApIHtcclxuICAgICAgdGhyb3cgbmV3IEVycm9yKCBgY291bGQgbm90IHBhcnNlIGNoaXBwZXIgdmVyc2lvbjogJHt2ZXJzaW9uU3RyaW5nfWAgKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCBtYWpvciA9IE51bWJlciggbWF0Y2hlc1sgMSBdICk7XHJcbiAgICBjb25zdCBtaW5vciA9IE51bWJlciggbWF0Y2hlc1sgMiBdICk7XHJcbiAgICBjb25zdCBtYWludGVuYW5jZSA9IE51bWJlciggbWF0Y2hlc1sgMyBdICk7XHJcbiAgICBjb25zdCBjaGlwcGVyU3VwcG9ydHNPdXRwdXRKU0dydW50VGFza3MgPSBwYWNrYWdlSlNPTi5waGV0ICYmIHBhY2thZ2VKU09OLnBoZXQuY2hpcHBlclN1cHBvcnRzT3V0cHV0SlNHcnVudFRhc2tzO1xyXG5cclxuICAgIHJldHVybiBuZXcgQ2hpcHBlclZlcnNpb24oIG1ham9yLCBtaW5vciwgbWFpbnRlbmFuY2UsIGNoaXBwZXJTdXBwb3J0c091dHB1dEpTR3J1bnRUYXNrcyApO1xyXG4gIH07XHJcblxyXG4gIC8qKlxyXG4gICAqIFJldHVybnMgdGhlIGNoaXBwZXIgdmVyc2lvbiBvZiB0aGUgY3VycmVudGx5LWNoZWNrZWQtb3V0IGNoaXBwZXIgcmVwb3NpdG9yeS5cclxuICAgKiBAcHVibGljXHJcbiAgICpcclxuICAgKiBAcmV0dXJucyB7Q2hpcHBlclZlcnNpb259XHJcbiAgICovXHJcbiAgQ2hpcHBlclZlcnNpb24uZ2V0RnJvbVJlcG9zaXRvcnkgPSBmdW5jdGlvbigpIHtcclxuICAgIHJldHVybiBDaGlwcGVyVmVyc2lvbi5nZXRGcm9tUGFja2FnZUpTT04oXHJcbiAgICAgIEpTT04ucGFyc2UoIGZzLnJlYWRGaWxlU3luYyggJy4uL2NoaXBwZXIvcGFja2FnZS5qc29uJywgJ3V0ZjgnICkgKVxyXG4gICAgKTtcclxuICB9O1xyXG5cclxuICByZXR1cm4gQ2hpcHBlclZlcnNpb247XHJcbn0gKSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUEsTUFBTSxHQUFHQyxPQUFPLENBQUUsUUFBUyxDQUFDO0FBQ2xDLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFFLElBQUssQ0FBQztBQUUxQkUsTUFBTSxDQUFDQyxPQUFPLEdBQUssWUFBVztFQUU1QjtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7RUFDRSxTQUFTQyxjQUFjQSxDQUFFQyxLQUFLLEVBQUVDLEtB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