// Copyright 2021, University of Colorado Boulder

const execute = require('../common/execute');
const fs = require('fs');

/**
 *
 * Output a formatted view of recent commits to help in writing a report
 *
 * USAGE:
 * cd directory-with-all-repos
 * node perennial/js/scripts/commit-report.js username > report.txt
 *
 * EXAMPLE:
 * node perennial/js/scripts/commit-report.js samreid > report.txt
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
(async () => {
  const args = process.argv.slice(2);
  const username = args[0];
  const months = ['Jan', 'Feb', 'March', 'April', 'May', 'June', 'July', 'Aug', 'Sept', 'Oct', 'Nov', 'Dec'];
  if (!username) {
    console.log('username must be supplied as first command-line argument');
  } else {
    const outputtedLines = [];

    // current timestamp in milliseconds
    const d = new Date(Date.now());
    const day = d.getDate();
    const month = d.getMonth();
    const year = d.getFullYear();
    console.log(`${username === 'samreid' ? 'Sam Reid - ' : ''}${months[month]} ${day}, ${year}`);
    console.log();
    console.log('Highlights');
    console.log('');
    console.log('Pose Hours: ');

    // Don't use getActiveRepos() since it cannot be run from the root
    const contents = fs.readFileSync('perennial/data/active-repos', 'utf8').trim();
    const repos = contents.split('\n').map(sim => sim.trim());

    // git --no-pager log --all --remotes --since=7.days --author=$1 --pretty=format:"%an %ad %s" --date=relative
    const gitArgs = ['--no-pager', 'log', '--all', '--remotes', '--since=7.days', '--pretty=format:"%an %ad %s"', '--date=relative'];
    const a = repos.map(repo => execute('git', gitArgs, `${repo}`, {
      // resolve errors so Promise.all doesn't fail on first repo that cannot pull/rebase
      errors: 'resolve'
    }));
    const out = await Promise.all(a);

    // Report results
    for (let i = 0; i < a.length; i++) {
      let outputtedRepo = false;
      const repo = repos[i];
      const o = out[i];
      if (o.stderr.trim().length > 0) {
        console.log(o.stderr.trim());
      }
      const stdout = o.stdout.trim();
      if (stdout.length > 0 || o.stderr.trim().length > 0) {
        const lines = stdout.split('\n');
        lines.forEach(line => {
          if (line.startsWith('"') && line.endsWith('"')) {
            line = line.substring(1, line.length - 1);
          }
          if (line.startsWith(username)) {
            line = line.substring(username.length).trim();
            const tokens = line.split(' ');
            const number = Number(tokens[0]);
            const time = tokens[1];
            if (time === 'days' && number <= 7) {
              line = line.substring('n days ago '.length);
            }
            if (time === 'hours' && number <= 9) {
              line = line.substring('n hours ago '.length);
            }
            if (time === 'hours' && number >= 10 && number <= 99) {
              line = line.substring('nn hours ago '.length);
            }
            if (!outputtedLines.find(x => x === line) && !line.startsWith('Merge branch \'main\' of')) {
              if (!outputtedRepo) {
                console.log();
                console.log(repo);
                outputtedRepo = true;
              }
              console.log(line);
              outputtedLines.push(line);
            }
          }
        });
      }
    }
  }
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjdXRlIiwicmVxdWlyZSIsImZzIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJ1c2VybmFtZSIsIm1vbnRocyIsImNvbnNvbGUiLCJsb2ciLCJvdXRwdXR0ZWRMaW5lcyIsImQiLCJEYXRlIiwibm93IiwiZGF5IiwiZ2V0RGF0ZSIsIm1vbnRoIiwiZ2V0TW9udGgiLCJ5ZWFyIiwiZ2V0RnVsbFllYXIiLCJjb250ZW50cyIsInJlYWRGaWxlU3luYyIsInRyaW0iLCJyZXBvcyIsInNwbGl0IiwibWFwIiwic2ltIiwiZ2l0QXJncyIsImEiLCJyZXBvIiwiZXJyb3JzIiwib3V0IiwiUHJvbWlzZSIsImFsbCIsImkiLCJsZW5ndGgiLCJvdXRwdXR0ZWRSZXBvIiwibyIsInN0ZGVyciIsInN0ZG91dCIsImxpbmVzIiwiZm9yRWFjaCIsImxpbmUiLCJzdGFydHNXaXRoIiwiZW5kc1dpdGgiLCJzdWJzdHJpbmciLCJ0b2tlbnMiLCJudW1iZXIiLCJOdW1iZXIiLCJ0aW1lIiwiZmluZCIsIngiLCJwdXNoIl0sInNvdXJjZXMiOlsiY29tbWl0LXJlcG9ydC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5jb25zdCBleGVjdXRlID0gcmVxdWlyZSggJy4uL2NvbW1vbi9leGVjdXRlJyApO1xyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBPdXRwdXQgYSBmb3JtYXR0ZWQgdmlldyBvZiByZWNlbnQgY29tbWl0cyB0byBoZWxwIGluIHdyaXRpbmcgYSByZXBvcnRcclxuICpcclxuICogVVNBR0U6XHJcbiAqIGNkIGRpcmVjdG9yeS13aXRoLWFsbC1yZXBvc1xyXG4gKiBub2RlIHBlcmVubmlhbC9qcy9zY3JpcHRzL2NvbW1pdC1yZXBvcnQuanMgdXNlcm5hbWUgPiByZXBvcnQudHh0XHJcbiAqXHJcbiAqIEVYQU1QTEU6XHJcbiAqIG5vZGUgcGVyZW5uaWFsL2pzL3NjcmlwdHMvY29tbWl0LXJlcG9ydC5qcyBzYW1yZWlkID4gcmVwb3J0LnR4dFxyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuKCBhc3luYyAoKSA9PiB7XHJcbiAgY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSggMiApO1xyXG4gIGNvbnN0IHVzZXJuYW1lID0gYXJnc1sgMCBdO1xyXG5cclxuICBjb25zdCBtb250aHMgPSBbICdKYW4nLCAnRmViJywgJ01hcmNoJywgJ0FwcmlsJywgJ01heScsICdKdW5lJywgJ0p1bHknLCAnQXVnJywgJ1NlcHQnLCAnT2N0JywgJ05vdicsICdEZWMnIF07XHJcbiAgaWYgKCAhdXNlcm5hbWUgKSB7XHJcbiAgICBjb25zb2xlLmxvZyggJ3VzZXJuYW1lIG11c3QgYmUgc3VwcGxpZWQgYXMgZmlyc3QgY29tbWFuZC1saW5lIGFyZ3VtZW50JyApO1xyXG4gIH1cclxuICBlbHNlIHtcclxuXHJcbiAgICBjb25zdCBvdXRwdXR0ZWRMaW5lcyA9IFtdO1xyXG5cclxuICAgIC8vIGN1cnJlbnQgdGltZXN0YW1wIGluIG1pbGxpc2Vjb25kc1xyXG4gICAgY29uc3QgZCA9IG5ldyBEYXRlKCBEYXRlLm5vdygpICk7XHJcbiAgICBjb25zdCBkYXkgPSBkLmdldERhdGUoKTtcclxuICAgIGNvbnN0IG1vbnRoID0gZC5nZXRNb250aCgpO1xyXG4gICAgY29uc3QgeWVhciA9IGQuZ2V0RnVsbFllYXIoKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyggYCR7dXNlcm5hbWUgPT09ICdzYW1yZWlkJyA/ICdTYW0gUmVpZCAtICcgOiAnJ30ke21vbnRoc1sgbW9udGggXX0gJHtkYXl9LCAke3llYXJ9YCApO1xyXG4gICAgY29uc29sZS5sb2coKTtcclxuXHJcbiAgICBjb25zb2xlLmxvZyggJ0hpZ2hsaWdodHMnICk7XHJcbiAgICBjb25zb2xlLmxvZyggJycgKTtcclxuICAgIGNvbnNvbGUubG9nKCAnUG9zZSBIb3VyczogJyApO1xyXG5cclxuICAgIC8vIERvbid0IHVzZSBnZXRBY3RpdmVSZXBvcygpIHNpbmNlIGl0IGNhbm5vdCBiZSBydW4gZnJvbSB0aGUgcm9vdFxyXG4gICAgY29uc3QgY29udGVudHMgPSBmcy5yZWFkRmlsZVN5bmMoICdwZXJlbm5pYWwvZGF0YS9hY3RpdmUtcmVwb3MnLCAndXRmOCcgKS50cmltKCk7XHJcbiAgICBjb25zdCByZXBvcyA9IGNvbnRlbnRzLnNwbGl0KCAnXFxuJyApLm1hcCggc2ltID0+IHNpbS50cmltKCkgKTtcclxuXHJcbiAgICAvLyBnaXQgLS1uby1wYWdlciBsb2cgLS1hbGwgLS1yZW1vdGVzIC0tc2luY2U9Ny5kYXlzIC0tYXV0aG9yPSQxIC0tcHJldHR5PWZvcm1hdDpcIiVhbiAlYWQgJXNcIiAtLWRhdGU9cmVsYXRpdmVcclxuICAgIGNvbnN0IGdpdEFyZ3MgPSBbICctLW5vLXBhZ2VyJywgJ2xvZycsICctLWFsbCcsICctLXJlbW90ZXMnLCAnLS1zaW5jZT03LmRheXMnLCAnLS1wcmV0dHk9Zm9ybWF0OlwiJWFuICVhZCAlc1wiJywgJy0tZGF0ZT1yZWxhdGl2ZScgXTtcclxuXHJcbiAgICBjb25zdCBhID0gcmVwb3MubWFwKCByZXBvID0+IGV4ZWN1dGUoICdnaXQnLCBnaXRBcmdzLCBgJHtyZXBvfWAsIHtcclxuXHJcbiAgICAgIC8vIHJlc29sdmUgZXJyb3JzIHNvIFByb21pc2UuYWxsIGRvZXNuJ3QgZmFpbCBvbiBmaXJzdCByZXBvIHRoYXQgY2Fubm90IHB1bGwvcmViYXNlXHJcbiAgICAgIGVycm9yczogJ3Jlc29sdmUnXHJcbiAgICB9ICkgKTtcclxuICAgIGNvbnN0IG91dCA9IGF3YWl0IFByb21pc2UuYWxsKCBhICk7XHJcblxyXG4gICAgLy8gUmVwb3J0IHJlc3VsdHNcclxuICAgIGZvciAoIGxldCBpID0gMDsgaSA8IGEubGVuZ3RoOyBpKysgKSB7XHJcblxyXG4gICAgICBsZXQgb3V0cHV0dGVkUmVwbyA9IGZhbHNlO1xyXG4gICAgICBjb25zdCByZXBvID0gcmVwb3NbIGkgXTtcclxuICAgICAgY29uc3QgbyA9IG91dFsgaSBdO1xyXG5cclxuICAgICAgaWYgKCBvLnN0ZGVyci50cmltKCkubGVuZ3RoID4gMCApIHtcclxuICAgICAgICBjb25zb2xlLmxvZyggby5zdGRlcnIudHJpbSgpICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IHN0ZG91dCA9IG8uc3Rkb3V0LnRyaW0oKTtcclxuICAgICAgaWYgKCBzdGRvdXQubGVuZ3RoID4gMCB8fCBvLnN0ZGVyci50cmltKCkubGVuZ3RoID4gMCApIHtcclxuXHJcblxyXG4gICAgICAgIGNvbnN0IGxpbmVzID0gc3Rkb3V0LnNwbGl0KCAnXFxuJyApO1xyXG4gICAgICAgIGxpbmVzLmZvckVhY2goIGxpbmUgPT4ge1xyXG4gICAgICAgICAgaWYgKCBsaW5lLnN0YXJ0c1dpdGgoICdcIicgKSAmJiBsaW5lLmVuZHNXaXRoKCAnXCInICkgKSB7XHJcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZyggMSwgbGluZS5sZW5ndGggLSAxICk7XHJcbiAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgaWYgKCBsaW5lLnN0YXJ0c1dpdGgoIHVzZXJuYW1lICkgKSB7XHJcbiAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZyggdXNlcm5hbWUubGVuZ3RoICkudHJpbSgpO1xyXG5cclxuICAgICAgICAgICAgY29uc3QgdG9rZW5zID0gbGluZS5zcGxpdCggJyAnICk7XHJcbiAgICAgICAgICAgIGNvbnN0IG51bWJlciA9IE51bWJlciggdG9rZW5zWyAwIF0gKTtcclxuICAgICAgICAgICAgY29uc3QgdGltZSA9IHRva2Vuc1sgMSBdO1xyXG5cclxuICAgICAgICAgICAgaWYgKCB0aW1lID09PSAnZGF5cycgJiYgbnVtYmVyIDw9IDcgKSB7XHJcbiAgICAgICAgICAgICAgbGluZSA9IGxpbmUuc3Vic3RyaW5nKCAnbiBkYXlzIGFnbyAnLmxlbmd0aCApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICggdGltZSA9PT0gJ2hvdXJzJyAmJiBudW1iZXIgPD0gOSApIHtcclxuICAgICAgICAgICAgICBsaW5lID0gbGluZS5zdWJzdHJpbmcoICduIGhvdXJzIGFnbyAnLmxlbmd0aCApO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGlmICggdGltZSA9PT0gJ2hvdXJzJyAmJiBudW1iZXIgPj0gMTAgJiYgbnVtYmVyIDw9IDk5ICkge1xyXG4gICAgICAgICAgICAgIGxpbmUgPSBsaW5lLnN1YnN0cmluZyggJ25uIGhvdXJzIGFnbyAnLmxlbmd0aCApO1xyXG4gICAgICAgICAgICB9XHJcblxyXG4gICAgICAgICAgICBpZiAoICFvdXRwdXR0ZWRMaW5lcy5maW5kKCB4ID0+IHggPT09IGxpbmUgKSAmJiAhbGluZS5zdGFydHNXaXRoKCAnTWVyZ2UgYnJhbmNoIFxcJ21haW5cXCcgb2YnICkgKSB7XHJcblxyXG4gICAgICAgICAgICAgIGlmICggIW91dHB1dHRlZFJlcG8gKSB7XHJcbiAgICAgICAgICAgICAgICBjb25zb2xlLmxvZygpO1xyXG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coIHJlcG8gKTtcclxuICAgICAgICAgICAgICAgIG91dHB1dHRlZFJlcG8gPSB0cnVlO1xyXG4gICAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgICBjb25zb2xlLmxvZyggbGluZSApO1xyXG4gICAgICAgICAgICAgIG91dHB1dHRlZExpbmVzLnB1c2goIGxpbmUgKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gKTtcclxuXHJcbiAgICAgIH1cclxuICAgIH1cclxuICB9XHJcbn0gKSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUUsbUJBQW9CLENBQUM7QUFDOUMsTUFBTUMsRUFBRSxHQUFHRCxP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