// Copyright 2024, University of Colorado Boulder

/**
 * Prints out a report (with links) for active sims/translation for each locale
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const localeInfo = require('../../../chipper/js/data/localeInfo');
const simMetadata = require('../common/simMetadata');
const winston = require('../../../../../../perennial-alias/node_modules/winston');
winston.default.transports.console.level = 'error';
const production = process.argv.includes('--production');
const phettest = process.argv.includes('--phettest');
const local = process.argv.includes('--local');
const limitString = process.argv.find(arg => arg.startsWith('--limit='));
const limit = limitString ? Number(limitString.substring('--limit='.length)) : Number.POSITIVE_INFINITY;
(async () => {
  const metadata = await simMetadata();
  const simNamesByLocale = {};
  metadata.projects.forEach(project => {
    const simulations = project.simulations;
    if (simulations.length !== 1) {
      throw new Error('Expected exactly one simulation per project in metadata');
    }
    const simulation = simulations[0];
    const name = simulation.name;
    const locales = Object.keys(simulation.localizedSimulations);
    locales.forEach(locale => {
      if (!simNamesByLocale[locale]) {
        simNamesByLocale[locale] = [];
      }
      simNamesByLocale[locale].push(name);
    });
  });

  // https://bayes.colorado.edu/dev/phettest/acid-base-solutions/acid-base-solutions_en.html?ea&brand=phet

  const locales = Object.keys(simNamesByLocale).sort();
  for (const locale of locales) {
    console.log(`## ${locale} (${localeInfo[locale].name})`);
    console.log('');
    simNamesByLocale[locale].slice(0, Math.min(limit, simNamesByLocale[locale].length)).forEach(simName => {
      const links = [];
      if (production) {
        links.push(`[production](https://phet.colorado.edu/sims/html/${simName}/latest/${simName}_all.html?locale=${locale})`);
      }
      if (phettest) {
        links.push(`[phettest](https://bayes.colorado.edu/dev/phettest/${simName}/${simName}_en.html?ea&brand=phet&locale=${locale})`);
      }
      if (local) {
        links.push(`[local](http://localhost/${simName}/${simName}_en.html?brand=phet&ea&debugger&locale=${locale})`);
      }
      console.log(`- ${simName} ${links.join(' ')}`);
    });
    console.log('');
  }
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJsb2NhbGVJbmZvIiwicmVxdWlyZSIsInNpbU1ldGFkYXRhIiwid2luc3RvbiIsImRlZmF1bHQiLCJ0cmFuc3BvcnRzIiwiY29uc29sZSIsImxldmVsIiwicHJvZHVjdGlvbiIsInByb2Nlc3MiLCJhcmd2IiwiaW5jbHVkZXMiLCJwaGV0dGVzdCIsImxvY2FsIiwibGltaXRTdHJpbmciLCJmaW5kIiwiYXJnIiwic3RhcnRzV2l0aCIsImxpbWl0IiwiTnVtYmVyIiwic3Vic3RyaW5nIiwibGVuZ3RoIiwiUE9TSVRJVkVfSU5GSU5JVFkiLCJtZXRhZGF0YSIsInNpbU5hbWVzQnlMb2NhbGUiLCJwcm9qZWN0cyIsImZvckVhY2giLCJwcm9qZWN0Iiwic2ltdWxhdGlvbnMiLCJFcnJvciIsInNpbXVsYXRpb24iLCJuYW1lIiwibG9jYWxlcyIsIk9iamVjdCIsImtleXMiLCJsb2NhbGl6ZWRTaW11bGF0aW9ucyIsImxvY2FsZSIsInB1c2giLCJzb3J0IiwibG9nIiwic2xpY2UiLCJNYXRoIiwibWluIiwic2ltTmFtZSIsImxpbmtzIiwiam9pbiJdLCJzb3VyY2VzIjpbImxvY2FsZS1zaW0tbGlzdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyNCwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG4vKipcclxuICogUHJpbnRzIG91dCBhIHJlcG9ydCAod2l0aCBsaW5rcykgZm9yIGFjdGl2ZSBzaW1zL3RyYW5zbGF0aW9uIGZvciBlYWNoIGxvY2FsZVxyXG4gKlxyXG4gKiBAYXV0aG9yIEpvbmF0aGFuIE9sc29uIDxqb25hdGhhbi5vbHNvbkBjb2xvcmFkby5lZHU+XHJcbiAqL1xyXG5cclxuY29uc3QgbG9jYWxlSW5mbyA9IHJlcXVpcmUoICcuLi8uLi8uLi9jaGlwcGVyL2pzL2RhdGEvbG9jYWxlSW5mbycgKTtcclxuY29uc3Qgc2ltTWV0YWRhdGEgPSByZXF1aXJlKCAnLi4vY29tbW9uL3NpbU1ldGFkYXRhJyApO1xyXG5jb25zdCB3aW5zdG9uID0gcmVxdWlyZSggJ3dpbnN0b24nICk7XHJcblxyXG53aW5zdG9uLmRlZmF1bHQudHJhbnNwb3J0cy5jb25zb2xlLmxldmVsID0gJ2Vycm9yJztcclxuXHJcbmNvbnN0IHByb2R1Y3Rpb24gPSBwcm9jZXNzLmFyZ3YuaW5jbHVkZXMoICctLXByb2R1Y3Rpb24nICk7XHJcbmNvbnN0IHBoZXR0ZXN0ID0gcHJvY2Vzcy5hcmd2LmluY2x1ZGVzKCAnLS1waGV0dGVzdCcgKTtcclxuY29uc3QgbG9jYWwgPSBwcm9jZXNzLmFyZ3YuaW5jbHVkZXMoICctLWxvY2FsJyApO1xyXG5cclxuY29uc3QgbGltaXRTdHJpbmcgPSBwcm9jZXNzLmFyZ3YuZmluZCggYXJnID0+IGFyZy5zdGFydHNXaXRoKCAnLS1saW1pdD0nICkgKTtcclxuY29uc3QgbGltaXQgPSBsaW1pdFN0cmluZyA/IE51bWJlciggbGltaXRTdHJpbmcuc3Vic3RyaW5nKCAnLS1saW1pdD0nLmxlbmd0aCApICkgOiBOdW1iZXIuUE9TSVRJVkVfSU5GSU5JVFk7XHJcblxyXG4oIGFzeW5jICgpID0+IHtcclxuXHJcbiAgY29uc3QgbWV0YWRhdGEgPSBhd2FpdCBzaW1NZXRhZGF0YSgpO1xyXG5cclxuICBjb25zdCBzaW1OYW1lc0J5TG9jYWxlID0ge307XHJcblxyXG4gIG1ldGFkYXRhLnByb2plY3RzLmZvckVhY2goIHByb2plY3QgPT4ge1xyXG4gICAgY29uc3Qgc2ltdWxhdGlvbnMgPSBwcm9qZWN0LnNpbXVsYXRpb25zO1xyXG4gICAgaWYgKCBzaW11bGF0aW9ucy5sZW5ndGggIT09IDEgKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvciggJ0V4cGVjdGVkIGV4YWN0bHkgb25lIHNpbXVsYXRpb24gcGVyIHByb2plY3QgaW4gbWV0YWRhdGEnICk7XHJcbiAgICB9XHJcblxyXG4gICAgY29uc3Qgc2ltdWxhdGlvbiA9IHNpbXVsYXRpb25zWyAwIF07XHJcbiAgICBjb25zdCBuYW1lID0gc2ltdWxhdGlvbi5uYW1lO1xyXG4gICAgY29uc3QgbG9jYWxlcyA9IE9iamVjdC5rZXlzKCBzaW11bGF0aW9uLmxvY2FsaXplZFNpbXVsYXRpb25zICk7XHJcblxyXG4gICAgbG9jYWxlcy5mb3JFYWNoKCBsb2NhbGUgPT4ge1xyXG4gICAgICBpZiAoICFzaW1OYW1lc0J5TG9jYWxlWyBsb2NhbGUgXSApIHtcclxuICAgICAgICBzaW1OYW1lc0J5TG9jYWxlWyBsb2NhbGUgXSA9IFtdO1xyXG4gICAgICB9XHJcbiAgICAgIHNpbU5hbWVzQnlMb2NhbGVbIGxvY2FsZSBdLnB1c2goIG5hbWUgKTtcclxuICAgIH0gKTtcclxuICB9ICk7XHJcblxyXG4gIC8vIGh0dHBzOi8vYmF5ZXMuY29sb3JhZG8uZWR1L2Rldi9waGV0dGVzdC9hY2lkLWJhc2Utc29sdXRpb25zL2FjaWQtYmFzZS1zb2x1dGlvbnNfZW4uaHRtbD9lYSZicmFuZD1waGV0XHJcblxyXG4gIGNvbnN0IGxvY2FsZXMgPSBPYmplY3Qua2V5cyggc2ltTmFtZXNCeUxvY2FsZSApLnNvcnQoKTtcclxuXHJcbiAgZm9yICggY29uc3QgbG9jYWxlIG9mIGxvY2FsZXMgKSB7XHJcblxyXG4gICAgY29uc29sZS5sb2coIGAjIyAke2xvY2FsZX0gKCR7bG9jYWxlSW5mb1sgbG9jYWxlIF0ubmFtZX0pYCApO1xyXG4gICAgY29uc29sZS5sb2coICcnICk7XHJcbiAgICBzaW1OYW1lc0J5TG9jYWxlWyBsb2NhbGUgXS5zbGljZSggMCwgTWF0aC5taW4oIGxpbWl0LCBzaW1OYW1lc0J5TG9jYWxlWyBsb2NhbGUgXS5sZW5ndGggKSApLmZvckVhY2goIHNpbU5hbWUgPT4ge1xyXG4gICAgICBjb25zdCBsaW5rcyA9IFtdO1xyXG4gICAgICBpZiAoIHByb2R1Y3Rpb24gKSB7XHJcbiAgICAgICAgbGlua3MucHVzaCggYFtwcm9kdWN0aW9uXShodHRwczovL3BoZXQuY29sb3JhZG8uZWR1L3NpbXMvaHRtbC8ke3NpbU5hbWV9L2xhdGVzdC8ke3NpbU5hbWV9X2FsbC5odG1sP2xvY2FsZT0ke2xvY2FsZX0pYCApO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICggcGhldHRlc3QgKSB7XHJcbiAgICAgICAgbGlua3MucHVzaCggYFtwaGV0dGVzdF0oaHR0cHM6Ly9iYXllcy5jb2xvcmFkby5lZHUvZGV2L3BoZXR0ZXN0LyR7c2ltTmFtZX0vJHtzaW1OYW1lfV9lbi5odG1sP2VhJmJyYW5kPXBoZXQmbG9jYWxlPSR7bG9jYWxlfSlgICk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCBsb2NhbCApIHtcclxuICAgICAgICBsaW5rcy5wdXNoKCBgW2xvY2FsXShodHRwOi8vbG9jYWxob3N0LyR7c2ltTmFtZX0vJHtzaW1OYW1lfV9lbi5odG1sP2JyYW5kPXBoZXQmZWEmZGVidWdnZXImbG9jYWxlPSR7bG9jYWxlfSlgICk7XHJcbiAgICAgIH1cclxuICAgICAgY29uc29sZS5sb2coIGAtICR7c2ltTmFtZX0gJHtsaW5rcy5qb2luKCAnICcgKX1gICk7XHJcbiAgICB9ICk7XHJcbiAgICBjb25zb2xlLmxvZyggJycgKTtcclxuICB9XHJcbn0gKSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxVQUFVLEdBQUdDLE9BQU8sQ0FBRSxxQ0FBc0MsQ0FBQztBQUNuRSxNQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBRSx1QkFBd0IsQ0FBQztBQUN0RCxNQUFNRSxPQUFPLEdBQUdGLE9BQU8sQ0FBRSxTQUFVLENBQUM7QUFFcENFLE9BQU8sQ0FBQ0MsT0FBTyxDQUFDQyxVQUFVLENBQUNDLE9BQU8sQ0FBQ0MsS0FBSyxHQUFHLE9BQU87QUFFbEQsTUFBTUMsVUFBVSxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsUUFBUSxDQUFFLGNBQWUsQ0FBQztBQUMxRCxNQUFNQyxRQUFRLEdBQUdILE9BQU8sQ0FBQ0MsSUFBSSxDQUFDQyxRQUFRLENBQUUsWUFBYSxDQUFDO0FBQ3RELE1BQU1FLEtBQUssR0FBR0osT0FBTyxDQUFDQyxJQUFJLENBQUND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