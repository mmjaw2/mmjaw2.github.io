// Copyright 2021, University of Colorado Boulder

const fs = require('fs');
// eslint-disable-next-line require-statement-match
const csv = require('csv-parser');
const filePath = process.argv[2];

/**
 * Read in the CSV export from the locales spreadsheet ("Final(dev)" format) and parse it into a localeJSON format.
 *
 * @author Jonathan Olson <jonathan.olson@colorado.edu>
 */

const parseCSV = (filePath, callback) => {
  const rows = [];
  fs.createReadStream(filePath).pipe(csv()).on('data', row => {
    const values = Object.values(row);
    rows.push(values);
  }).on('end', () => {
    callback(null, rows);
  }).on('error', error => {
    callback(error, null);
  });
};
parseCSV(filePath, (error, data) => {
  if (error) {
    console.error('Error parsing CSV:', error);
  } else {
    const localeMainData = data.map(row => {
      let locale = row[1];
      let threeLetterLocale = row[2];
      let englishName = row[3];
      let localizedName = row[4];
      let direction = row[5];
      const fallback = row[6];
      locale = locale.trim();
      if (locale.length !== 2 && locale.length !== 5) {
        throw new Error(`Invalid locale: ${JSON.stringify(locale)}`);
      }
      if (!locale[0].match(/[a-z]/)) {
        throw new Error(`Invalid locale: ${locale}`);
      }
      if (!locale[1].match(/[a-z]/)) {
        throw new Error(`Invalid locale: ${locale}`);
      }
      if (locale.length === 5) {
        if (locale[2] !== '_') {
          throw new Error(`Invalid locale: ${locale}`);
        }
        if (!locale[3].match(/[A-Z]/)) {
          throw new Error(`Invalid locale: ${locale}`);
        }
        if (!locale[4].match(/[A-Z]/)) {
          throw new Error(`Invalid locale: ${locale}`);
        }
      }
      threeLetterLocale = threeLetterLocale.trim(); // remove tab

      if (threeLetterLocale.length === 5 && locale === threeLetterLocale) {
        threeLetterLocale = null;
      } else if (threeLetterLocale.length === 0) {
        threeLetterLocale = null;
      }
      if (threeLetterLocale !== null) {
        if (threeLetterLocale.length !== 3) {
          throw new Error(`Invalid three-letter locale: ${JSON.stringify(row)}`);
        }
        if (!threeLetterLocale.match(/^[a-z]{3}$/)) {
          throw new Error(`Invalid three-letter locale: ${JSON.stringify(row)}`);
        }
      }
      englishName = englishName.trim().replace(/\u00A0/g, ' ');
      if (englishName.length < 1) {
        throw new Error(`Invalid English name: ${JSON.stringify(row)}`);
      }
      localizedName = localizedName.trim().replace(/\u00A0/g, ' ');
      if (localizedName.length < 1) {
        throw new Error(`Invalid localized name: ${JSON.stringify(row)}`);
      }

      // patch in
      if (locale === 'pt_ST') {
        direction = 'ltr';
      }
      if (direction !== 'ltr' && direction !== 'rtl') {
        throw new Error(`Invalid direction: ${JSON.stringify(row)}`);
      }
      const fallbackLocales = fallback.trim().split(',').map(x => x.trim()).filter(l => l !== 'en');
      const result = {
        locale: locale
      };
      if (threeLetterLocale) {
        result.locale3 = threeLetterLocale;
      }
      result.englishName = englishName;
      result.localizedName = localizedName;
      result.direction = direction;
      if (fallbackLocales.length) {
        result.fallbackLocales = fallbackLocales;
      }
      return result;
    });
    localeMainData.forEach(localeData => {
      localeData.fallbackLocales && localeData.fallbackLocales.forEach(fallbackLocale => {
        if (!localeMainData.find(x => x.locale === fallbackLocale)) {
          throw new Error(`Invalid fallback locale: ${JSON.stringify(localeData)}`);
        }
      });
    });
    localeMainData.sort((a, b) => {
      return a.locale.localeCompare(b.locale);
    });
    const localeInfo = {};
    localeMainData.forEach(localeData => {
      const locale = localeData.locale;
      delete localeData.locale;
      localeInfo[locale] = localeData;
    });
    const localeInfoString = JSON.stringify(localeInfo, null, 2);
    console.log(localeInfoString);

    // legacy localeInfo.js, that will be propagated to the other copies
    {
      const legacyLocaleInfoPrimaryFilename = '../chipper/js/data/localeInfo.js';
      if (!fs.existsSync(legacyLocaleInfoPrimaryFilename)) {
        throw new Error(`Expected to find ${legacyLocaleInfoPrimaryFilename}`);
      }
      const legacyLocaleInfoPrimary = fs.readFileSync(legacyLocaleInfoPrimaryFilename, 'utf8');
      const startIndex = legacyLocaleInfoPrimary.indexOf('const locales = {');
      const endIndex = legacyLocaleInfoPrimary.indexOf('module.exports = locales;', startIndex);
      if (startIndex === -1 || endIndex === -1) {
        throw new Error('Failed to find localeInfo.js locales object');
      }
      let replacement = 'const locales = {\n';
      for (const locale in localeInfo) {
        replacement += `  ${locale}: {\n`;
        replacement += `    name: '${localeInfo[locale].englishName.replace(/'/g, '\\\'')}',\n`;
        replacement += `    localizedName: '${localeInfo[locale].localizedName.replace(/'/g, '\\\'')}',\n`;
        replacement += `    direction: '${localeInfo[locale].direction}'\n`;
        replacement += '  },\n';
      }
      replacement += '};\n\n';
      const newLocaleInfoPrimary = legacyLocaleInfoPrimary.substring(0, startIndex) + replacement + legacyLocaleInfoPrimary.substring(endIndex);
      fs.writeFileSync(legacyLocaleInfoPrimaryFilename, newLocaleInfoPrimary, 'utf8');
    }

    // New babel localeData
    {
      const babelExtendedLocaleInfoFilename = '../babel/localeData.json';
      fs.writeFileSync(babelExtendedLocaleInfoFilename, localeInfoString);
    }
  }
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJjc3YiLCJmaWxlUGF0aCIsInByb2Nlc3MiLCJhcmd2IiwicGFyc2VDU1YiLCJjYWxsYmFjayIsInJvd3MiLCJjcmVhdGVSZWFkU3RyZWFtIiwicGlwZSIsIm9uIiwicm93IiwidmFsdWVzIiwiT2JqZWN0IiwicHVzaCIsImVycm9yIiwiZGF0YSIsImNvbnNvbGUiLCJsb2NhbGVNYWluRGF0YSIsIm1hcCIsImxvY2FsZSIsInRocmVlTGV0dGVyTG9jYWxlIiwiZW5nbGlzaE5hbWUiLCJsb2NhbGl6ZWROYW1lIiwiZGlyZWN0aW9uIiwiZmFsbGJhY2siLCJ0cmltIiwibGVuZ3RoIiwiRXJyb3IiLCJKU09OIiwic3RyaW5naWZ5IiwibWF0Y2giLCJyZXBsYWNlIiwiZmFsbGJhY2tMb2NhbGVzIiwic3BsaXQiLCJ4IiwiZmlsdGVyIiwibCIsInJlc3VsdCIsImxvY2FsZTMiLCJmb3JFYWNoIiwibG9jYWxlRGF0YSIsImZhbGxiYWNrTG9jYWxlIiwiZmluZCIsInNvcnQiLCJhIiwiYiIsImxvY2FsZUNvbXBhcmUiLCJsb2NhbGVJbmZvIiwibG9jYWxlSW5mb1N0cmluZyIsImxvZyIsImxlZ2FjeUxvY2FsZUluZm9QcmltYXJ5RmlsZW5hbWUiLCJleGlzdHNTeW5jIiwibGVnYWN5TG9jYWxlSW5mb1ByaW1hcnkiLCJyZWFkRmlsZVN5bmMiLCJzdGFydEluZGV4IiwiaW5kZXhPZiIsImVuZEluZGV4IiwicmVwbGFjZW1lbnQiLCJuZXdMb2NhbGVJbmZvUHJpbWFyeSIsInN1YnN0cmluZyIsIndyaXRlRmlsZVN5bmMiLCJiYWJlbEV4dGVuZGVkTG9jYWxlSW5mb0ZpbGVuYW1lIl0sInNvdXJjZXMiOlsiaW5pdGlhbC1wYXJzZS1sb2NhbGVzLWNzdi5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIHJlcXVpcmUtc3RhdGVtZW50LW1hdGNoXHJcbmNvbnN0IGNzdiA9IHJlcXVpcmUoICdjc3YtcGFyc2VyJyApO1xyXG5cclxuY29uc3QgZmlsZVBhdGggPSBwcm9jZXNzLmFyZ3ZbIDIgXTtcclxuXHJcbi8qKlxyXG4gKiBSZWFkIGluIHRoZSBDU1YgZXhwb3J0IGZyb20gdGhlIGxvY2FsZXMgc3ByZWFkc2hlZXQgKFwiRmluYWwoZGV2KVwiIGZvcm1hdCkgYW5kIHBhcnNlIGl0IGludG8gYSBsb2NhbGVKU09OIGZvcm1hdC5cclxuICpcclxuICogQGF1dGhvciBKb25hdGhhbiBPbHNvbiA8am9uYXRoYW4ub2xzb25AY29sb3JhZG8uZWR1PlxyXG4gKi9cclxuXHJcbmNvbnN0IHBhcnNlQ1NWID0gKCBmaWxlUGF0aCwgY2FsbGJhY2sgKSA9PiB7XHJcbiAgY29uc3Qgcm93cyA9IFtdO1xyXG5cclxuICBmcy5jcmVhdGVSZWFkU3RyZWFtKCBmaWxlUGF0aCApXHJcbiAgICAucGlwZSggY3N2KCkgKVxyXG4gICAgLm9uKCAnZGF0YScsIHJvdyA9PiB7XHJcbiAgICAgIGNvbnN0IHZhbHVlcyA9IE9iamVjdC52YWx1ZXMoIHJvdyApO1xyXG4gICAgICByb3dzLnB1c2goIHZhbHVlcyApO1xyXG4gICAgfSApXHJcbiAgICAub24oICdlbmQnLCAoKSA9PiB7XHJcbiAgICAgIGNhbGxiYWNrKCBudWxsLCByb3dzICk7XHJcbiAgICB9IClcclxuICAgIC5vbiggJ2Vycm9yJywgZXJyb3IgPT4ge1xyXG4gICAgICBjYWxsYmFjayggZXJyb3IsIG51bGwgKTtcclxuICAgIH0gKTtcclxufTtcclxuXHJcbnBhcnNlQ1NWKCBmaWxlUGF0aCwgKCBlcnJvciwgZGF0YSApID0+IHtcclxuICBpZiAoIGVycm9yICkge1xyXG4gICAgY29uc29sZS5lcnJvciggJ0Vycm9yIHBhcnNpbmcgQ1NWOicsIGVycm9yICk7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG4gICAgY29uc3QgbG9jYWxlTWFpbkRhdGEgPSBkYXRhLm1hcCggcm93ID0+IHtcclxuICAgICAgbGV0IGxvY2FsZSA9IHJvd1sgMSBdO1xyXG4gICAgICBsZXQgdGhyZWVMZXR0ZXJMb2NhbGUgPSByb3dbIDIgXTtcclxuICAgICAgbGV0IGVuZ2xpc2hOYW1lID0gcm93WyAzIF07XHJcbiAgICAgIGxldCBsb2NhbGl6ZWROYW1lID0gcm93WyA0IF07XHJcbiAgICAgIGxldCBkaXJlY3Rpb24gPSByb3dbIDUgXTtcclxuICAgICAgY29uc3QgZmFsbGJhY2sgPSByb3dbIDYgXTtcclxuICAgICAgXHJcbiAgICAgIGxvY2FsZSA9IGxvY2FsZS50cmltKCk7XHJcblxyXG4gICAgICBpZiAoIGxvY2FsZS5sZW5ndGggIT09IDIgJiYgbG9jYWxlLmxlbmd0aCAhPT0gNSApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIGBJbnZhbGlkIGxvY2FsZTogJHtKU09OLnN0cmluZ2lmeSggbG9jYWxlICl9YCApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoICFsb2NhbGVbIDAgXS5tYXRjaCggL1thLXpdLyApICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvciggYEludmFsaWQgbG9jYWxlOiAke2xvY2FsZX1gICk7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCAhbG9jYWxlWyAxIF0ubWF0Y2goIC9bYS16XS8gKSApIHtcclxuICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIGBJbnZhbGlkIGxvY2FsZTogJHtsb2NhbGV9YCApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIGxvY2FsZS5sZW5ndGggPT09IDUgKSB7XHJcbiAgICAgICAgaWYgKCBsb2NhbGVbIDIgXSAhPT0gJ18nICkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBgSW52YWxpZCBsb2NhbGU6ICR7bG9jYWxlfWAgKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCAhbG9jYWxlWyAzIF0ubWF0Y2goIC9bQS1aXS8gKSApIHtcclxuICAgICAgICAgIHRocm93IG5ldyBFcnJvciggYEludmFsaWQgbG9jYWxlOiAke2xvY2FsZX1gICk7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmICggIWxvY2FsZVsgNCBdLm1hdGNoKCAvW0EtWl0vICkgKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIGBJbnZhbGlkIGxvY2FsZTogJHtsb2NhbGV9YCApO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG5cclxuICAgICAgdGhyZWVMZXR0ZXJMb2NhbGUgPSB0aHJlZUxldHRlckxvY2FsZS50cmltKCk7IC8vIHJlbW92ZSB0YWJcclxuXHJcbiAgICAgIGlmICggdGhyZWVMZXR0ZXJMb2NhbGUubGVuZ3RoID09PSA1ICYmIGxvY2FsZSA9PT0gdGhyZWVMZXR0ZXJMb2NhbGUgKSB7XHJcbiAgICAgICAgdGhyZWVMZXR0ZXJMb2NhbGUgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2UgaWYgKCB0aHJlZUxldHRlckxvY2FsZS5sZW5ndGggPT09IDAgKSB7XHJcbiAgICAgICAgdGhyZWVMZXR0ZXJMb2NhbGUgPSBudWxsO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBpZiAoIHRocmVlTGV0dGVyTG9jYWxlICE9PSBudWxsICkge1xyXG4gICAgICAgIGlmICggdGhyZWVMZXR0ZXJMb2NhbGUubGVuZ3RoICE9PSAzICkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBgSW52YWxpZCB0aHJlZS1sZXR0ZXIgbG9jYWxlOiAke0pTT04uc3RyaW5naWZ5KCByb3cgKX1gICk7XHJcbiAgICAgICAgfVxyXG5cclxuICAgICAgICBpZiAoICF0aHJlZUxldHRlckxvY2FsZS5tYXRjaCggL15bYS16XXszfSQvICkgKSB7XHJcbiAgICAgICAgICB0aHJvdyBuZXcgRXJyb3IoIGBJbnZhbGlkIHRocmVlLWxldHRlciBsb2NhbGU6ICR7SlNPTi5zdHJpbmdpZnkoIHJvdyApfWAgKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGVuZ2xpc2hOYW1lID0gZW5nbGlzaE5hbWUudHJpbSgpLnJlcGxhY2UoIC9cXHUwMEEwL2csICcgJyApO1xyXG5cclxuICAgICAgaWYgKCBlbmdsaXNoTmFtZS5sZW5ndGggPCAxICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvciggYEludmFsaWQgRW5nbGlzaCBuYW1lOiAke0pTT04uc3RyaW5naWZ5KCByb3cgKX1gICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGxvY2FsaXplZE5hbWUgPSBsb2NhbGl6ZWROYW1lLnRyaW0oKS5yZXBsYWNlKCAvXFx1MDBBMC9nLCAnICcgKTtcclxuXHJcbiAgICAgIGlmICggbG9jYWxpemVkTmFtZS5sZW5ndGggPCAxICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvciggYEludmFsaWQgbG9jYWxpemVkIG5hbWU6ICR7SlNPTi5zdHJpbmdpZnkoIHJvdyApfWAgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgLy8gcGF0Y2ggaW5cclxuICAgICAgaWYgKCBsb2NhbGUgPT09ICdwdF9TVCcgKSB7XHJcbiAgICAgICAgZGlyZWN0aW9uID0gJ2x0cic7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGlmICggZGlyZWN0aW9uICE9PSAnbHRyJyAmJiBkaXJlY3Rpb24gIT09ICdydGwnICkge1xyXG4gICAgICAgIHRocm93IG5ldyBFcnJvciggYEludmFsaWQgZGlyZWN0aW9uOiAke0pTT04uc3RyaW5naWZ5KCByb3cgKX1gICk7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIGNvbnN0IGZhbGxiYWNrTG9jYWxlcyA9IGZhbGxiYWNrLnRyaW0oKS5zcGxpdCggJywnICkubWFwKCB4ID0+IHgudHJpbSgpICkuZmlsdGVyKCBsID0+IGwgIT09ICdlbicgKTtcclxuXHJcbiAgICAgIGNvbnN0IHJlc3VsdCA9IHtcclxuICAgICAgICBsb2NhbGU6IGxvY2FsZVxyXG4gICAgICB9O1xyXG5cclxuICAgICAgaWYgKCB0aHJlZUxldHRlckxvY2FsZSApIHtcclxuICAgICAgICByZXN1bHQubG9jYWxlMyA9IHRocmVlTGV0dGVyTG9jYWxlO1xyXG4gICAgICB9XHJcblxyXG4gICAgICByZXN1bHQuZW5nbGlzaE5hbWUgPSBlbmdsaXNoTmFtZTtcclxuICAgICAgcmVzdWx0LmxvY2FsaXplZE5hbWUgPSBsb2NhbGl6ZWROYW1lO1xyXG4gICAgICByZXN1bHQuZGlyZWN0aW9uID0gZGlyZWN0aW9uO1xyXG5cclxuICAgICAgaWYgKCBmYWxsYmFja0xvY2FsZXMubGVuZ3RoICkge1xyXG4gICAgICAgIHJlc3VsdC5mYWxsYmFja0xvY2FsZXMgPSBmYWxsYmFja0xvY2FsZXM7XHJcbiAgICAgIH1cclxuXHJcbiAgICAgIHJldHVybiByZXN1bHQ7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgbG9jYWxlTWFpbkRhdGEuZm9yRWFjaCggbG9jYWxlRGF0YSA9PiB7XHJcbiAgICAgIGxvY2FsZURhdGEuZmFsbGJhY2tMb2NhbGVzICYmIGxvY2FsZURhdGEuZmFsbGJhY2tMb2NhbGVzLmZvckVhY2goIGZhbGxiYWNrTG9jYWxlID0+IHtcclxuICAgICAgICBpZiAoICFsb2NhbGVNYWluRGF0YS5maW5kKCB4ID0+IHgubG9jYWxlID09PSBmYWxsYmFja0xvY2FsZSApICkge1xyXG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBgSW52YWxpZCBmYWxsYmFjayBsb2NhbGU6ICR7SlNPTi5zdHJpbmdpZnkoIGxvY2FsZURhdGEgKX1gICk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9ICk7XHJcbiAgICB9ICk7XHJcblxyXG4gICAgbG9jYWxlTWFpbkRhdGEuc29ydCggKCBhLCBiICkgPT4ge1xyXG4gICAgICByZXR1cm4gYS5sb2NhbGUubG9jYWxlQ29tcGFyZSggYi5sb2NhbGUgKTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsb2NhbGVJbmZvID0ge307XHJcblxyXG4gICAgbG9jYWxlTWFpbkRhdGEuZm9yRWFjaCggbG9jYWxlRGF0YSA9PiB7XHJcbiAgICAgIGNvbnN0IGxvY2FsZSA9IGxvY2FsZURhdGEubG9jYWxlO1xyXG4gICAgICBkZWxldGUgbG9jYWxlRGF0YS5sb2NhbGU7XHJcbiAgICAgIGxvY2FsZUluZm9bIGxvY2FsZSBdID0gbG9jYWxlRGF0YTtcclxuICAgIH0gKTtcclxuXHJcbiAgICBjb25zdCBsb2NhbGVJbmZvU3RyaW5nID0gSlNPTi5zdHJpbmdpZnkoIGxvY2FsZUluZm8sIG51bGwsIDIgKTtcclxuICAgIGNvbnNvbGUubG9nKCBsb2NhbGVJbmZvU3RyaW5nICk7XHJcblxyXG4gICAgLy8gbGVnYWN5IGxvY2FsZUluZm8uanMsIHRoYXQgd2lsbCBiZSBwcm9wYWdhdGVkIHRvIHRoZSBvdGhlciBjb3BpZXNcclxuICAgIHtcclxuICAgICAgY29uc3QgbGVnYWN5TG9jYWxlSW5mb1ByaW1hcnlGaWxlbmFtZSA9ICcuLi9jaGlwcGVyL2pzL2RhdGEvbG9jYWxlSW5mby5qcyc7XHJcblxyXG4gICAgICBpZiAoICFmcy5leGlzdHNTeW5jKCBsZWdhY3lMb2NhbGVJbmZvUHJpbWFyeUZpbGVuYW1lICkgKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCBgRXhwZWN0ZWQgdG8gZmluZCAke2xlZ2FjeUxvY2FsZUluZm9QcmltYXJ5RmlsZW5hbWV9YCApO1xyXG4gICAgICB9XHJcblxyXG4gICAgICBjb25zdCBsZWdhY3lMb2NhbGVJbmZvUHJpbWFyeSA9IGZzLnJlYWRGaWxlU3luYyggbGVnYWN5TG9jYWxlSW5mb1ByaW1hcnlGaWxlbmFtZSwgJ3V0ZjgnICk7XHJcblxyXG4gICAgICBjb25zdCBzdGFydEluZGV4ID0gbGVnYWN5TG9jYWxlSW5mb1ByaW1hcnkuaW5kZXhPZiggJ2NvbnN0IGxvY2FsZXMgPSB7JyApO1xyXG4gICAgICBjb25zdCBlbmRJbmRleCA9IGxlZ2FjeUxvY2FsZUluZm9QcmltYXJ5LmluZGV4T2YoICdtb2R1bGUuZXhwb3J0cyA9IGxvY2FsZXM7Jywgc3RhcnRJbmRleCApO1xyXG5cclxuICAgICAgaWYgKCBzdGFydEluZGV4ID09PSAtMSB8fCBlbmRJbmRleCA9PT0gLTEgKSB7XHJcbiAgICAgICAgdGhyb3cgbmV3IEVycm9yKCAnRmFpbGVkIHRvIGZpbmQgbG9jYWxlSW5mby5qcyBsb2NhbGVzIG9iamVjdCcgKTtcclxuICAgICAgfVxyXG5cclxuICAgICAgbGV0IHJlcGxhY2VtZW50ID0gJ2NvbnN0IGxvY2FsZXMgPSB7XFxuJztcclxuXHJcbiAgICAgIGZvciAoIGNvbnN0IGxvY2FsZSBpbiBsb2NhbGVJbmZvICkge1xyXG4gICAgICAgIHJlcGxhY2VtZW50ICs9IGAgICR7bG9jYWxlfToge1xcbmA7XHJcbiAgICAgICAgcmVwbGFjZW1lbnQgKz0gYCAgICBuYW1lOiAnJHtsb2NhbGVJbmZvWyBsb2NhbGUgXS5lbmdsaXNoTmFtZS5yZXBsYWNlKCAvJy9nLCAnXFxcXFxcJycgKX0nLFxcbmA7XHJcbiAgICAgICAgcmVwbGFjZW1lbnQgKz0gYCAgICBsb2NhbGl6ZWROYW1lOiAnJHtsb2NhbGVJbmZvWyBsb2NhbGUgXS5sb2NhbGl6ZWROYW1lLnJlcGxhY2UoIC8nL2csICdcXFxcXFwnJyApfScsXFxuYDtcclxuICAgICAgICByZXBsYWNlbWVudCArPSBgICAgIGRpcmVjdGlvbjogJyR7bG9jYWxlSW5mb1sgbG9jYWxlIF0uZGlyZWN0aW9ufSdcXG5gO1xyXG4gICAgICAgIHJlcGxhY2VtZW50ICs9ICcgIH0sXFxuJztcclxuICAgICAgfVxyXG5cclxuICAgICAgcmVwbGFjZW1lbnQgKz0gJ307XFxuXFxuJztcclxuXHJcbiAgICAgIGNvbnN0IG5ld0xvY2FsZUluZm9QcmltYXJ5ID0gbGVnYWN5TG9jYWxlSW5mb1ByaW1hcnkuc3Vic3RyaW5nKCAwLCBzdGFydEluZGV4ICkgKyByZXBsYWNlbWVudCArIGxlZ2FjeUxvY2FsZUluZm9QcmltYXJ5LnN1YnN0cmluZyggZW5kSW5kZXggKTtcclxuXHJcbiAgICAgIGZzLndyaXRlRmlsZVN5bmMoIGxlZ2FjeUxvY2FsZUluZm9QcmltYXJ5RmlsZW5hbWUsIG5ld0xvY2FsZUluZm9QcmltYXJ5LCAndXRmOCcgKTtcclxuICAgIH1cclxuXHJcbiAgICAvLyBOZXcgYmFiZWwgbG9jYWxlRGF0YVxyXG4gICAge1xyXG4gICAgICBjb25zdCBiYWJlbEV4dGVuZGVkTG9jYWxlSW5mb0ZpbGVuYW1lID0gJy4uL2JhYmVsL2xvY2FsZURhdGEuanNvbic7XHJcblxyXG4gICAgICBmcy53cml0ZUZpbGVTeW5jKCBiYWJlbEV4dGVuZGVkTG9jYWxlSW5mb0ZpbGVuYW1lLCBsb2NhbGVJbmZvU3RyaW5nICk7XHJcbiAgICB9XHJcbiAgfVxyXG59ICk7Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQSxNQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBRSxJQUFLLENBQUM7QUFDMUI7QUFDQSxNQUFNQyxHQUFHLEdBQUdELE9BQU8sQ0FBRSxZQUFhLENBQUM7QUFFbkMsTUFBTUUsUUFBUSxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBRSxDQUFDLENBQUU7O0FBRWxDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsTUFBTUMsUUFBUSxHQUFHQSxDQUFFSCxRQUFRLEVBQUVJLFFBQVEsS0FBTTtFQUN6QyxNQUFNQyxJQUFJLEdBQUcsRUFBRTtFQUVmUixFQUFFLENBQUNTLGdCQUFnQixDQUFFTixRQUFTLENBQUMsQ0FDNUJPLElBQUksQ0FBRVIsR0FBRyxDQUFDLENBQUUsQ0FBQyxDQUNiUyxFQUFFLENBQUUsTUFBTSxFQUFFQyxHQUFHLElBQUk7SUFDbEIsTUFBTUMsTUFBTSxHQUFHQyxNQUFNLENBQUNELE1BQU0sQ0FBRUQsR0FBSSxDQUFDO0lBQ25DSixJQUFJLENBQUNPLElBQUksQ0FBRUYsTUFBTyxDQUFDO0VBQ3JCLENBQUUsQ0FBQyxDQUNGRixFQUFFLENBQUUsS0FBSyxFQUFFLE1BQU07SUFDaEJKLFFBQVEsQ0FBRSxJQUFJLEVBQUVDLElBQUssQ0FBQztFQUN4QixDQUFFLENBQUMsQ0FDRkcsRUFBRSxDQUFFLE9BQU8sRUFBRUssS0FBSyxJQUFJO0lBQ3JCVCxRQUFRLENBQUVT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