// Copyright 2021, University of Colorado Boulder

const fs = require('fs');

/**
 *
 * Autofix missing accessibility modifiers. NOTE: This script is horribly inefficient, writing the same file over and over
 * N times, where N is the number of errors in that file.
 *
 * USAGE:
 * (1) Make sure you have a clean working copy
 * (2) cd directory-with-all-repos
 * (3) Generate a lint report and save it in a file
 *       cd axon
 *       grunt lint > lintreport.txt
 * (4) Run the script
 *       cd ..
 *       node perennial/js/scripts/add-accessibility-modifier axon/lintreport.txt private
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
(async () => {
  const args = process.argv.slice(2);
  const filename = args[0];
  const modifier = args[1];
  const report = fs.readFileSync(filename, 'utf8').trim();
  const lines = report.split('\n').map(sim => sim.trim());
  let currentFile = null;
  lines.forEach(line => {
    if (line.endsWith('.ts') && (line.includes('/') || line.includes('\\'))) {
      currentFile = line;
    } else if (line.includes('error') && line.endsWith('@typescript-eslint/explicit-member-accessibility')) {
      const substring = line.substring(0, line.indexOf('error'));
      const terms = substring.trim().split(':');
      const lineNumber = Number(terms[0]);
      const column = Number(terms[1]);
      console.log(currentFile, lineNumber, column);
      const file = fs.readFileSync(currentFile, 'utf8');
      const lines = file.split('\n');
      lines[lineNumber - 1] = lines[lineNumber - 1].substring(0, column - 1) + modifier + ' ' + lines[lineNumber - 1].substring(column - 1);
      console.log(lines[lineNumber - 1]);
      fs.writeFileSync(currentFile, lines.join('\n'));
    }
  });
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJmcyIsInJlcXVpcmUiLCJhcmdzIiwicHJvY2VzcyIsImFyZ3YiLCJzbGljZSIsImZpbGVuYW1lIiwibW9kaWZpZXIiLCJyZXBvcnQiLCJyZWFkRmlsZVN5bmMiLCJ0cmltIiwibGluZXMiLCJzcGxpdCIsIm1hcCIsInNpbSIsImN1cnJlbnRGaWxlIiwiZm9yRWFjaCIsImxpbmUiLCJlbmRzV2l0aCIsImluY2x1ZGVzIiwic3Vic3RyaW5nIiwiaW5kZXhPZiIsInRlcm1zIiwibGluZU51bWJlciIsIk51bWJlciIsImNvbHVtbiIsImNvbnNvbGUiLCJsb2ciLCJmaWxlIiwid3JpdGVGaWxlU3luYyIsImpvaW4iXSwic291cmNlcyI6WyJhZGQtYWNjZXNzaWJpbGl0eS1tb2RpZmllci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMSwgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcblxyXG5jb25zdCBmcyA9IHJlcXVpcmUoICdmcycgKTtcclxuXHJcbi8qKlxyXG4gKlxyXG4gKiBBdXRvZml4IG1pc3NpbmcgYWNjZXNzaWJpbGl0eSBtb2RpZmllcnMuIE5PVEU6IFRoaXMgc2NyaXB0IGlzIGhvcnJpYmx5IGluZWZmaWNpZW50LCB3cml0aW5nIHRoZSBzYW1lIGZpbGUgb3ZlciBhbmQgb3ZlclxyXG4gKiBOIHRpbWVzLCB3aGVyZSBOIGlzIHRoZSBudW1iZXIgb2YgZXJyb3JzIGluIHRoYXQgZmlsZS5cclxuICpcclxuICogVVNBR0U6XHJcbiAqICgxKSBNYWtlIHN1cmUgeW91IGhhdmUgYSBjbGVhbiB3b3JraW5nIGNvcHlcclxuICogKDIpIGNkIGRpcmVjdG9yeS13aXRoLWFsbC1yZXBvc1xyXG4gKiAoMykgR2VuZXJhdGUgYSBsaW50IHJlcG9ydCBhbmQgc2F2ZSBpdCBpbiBhIGZpbGVcclxuICogICAgICAgY2QgYXhvblxyXG4gKiAgICAgICBncnVudCBsaW50ID4gbGludHJlcG9ydC50eHRcclxuICogKDQpIFJ1biB0aGUgc2NyaXB0XHJcbiAqICAgICAgIGNkIC4uXHJcbiAqICAgICAgIG5vZGUgcGVyZW5uaWFsL2pzL3NjcmlwdHMvYWRkLWFjY2Vzc2liaWxpdHktbW9kaWZpZXIgYXhvbi9saW50cmVwb3J0LnR4dCBwcml2YXRlXHJcbiAqXHJcbiAqIEBhdXRob3IgU2FtIFJlaWQgKFBoRVQgSW50ZXJhY3RpdmUgU2ltdWxhdGlvbnMpXHJcbiAqL1xyXG4oIGFzeW5jICgpID0+IHtcclxuICBjb25zdCBhcmdzID0gcHJvY2Vzcy5hcmd2LnNsaWNlKCAyICk7XHJcbiAgY29uc3QgZmlsZW5hbWUgPSBhcmdzWyAwIF07XHJcbiAgY29uc3QgbW9kaWZpZXIgPSBhcmdzWyAxIF07XHJcblxyXG4gIGNvbnN0IHJlcG9ydCA9IGZzLnJlYWRGaWxlU3luYyggZmlsZW5hbWUsICd1dGY4JyApLnRyaW0oKTtcclxuICBjb25zdCBsaW5lcyA9IHJlcG9ydC5zcGxpdCggJ1xcbicgKS5tYXAoIHNpbSA9PiBzaW0udHJpbSgpICk7XHJcblxyXG4gIGxldCBjdXJyZW50RmlsZSA9IG51bGw7XHJcbiAgbGluZXMuZm9yRWFjaCggbGluZSA9PiB7XHJcbiAgICBpZiAoIGxpbmUuZW5kc1dpdGgoICcudHMnICkgJiYgKCBsaW5lLmluY2x1ZGVzKCAnLycgKSB8fCBsaW5lLmluY2x1ZGVzKCAnXFxcXCcgKSApICkge1xyXG4gICAgICBjdXJyZW50RmlsZSA9IGxpbmU7XHJcbiAgICB9XHJcbiAgICBlbHNlIGlmICggbGluZS5pbmNsdWRlcyggJ2Vycm9yJyApICYmIGxpbmUuZW5kc1dpdGgoICdAdHlwZXNjcmlwdC1lc2xpbnQvZXhwbGljaXQtbWVtYmVyLWFjY2Vzc2liaWxpdHknICkgKSB7XHJcbiAgICAgIGNvbnN0IHN1YnN0cmluZyA9IGxpbmUuc3Vic3RyaW5nKCAwLCBsaW5lLmluZGV4T2YoICdlcnJvcicgKSApO1xyXG4gICAgICBjb25zdCB0ZXJtcyA9IHN1YnN0cmluZy50cmltKCkuc3BsaXQoICc6JyApO1xyXG4gICAgICBjb25zdCBsaW5lTnVtYmVyID0gTnVtYmVyKCB0ZXJtc1sgMCBdICk7XHJcbiAgICAgIGNvbnN0IGNvbHVtbiA9IE51bWJlciggdGVybXNbIDEgXSApO1xyXG5cclxuICAgICAgY29uc29sZS5sb2coIGN1cnJlbnRGaWxlLCBsaW5lTnVtYmVyLCBjb2x1bW4gKTtcclxuXHJcbiAgICAgIGNvbnN0IGZpbGUgPSBmcy5yZWFkRmlsZVN5bmMoIGN1cnJlbnRGaWxlLCAndXRmOCcgKTtcclxuICAgICAgY29uc3QgbGluZXMgPSBmaWxlLnNwbGl0KCAnXFxuJyApO1xyXG5cclxuICAgICAgbGluZXNbIGxpbmVOdW1iZXIgLSAxIF0gPSBsaW5lc1sgbGluZU51bWJlciAtIDEgXS5zdWJzdHJpbmcoIDAsIGNvbHVtbiAtIDEgKSArIG1vZGlmaWVyICsgJyAnICsgbGluZXNbIGxpbmVOdW1iZXIgLSAxIF0uc3Vic3RyaW5nKCBjb2x1bW4gLSAxICk7XHJcbiAgICAgIGNvbnNvbGUubG9nKCBsaW5lc1sgbGluZU51bWJlciAtIDEgXSApO1xyXG5cclxuICAgICAgZnMud3JpdGVGaWxlU3luYyggY3VycmVudEZpbGUsIGxpbmVzLmpvaW4oICdcXG4nICkgKTtcclxuICAgIH1cclxuICB9ICk7XHJcbn0gKSgpOyJdLCJtYXBwaW5ncyI6IkFBQUE7O0FBRUEsTUFBTUEsRUFBRSxHQUFHQyxPQUFPLENBQUUsSUFBSyxDQUFDOztBQUUxQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBRSxZQUFZO0VBQ1osTUFBTUMsSUFBSSxHQUFHQyxPQUFPLENBQUNDLElBQUksQ0FBQ0MsS0FBSyxDQUFFLENBQUUsQ0FBQztFQUNwQyxNQUFNQyxRQUFRLEdBQUdKLElBQUksQ0FBRSxDQUFDLENBQUU7RUFDMUIsTUFBTUssUUFBUSxHQUFHTCxJQUFJLENBQUUsQ0FBQyxDQUFFO0VBRTFCLE1BQU1NLE1BQU0sR0FBR1IsRUFBRSxDQUFDUyxZQUFZLENBQUVILFFBQVEsRUFBRSxNQUFPLENBQUMsQ0FBQ0ksSUFBSSxDQUFDLENBQUM7RUFDekQsTUFBTUMsS0FBSyxHQUFHSCxNQUFNLENBQUNJLEtBQUssQ0FBRSxJQUFLLENBQUMsQ0FBQ0MsR0FBRyxDQUFFQyxHQUFHLElBQUlBLEdBQUcsQ0FBQ0osSUFBSSxDQUFDLENBQUUsQ0FBQztFQUUzRCxJQUFJSyxXQUFXLEdBQUcsSUFBSTtFQUN0QkosS0FBSyxDQUFDSyxPQUFPLENBQUVDLElBQUksSUFBSTtJQUNyQixJQUFLQSxJQUFJLENBQUNDLFFBQVEsQ0FBRSxLQUFNLENBQUMsS0FBTUQsSUFBSSxDQUFDRSxRQUFRLENBQUUsR0FBSSxDQUFDLElBQUlGLElBQUksQ0FBQ0UsUUFBUSxDQUFFLElBQUssQ0FBQyxDQUFFLEVBQUc7TUFDakZKLFdBQVcsR0FBR0UsSUFBSTtJQUNwQixDQUFDLE1BQ0ksSUFBS0EsSUFBSSxDQUFDRSxRQUFRLENBQUUsT0FBUSxDQUFDLElBQUlGLElBQUksQ0FBQ0MsUUFBUSxDQUFFLGtEQUFtRCxDQUFDLEVBQUc7TUFDMUcsTUFBTUUsU0FBUyxHQUFHSCxJQUFJLENBQUNHLFNBQVMsQ0FBRSxDQUFDLEVBQUVILElBQUksQ0FBQ0ksT0FBTyxDQUFFLE9BQVEsQ0FBRSxDQUFDO01BQzlELE1BQU1DLEtBQUssR0FBR0YsU0FBUyxDQUFDVixJQUFJLENBQUMsQ0FBQyxDQUFDRSxLQUFLLENBQUUsR0FBSSxDQUFDO01BQzNDLE1BQU1XLFVBQVUsR0FBR0MsTUFBTSxDQUFFRixLQUFLLENBQUUsQ0FBQyxDQUFHLENBQUM7TUFDdkMsTUFBTUcsTUFBTSxHQUFHRCxNQUFNLENBQUVGLEtBQUssQ0FBRSxDQUFDLENBQUcsQ0FBQztNQUVuQ0ksT0FBTyxDQUFDQyxHQUFHLENBQUVaLFdBQVcsRUFBRVEsVUFBVSxFQUFFRSxNQUFPLENBQUM7TUFFOUMsTUFBTUcsSUFBSSxHQUFHNUIsRUFBRSxDQUFDUyxZQUFZLENBQUVNLFdBQVcsRUFBRSxNQUFPLENBQUM7TUFDbkQsTUFBTUosS0FBSyxHQUFHaUIsSUFBSSxDQUFDaEIsS0FBSyxDQUFFLElBQUssQ0FBQztNQUVoQ0QsS0FBSyxDQUFFWSxVQUFVLEdBQUcsQ0FBQyxDQUFFLEdBQUdaLEtBQUssQ0FBRVksVUFBVSxHQUFHLENBQUMsQ0FBRSxDQUFDSCxTQUFTLENBQUUsQ0FBQyxFQUFFSyxNQUFNLEdBQUcsQ0FBRSxDQUFDLEdBQUdsQixRQUFRLEdBQUcsR0FBRyxHQUFHSSxLQUFLLENBQUVZLFVBQVUsR0FBRyxDQUFDLENBQUUsQ0FBQ0gsU0FBUyxDQUFFSyxNQUFNLEdBQUcsQ0FBRSxDQUFDO01BQy9JQyxPQUFPLENBQUNDLEdBQUcsQ0FBRWhCLEtBQUssQ0FBRVksVUFBVSxHQUFHLENBQUMsQ0FBRyxDQUFDO01BRXRDdkIsRUFBRSxDQUFDNkIsYUFBYSxDQUFFZCxXQUFXLEVBQUVKLEtBQUssQ0FBQ21CLElBQUksQ0FBRSxJQUFLLENBQUUsQ0FBQztJQUNyRDtFQUNGLENBQUUsQ0FBQztBQUNMLENBQUMsRUFBRyxDQUFDIiwiaWdub3JlTGlzdCI6W119