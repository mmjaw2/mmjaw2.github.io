// Copyright 2021, University of Colorado Boulder

const execute = require('../common/execute');
const fs = require('fs');

// constants
// Don't use getActiveRepos() since it cannot be run from the root
const contents = fs.readFileSync('perennial/data/active-repos', 'utf8').trim();
const repos = contents.split('\n').map(sim => sim.trim());

/**
 * Pulls all repos (with rebase)
 *
 * USAGE:
 * cd ${root containing all repos}
 * node perennial/js/scripts/pull-all.js
 *
 * @author Sam Reid (PhET Interactive Simulations)
 */
(async () => {
  const a = repos.map(repo => execute('git', ['pull', '--rebase'], `${repo}`, {
    // resolve errors so Promise.all doesn't fail on first repo that cannot pull/rebase
    errors: 'resolve'
  }));
  const out = await Promise.all(a);

  // Report results
  for (let i = 0; i < a.length; i++) {
    const repo = repos[i];
    const o = out[i];
    if (o.code === 0 && o.stderr === '' && (o.stdout === 'Already up to date.\nCurrent branch main is up to date.\n' || o.stdout === 'Already up to date.\n' || o.stdout === 'Current branch main is up to date.\n')) {

      // nothing to do
    } else {
      console.log('##', repo);
      o.stdout.trim().length > 0 && console.log(o.stdout);
      o.stderr.trim().length > 0 && console.log(o.stderr);
      o.error && console.log(o.error);
    }
  }
})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJleGVjdXRlIiwicmVxdWlyZSIsImZzIiwiY29udGVudHMiLCJyZWFkRmlsZVN5bmMiLCJ0cmltIiwicmVwb3MiLCJzcGxpdCIsIm1hcCIsInNpbSIsImEiLCJyZXBvIiwiZXJyb3JzIiwib3V0IiwiUHJvbWlzZSIsImFsbCIsImkiLCJsZW5ndGgiLCJvIiwiY29kZSIsInN0ZGVyciIsInN0ZG91dCIsImNvbnNvbGUiLCJsb2ciLCJlcnJvciJdLCJzb3VyY2VzIjpbInB1bGwtYWxsLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDIxLCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbmNvbnN0IGV4ZWN1dGUgPSByZXF1aXJlKCAnLi4vY29tbW9uL2V4ZWN1dGUnICk7XHJcbmNvbnN0IGZzID0gcmVxdWlyZSggJ2ZzJyApO1xyXG5cclxuLy8gY29uc3RhbnRzXHJcbi8vIERvbid0IHVzZSBnZXRBY3RpdmVSZXBvcygpIHNpbmNlIGl0IGNhbm5vdCBiZSBydW4gZnJvbSB0aGUgcm9vdFxyXG5jb25zdCBjb250ZW50cyA9IGZzLnJlYWRGaWxlU3luYyggJ3BlcmVubmlhbC9kYXRhL2FjdGl2ZS1yZXBvcycsICd1dGY4JyApLnRyaW0oKTtcclxuY29uc3QgcmVwb3MgPSBjb250ZW50cy5zcGxpdCggJ1xcbicgKS5tYXAoIHNpbSA9PiBzaW0udHJpbSgpICk7XHJcblxyXG4vKipcclxuICogUHVsbHMgYWxsIHJlcG9zICh3aXRoIHJlYmFzZSlcclxuICpcclxuICogVVNBR0U6XHJcbiAqIGNkICR7cm9vdCBjb250YWluaW5nIGFsbCByZXBvc31cclxuICogbm9kZSBwZXJlbm5pYWwvanMvc2NyaXB0cy9wdWxsLWFsbC5qc1xyXG4gKlxyXG4gKiBAYXV0aG9yIFNhbSBSZWlkIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuKCBhc3luYyAoKSA9PiB7XHJcblxyXG4gIGNvbnN0IGEgPSByZXBvcy5tYXAoIHJlcG8gPT4gZXhlY3V0ZSggJ2dpdCcsIFsgJ3B1bGwnLCAnLS1yZWJhc2UnIF0sIGAke3JlcG99YCwge1xyXG5cclxuICAgIC8vIHJlc29sdmUgZXJyb3JzIHNvIFByb21pc2UuYWxsIGRvZXNuJ3QgZmFpbCBvbiBmaXJzdCByZXBvIHRoYXQgY2Fubm90IHB1bGwvcmViYXNlXHJcbiAgICBlcnJvcnM6ICdyZXNvbHZlJ1xyXG4gIH0gKSApO1xyXG4gIGNvbnN0IG91dCA9IGF3YWl0IFByb21pc2UuYWxsKCBhICk7XHJcblxyXG4gIC8vIFJlcG9ydCByZXN1bHRzXHJcbiAgZm9yICggbGV0IGkgPSAwOyBpIDwgYS5sZW5ndGg7IGkrKyApIHtcclxuICAgIGNvbnN0IHJlcG8gPSByZXBvc1sgaSBdO1xyXG4gICAgY29uc3QgbyA9IG91dFsgaSBdO1xyXG5cclxuICAgIGlmICggby5jb2RlID09PSAwICYmIG8uc3RkZXJyID09PSAnJyAmJiAoIG8uc3Rkb3V0ID09PSAnQWxyZWFkeSB1cCB0byBkYXRlLlxcbkN1cnJlbnQgYnJhbmNoIG1haW4gaXMgdXAgdG8gZGF0ZS5cXG4nIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnN0ZG91dCA9PT0gJ0FscmVhZHkgdXAgdG8gZGF0ZS5cXG4nIHx8XHJcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBvLnN0ZG91dCA9PT0gJ0N1cnJlbnQgYnJhbmNoIG1haW4gaXMgdXAgdG8gZGF0ZS5cXG4nICkgKSB7XHJcblxyXG4gICAgICAvLyBub3RoaW5nIHRvIGRvXHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgY29uc29sZS5sb2coICcjIycsIHJlcG8gKTtcclxuICAgICAgby5zdGRvdXQudHJpbSgpLmxlbmd0aCA+IDAgJiYgY29uc29sZS5sb2coIG8uc3Rkb3V0ICk7XHJcbiAgICAgIG8uc3RkZXJyLnRyaW0oKS5sZW5ndGggPiAwICYmIGNvbnNvbGUubG9nKCBvLnN0ZGVyciApO1xyXG4gICAgICBvLmVycm9yICYmIGNvbnNvbGUubG9nKCBvLmVycm9yICk7XHJcbiAgICB9XHJcbiAgfVxyXG59ICkoKTsiXSwibWFwcGluZ3MiOiJBQUFBOztBQUVBLE1BQU1BLE9BQU8sR0FBR0MsT0FBTyxDQUFFLG1CQUFvQixDQUFDO0FBQzlDLE1BQU1DLEVBQUUsR0FBR0QsT0FBTyxDQUFFLElBQUssQ0FBQzs7QUFFMUI7QUFDQTtBQUNBLE1BQU1FLFFBQVEsR0FBR0QsRUFBRSxDQUFDRSxZQUFZLENBQUUsNkJBQTZCLEVBQUUsTUFBTyxDQUFDLENBQUNDLElBQUksQ0FBQyxDQUFDO0FBQ2hGLE1BQU1DLEtBQUssR0FBR0gsUUFBUSxDQUFDSSxLQUFLLENBQUUsSUFBSyxDQUFDLENBQUNDLEdBQUcsQ0FBRUMsR0FBRyxJQUFJQSxHQUFHLENBQUNKLElBQUksQ0FBQyxDQUFFLENBQUM7O0FBRTdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUUsWUFBWTtFQUVaLE1BQU1LLENBQUMsR0FBR0osS0FBSyxDQUFDRSxHQUFHLENBQUVHLElBQUksSUFBSVgsT0FBTyxDQUFFLEtBQUssRUFBRSxDQUFFLE1BQU0sRUFBRSxVQUFVLENBQUUsRUFBRyxHQUFFVyxJQUFLLEVBQUMsRUFBRTtJQUU5RTtJQUNBQyxNQUFNLEVBQUU7RUFDVixDQUFFLENBQUUsQ0FBQztFQUNMLE1BQU1DLEdBQUcsR0FBRyxNQUFNQyxPQUFPLENBQUNDLEdBQUcsQ0FBRUwsQ0FBRSxDQUFDOztFQUVsQztFQUNBLEtBQU0sSUFBSU0sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTixDQUFDLENBQUNPLE1BQU0sRUFBRUQsQ0FBQyxFQUFFLEVBQUc7SUFDbkMsTUFBTUwsSUFBSSxHQUFHTCxLQUFLLENBQUVVLENBQUMsQ0FBRTtJQUN2QixNQUFNRSxDQUFDLEdBQUdMLEdBQUcsQ0FBRUcsQ0FBQyxDQUFFO0lBRWxCLElBQUtFLENBQUMsQ0FBQ0MsSUFBSSxLQUFLLENBQUMsSUFBSUQsQ0FBQyxDQUFDRSxNQUFNLEtBQUssRUFBRSxLQUFNRixDQUFDLENBQUNHLE1BQU0sS0FBSywyREFBMkQsSUFDeEVILENBQUMsQ0FBQ0csTUFBTSxLQUFLLHVCQUF1QixJQUNwQ0gsQ0FBQyxDQUFDRyxNQUFNLEtBQUssc0NBQXNDLENBQUUsRUFBRzs7TUFFaEc7SUFBQSxDQUNELE1BQ0k7TUFDSEMsT0FBTyxDQUFDQyxHQUFHLENBQUUsSUFBSSxFQUFFWixJQUFLLENBQUM7TUFDekJPLENBQUMsQ0FBQ0csTUFBTSxDQUFDaEIsSUFBSSxDQUFDLENBQUMsQ0FBQ1ksTUFBTSxHQUFHLENBQUMsSUFBSUssT0FBTyxDQUFDQyxHQUFHLENBQUVMLENBQUMsQ0FBQ0csTUFBTyxDQUFDO01BQ3JESCxDQUFDLENBQUNFLE1BQU0sQ0FBQ2YsSUFBSSxDQUFDLENBQUMsQ0FBQ1ksTUFBTSxHQUFHLENBQUMsSUFBSUssT0FBTyxDQUFDQyxHQUFHLENBQUVMLENBQUMsQ0FBQ0UsTUFBTyxDQUFDO01BQ3JERixDQUFDLENBQUNNLEtBQUssSUFBSUYsT0FBTyxDQUFDQyxHQUFHLENBQUVMLENBQUMsQ0FBQ00sS0FBTSxDQUFDO0lBQ25DO0VBQ0Y7QUFDRixDQUFDLEVBQUcsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==