// Copyright 2023-2024, University of Colorado Boulder

/**
 * Wait. Stop. Why do you want to remove the protection rules? Bad things often happen when you want to remove '
 * these. Do you want to delete a release branch? That is probably a bad idea. Maybe just merge main/ into your release '
 * branch. Paper trail about some of the unforeseen troubles can be found here: https://github.com/phetsims/perennial/issues/351
 * Also know that you can set a package flag, "ignoreForAutomatedMaintenanceReleases" to "ditch" a release branch forever.
 *
 * Remove branch protection rules for the provided repo so that main, and release CAN be modified.
 * It is faster to just remove branch protections from the github UI, but this is helpful for automation.
 * For example, you can use this if the automated maintenance release process needs to force push to
 * production branches.
 *
 * USAGE:
 * node perennial/js/scripts/clear-branch-protections-for-repo.js repository-name
 *
 * EXAMPLE:
 * node perennial/js/scripts/clear-branch-protections-for-repo.js john-travoltage
 *
 * @author Jesse Greenberg (PhET Interactive Simulations)
 */

const protectGithubBranches = require('../common/protectGithubBranches');
const args = process.argv.slice(2);
const repo = args[0];
if (!repo) {
  console.error('Repo name must be provided as first command line argument.');
} else {
  (async () => {
    await protectGithubBranches.clearBranchProtections([repo]);
  })();
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJwcm90ZWN0R2l0aHViQnJhbmNoZXMiLCJyZXF1aXJlIiwiYXJncyIsInByb2Nlc3MiLCJhcmd2Iiwic2xpY2UiLCJyZXBvIiwiY29uc29sZSIsImVycm9yIiwiY2xlYXJCcmFuY2hQcm90ZWN0aW9ucyJdLCJzb3VyY2VzIjpbImNsZWFyLWJyYW5jaC1wcm90ZWN0aW9ucy1mb3ItcmVwby5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAyMy0yMDI0LCBVbml2ZXJzaXR5IG9mIENvbG9yYWRvIEJvdWxkZXJcclxuXHJcbi8qKlxyXG4gKiBXYWl0LiBTdG9wLiBXaHkgZG8geW91IHdhbnQgdG8gcmVtb3ZlIHRoZSBwcm90ZWN0aW9uIHJ1bGVzPyBCYWQgdGhpbmdzIG9mdGVuIGhhcHBlbiB3aGVuIHlvdSB3YW50IHRvIHJlbW92ZSAnXHJcbiAqIHRoZXNlLiBEbyB5b3Ugd2FudCB0byBkZWxldGUgYSByZWxlYXNlIGJyYW5jaD8gVGhhdCBpcyBwcm9iYWJseSBhIGJhZCBpZGVhLiBNYXliZSBqdXN0IG1lcmdlIG1haW4vIGludG8geW91ciByZWxlYXNlICdcclxuICogYnJhbmNoLiBQYXBlciB0cmFpbCBhYm91dCBzb21lIG9mIHRoZSB1bmZvcmVzZWVuIHRyb3VibGVzIGNhbiBiZSBmb3VuZCBoZXJlOiBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGVyZW5uaWFsL2lzc3Vlcy8zNTFcclxuICogQWxzbyBrbm93IHRoYXQgeW91IGNhbiBzZXQgYSBwYWNrYWdlIGZsYWcsIFwiaWdub3JlRm9yQXV0b21hdGVkTWFpbnRlbmFuY2VSZWxlYXNlc1wiIHRvIFwiZGl0Y2hcIiBhIHJlbGVhc2UgYnJhbmNoIGZvcmV2ZXIuXHJcbiAqXHJcbiAqIFJlbW92ZSBicmFuY2ggcHJvdGVjdGlvbiBydWxlcyBmb3IgdGhlIHByb3ZpZGVkIHJlcG8gc28gdGhhdCBtYWluLCBhbmQgcmVsZWFzZSBDQU4gYmUgbW9kaWZpZWQuXHJcbiAqIEl0IGlzIGZhc3RlciB0byBqdXN0IHJlbW92ZSBicmFuY2ggcHJvdGVjdGlvbnMgZnJvbSB0aGUgZ2l0aHViIFVJLCBidXQgdGhpcyBpcyBoZWxwZnVsIGZvciBhdXRvbWF0aW9uLlxyXG4gKiBGb3IgZXhhbXBsZSwgeW91IGNhbiB1c2UgdGhpcyBpZiB0aGUgYXV0b21hdGVkIG1haW50ZW5hbmNlIHJlbGVhc2UgcHJvY2VzcyBuZWVkcyB0byBmb3JjZSBwdXNoIHRvXHJcbiAqIHByb2R1Y3Rpb24gYnJhbmNoZXMuXHJcbiAqXHJcbiAqIFVTQUdFOlxyXG4gKiBub2RlIHBlcmVubmlhbC9qcy9zY3JpcHRzL2NsZWFyLWJyYW5jaC1wcm90ZWN0aW9ucy1mb3ItcmVwby5qcyByZXBvc2l0b3J5LW5hbWVcclxuICpcclxuICogRVhBTVBMRTpcclxuICogbm9kZSBwZXJlbm5pYWwvanMvc2NyaXB0cy9jbGVhci1icmFuY2gtcHJvdGVjdGlvbnMtZm9yLXJlcG8uanMgam9obi10cmF2b2x0YWdlXHJcbiAqXHJcbiAqIEBhdXRob3IgSmVzc2UgR3JlZW5iZXJnIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG4gKi9cclxuXHJcbmNvbnN0IHByb3RlY3RHaXRodWJCcmFuY2hlcyA9IHJlcXVpcmUoICcuLi9jb21tb24vcHJvdGVjdEdpdGh1YkJyYW5jaGVzJyApO1xyXG5cclxuY29uc3QgYXJncyA9IHByb2Nlc3MuYXJndi5zbGljZSggMiApO1xyXG5jb25zdCByZXBvID0gYXJnc1sgMCBdO1xyXG5cclxuaWYgKCAhcmVwbyApIHtcclxuICBjb25zb2xlLmVycm9yKCAnUmVwbyBuYW1lIG11c3QgYmUgcHJvdmlkZWQgYXMgZmlyc3QgY29tbWFuZCBsaW5lIGFyZ3VtZW50LicgKTtcclxufVxyXG5lbHNlIHtcclxuICAoIGFzeW5jICgpID0+IHtcclxuICAgIGF3YWl0IHByb3RlY3RHaXRodWJCcmFuY2hlcy5jbGVhckJyYW5jaFByb3RlY3Rpb25zKCBbIHJlcG8gXSApO1xyXG4gIH0gKSgpO1xyXG59Il0sIm1hcHBpbmdzIjoiQUFBQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxNQUFNQSxxQkFBcUIsR0FBR0MsT0FBTyxDQUFFLGlDQUFrQyxDQUFDO0FBRTFFLE1BQU1DLElBQUksR0FBR0MsT0FBTyxDQUFDQyxJQUFJLENBQUNDLEtBQUssQ0FBRSxDQUFFLENBQUM7QUFDcEMsTUFBTUMsSUFBSSxHQUFHSixJQUFJLENBQUUsQ0FBQyxDQUFFO0FBRXRCLElBQUssQ0FBQ0ksSUFBSSxFQUFHO0VBQ1hDLE9BQU8sQ0FBQ0MsS0FBSyxDQUFFLDREQUE2RCxDQUFDO0FBQy9FLENBQUMsTUFDSTtFQUNILENBQUUsWUFBWTtJQUNaLE1BQU1SLHFCQUFxQixDQUFDUyxzQkFBc0IsQ0FBRSxDQUFFSCxJQUFJLENBQUcsQ0FBQztFQUNoRSxDQUFDLEVBQUcsQ0FBQztBQUNQIiwiaWdub3JlTGlzdCI6W119