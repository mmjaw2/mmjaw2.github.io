// Copyright 2017-2018, University of Colorado Boulder
// @author Matt Pennington (PhET Interactive Simulations)

const constants = require('./constants');
const devSsh = require('../common/devSsh');
const rsync = require('rsync');
const winston = require('../../../../../../perennial-alias/node_modules/winston');
const writeFile = require('../common/writeFile');
const fs = require('fs');
const user = constants.BUILD_SERVER_CONFIG.devUsername;
const host = constants.BUILD_SERVER_CONFIG.devDeployServer;

/**
 * Copy files to dev server, typically bayes.colorado.edu.
 *
 * @param {string} simDir
 * @param {string} simName
 * @param {string} version
 * @param {ChipperVersion} chipperVersion
 * @param {string[]} brands
 * @param {string} buildDir
 */
module.exports = async function devDeploy(simDir, simName, version, chipperVersion, brands, buildDir) {
  const simDirectory = constants.BUILD_SERVER_CONFIG.devDeployPath + simName;
  let versionDirectory = version;

  // Chipper 1.0 has -phetio in the version schema for PhET-iO branded sims
  if (brands.length === 1 && brands[0] === constants.PHET_IO_BRAND && chipperVersion.major === 0 && !version.match('-phetio')) {
    versionDirectory = version.split('-').join('-phetio');
  }
  const simVersionDirectory = `${simDirectory}/${versionDirectory}`;

  // mkdir first in case it doesn't exist already
  await devSsh(`mkdir -p ${simVersionDirectory}`);

  // copy the files
  let rsyncFilterFile = buildDir;
  if (chipperVersion.major === 2 && chipperVersion.minor === 0) {
    rsyncFilterFile += '/phet';
  }
  rsyncFilterFile += '/.rsync-filter';
  if (brands.includes(constants.PHET_BRAND)) {
    const rsyncFilterContents = '- *_CA*\n+ *_en*\n+ *_all*\n+ *_a11y*\n- *.html';
    await writeFile(rsyncFilterFile, rsyncFilterContents);
  }
  await new Promise((resolve, reject) => {
    new rsync().flags('razpFFO').set('no-perms').source(`${buildDir}/`).destination(`${user}@${host}:${simVersionDirectory}`).execute((err, code, cmd) => {
      if (err) {
        winston.debug(code);
        winston.debug(cmd);
        reject(err);
      } else {
        resolve();
      }
    });
  });
  if (brands.includes(constants.PHET_BRAND)) {
    fs.unlinkSync(rsyncFilterFile);
  }
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25zdGFudHMiLCJyZXF1aXJlIiwiZGV2U3NoIiwicnN5bmMiLCJ3aW5zdG9uIiwid3JpdGVGaWxlIiwiZnMiLCJ1c2VyIiwiQlVJTERfU0VSVkVSX0NPTkZJRyIsImRldlVzZXJuYW1lIiwiaG9zdCIsImRldkRlcGxveVNlcnZlciIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZXZEZXBsb3kiLCJzaW1EaXIiLCJzaW1OYW1lIiwidmVyc2lvbiIsImNoaXBwZXJWZXJzaW9uIiwiYnJhbmRzIiwiYnVpbGREaXIiLCJzaW1EaXJlY3RvcnkiLCJkZXZEZXBsb3lQYXRoIiwidmVyc2lvbkRpcmVjdG9yeSIsImxlbmd0aCIsIlBIRVRfSU9fQlJBTkQiLCJtYWpvciIsIm1hdGNoIiwic3BsaXQiLCJqb2luIiwic2ltVmVyc2lvbkRpcmVjdG9yeSIsInJzeW5jRmlsdGVyRmlsZSIsIm1pbm9yIiwiaW5jbHVkZXMiLCJQSEVUX0JSQU5EIiwicnN5bmNGaWx0ZXJDb250ZW50cyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZmxhZ3MiLCJzZXQiLCJzb3VyY2UiLCJkZXN0aW5hdGlvbiIsImV4ZWN1dGUiLCJlcnIiLCJjb2RlIiwiY21kIiwiZGVidWciLCJ1bmxpbmtTeW5jIl0sInNvdXJjZXMiOlsiZGV2RGVwbG95LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8vIENvcHlyaWdodCAyMDE3LTIwMTgsIFVuaXZlcnNpdHkgb2YgQ29sb3JhZG8gQm91bGRlclxyXG4vLyBAYXV0aG9yIE1hdHQgUGVubmluZ3RvbiAoUGhFVCBJbnRlcmFjdGl2ZSBTaW11bGF0aW9ucylcclxuXHJcblxyXG5jb25zdCBjb25zdGFudHMgPSByZXF1aXJlKCAnLi9jb25zdGFudHMnICk7XHJcbmNvbnN0IGRldlNzaCA9IHJlcXVpcmUoICcuLi9jb21tb24vZGV2U3NoJyApO1xyXG5jb25zdCByc3luYyA9IHJlcXVpcmUoICdyc3luYycgKTtcclxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoICd3aW5zdG9uJyApO1xyXG5jb25zdCB3cml0ZUZpbGUgPSByZXF1aXJlKCAnLi4vY29tbW9uL3dyaXRlRmlsZScgKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZnMnICk7XHJcblxyXG5jb25zdCB1c2VyID0gY29uc3RhbnRzLkJVSUxEX1NFUlZFUl9DT05GSUcuZGV2VXNlcm5hbWU7XHJcbmNvbnN0IGhvc3QgPSBjb25zdGFudHMuQlVJTERfU0VSVkVSX0NPTkZJRy5kZXZEZXBsb3lTZXJ2ZXI7XHJcblxyXG4vKipcclxuICogQ29weSBmaWxlcyB0byBkZXYgc2VydmVyLCB0eXBpY2FsbHkgYmF5ZXMuY29sb3JhZG8uZWR1LlxyXG4gKlxyXG4gKiBAcGFyYW0ge3N0cmluZ30gc2ltRGlyXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBzaW1OYW1lXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSB2ZXJzaW9uXHJcbiAqIEBwYXJhbSB7Q2hpcHBlclZlcnNpb259IGNoaXBwZXJWZXJzaW9uXHJcbiAqIEBwYXJhbSB7c3RyaW5nW119IGJyYW5kc1xyXG4gKiBAcGFyYW0ge3N0cmluZ30gYnVpbGREaXJcclxuICovXHJcbm1vZHVsZS5leHBvcnRzID0gYXN5bmMgZnVuY3Rpb24gZGV2RGVwbG95KCBzaW1EaXIsIHNpbU5hbWUsIHZlcnNpb24sIGNoaXBwZXJWZXJzaW9uLCBicmFuZHMsIGJ1aWxkRGlyICkge1xyXG4gIGNvbnN0IHNpbURpcmVjdG9yeSA9IGNvbnN0YW50cy5CVUlMRF9TRVJWRVJfQ09ORklHLmRldkRlcGxveVBhdGggKyBzaW1OYW1lO1xyXG4gIGxldCB2ZXJzaW9uRGlyZWN0b3J5ID0gdmVyc2lvbjtcclxuXHJcbiAgLy8gQ2hpcHBlciAxLjAgaGFzIC1waGV0aW8gaW4gdGhlIHZlcnNpb24gc2NoZW1hIGZvciBQaEVULWlPIGJyYW5kZWQgc2ltc1xyXG4gIGlmICggYnJhbmRzLmxlbmd0aCA9PT0gMSAmJiBicmFuZHNbIDAgXSA9PT0gY29uc3RhbnRzLlBIRVRfSU9fQlJBTkQgJiYgY2hpcHBlclZlcnNpb24ubWFqb3IgPT09IDAgJiYgIXZlcnNpb24ubWF0Y2goICctcGhldGlvJyApICkge1xyXG4gICAgdmVyc2lvbkRpcmVjdG9yeSA9IHZlcnNpb24uc3BsaXQoICctJyApLmpvaW4oICctcGhldGlvJyApO1xyXG4gIH1cclxuICBjb25zdCBzaW1WZXJzaW9uRGlyZWN0b3J5ID0gYCR7c2ltRGlyZWN0b3J5fS8ke3ZlcnNpb25EaXJlY3Rvcnl9YDtcclxuXHJcbiAgLy8gbWtkaXIgZmlyc3QgaW4gY2FzZSBpdCBkb2Vzbid0IGV4aXN0IGFscmVhZHlcclxuICBhd2FpdCBkZXZTc2goIGBta2RpciAtcCAke3NpbVZlcnNpb25EaXJlY3Rvcnl9YCApO1xyXG5cclxuICAvLyBjb3B5IHRoZSBmaWxlc1xyXG4gIGxldCByc3luY0ZpbHRlckZpbGUgPSBidWlsZERpcjtcclxuICBpZiAoIGNoaXBwZXJWZXJzaW9uLm1ham9yID09PSAyICYmIGNoaXBwZXJWZXJzaW9uLm1pbm9yID09PSAwICkge1xyXG4gICAgcnN5bmNGaWx0ZXJGaWxlICs9ICcvcGhldCc7XHJcbiAgfVxyXG4gIHJzeW5jRmlsdGVyRmlsZSArPSAnLy5yc3luYy1maWx0ZXInO1xyXG5cclxuICBpZiAoIGJyYW5kcy5pbmNsdWRlcyggY29uc3RhbnRzLlBIRVRfQlJBTkQgKSApIHtcclxuICAgIGNvbnN0IHJzeW5jRmlsdGVyQ29udGVudHMgPSAnLSAqX0NBKlxcbisgKl9lbipcXG4rICpfYWxsKlxcbisgKl9hMTF5Klxcbi0gKi5odG1sJztcclxuICAgIGF3YWl0IHdyaXRlRmlsZSggcnN5bmNGaWx0ZXJGaWxlLCByc3luY0ZpbHRlckNvbnRlbnRzICk7XHJcbiAgfVxyXG5cclxuICBhd2FpdCBuZXcgUHJvbWlzZSggKCByZXNvbHZlLCByZWplY3QgKSA9PiB7XHJcbiAgICBuZXcgcnN5bmMoKVxyXG4gICAgICAuZmxhZ3MoICdyYXpwRkZPJyApXHJcbiAgICAgIC5zZXQoICduby1wZXJtcycgKVxyXG4gICAgICAuc291cmNlKCBgJHtidWlsZERpcn0vYCApXHJcbiAgICAgIC5kZXN0aW5hdGlvbiggYCR7dXNlcn1AJHtob3N0fToke3NpbVZlcnNpb25EaXJlY3Rvcnl9YCApXHJcbiAgICAgIC5leGVjdXRlKCAoIGVyciwgY29kZSwgY21kICkgPT4ge1xyXG4gICAgICAgIGlmICggZXJyICkge1xyXG4gICAgICAgICAgd2luc3Rvbi5kZWJ1ZyggY29kZSApO1xyXG4gICAgICAgICAgd2luc3Rvbi5kZWJ1ZyggY21kICk7XHJcbiAgICAgICAgICByZWplY3QoIGVyciApO1xyXG4gICAgICAgIH1cclxuICAgICAgICBlbHNlIHsgcmVzb2x2ZSgpOyB9XHJcbiAgICAgIH0gKTtcclxuICB9ICk7XHJcblxyXG4gIGlmICggYnJhbmRzLmluY2x1ZGVzKCBjb25zdGFudHMuUEhFVF9CUkFORCApICkge1xyXG4gICAgZnMudW5saW5rU3luYyggcnN5bmNGaWx0ZXJGaWxlICk7XHJcbiAgfVxyXG59OyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFHQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBRSxhQUFjLENBQUM7QUFDMUMsTUFBTUMsTUFBTSxHQUFHRCxPQUFPLENBQUUsa0JBQW1CLENBQUM7QUFDNUMsTUFBTUUsS0FBSyxHQUFHRixPQUFPLENBQUUsT0FBUSxDQUFDO0FBQ2hDLE1BQU1HLE9BQU8sR0FBR0gsT0FBTyxDQUFFLFNBQVUsQ0FBQztBQUNwQyxNQUFNSSxTQUFTLEdBQUdKLE9BQU8sQ0FBRSxxQkFBc0IsQ0FBQztBQUNsRCxNQUFNSyxFQUFFLEdBQUdMLE9BQU8sQ0FBRSxJQUFLLENBQUM7QUFFMUIsTUFBTU0sSUFBSSxHQUFHUCxTQUFTLENBQUNRLG1CQUFtQixDQUFDQyxXQUFXO0FBQ3RELE1BQU1DLElBQUksR0FBR1YsU0FBUyxDQUFDUSxtQkFBbUIsQ0FBQ0csZUFBZTs7QUFFMUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUcsZUFBZUMsU0FBU0EsQ0FBRUMsTUFBTSxFQUFFQyxPQUFPLEVBQUVDLE9BQU8sRUFBRUMsY0FBYyxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRztFQUN0RyxNQUFNQyxZQUFZLEdBQUdyQixTQUFTLENBQUNRLG1CQUFtQixDQUFDYyxhQUFhLEdBQUdOLE9BQU87RUFDMUUsSUFBSU8sZ0JBQWdCLEdBQUdOLE9BQU87O0VBRTlCO0VBQ0EsSUFBS0UsTUFBTSxDQUFDSyxNQUFNLEtBQUssQ0FBQyxJQUFJTCxNQUFNLENBQUUsQ0FBQyxDQUFFLEtBQUtuQixTQUFTLENBQUN5QixhQUFhLElBQUlQLGNBQWMsQ0FBQ1EsS0FBSyxLQUFLLENBQUMsSUFBSSxDQUFDVCxPQUFPLENBQUNVLEtBQUssQ0FBRSxTQUFVLENBQUMsRUFBRztJQUNqSUosZ0JBQWdCLEdBQUdOLE9BQU8sQ0FBQ1csS0FBSyxDQUFFLEdBQUksQ0FBQyxDQUFDQyxJQUFJLENBQUUsU0FBVSxDQUFDO0VBQzNEO0VBQ0EsTUFBTUMsbUJBQW1CLEdBQUksR0FBRVQsWUFBYSxJQUFHRSxnQkFBaUIsRUFBQzs7RUFFakU7RUFDQSxNQUFNckIsTUFBTSxDQUFHLFlBQVc0QixtQkFBb0IsRUFBRSxDQUFDOztFQUVqRDtFQUNBLElBQUlDLGVBQWUsR0FBR1gsUUFBUTtFQUM5QixJQUFLRixjQUFjLENBQUNRLEtBQUssS0FBSyxDQUFDLElBQUlSLGNBQWMsQ0FBQ2MsS0FBSyxLQUFLLENBQUMsRUFBRztJQUM5REQsZUFBZSxJQUFJLE9BQU87RUFDNUI7RUFDQUEsZUFBZSxJQUFJLGdCQUFnQjtFQUVuQyxJQUFLWixNQUFNLENBQUNjLFFBQVEsQ0FBRWpDLFNBQVMsQ0FBQ2tDLFVBQVcsQ0FBQyxFQUFHO0lBQzdDLE1BQU1DLG1CQUFtQixHQUFHLGlEQUFpRDtJQUM3RSxNQUFNOUIsU0FBUyxDQUFFMEIsZUFBZSxFQUFFSSxtQkFBb0IsQ0FBQztFQUN6RDtFQUVBLE1BQU0sSUFBSUMsT0FBTyxDQUFFLENBQUVDLE9BQU8sRUFBRUMsTUFBTSxLQUFNO0lBQ3hDLElBQUluQyxLQUFLLENBQUMsQ0FBQyxDQUNSb0MsS0FBSyxDQUFFLFNBQVUsQ0FBQyxDQUNsQkMsR0FBRyxDQUFFLFVBQVcsQ0FBQyxDQUNqQkMsTUFBTSxDQUFHLEdBQUVyQixRQUFTLEdBQUcsQ0FBQyxDQUN4QnNCLFdBQVcsQ0FBRyxHQUFFbkMsSUFBSyxJQUFHRyxJQUFLLElBQUdvQixtQkFBb0IsRUFBRSxDQUFDLENBQ3ZEYSxPQUFPLENBQUUsQ0FBRUMsR0FBRyxFQUFFQyxJQUFJLEVBQUVDLEdBQUcsS0FBTTtNQUM5QixJQUFLRixHQUFHLEVBQUc7UUFDVHhDLE9BQU8sQ0FBQzJDLEtBQUssQ0FBRUYsSUFBSyxDQUFDO1FBQ3JCekMsT0FBTyxDQUFDMkMsS0FBSyxDQUFFRCxHQUFJLENBQUM7UUFDcEJSLE1BQU0sQ0FBRU0sR0FBSSxDQUFDO01BQ2YsQ0FBQyxNQUNJO1FBQUVQLE9BQU8sQ0FBQyxDQUFDO01BQUU7SUFDcEIsQ0FBRSxDQUFDO0VBQ1AsQ0FBRSxDQUFDO0VBRUgsSUFBS2xCLE1BQU0sQ0FBQ2MsUUFBUSxDQUFFakMsU0FBUyxDQUFDa0MsVUFBVyxDQUFDLEVBQUc7SUFDN0M1QixFQUFFLENBQUMwQyxVQUFVLENBQUVqQixlQUFnQixDQUFDO0VBQ2xDO0FBQ0YsQ0FBQyIsImlnbm9yZUxpc3QiOltdfQ==