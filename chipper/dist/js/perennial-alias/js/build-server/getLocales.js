// Copyright 2017, University of Colorado Boulder
// @author Matt Pennington (PhET Interactive Simulations)

const constants = require('./constants');
const fs = require('graceful-fs'); // eslint-disable-line require-statement-match
const getSortedVersionDirectories = require('./getSortedVersionDirectories');
const parseString = require('xml2js').parseString; // eslint-disable-line no-property-in-require-statement
const winston = require('../../../../../../perennial-alias/node_modules/winston');
async function getJsonFromXML(xmlString) {
  return new Promise((resolve, reject) => {
    parseString(xmlString, (error, json) => {
      if (error) {
        reject(error);
      } else {
        resolve(json);
      }
    });
  });
}

/**
 * Get all of the deployed locales for the latest deployed version of the specified simulation.  This is generally done
 * before publishing a new version so that we can know which locales to rebuild.
 * @param {String} locales - comma separated list of locale codes
 * @param {String} simName - name of the sim, should match GitHub repo name, e.g. "energy-skate-park-basics"
 */
async function getLocales(locales, simName) {
  let callbackLocales;
  if (locales && locales !== '*') {
    // from rosetta
    callbackLocales = locales;
  } else {
    // from grunt deploy-production
    const simDirectory = constants.HTML_SIMS_DIRECTORY + simName;
    const versionDirectories = await getSortedVersionDirectories(simDirectory);
    if (versionDirectories.length > 0) {
      const latest = versionDirectories[versionDirectories.length - 1];
      const translationsXMLFile = `${constants.HTML_SIMS_DIRECTORY + simName}/${latest}/${simName}.xml`;
      winston.log('info', `path to translations XML file = ${translationsXMLFile}`);
      const xmlString = fs.readFileSync(translationsXMLFile);
      let json;
      try {
        json = await getJsonFromXML(xmlString);
      } catch (err) {
        // TODO https://github.com/phetsims/perennial/issues/167 should we call reject here? what happens when callbackLocales is undefined?
        winston.log('error', `error parsing XML, err = ${err}`);
      }
      winston.log('info', 'data extracted from translations XML file:');
      winston.log('info', JSON.stringify(json, null, 2));
      const simsArray = json.project.simulations[0].simulation;
      const localesArray = [];
      for (let i = 0; i < simsArray.length; i++) {
        localesArray.push(simsArray[i].$.locale);
      }
      callbackLocales = localesArray.join(',');
    } else {
      // first deploy, sim directory will not exist yet, just publish the english version
      callbackLocales = 'en';
    }
  }
  winston.log('info', `building locales=${callbackLocales}`);
  return callbackLocales;
}
module.exports = getLocales;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJjb25zdGFudHMiLCJyZXF1aXJlIiwiZnMiLCJnZXRTb3J0ZWRWZXJzaW9uRGlyZWN0b3JpZXMiLCJwYXJzZVN0cmluZyIsIndpbnN0b24iLCJnZXRKc29uRnJvbVhNTCIsInhtbFN0cmluZyIsIlByb21pc2UiLCJyZXNvbHZlIiwicmVqZWN0IiwiZXJyb3IiLCJqc29uIiwiZ2V0TG9jYWxlcyIsImxvY2FsZXMiLCJzaW1OYW1lIiwiY2FsbGJhY2tMb2NhbGVzIiwic2ltRGlyZWN0b3J5IiwiSFRNTF9TSU1TX0RJUkVDVE9SWSIsInZlcnNpb25EaXJlY3RvcmllcyIsImxlbmd0aCIsImxhdGVzdCIsInRyYW5zbGF0aW9uc1hNTEZpbGUiLCJsb2ciLCJyZWFkRmlsZVN5bmMiLCJlcnIiLCJKU09OIiwic3RyaW5naWZ5Iiwic2ltc0FycmF5IiwicHJvamVjdCIsInNpbXVsYXRpb25zIiwic2ltdWxhdGlvbiIsImxvY2FsZXNBcnJheSIsImkiLCJwdXNoIiwiJCIsImxvY2FsZSIsImpvaW4iLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiZ2V0TG9jYWxlcy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvLyBDb3B5cmlnaHQgMjAxNywgVW5pdmVyc2l0eSBvZiBDb2xvcmFkbyBCb3VsZGVyXHJcbi8vIEBhdXRob3IgTWF0dCBQZW5uaW5ndG9uIChQaEVUIEludGVyYWN0aXZlIFNpbXVsYXRpb25zKVxyXG5cclxuXHJcbmNvbnN0IGNvbnN0YW50cyA9IHJlcXVpcmUoICcuL2NvbnN0YW50cycgKTtcclxuY29uc3QgZnMgPSByZXF1aXJlKCAnZ3JhY2VmdWwtZnMnICk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgcmVxdWlyZS1zdGF0ZW1lbnQtbWF0Y2hcclxuY29uc3QgZ2V0U29ydGVkVmVyc2lvbkRpcmVjdG9yaWVzID0gcmVxdWlyZSggJy4vZ2V0U29ydGVkVmVyc2lvbkRpcmVjdG9yaWVzJyApO1xyXG5jb25zdCBwYXJzZVN0cmluZyA9IHJlcXVpcmUoICd4bWwyanMnICkucGFyc2VTdHJpbmc7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tcHJvcGVydHktaW4tcmVxdWlyZS1zdGF0ZW1lbnRcclxuY29uc3Qgd2luc3RvbiA9IHJlcXVpcmUoICd3aW5zdG9uJyApO1xyXG5cclxuYXN5bmMgZnVuY3Rpb24gZ2V0SnNvbkZyb21YTUwoIHhtbFN0cmluZyApIHtcclxuICByZXR1cm4gbmV3IFByb21pc2UoICggcmVzb2x2ZSwgcmVqZWN0ICkgPT4ge1xyXG4gICAgcGFyc2VTdHJpbmcoIHhtbFN0cmluZywgKCBlcnJvciwganNvbiApID0+IHtcclxuICAgICAgaWYgKCBlcnJvciApIHtcclxuICAgICAgICByZWplY3QoIGVycm9yICk7XHJcbiAgICAgIH1cclxuICAgICAgZWxzZSB7XHJcbiAgICAgICAgcmVzb2x2ZSgganNvbiApO1xyXG4gICAgICB9XHJcbiAgICB9ICk7XHJcbiAgfSApO1xyXG59XHJcblxyXG4vKipcclxuICogR2V0IGFsbCBvZiB0aGUgZGVwbG95ZWQgbG9jYWxlcyBmb3IgdGhlIGxhdGVzdCBkZXBsb3llZCB2ZXJzaW9uIG9mIHRoZSBzcGVjaWZpZWQgc2ltdWxhdGlvbi4gIFRoaXMgaXMgZ2VuZXJhbGx5IGRvbmVcclxuICogYmVmb3JlIHB1Ymxpc2hpbmcgYSBuZXcgdmVyc2lvbiBzbyB0aGF0IHdlIGNhbiBrbm93IHdoaWNoIGxvY2FsZXMgdG8gcmVidWlsZC5cclxuICogQHBhcmFtIHtTdHJpbmd9IGxvY2FsZXMgLSBjb21tYSBzZXBhcmF0ZWQgbGlzdCBvZiBsb2NhbGUgY29kZXNcclxuICogQHBhcmFtIHtTdHJpbmd9IHNpbU5hbWUgLSBuYW1lIG9mIHRoZSBzaW0sIHNob3VsZCBtYXRjaCBHaXRIdWIgcmVwbyBuYW1lLCBlLmcuIFwiZW5lcmd5LXNrYXRlLXBhcmstYmFzaWNzXCJcclxuICovXHJcbmFzeW5jIGZ1bmN0aW9uIGdldExvY2FsZXMoIGxvY2FsZXMsIHNpbU5hbWUgKSB7XHJcbiAgbGV0IGNhbGxiYWNrTG9jYWxlcztcclxuXHJcbiAgaWYgKCBsb2NhbGVzICYmIGxvY2FsZXMgIT09ICcqJyApIHtcclxuXHJcbiAgICAvLyBmcm9tIHJvc2V0dGFcclxuICAgIGNhbGxiYWNrTG9jYWxlcyA9IGxvY2FsZXM7XHJcbiAgfVxyXG4gIGVsc2Uge1xyXG5cclxuICAgIC8vIGZyb20gZ3J1bnQgZGVwbG95LXByb2R1Y3Rpb25cclxuICAgIGNvbnN0IHNpbURpcmVjdG9yeSA9IGNvbnN0YW50cy5IVE1MX1NJTVNfRElSRUNUT1JZICsgc2ltTmFtZTtcclxuICAgIGNvbnN0IHZlcnNpb25EaXJlY3RvcmllcyA9IGF3YWl0IGdldFNvcnRlZFZlcnNpb25EaXJlY3Rvcmllcyggc2ltRGlyZWN0b3J5ICk7XHJcbiAgICBpZiAoIHZlcnNpb25EaXJlY3Rvcmllcy5sZW5ndGggPiAwICkge1xyXG4gICAgICBjb25zdCBsYXRlc3QgPSB2ZXJzaW9uRGlyZWN0b3JpZXNbIHZlcnNpb25EaXJlY3Rvcmllcy5sZW5ndGggLSAxIF07XHJcbiAgICAgIGNvbnN0IHRyYW5zbGF0aW9uc1hNTEZpbGUgPSBgJHtjb25zdGFudHMuSFRNTF9TSU1TX0RJUkVDVE9SWSArIHNpbU5hbWV9LyR7bGF0ZXN0fS8ke3NpbU5hbWV9LnhtbGA7XHJcbiAgICAgIHdpbnN0b24ubG9nKCAnaW5mbycsIGBwYXRoIHRvIHRyYW5zbGF0aW9ucyBYTUwgZmlsZSA9ICR7dHJhbnNsYXRpb25zWE1MRmlsZX1gICk7XHJcbiAgICAgIGNvbnN0IHhtbFN0cmluZyA9IGZzLnJlYWRGaWxlU3luYyggdHJhbnNsYXRpb25zWE1MRmlsZSApO1xyXG4gICAgICBsZXQganNvbjtcclxuICAgICAgdHJ5IHtcclxuICAgICAgICBqc29uID0gYXdhaXQgZ2V0SnNvbkZyb21YTUwoIHhtbFN0cmluZyApO1xyXG4gICAgICB9XHJcbiAgICAgIGNhdGNoKCBlcnIgKSB7XHJcbiAgICAgICAgLy8gVE9ETyBodHRwczovL2dpdGh1Yi5jb20vcGhldHNpbXMvcGVyZW5uaWFsL2lzc3Vlcy8xNjcgc2hvdWxkIHdlIGNhbGwgcmVqZWN0IGhlcmU/IHdoYXQgaGFwcGVucyB3aGVuIGNhbGxiYWNrTG9jYWxlcyBpcyB1bmRlZmluZWQ/XHJcbiAgICAgICAgd2luc3Rvbi5sb2coICdlcnJvcicsIGBlcnJvciBwYXJzaW5nIFhNTCwgZXJyID0gJHtlcnJ9YCApO1xyXG4gICAgICB9XHJcbiAgICAgIHdpbnN0b24ubG9nKCAnaW5mbycsICdkYXRhIGV4dHJhY3RlZCBmcm9tIHRyYW5zbGF0aW9ucyBYTUwgZmlsZTonICk7XHJcbiAgICAgIHdpbnN0b24ubG9nKCAnaW5mbycsIEpTT04uc3RyaW5naWZ5KCBqc29uLCBudWxsLCAyICkgKTtcclxuICAgICAgY29uc3Qgc2ltc0FycmF5ID0ganNvbi5wcm9qZWN0LnNpbXVsYXRpb25zWyAwIF0uc2ltdWxhdGlvbjtcclxuICAgICAgY29uc3QgbG9jYWxlc0FycmF5ID0gW107XHJcbiAgICAgIGZvciAoIGxldCBpID0gMDsgaSA8IHNpbXNBcnJheS5sZW5ndGg7IGkrKyApIHtcclxuICAgICAgICBsb2NhbGVzQXJyYXkucHVzaCggc2ltc0FycmF5WyBpIF0uJC5sb2NhbGUgKTtcclxuICAgICAgfVxyXG4gICAgICBjYWxsYmFja0xvY2FsZXMgPSBsb2NhbGVzQXJyYXkuam9pbiggJywnICk7XHJcbiAgICB9XHJcbiAgICBlbHNlIHtcclxuICAgICAgLy8gZmlyc3QgZGVwbG95LCBzaW0gZGlyZWN0b3J5IHdpbGwgbm90IGV4aXN0IHlldCwganVzdCBwdWJsaXNoIHRoZSBlbmdsaXNoIHZlcnNpb25cclxuICAgICAgY2FsbGJhY2tMb2NhbGVzID0gJ2VuJztcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHdpbnN0b24ubG9nKCAnaW5mbycsIGBidWlsZGluZyBsb2NhbGVzPSR7Y2FsbGJhY2tMb2NhbGVzfWAgKTtcclxuXHJcbiAgcmV0dXJuIGNhbGxiYWNrTG9jYWxlcztcclxufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnZXRMb2NhbGVzOyJdLCJtYXBwaW5ncyI6IkFBQUE7QUFDQTs7QUFHQSxNQUFNQSxTQUFTLEdBQUdDLE9BQU8sQ0FBRSxhQUFjLENBQUM7QUFDMUMsTUFBTUMsRUFBRSxHQUFHRCxPQUFPLENBQUUsYUFBYyxDQUFDLENBQUMsQ0FBQztBQUNyQyxNQUFNRSwyQkFBMkIsR0FBR0YsT0FBTyxDQUFFLCtCQUFnQyxDQUFDO0FBQzlFLE1BQU1HLFdBQVcsR0FBR0gsT0FBTyxDQUFFLFFBQVMsQ0FBQyxDQUFDRyxXQUFXLENBQUMsQ0FBQztBQUNyRCxNQUFNQyxPQUFPLEdBQUdKLE9BQU8sQ0FBRSxTQUFVLENBQUM7QUFFcEMsZUFBZUssY0FBY0EsQ0FBRUMsU0FBUyxFQUFHO0VBQ3pDLE9BQU8sSUFBSUMsT0FBTyxDQUFFLENBQUVDLE9BQU8sRUFBRUMsTUFBTSxLQUFNO0lBQ3pDTixXQUFXLENBQUVHLFNBQVMsRUFBRSxDQUFFSSxLQUFLLEVBQUVDLElBQUksS0FBTTtNQUN6QyxJQUFLRCxLQUFLLEVBQUc7UUFDWEQsTUFBTSxDQUFFQyxLQUFNLENBQUM7TUFDakIsQ0FBQyxNQUNJO1FBQ0hGLE9BQU8sQ0FBRUcsSUFBSyxDQUFDO01BQ2pCO0lBQ0YsQ0FBRSxDQUFDO0VBQ0wsQ0FBRSxDQUFDO0FBQ0w7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsZUFBZUMsVUFBVUEsQ0FBRUMsT0FBTyxFQUFFQyxPQUFPLEVBQUc7RUFDNUMsSUFBSUMsZUFBZTtFQUVuQixJQUFLRixPQUFPLElBQUlBLE9BQU8sS0FBSyxHQUFHLEVBQUc7SUFFaEM7SUFDQUUsZUFBZSxHQUFHRixPQUFPO0VBQzNCLENBQUMsTUFDSTtJQUVIO0lBQ0EsTUFBTUcsWUFBWSxHQUFHakIsU0FBUyxDQUFDa0IsbUJBQW1CLEdBQUdILE9BQU87SUFDNUQsTUFBTUksa0JBQWtCLEdBQUcsTUFBTWhCLDJCQUEyQixDQUFFYyxZQUFhLENBQUM7SUFDNUUsSUFBS0Usa0JBQWtCLENBQUNDLE1BQU0sR0FBRyxDQUFDLEVBQUc7TUFDbkMsTUFBTUMsTUFBTSxHQUFHRixrQkFBa0IsQ0FBRUEsa0JBQWtCLENBQUNDLE1BQU0sR0FBRyxDQUFDLENBQUU7TUFDbEUsTUFBTUUsbUJBQW1CLEdBQUksR0FBRXRCLFNBQVMsQ0FBQ2tCLG1CQUFtQixHQUFHSCxPQUFRLElBQUdNLE1BQU8sSUFBR04sT0FBUSxNQUFLO01BQ2pHVixPQUFPLENBQUNrQixHQUFHLENBQUUsTUFBTSxFQUFHLG1DQUFrQ0QsbUJBQW9CLEVBQUUsQ0FBQztNQUMvRSxNQUFNZixTQUFTLEdBQUdMLEVBQUUsQ0FBQ3NCLFlBQVksQ0FBRUYsbUJBQW9CLENBQUM7TUFDeEQsSUFBSVYsSUFBSTtNQUNSLElBQUk7UUFDRkEsSUFBSSxHQUFHLE1BQU1OLGNBQWMsQ0FBRUMsU0FBVSxDQUFDO01BQzFDLENBQUMsQ0FDRCxPQUFPa0IsR0FBRyxFQUFHO1FBQ1g7UUFDQXBCLE9BQU8sQ0FBQ2tCLEdBQUcsQ0FBRSxPQUFPLEVBQUcsNEJBQTJCRSxHQUFJLEVBQUUsQ0FBQztNQUMzRDtNQUNBcEIsT0FBTyxDQUFDa0IsR0FBRyxDQUFFLE1BQU0sRUFBRSw0Q0FBNkMsQ0FBQztNQUNuRWxCLE9BQU8sQ0FBQ2tCLEdBQUcsQ0FBRSxNQUFNLEVBQUVHLElBQUksQ0FBQ0MsU0FBUyxDQUFFZixJQUFJLEVBQUUsSUFBSSxFQUFFLENBQUUsQ0FBRSxDQUFDO01BQ3RELE1BQU1nQixTQUFTLEdBQUdoQixJQUFJLENBQUNpQixPQUFPLENBQUNDLFdBQVcsQ0FBRSxDQUFDLENBQUUsQ0FBQ0MsVUFBVTtNQUMxRCxNQUFNQyxZQUFZLEdBQUcsRUFBRTtNQUN2QixLQUFNLElBQUlDLENBQUMsR0FBRyxDQUFDLEVBQUVBLENBQUMsR0FBR0wsU0FBUyxDQUFDUixNQUFNLEVBQUVhLENBQUMsRUFBRSxFQUFHO1FBQzNDRCxZQUFZLENBQUNFLElBQUksQ0FBRU4sU0FBUyxDQUFFSyxDQUFDLENBQUUsQ0FBQ0UsQ0FBQyxDQUFDQyxNQUFPLENBQUM7TUFDOUM7TUFDQXBCLGVBQWUsR0FBR2dCLFlBQVksQ0FBQ0ssSUFBSSxDQUFFLEdBQUksQ0FBQztJQUM1QyxDQUFDLE1BQ0k7TUFDSDtNQUNBckIsZUFBZSxHQUFHLElBQUk7SUFDeEI7RUFDRjtFQUVBWCxPQUFPLENBQUNrQixHQUFHLENBQUUsTUFBTSxFQUFHLG9CQUFtQlAsZUFBZ0IsRUFBRSxDQUFDO0VBRTVELE9BQU9BLGVBQWU7QUFDeEI7QUFFQXNCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHMUIsVUFBVSIsImlnbm9yZUxpc3QiOltdfQ==